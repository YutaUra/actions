//#region rolldown:runtime
var __create$1 = Object.create;
var __defProp$8 = Object.defineProperty;
var __getOwnPropDesc$8 = Object.getOwnPropertyDescriptor;
var __getOwnPropNames$8 = Object.getOwnPropertyNames;
var __getProtoOf$1 = Object.getPrototypeOf;
var __hasOwnProp$8 = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function() {
	return mod || (0, cb[__getOwnPropNames$8(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export$8 = (target, all$1) => {
	for (var name in all$1) __defProp$8(target, name, {
		get: all$1[name],
		enumerable: true
	});
};
var __copyProps$8 = (to, from, except, desc) => {
	if (from && typeof from === "object" || typeof from === "function") for (var keys = __getOwnPropNames$8(from), i$2 = 0, n = keys.length, key; i$2 < n; i$2++) {
		key = keys[i$2];
		if (!__hasOwnProp$8.call(to, key) && key !== except) __defProp$8(to, key, {
			get: ((k) => from[k]).bind(null, key),
			enumerable: !(desc = __getOwnPropDesc$8(from, key)) || desc.enumerable
		});
	}
	return to;
};
var __toESM$1 = (mod, isNodeMode, target) => (target = mod != null ? __create$1(__getProtoOf$1(mod)) : {}, __copyProps$8(isNodeMode || !mod || !mod.__esModule ? __defProp$8(target, "default", {
	value: mod,
	enumerable: true
}) : target, mod));

//#endregion
const { default: minpath, join, join: join$1, join: join$2, resolve } = __toESM$1(require("node:path"));
const { promisify } = __toESM$1(require("node:util"));
const { exec: exec$1 } = __toESM$1(require("node:child_process"));
const { readFile, readFile: readFile$1 } = __toESM$1(require("node:fs/promises"));
const { default: minproc } = __toESM$1(require("node:process"));
const { fileURLToPath: urlToPath } = __toESM$1(require("node:url"));

//#region ../node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/utils.js
var require_utils$8 = __commonJS({ "../node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/utils.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.toCommandProperties = exports.toCommandValue = void 0;
	/**
	* Sanitizes an input into a string so it can be passed into issueCommand safely
	* @param input input to sanitize into a string
	*/
	function toCommandValue(input) {
		if (input === null || input === undefined) return "";
else if (typeof input === "string" || input instanceof String) return input;
		return JSON.stringify(input);
	}
	exports.toCommandValue = toCommandValue;
	/**
	*
	* @param annotationProperties
	* @returns The command properties to send with the actual annotation command
	* See IssueCommandProperties: https://github.com/actions/runner/blob/main/src/Runner.Worker/ActionCommandManager.cs#L646
	*/
	function toCommandProperties(annotationProperties) {
		if (!Object.keys(annotationProperties).length) return {};
		return {
			title: annotationProperties.title,
			file: annotationProperties.file,
			line: annotationProperties.startLine,
			endLine: annotationProperties.endLine,
			col: annotationProperties.startColumn,
			endColumn: annotationProperties.endColumn
		};
	}
	exports.toCommandProperties = toCommandProperties;
} });

//#endregion
//#region ../node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/command.js
var require_command = __commonJS({ "../node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/command.js"(exports) {
	var __createBinding$12 = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
		if (k2 === undefined) k2 = k;
		var desc = Object.getOwnPropertyDescriptor(m, k);
		if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
			enumerable: true,
			get: function() {
				return m[k];
			}
		};
		Object.defineProperty(o, k2, desc);
	} : function(o, m, k, k2) {
		if (k2 === undefined) k2 = k;
		o[k2] = m[k];
	});
	var __setModuleDefault$12 = this && this.__setModuleDefault || (Object.create ? function(o, v) {
		Object.defineProperty(o, "default", {
			enumerable: true,
			value: v
		});
	} : function(o, v) {
		o["default"] = v;
	});
	var __importStar$12 = this && this.__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$12(result, mod, k);
		}
		__setModuleDefault$12(result, mod);
		return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.issue = exports.issueCommand = void 0;
	const os$7 = __importStar$12(require("os"));
	const utils_1$4 = require_utils$8();
	/**
	* Commands
	*
	* Command Format:
	*   ::name key=value,key=value::message
	*
	* Examples:
	*   ::warning::This is the message
	*   ::set-env name=MY_VAR::some value
	*/
	function issueCommand(command, properties, message) {
		const cmd = new Command(command, properties, message);
		process.stdout.write(cmd.toString() + os$7.EOL);
	}
	exports.issueCommand = issueCommand;
	function issue(name, message = "") {
		issueCommand(name, {}, message);
	}
	exports.issue = issue;
	const CMD_STRING = "::";
	var Command = class {
		constructor(command, properties, message) {
			if (!command) command = "missing.command";
			this.command = command;
			this.properties = properties;
			this.message = message;
		}
		toString() {
			let cmdStr = CMD_STRING + this.command;
			if (this.properties && Object.keys(this.properties).length > 0) {
				cmdStr += " ";
				let first = true;
				for (const key in this.properties) if (this.properties.hasOwnProperty(key)) {
					const val = this.properties[key];
					if (val) {
						if (first) first = false;
else cmdStr += ",";
						cmdStr += `${key}=${escapeProperty(val)}`;
					}
				}
			}
			cmdStr += `${CMD_STRING}${escapeData(this.message)}`;
			return cmdStr;
		}
	};
	function escapeData(s) {
		return (0, utils_1$4.toCommandValue)(s).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A");
	}
	function escapeProperty(s) {
		return (0, utils_1$4.toCommandValue)(s).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A").replace(/:/g, "%3A").replace(/,/g, "%2C");
	}
} });

//#endregion
//#region ../node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/file-command.js
var require_file_command = __commonJS({ "../node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/file-command.js"(exports) {
	var __createBinding$11 = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
		if (k2 === undefined) k2 = k;
		var desc = Object.getOwnPropertyDescriptor(m, k);
		if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
			enumerable: true,
			get: function() {
				return m[k];
			}
		};
		Object.defineProperty(o, k2, desc);
	} : function(o, m, k, k2) {
		if (k2 === undefined) k2 = k;
		o[k2] = m[k];
	});
	var __setModuleDefault$11 = this && this.__setModuleDefault || (Object.create ? function(o, v) {
		Object.defineProperty(o, "default", {
			enumerable: true,
			value: v
		});
	} : function(o, v) {
		o["default"] = v;
	});
	var __importStar$11 = this && this.__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$11(result, mod, k);
		}
		__setModuleDefault$11(result, mod);
		return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.prepareKeyValueMessage = exports.issueFileCommand = void 0;
	const crypto$3 = __importStar$11(require("crypto"));
	const fs$69 = __importStar$11(require("fs"));
	const os$6 = __importStar$11(require("os"));
	const utils_1$3 = require_utils$8();
	function issueFileCommand(command, message) {
		const filePath = process.env[`GITHUB_${command}`];
		if (!filePath) throw new Error(`Unable to find environment variable for file command ${command}`);
		if (!fs$69.existsSync(filePath)) throw new Error(`Missing file at path: ${filePath}`);
		fs$69.appendFileSync(filePath, `${(0, utils_1$3.toCommandValue)(message)}${os$6.EOL}`, { encoding: "utf8" });
	}
	exports.issueFileCommand = issueFileCommand;
	function prepareKeyValueMessage(key, value) {
		const delimiter = `ghadelimiter_${crypto$3.randomUUID()}`;
		const convertedValue = (0, utils_1$3.toCommandValue)(value);
		if (key.includes(delimiter)) throw new Error(`Unexpected input: name should not contain the delimiter "${delimiter}"`);
		if (convertedValue.includes(delimiter)) throw new Error(`Unexpected input: value should not contain the delimiter "${delimiter}"`);
		return `${key}<<${delimiter}${os$6.EOL}${convertedValue}${os$6.EOL}${delimiter}`;
	}
	exports.prepareKeyValueMessage = prepareKeyValueMessage;
} });

//#endregion
//#region ../node_modules/.pnpm/@actions+http-client@2.2.3/node_modules/@actions/http-client/lib/proxy.js
var require_proxy = __commonJS({ "../node_modules/.pnpm/@actions+http-client@2.2.3/node_modules/@actions/http-client/lib/proxy.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.checkBypass = exports.getProxyUrl = void 0;
	function getProxyUrl$1(reqUrl) {
		const usingSsl = reqUrl.protocol === "https:";
		if (checkBypass(reqUrl)) return undefined;
		const proxyVar = (() => {
			if (usingSsl) return process.env["https_proxy"] || process.env["HTTPS_PROXY"];
else return process.env["http_proxy"] || process.env["HTTP_PROXY"];
		})();
		if (proxyVar) try {
			return new DecodedURL(proxyVar);
		} catch (_a$2) {
			if (!proxyVar.startsWith("http://") && !proxyVar.startsWith("https://")) return new DecodedURL(`http://${proxyVar}`);
		}
else return undefined;
	}
	exports.getProxyUrl = getProxyUrl$1;
	function checkBypass(reqUrl) {
		if (!reqUrl.hostname) return false;
		const reqHost = reqUrl.hostname;
		if (isLoopbackAddress(reqHost)) return true;
		const noProxy = process.env["no_proxy"] || process.env["NO_PROXY"] || "";
		if (!noProxy) return false;
		let reqPort;
		if (reqUrl.port) reqPort = Number(reqUrl.port);
else if (reqUrl.protocol === "http:") reqPort = 80;
else if (reqUrl.protocol === "https:") reqPort = 443;
		const upperReqHosts = [reqUrl.hostname.toUpperCase()];
		if (typeof reqPort === "number") upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);
		for (const upperNoProxyItem of noProxy.split(",").map((x) => x.trim().toUpperCase()).filter((x) => x)) if (upperNoProxyItem === "*" || upperReqHosts.some((x) => x === upperNoProxyItem || x.endsWith(`.${upperNoProxyItem}`) || upperNoProxyItem.startsWith(".") && x.endsWith(`${upperNoProxyItem}`))) return true;
		return false;
	}
	exports.checkBypass = checkBypass;
	function isLoopbackAddress(host) {
		const hostLower = host.toLowerCase();
		return hostLower === "localhost" || hostLower.startsWith("127.") || hostLower.startsWith("[::1]") || hostLower.startsWith("[0:0:0:0:0:0:0:1]");
	}
	var DecodedURL = class extends URL {
		constructor(url, base) {
			super(url, base);
			this._decodedUsername = decodeURIComponent(super.username);
			this._decodedPassword = decodeURIComponent(super.password);
		}
		get username() {
			return this._decodedUsername;
		}
		get password() {
			return this._decodedPassword;
		}
	};
} });

//#endregion
//#region ../node_modules/.pnpm/tunnel@0.0.6/node_modules/tunnel/lib/tunnel.js
var require_tunnel$1 = __commonJS({ "../node_modules/.pnpm/tunnel@0.0.6/node_modules/tunnel/lib/tunnel.js"(exports) {
	var net$3 = require("net");
	var tls$1 = require("tls");
	var http$2 = require("http");
	var https$1 = require("https");
	var events$1 = require("events");
	var assert$24 = require("assert");
	var util$20 = require("util");
	exports.httpOverHttp = httpOverHttp;
	exports.httpsOverHttp = httpsOverHttp;
	exports.httpOverHttps = httpOverHttps;
	exports.httpsOverHttps = httpsOverHttps;
	function httpOverHttp(options) {
		var agent = new TunnelingAgent(options);
		agent.request = http$2.request;
		return agent;
	}
	function httpsOverHttp(options) {
		var agent = new TunnelingAgent(options);
		agent.request = http$2.request;
		agent.createSocket = createSecureSocket;
		agent.defaultPort = 443;
		return agent;
	}
	function httpOverHttps(options) {
		var agent = new TunnelingAgent(options);
		agent.request = https$1.request;
		return agent;
	}
	function httpsOverHttps(options) {
		var agent = new TunnelingAgent(options);
		agent.request = https$1.request;
		agent.createSocket = createSecureSocket;
		agent.defaultPort = 443;
		return agent;
	}
	function TunnelingAgent(options) {
		var self$1 = this;
		self$1.options = options || {};
		self$1.proxyOptions = self$1.options.proxy || {};
		self$1.maxSockets = self$1.options.maxSockets || http$2.Agent.defaultMaxSockets;
		self$1.requests = [];
		self$1.sockets = [];
		self$1.on("free", function onFree(socket, host, port, localAddress) {
			var options$1 = toOptions(host, port, localAddress);
			for (var i$2 = 0, len = self$1.requests.length; i$2 < len; ++i$2) {
				var pending = self$1.requests[i$2];
				if (pending.host === options$1.host && pending.port === options$1.port) {
					self$1.requests.splice(i$2, 1);
					pending.request.onSocket(socket);
					return;
				}
			}
			socket.destroy();
			self$1.removeSocket(socket);
		});
	}
	util$20.inherits(TunnelingAgent, events$1.EventEmitter);
	TunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {
		var self$1 = this;
		var options = mergeOptions({ request: req }, self$1.options, toOptions(host, port, localAddress));
		if (self$1.sockets.length >= this.maxSockets) {
			self$1.requests.push(options);
			return;
		}
		self$1.createSocket(options, function(socket) {
			socket.on("free", onFree);
			socket.on("close", onCloseOrRemove);
			socket.on("agentRemove", onCloseOrRemove);
			req.onSocket(socket);
			function onFree() {
				self$1.emit("free", socket, options);
			}
			function onCloseOrRemove(err) {
				self$1.removeSocket(socket);
				socket.removeListener("free", onFree);
				socket.removeListener("close", onCloseOrRemove);
				socket.removeListener("agentRemove", onCloseOrRemove);
			}
		});
	};
	TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
		var self$1 = this;
		var placeholder = {};
		self$1.sockets.push(placeholder);
		var connectOptions = mergeOptions({}, self$1.proxyOptions, {
			method: "CONNECT",
			path: options.host + ":" + options.port,
			agent: false,
			headers: { host: options.host + ":" + options.port }
		});
		if (options.localAddress) connectOptions.localAddress = options.localAddress;
		if (connectOptions.proxyAuth) {
			connectOptions.headers = connectOptions.headers || {};
			connectOptions.headers["Proxy-Authorization"] = "Basic " + new Buffer(connectOptions.proxyAuth).toString("base64");
		}
		debug$7("making CONNECT request");
		var connectReq = self$1.request(connectOptions);
		connectReq.useChunkedEncodingByDefault = false;
		connectReq.once("response", onResponse);
		connectReq.once("upgrade", onUpgrade);
		connectReq.once("connect", onConnect);
		connectReq.once("error", onError$1);
		connectReq.end();
		function onResponse(res) {
			res.upgrade = true;
		}
		function onUpgrade(res, socket, head) {
			process.nextTick(function() {
				onConnect(res, socket, head);
			});
		}
		function onConnect(res, socket, head) {
			connectReq.removeAllListeners();
			socket.removeAllListeners();
			if (res.statusCode !== 200) {
				debug$7("tunneling socket could not be established, statusCode=%d", res.statusCode);
				socket.destroy();
				var error$2 = new Error("tunneling socket could not be established, statusCode=" + res.statusCode);
				error$2.code = "ECONNRESET";
				options.request.emit("error", error$2);
				self$1.removeSocket(placeholder);
				return;
			}
			if (head.length > 0) {
				debug$7("got illegal response body from proxy");
				socket.destroy();
				var error$2 = new Error("got illegal response body from proxy");
				error$2.code = "ECONNRESET";
				options.request.emit("error", error$2);
				self$1.removeSocket(placeholder);
				return;
			}
			debug$7("tunneling connection has established");
			self$1.sockets[self$1.sockets.indexOf(placeholder)] = socket;
			return cb(socket);
		}
		function onError$1(cause) {
			connectReq.removeAllListeners();
			debug$7("tunneling socket could not be established, cause=%s\n", cause.message, cause.stack);
			var error$2 = new Error("tunneling socket could not be established, cause=" + cause.message);
			error$2.code = "ECONNRESET";
			options.request.emit("error", error$2);
			self$1.removeSocket(placeholder);
		}
	};
	TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
		var pos = this.sockets.indexOf(socket);
		if (pos === -1) return;
		this.sockets.splice(pos, 1);
		var pending = this.requests.shift();
		if (pending) this.createSocket(pending, function(socket$1) {
			pending.request.onSocket(socket$1);
		});
	};
	function createSecureSocket(options, cb) {
		var self$1 = this;
		TunnelingAgent.prototype.createSocket.call(self$1, options, function(socket) {
			var hostHeader = options.request.getHeader("host");
			var tlsOptions = mergeOptions({}, self$1.options, {
				socket,
				servername: hostHeader ? hostHeader.replace(/:.*$/, "") : options.host
			});
			var secureSocket = tls$1.connect(0, tlsOptions);
			self$1.sockets[self$1.sockets.indexOf(socket)] = secureSocket;
			cb(secureSocket);
		});
	}
	function toOptions(host, port, localAddress) {
		if (typeof host === "string") return {
			host,
			port,
			localAddress
		};
		return host;
	}
	function mergeOptions(target) {
		for (var i$2 = 1, len = arguments.length; i$2 < len; ++i$2) {
			var overrides = arguments[i$2];
			if (typeof overrides === "object") {
				var keys = Object.keys(overrides);
				for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
					var k = keys[j];
					if (overrides[k] !== undefined) target[k] = overrides[k];
				}
			}
		}
		return target;
	}
	var debug$7;
	if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) debug$7 = function() {
		var args = Array.prototype.slice.call(arguments);
		if (typeof args[0] === "string") args[0] = "TUNNEL: " + args[0];
else args.unshift("TUNNEL:");
		console.error.apply(console, args);
	};
else debug$7 = function() {};
	exports.debug = debug$7;
} });

//#endregion
//#region ../node_modules/.pnpm/tunnel@0.0.6/node_modules/tunnel/index.js
var require_tunnel = __commonJS({ "../node_modules/.pnpm/tunnel@0.0.6/node_modules/tunnel/index.js"(exports, module) {
	module.exports = require_tunnel$1();
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/core/symbols.js
var require_symbols$4 = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/core/symbols.js"(exports, module) {
	module.exports = {
		kClose: Symbol("close"),
		kDestroy: Symbol("destroy"),
		kDispatch: Symbol("dispatch"),
		kUrl: Symbol("url"),
		kWriting: Symbol("writing"),
		kResuming: Symbol("resuming"),
		kQueue: Symbol("queue"),
		kConnect: Symbol("connect"),
		kConnecting: Symbol("connecting"),
		kHeadersList: Symbol("headers list"),
		kKeepAliveDefaultTimeout: Symbol("default keep alive timeout"),
		kKeepAliveMaxTimeout: Symbol("max keep alive timeout"),
		kKeepAliveTimeoutThreshold: Symbol("keep alive timeout threshold"),
		kKeepAliveTimeoutValue: Symbol("keep alive timeout"),
		kKeepAlive: Symbol("keep alive"),
		kHeadersTimeout: Symbol("headers timeout"),
		kBodyTimeout: Symbol("body timeout"),
		kServerName: Symbol("server name"),
		kLocalAddress: Symbol("local address"),
		kHost: Symbol("host"),
		kNoRef: Symbol("no ref"),
		kBodyUsed: Symbol("used"),
		kRunning: Symbol("running"),
		kBlocking: Symbol("blocking"),
		kPending: Symbol("pending"),
		kSize: Symbol("size"),
		kBusy: Symbol("busy"),
		kQueued: Symbol("queued"),
		kFree: Symbol("free"),
		kConnected: Symbol("connected"),
		kClosed: Symbol("closed"),
		kNeedDrain: Symbol("need drain"),
		kReset: Symbol("reset"),
		kDestroyed: Symbol.for("nodejs.stream.destroyed"),
		kMaxHeadersSize: Symbol("max headers size"),
		kRunningIdx: Symbol("running index"),
		kPendingIdx: Symbol("pending index"),
		kError: Symbol("error"),
		kClients: Symbol("clients"),
		kClient: Symbol("client"),
		kParser: Symbol("parser"),
		kOnDestroyed: Symbol("destroy callbacks"),
		kPipelining: Symbol("pipelining"),
		kSocket: Symbol("socket"),
		kHostHeader: Symbol("host header"),
		kConnector: Symbol("connector"),
		kStrictContentLength: Symbol("strict content length"),
		kMaxRedirections: Symbol("maxRedirections"),
		kMaxRequests: Symbol("maxRequestsPerClient"),
		kProxy: Symbol("proxy agent options"),
		kCounter: Symbol("socket request counter"),
		kInterceptors: Symbol("dispatch interceptors"),
		kMaxResponseSize: Symbol("max response size"),
		kHTTP2Session: Symbol("http2Session"),
		kHTTP2SessionState: Symbol("http2Session state"),
		kHTTP2BuildRequest: Symbol("http2 build request"),
		kHTTP1BuildRequest: Symbol("http1 build request"),
		kHTTP2CopyHeaders: Symbol("http2 copy headers"),
		kHTTPConnVersion: Symbol("http connection version"),
		kRetryHandlerDefaultRetry: Symbol("retry agent default retry"),
		kConstruct: Symbol("constructable")
	};
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/core/errors.js
var require_errors = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/core/errors.js"(exports, module) {
	var UndiciError$2 = class extends Error {
		constructor(message) {
			super(message);
			this.name = "UndiciError";
			this.code = "UND_ERR";
		}
	};
	var ConnectTimeoutError$1 = class ConnectTimeoutError$1 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, ConnectTimeoutError$1);
			this.name = "ConnectTimeoutError";
			this.message = message || "Connect Timeout Error";
			this.code = "UND_ERR_CONNECT_TIMEOUT";
		}
	};
	var HeadersTimeoutError$1 = class HeadersTimeoutError$1 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, HeadersTimeoutError$1);
			this.name = "HeadersTimeoutError";
			this.message = message || "Headers Timeout Error";
			this.code = "UND_ERR_HEADERS_TIMEOUT";
		}
	};
	var HeadersOverflowError$1 = class HeadersOverflowError$1 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, HeadersOverflowError$1);
			this.name = "HeadersOverflowError";
			this.message = message || "Headers Overflow Error";
			this.code = "UND_ERR_HEADERS_OVERFLOW";
		}
	};
	var BodyTimeoutError$1 = class BodyTimeoutError$1 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, BodyTimeoutError$1);
			this.name = "BodyTimeoutError";
			this.message = message || "Body Timeout Error";
			this.code = "UND_ERR_BODY_TIMEOUT";
		}
	};
	var ResponseStatusCodeError$1 = class ResponseStatusCodeError$1 extends UndiciError$2 {
		constructor(message, statusCode, headers, body) {
			super(message);
			Error.captureStackTrace(this, ResponseStatusCodeError$1);
			this.name = "ResponseStatusCodeError";
			this.message = message || "Response Status Code Error";
			this.code = "UND_ERR_RESPONSE_STATUS_CODE";
			this.body = body;
			this.status = statusCode;
			this.statusCode = statusCode;
			this.headers = headers;
		}
	};
	var InvalidArgumentError$22 = class InvalidArgumentError$22 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, InvalidArgumentError$22);
			this.name = "InvalidArgumentError";
			this.message = message || "Invalid Argument Error";
			this.code = "UND_ERR_INVALID_ARG";
		}
	};
	var InvalidReturnValueError$2 = class InvalidReturnValueError$2 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, InvalidReturnValueError$2);
			this.name = "InvalidReturnValueError";
			this.message = message || "Invalid Return Value Error";
			this.code = "UND_ERR_INVALID_RETURN_VALUE";
		}
	};
	var RequestAbortedError$9 = class RequestAbortedError$9 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, RequestAbortedError$9);
			this.name = "AbortError";
			this.message = message || "Request aborted";
			this.code = "UND_ERR_ABORTED";
		}
	};
	var InformationalError$1 = class InformationalError$1 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, InformationalError$1);
			this.name = "InformationalError";
			this.message = message || "Request information";
			this.code = "UND_ERR_INFO";
		}
	};
	var RequestContentLengthMismatchError$1 = class RequestContentLengthMismatchError$1 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, RequestContentLengthMismatchError$1);
			this.name = "RequestContentLengthMismatchError";
			this.message = message || "Request body length does not match content-length header";
			this.code = "UND_ERR_REQ_CONTENT_LENGTH_MISMATCH";
		}
	};
	var ResponseContentLengthMismatchError$1 = class ResponseContentLengthMismatchError$1 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, ResponseContentLengthMismatchError$1);
			this.name = "ResponseContentLengthMismatchError";
			this.message = message || "Response body length does not match content-length header";
			this.code = "UND_ERR_RES_CONTENT_LENGTH_MISMATCH";
		}
	};
	var ClientDestroyedError$2 = class ClientDestroyedError$2 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, ClientDestroyedError$2);
			this.name = "ClientDestroyedError";
			this.message = message || "The client is destroyed";
			this.code = "UND_ERR_DESTROYED";
		}
	};
	var ClientClosedError$1 = class ClientClosedError$1 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, ClientClosedError$1);
			this.name = "ClientClosedError";
			this.message = message || "The client is closed";
			this.code = "UND_ERR_CLOSED";
		}
	};
	var SocketError$3 = class SocketError$3 extends UndiciError$2 {
		constructor(message, socket) {
			super(message);
			Error.captureStackTrace(this, SocketError$3);
			this.name = "SocketError";
			this.message = message || "Socket error";
			this.code = "UND_ERR_SOCKET";
			this.socket = socket;
		}
	};
	var NotSupportedError$2 = class NotSupportedError$2 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, NotSupportedError$2);
			this.name = "NotSupportedError";
			this.message = message || "Not supported error";
			this.code = "UND_ERR_NOT_SUPPORTED";
		}
	};
	var BalancedPoolMissingUpstreamError$1 = class extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, NotSupportedError$2);
			this.name = "MissingUpstreamError";
			this.message = message || "No upstream has been added to the BalancedPool";
			this.code = "UND_ERR_BPL_MISSING_UPSTREAM";
		}
	};
	var HTTPParserError$1 = class HTTPParserError$1 extends Error {
		constructor(message, code$1, data) {
			super(message);
			Error.captureStackTrace(this, HTTPParserError$1);
			this.name = "HTTPParserError";
			this.code = code$1 ? `HPE_${code$1}` : undefined;
			this.data = data ? data.toString() : undefined;
		}
	};
	var ResponseExceededMaxSizeError$1 = class ResponseExceededMaxSizeError$1 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, ResponseExceededMaxSizeError$1);
			this.name = "ResponseExceededMaxSizeError";
			this.message = message || "Response content exceeded max size";
			this.code = "UND_ERR_RES_EXCEEDED_MAX_SIZE";
		}
	};
	var RequestRetryError$1 = class RequestRetryError$1 extends UndiciError$2 {
		constructor(message, code$1, { headers, data }) {
			super(message);
			Error.captureStackTrace(this, RequestRetryError$1);
			this.name = "RequestRetryError";
			this.message = message || "Request retry error";
			this.code = "UND_ERR_REQ_RETRY";
			this.statusCode = code$1;
			this.data = data;
			this.headers = headers;
		}
	};
	module.exports = {
		HTTPParserError: HTTPParserError$1,
		UndiciError: UndiciError$2,
		HeadersTimeoutError: HeadersTimeoutError$1,
		HeadersOverflowError: HeadersOverflowError$1,
		BodyTimeoutError: BodyTimeoutError$1,
		RequestContentLengthMismatchError: RequestContentLengthMismatchError$1,
		ConnectTimeoutError: ConnectTimeoutError$1,
		ResponseStatusCodeError: ResponseStatusCodeError$1,
		InvalidArgumentError: InvalidArgumentError$22,
		InvalidReturnValueError: InvalidReturnValueError$2,
		RequestAbortedError: RequestAbortedError$9,
		ClientDestroyedError: ClientDestroyedError$2,
		ClientClosedError: ClientClosedError$1,
		InformationalError: InformationalError$1,
		SocketError: SocketError$3,
		NotSupportedError: NotSupportedError$2,
		ResponseContentLengthMismatchError: ResponseContentLengthMismatchError$1,
		BalancedPoolMissingUpstreamError: BalancedPoolMissingUpstreamError$1,
		ResponseExceededMaxSizeError: ResponseExceededMaxSizeError$1,
		RequestRetryError: RequestRetryError$1
	};
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/core/constants.js
var require_constants$8 = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/core/constants.js"(exports, module) {
	/** @type {Record<string, string | undefined>} */
	const headerNameLowerCasedRecord$1 = {};
	const wellknownHeaderNames = [
		"Accept",
		"Accept-Encoding",
		"Accept-Language",
		"Accept-Ranges",
		"Access-Control-Allow-Credentials",
		"Access-Control-Allow-Headers",
		"Access-Control-Allow-Methods",
		"Access-Control-Allow-Origin",
		"Access-Control-Expose-Headers",
		"Access-Control-Max-Age",
		"Access-Control-Request-Headers",
		"Access-Control-Request-Method",
		"Age",
		"Allow",
		"Alt-Svc",
		"Alt-Used",
		"Authorization",
		"Cache-Control",
		"Clear-Site-Data",
		"Connection",
		"Content-Disposition",
		"Content-Encoding",
		"Content-Language",
		"Content-Length",
		"Content-Location",
		"Content-Range",
		"Content-Security-Policy",
		"Content-Security-Policy-Report-Only",
		"Content-Type",
		"Cookie",
		"Cross-Origin-Embedder-Policy",
		"Cross-Origin-Opener-Policy",
		"Cross-Origin-Resource-Policy",
		"Date",
		"Device-Memory",
		"Downlink",
		"ECT",
		"ETag",
		"Expect",
		"Expect-CT",
		"Expires",
		"Forwarded",
		"From",
		"Host",
		"If-Match",
		"If-Modified-Since",
		"If-None-Match",
		"If-Range",
		"If-Unmodified-Since",
		"Keep-Alive",
		"Last-Modified",
		"Link",
		"Location",
		"Max-Forwards",
		"Origin",
		"Permissions-Policy",
		"Pragma",
		"Proxy-Authenticate",
		"Proxy-Authorization",
		"RTT",
		"Range",
		"Referer",
		"Referrer-Policy",
		"Refresh",
		"Retry-After",
		"Sec-WebSocket-Accept",
		"Sec-WebSocket-Extensions",
		"Sec-WebSocket-Key",
		"Sec-WebSocket-Protocol",
		"Sec-WebSocket-Version",
		"Server",
		"Server-Timing",
		"Service-Worker-Allowed",
		"Service-Worker-Navigation-Preload",
		"Set-Cookie",
		"SourceMap",
		"Strict-Transport-Security",
		"Supports-Loading-Mode",
		"TE",
		"Timing-Allow-Origin",
		"Trailer",
		"Transfer-Encoding",
		"Upgrade",
		"Upgrade-Insecure-Requests",
		"User-Agent",
		"Vary",
		"Via",
		"WWW-Authenticate",
		"X-Content-Type-Options",
		"X-DNS-Prefetch-Control",
		"X-Frame-Options",
		"X-Permitted-Cross-Domain-Policies",
		"X-Powered-By",
		"X-Requested-With",
		"X-XSS-Protection"
	];
	for (let i$2 = 0; i$2 < wellknownHeaderNames.length; ++i$2) {
		const key = wellknownHeaderNames[i$2];
		const lowerCasedKey = key.toLowerCase();
		headerNameLowerCasedRecord$1[key] = headerNameLowerCasedRecord$1[lowerCasedKey] = lowerCasedKey;
	}
	Object.setPrototypeOf(headerNameLowerCasedRecord$1, null);
	module.exports = {
		wellknownHeaderNames,
		headerNameLowerCasedRecord: headerNameLowerCasedRecord$1
	};
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/core/util.js
var require_util$6 = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/core/util.js"(exports, module) {
	const assert$23 = require("assert");
	const { kDestroyed: kDestroyed$1, kBodyUsed: kBodyUsed$2 } = require_symbols$4();
	const { IncomingMessage } = require("http");
	const stream$2 = require("stream");
	const net$2 = require("net");
	const { InvalidArgumentError: InvalidArgumentError$21 } = require_errors();
	const { Blob: Blob$5 } = require("buffer");
	const nodeUtil = require("util");
	const { stringify: stringify$8 } = require("querystring");
	const { headerNameLowerCasedRecord } = require_constants$8();
	const [nodeMajor$1, nodeMinor$1] = process.versions.node.split(".").map((v) => Number(v));
	function nop$1() {}
	function isStream(obj) {
		return obj && typeof obj === "object" && typeof obj.pipe === "function" && typeof obj.on === "function";
	}
	function isBlobLike$7(object) {
		return Blob$5 && object instanceof Blob$5 || object && typeof object === "object" && (typeof object.stream === "function" || typeof object.arrayBuffer === "function") && /^(Blob|File)$/.test(object[Symbol.toStringTag]);
	}
	function buildURL$2(url, queryParams) {
		if (url.includes("?") || url.includes("#")) throw new Error("Query params cannot be passed when url already contains \"?\" or \"#\".");
		const stringified = stringify$8(queryParams);
		if (stringified) url += "?" + stringified;
		return url;
	}
	function parseURL(url) {
		if (typeof url === "string") {
			url = new URL(url);
			if (!/^https?:/.test(url.origin || url.protocol)) throw new InvalidArgumentError$21("Invalid URL protocol: the URL must start with `http:` or `https:`.");
			return url;
		}
		if (!url || typeof url !== "object") throw new InvalidArgumentError$21("Invalid URL: The URL argument must be a non-null object.");
		if (!/^https?:/.test(url.origin || url.protocol)) throw new InvalidArgumentError$21("Invalid URL protocol: the URL must start with `http:` or `https:`.");
		if (!(url instanceof URL)) {
			if (url.port != null && url.port !== "" && !Number.isFinite(parseInt(url.port))) throw new InvalidArgumentError$21("Invalid URL: port must be a valid integer or a string representation of an integer.");
			if (url.path != null && typeof url.path !== "string") throw new InvalidArgumentError$21("Invalid URL path: the path must be a string or null/undefined.");
			if (url.pathname != null && typeof url.pathname !== "string") throw new InvalidArgumentError$21("Invalid URL pathname: the pathname must be a string or null/undefined.");
			if (url.hostname != null && typeof url.hostname !== "string") throw new InvalidArgumentError$21("Invalid URL hostname: the hostname must be a string or null/undefined.");
			if (url.origin != null && typeof url.origin !== "string") throw new InvalidArgumentError$21("Invalid URL origin: the origin must be a string or null/undefined.");
			const port = url.port != null ? url.port : url.protocol === "https:" ? 443 : 80;
			let origin = url.origin != null ? url.origin : `${url.protocol}//${url.hostname}:${port}`;
			let path$72 = url.path != null ? url.path : `${url.pathname || ""}${url.search || ""}`;
			if (origin.endsWith("/")) origin = origin.substring(0, origin.length - 1);
			if (path$72 && !path$72.startsWith("/")) path$72 = `/${path$72}`;
			url = new URL(origin + path$72);
		}
		return url;
	}
	function parseOrigin$1(url) {
		url = parseURL(url);
		if (url.pathname !== "/" || url.search || url.hash) throw new InvalidArgumentError$21("invalid url");
		return url;
	}
	function getHostname(host) {
		if (host[0] === "[") {
			const idx$1 = host.indexOf("]");
			assert$23(idx$1 !== -1);
			return host.substring(1, idx$1);
		}
		const idx = host.indexOf(":");
		if (idx === -1) return host;
		return host.substring(0, idx);
	}
	function getServerName(host) {
		if (!host) return null;
		assert$23.strictEqual(typeof host, "string");
		const servername = getHostname(host);
		if (net$2.isIP(servername)) return "";
		return servername;
	}
	function deepClone(obj) {
		return JSON.parse(JSON.stringify(obj));
	}
	function isAsyncIterable(obj) {
		return !!(obj != null && typeof obj[Symbol.asyncIterator] === "function");
	}
	function isIterable(obj) {
		return !!(obj != null && (typeof obj[Symbol.iterator] === "function" || typeof obj[Symbol.asyncIterator] === "function"));
	}
	function bodyLength(body) {
		if (body == null) return 0;
else if (isStream(body)) {
			const state = body._readableState;
			return state && state.objectMode === false && state.ended === true && Number.isFinite(state.length) ? state.length : null;
		} else if (isBlobLike$7(body)) return body.size != null ? body.size : null;
else if (isBuffer(body)) return body.byteLength;
		return null;
	}
	function isDestroyed(stream$3) {
		return !stream$3 || !!(stream$3.destroyed || stream$3[kDestroyed$1]);
	}
	function isReadableAborted(stream$3) {
		const state = stream$3 && stream$3._readableState;
		return isDestroyed(stream$3) && state && !state.endEmitted;
	}
	function destroy(stream$3, err) {
		if (stream$3 == null || !isStream(stream$3) || isDestroyed(stream$3)) return;
		if (typeof stream$3.destroy === "function") {
			if (Object.getPrototypeOf(stream$3).constructor === IncomingMessage) stream$3.socket = null;
			stream$3.destroy(err);
		} else if (err) process.nextTick((stream$4, err$1) => {
			stream$4.emit("error", err$1);
		}, stream$3, err);
		if (stream$3.destroyed !== true) stream$3[kDestroyed$1] = true;
	}
	const KEEPALIVE_TIMEOUT_EXPR = /timeout=(\d+)/;
	function parseKeepAliveTimeout(val) {
		const m = val.toString().match(KEEPALIVE_TIMEOUT_EXPR);
		return m ? parseInt(m[1], 10) * 1e3 : null;
	}
	/**
	* Retrieves a header name and returns its lowercase value.
	* @param {string | Buffer} value Header name
	* @returns {string}
	*/
	function headerNameToString(value) {
		return headerNameLowerCasedRecord[value] || value.toLowerCase();
	}
	function parseHeaders$1(headers, obj = {}) {
		if (!Array.isArray(headers)) return headers;
		for (let i$2 = 0; i$2 < headers.length; i$2 += 2) {
			const key = headers[i$2].toString().toLowerCase();
			let val = obj[key];
			if (!val) if (Array.isArray(headers[i$2 + 1])) obj[key] = headers[i$2 + 1].map((x) => x.toString("utf8"));
else obj[key] = headers[i$2 + 1].toString("utf8");
else {
				if (!Array.isArray(val)) {
					val = [val];
					obj[key] = val;
				}
				val.push(headers[i$2 + 1].toString("utf8"));
			}
		}
		if ("content-length" in obj && "content-disposition" in obj) obj["content-disposition"] = Buffer.from(obj["content-disposition"]).toString("latin1");
		return obj;
	}
	function parseRawHeaders(headers) {
		const ret = [];
		let hasContentLength = false;
		let contentDispositionIdx = -1;
		for (let n = 0; n < headers.length; n += 2) {
			const key = headers[n + 0].toString();
			const val = headers[n + 1].toString("utf8");
			if (key.length === 14 && (key === "content-length" || key.toLowerCase() === "content-length")) {
				ret.push(key, val);
				hasContentLength = true;
			} else if (key.length === 19 && (key === "content-disposition" || key.toLowerCase() === "content-disposition")) contentDispositionIdx = ret.push(key, val) - 1;
else ret.push(key, val);
		}
		if (hasContentLength && contentDispositionIdx !== -1) ret[contentDispositionIdx] = Buffer.from(ret[contentDispositionIdx]).toString("latin1");
		return ret;
	}
	function isBuffer(buffer$1) {
		return buffer$1 instanceof Uint8Array || Buffer.isBuffer(buffer$1);
	}
	function validateHandler(handler$1, method, upgrade$1) {
		if (!handler$1 || typeof handler$1 !== "object") throw new InvalidArgumentError$21("handler must be an object");
		if (typeof handler$1.onConnect !== "function") throw new InvalidArgumentError$21("invalid onConnect method");
		if (typeof handler$1.onError !== "function") throw new InvalidArgumentError$21("invalid onError method");
		if (typeof handler$1.onBodySent !== "function" && handler$1.onBodySent !== undefined) throw new InvalidArgumentError$21("invalid onBodySent method");
		if (upgrade$1 || method === "CONNECT") {
			if (typeof handler$1.onUpgrade !== "function") throw new InvalidArgumentError$21("invalid onUpgrade method");
		} else {
			if (typeof handler$1.onHeaders !== "function") throw new InvalidArgumentError$21("invalid onHeaders method");
			if (typeof handler$1.onData !== "function") throw new InvalidArgumentError$21("invalid onData method");
			if (typeof handler$1.onComplete !== "function") throw new InvalidArgumentError$21("invalid onComplete method");
		}
	}
	function isDisturbed$2(body) {
		return !!(body && (stream$2.isDisturbed ? stream$2.isDisturbed(body) || body[kBodyUsed$2] : body[kBodyUsed$2] || body.readableDidRead || body._readableState && body._readableState.dataEmitted || isReadableAborted(body)));
	}
	function isErrored$2(body) {
		return !!(body && (stream$2.isErrored ? stream$2.isErrored(body) : /state: 'errored'/.test(nodeUtil.inspect(body))));
	}
	function isReadable$1(body) {
		return !!(body && (stream$2.isReadable ? stream$2.isReadable(body) : /state: 'readable'/.test(nodeUtil.inspect(body))));
	}
	function getSocketInfo(socket) {
		return {
			localAddress: socket.localAddress,
			localPort: socket.localPort,
			remoteAddress: socket.remoteAddress,
			remotePort: socket.remotePort,
			remoteFamily: socket.remoteFamily,
			timeout: socket.timeout,
			bytesWritten: socket.bytesWritten,
			bytesRead: socket.bytesRead
		};
	}
	async function* convertIterableToBuffer(iterable) {
		for await (const chunk of iterable) yield Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk);
	}
	let ReadableStream$5;
	function ReadableStreamFrom$3(iterable) {
		if (!ReadableStream$5) ReadableStream$5 = require("stream/web").ReadableStream;
		if (ReadableStream$5.from) return ReadableStream$5.from(convertIterableToBuffer(iterable));
		let iterator$1;
		return new ReadableStream$5({
			async start() {
				iterator$1 = iterable[Symbol.asyncIterator]();
			},
			async pull(controller) {
				const { done, value } = await iterator$1.next();
				if (done) queueMicrotask(() => {
					controller.close();
				});
else {
					const buf = Buffer.isBuffer(value) ? value : Buffer.from(value);
					controller.enqueue(new Uint8Array(buf));
				}
				return controller.desiredSize > 0;
			},
			async cancel(reason) {
				await iterator$1.return();
			}
		}, 0);
	}
	function isFormDataLike(object) {
		return object && typeof object === "object" && typeof object.append === "function" && typeof object.delete === "function" && typeof object.get === "function" && typeof object.getAll === "function" && typeof object.has === "function" && typeof object.set === "function" && object[Symbol.toStringTag] === "FormData";
	}
	function throwIfAborted$1(signal) {
		if (!signal) return;
		if (typeof signal.throwIfAborted === "function") signal.throwIfAborted();
else if (signal.aborted) {
			const err = new Error("The operation was aborted");
			err.name = "AbortError";
			throw err;
		}
	}
	function addAbortListener$2(signal, listener) {
		if ("addEventListener" in signal) {
			signal.addEventListener("abort", listener, { once: true });
			return () => signal.removeEventListener("abort", listener);
		}
		signal.addListener("abort", listener);
		return () => signal.removeListener("abort", listener);
	}
	const hasToWellFormed = !!String.prototype.toWellFormed;
	/**
	* @param {string} val
	*/
	function toUSVString$5(val) {
		if (hasToWellFormed) return `${val}`.toWellFormed();
else if (nodeUtil.toUSVString) return nodeUtil.toUSVString(val);
		return `${val}`;
	}
	function parseRangeHeader$1(range) {
		if (range == null || range === "") return {
			start: 0,
			end: null,
			size: null
		};
		const m = range ? range.match(/^bytes (\d+)-(\d+)\/(\d+)?$/) : null;
		return m ? {
			start: parseInt(m[1]),
			end: m[2] ? parseInt(m[2]) : null,
			size: m[3] ? parseInt(m[3]) : null
		} : null;
	}
	const kEnumerableProperty$9 = Object.create(null);
	kEnumerableProperty$9.enumerable = true;
	module.exports = {
		kEnumerableProperty: kEnumerableProperty$9,
		nop: nop$1,
		isDisturbed: isDisturbed$2,
		isErrored: isErrored$2,
		isReadable: isReadable$1,
		toUSVString: toUSVString$5,
		isReadableAborted,
		isBlobLike: isBlobLike$7,
		parseOrigin: parseOrigin$1,
		parseURL,
		getServerName,
		isStream,
		isIterable,
		isAsyncIterable,
		isDestroyed,
		headerNameToString,
		parseRawHeaders,
		parseHeaders: parseHeaders$1,
		parseKeepAliveTimeout,
		destroy,
		bodyLength,
		deepClone,
		ReadableStreamFrom: ReadableStreamFrom$3,
		isBuffer,
		validateHandler,
		getSocketInfo,
		isFormDataLike,
		buildURL: buildURL$2,
		throwIfAborted: throwIfAborted$1,
		addAbortListener: addAbortListener$2,
		parseRangeHeader: parseRangeHeader$1,
		nodeMajor: nodeMajor$1,
		nodeMinor: nodeMinor$1,
		nodeHasAutoSelectFamily: nodeMajor$1 > 18 || nodeMajor$1 === 18 && nodeMinor$1 >= 13,
		safeHTTPMethods: [
			"GET",
			"HEAD",
			"OPTIONS",
			"TRACE"
		]
	};
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/timers.js
var require_timers = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/timers.js"(exports, module) {
	let fastNow = Date.now();
	let fastNowTimeout;
	const fastTimers = [];
	function onTimeout() {
		fastNow = Date.now();
		let len = fastTimers.length;
		let idx = 0;
		while (idx < len) {
			const timer = fastTimers[idx];
			if (timer.state === 0) timer.state = fastNow + timer.delay;
else if (timer.state > 0 && fastNow >= timer.state) {
				timer.state = -1;
				timer.callback(timer.opaque);
			}
			if (timer.state === -1) {
				timer.state = -2;
				if (idx !== len - 1) fastTimers[idx] = fastTimers.pop();
else fastTimers.pop();
				len -= 1;
			} else idx += 1;
		}
		if (fastTimers.length > 0) refreshTimeout();
	}
	function refreshTimeout() {
		if (fastNowTimeout && fastNowTimeout.refresh) fastNowTimeout.refresh();
else {
			clearTimeout(fastNowTimeout);
			fastNowTimeout = setTimeout(onTimeout, 1e3);
			if (fastNowTimeout.unref) fastNowTimeout.unref();
		}
	}
	var Timeout = class {
		constructor(callback, delay, opaque) {
			this.callback = callback;
			this.delay = delay;
			this.opaque = opaque;
			this.state = -2;
			this.refresh();
		}
		refresh() {
			if (this.state === -2) {
				fastTimers.push(this);
				if (!fastNowTimeout || fastTimers.length === 1) refreshTimeout();
			}
			this.state = 0;
		}
		clear() {
			this.state = -1;
		}
	};
	module.exports = {
		setTimeout(callback, delay, opaque) {
			return delay < 1e3 ? setTimeout(callback, delay, opaque) : new Timeout(callback, delay, opaque);
		},
		clearTimeout(timeout) {
			if (timeout instanceof Timeout) timeout.clear();
else clearTimeout(timeout);
		}
	};
} });

//#endregion
//#region ../node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/streamsearch/sbmh.js
var require_sbmh = __commonJS({ "../node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/streamsearch/sbmh.js"(exports, module) {
	/**
	* Copyright Brian White. All rights reserved.
	*
	* @see https://github.com/mscdex/streamsearch
	*
	* Permission is hereby granted, free of charge, to any person obtaining a copy
	* of this software and associated documentation files (the "Software"), to
	* deal in the Software without restriction, including without limitation the
	* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	* sell copies of the Software, and to permit persons to whom the Software is
	* furnished to do so, subject to the following conditions:
	*
	* The above copyright notice and this permission notice shall be included in
	* all copies or substantial portions of the Software.
	*
	* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
	* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
	* IN THE SOFTWARE.
	*
	* Based heavily on the Streaming Boyer-Moore-Horspool C++ implementation
	* by Hongli Lai at: https://github.com/FooBarWidget/boyer-moore-horspool
	*/
	const EventEmitter$4 = require("node:events").EventEmitter;
	const inherits$5 = require("node:util").inherits;
	function SBMH(needle) {
		if (typeof needle === "string") needle = Buffer.from(needle);
		if (!Buffer.isBuffer(needle)) throw new TypeError("The needle has to be a String or a Buffer.");
		const needleLength = needle.length;
		if (needleLength === 0) throw new Error("The needle cannot be an empty String/Buffer.");
		if (needleLength > 256) throw new Error("The needle cannot have a length bigger than 256.");
		this.maxMatches = Infinity;
		this.matches = 0;
		this._occ = new Array(256).fill(needleLength);
		this._lookbehind_size = 0;
		this._needle = needle;
		this._bufpos = 0;
		this._lookbehind = Buffer.alloc(needleLength);
		for (var i$2 = 0; i$2 < needleLength - 1; ++i$2) this._occ[needle[i$2]] = needleLength - 1 - i$2;
	}
	inherits$5(SBMH, EventEmitter$4);
	SBMH.prototype.reset = function() {
		this._lookbehind_size = 0;
		this.matches = 0;
		this._bufpos = 0;
	};
	SBMH.prototype.push = function(chunk, pos) {
		if (!Buffer.isBuffer(chunk)) chunk = Buffer.from(chunk, "binary");
		const chlen = chunk.length;
		this._bufpos = pos || 0;
		let r;
		while (r !== chlen && this.matches < this.maxMatches) r = this._sbmh_feed(chunk);
		return r;
	};
	SBMH.prototype._sbmh_feed = function(data) {
		const len = data.length;
		const needle = this._needle;
		const needleLength = needle.length;
		const lastNeedleChar = needle[needleLength - 1];
		let pos = -this._lookbehind_size;
		let ch;
		if (pos < 0) {
			while (pos < 0 && pos <= len - needleLength) {
				ch = this._sbmh_lookup_char(data, pos + needleLength - 1);
				if (ch === lastNeedleChar && this._sbmh_memcmp(data, pos, needleLength - 1)) {
					this._lookbehind_size = 0;
					++this.matches;
					this.emit("info", true);
					return this._bufpos = pos + needleLength;
				}
				pos += this._occ[ch];
			}
			if (pos < 0) while (pos < 0 && !this._sbmh_memcmp(data, pos, len - pos)) ++pos;
			if (pos >= 0) {
				this.emit("info", false, this._lookbehind, 0, this._lookbehind_size);
				this._lookbehind_size = 0;
			} else {
				const bytesToCutOff = this._lookbehind_size + pos;
				if (bytesToCutOff > 0) this.emit("info", false, this._lookbehind, 0, bytesToCutOff);
				this._lookbehind.copy(this._lookbehind, 0, bytesToCutOff, this._lookbehind_size - bytesToCutOff);
				this._lookbehind_size -= bytesToCutOff;
				data.copy(this._lookbehind, this._lookbehind_size);
				this._lookbehind_size += len;
				this._bufpos = len;
				return len;
			}
		}
		pos += (pos >= 0) * this._bufpos;
		if (data.indexOf(needle, pos) !== -1) {
			pos = data.indexOf(needle, pos);
			++this.matches;
			if (pos > 0) this.emit("info", true, data, this._bufpos, pos);
else this.emit("info", true);
			return this._bufpos = pos + needleLength;
		} else pos = len - needleLength;
		while (pos < len && (data[pos] !== needle[0] || Buffer.compare(data.subarray(pos, pos + len - pos), needle.subarray(0, len - pos)) !== 0)) ++pos;
		if (pos < len) {
			data.copy(this._lookbehind, 0, pos, pos + (len - pos));
			this._lookbehind_size = len - pos;
		}
		if (pos > 0) this.emit("info", false, data, this._bufpos, pos < len ? pos : len);
		this._bufpos = len;
		return len;
	};
	SBMH.prototype._sbmh_lookup_char = function(data, pos) {
		return pos < 0 ? this._lookbehind[this._lookbehind_size + pos] : data[pos];
	};
	SBMH.prototype._sbmh_memcmp = function(data, pos, len) {
		for (var i$2 = 0; i$2 < len; ++i$2) if (this._sbmh_lookup_char(data, pos + i$2) !== this._needle[i$2]) return false;
		return true;
	};
	module.exports = SBMH;
} });

//#endregion
//#region ../node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/dicer/lib/PartStream.js
var require_PartStream = __commonJS({ "../node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/dicer/lib/PartStream.js"(exports, module) {
	const inherits$4 = require("node:util").inherits;
	const ReadableStream$4 = require("node:stream").Readable;
	function PartStream$1(opts) {
		ReadableStream$4.call(this, opts);
	}
	inherits$4(PartStream$1, ReadableStream$4);
	PartStream$1.prototype._read = function(n) {};
	module.exports = PartStream$1;
} });

//#endregion
//#region ../node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/getLimit.js
var require_getLimit = __commonJS({ "../node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/getLimit.js"(exports, module) {
	module.exports = function getLimit$3(limits, name, defaultLimit) {
		if (!limits || limits[name] === undefined || limits[name] === null) return defaultLimit;
		if (typeof limits[name] !== "number" || isNaN(limits[name])) throw new TypeError("Limit " + name + " is not a valid number");
		return limits[name];
	};
} });

//#endregion
//#region ../node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/dicer/lib/HeaderParser.js
var require_HeaderParser = __commonJS({ "../node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/dicer/lib/HeaderParser.js"(exports, module) {
	const EventEmitter$3 = require("node:events").EventEmitter;
	const inherits$3 = require("node:util").inherits;
	const getLimit$2 = require_getLimit();
	const StreamSearch$1 = require_sbmh();
	const B_DCRLF = Buffer.from("\r\n\r\n");
	const RE_CRLF = /\r\n/g;
	const RE_HDR = /^([^:]+):[ \t]?([\x00-\xFF]+)?$/;
	function HeaderParser$1(cfg) {
		EventEmitter$3.call(this);
		cfg = cfg || {};
		const self$1 = this;
		this.nread = 0;
		this.maxed = false;
		this.npairs = 0;
		this.maxHeaderPairs = getLimit$2(cfg, "maxHeaderPairs", 2e3);
		this.maxHeaderSize = getLimit$2(cfg, "maxHeaderSize", 81920);
		this.buffer = "";
		this.header = {};
		this.finished = false;
		this.ss = new StreamSearch$1(B_DCRLF);
		this.ss.on("info", function(isMatch, data, start, end) {
			if (data && !self$1.maxed) {
				if (self$1.nread + end - start >= self$1.maxHeaderSize) {
					end = self$1.maxHeaderSize - self$1.nread + start;
					self$1.nread = self$1.maxHeaderSize;
					self$1.maxed = true;
				} else self$1.nread += end - start;
				self$1.buffer += data.toString("binary", start, end);
			}
			if (isMatch) self$1._finish();
		});
	}
	inherits$3(HeaderParser$1, EventEmitter$3);
	HeaderParser$1.prototype.push = function(data) {
		const r = this.ss.push(data);
		if (this.finished) return r;
	};
	HeaderParser$1.prototype.reset = function() {
		this.finished = false;
		this.buffer = "";
		this.header = {};
		this.ss.reset();
	};
	HeaderParser$1.prototype._finish = function() {
		if (this.buffer) this._parseHeader();
		this.ss.matches = this.ss.maxMatches;
		const header = this.header;
		this.header = {};
		this.buffer = "";
		this.finished = true;
		this.nread = this.npairs = 0;
		this.maxed = false;
		this.emit("header", header);
	};
	HeaderParser$1.prototype._parseHeader = function() {
		if (this.npairs === this.maxHeaderPairs) return;
		const lines = this.buffer.split(RE_CRLF);
		const len = lines.length;
		let m, h;
		for (var i$2 = 0; i$2 < len; ++i$2) {
			if (lines[i$2].length === 0) continue;
			if (lines[i$2][0] === "	" || lines[i$2][0] === " ") {
				if (h) {
					this.header[h][this.header[h].length - 1] += lines[i$2];
					continue;
				}
			}
			const posColon = lines[i$2].indexOf(":");
			if (posColon === -1 || posColon === 0) return;
			m = RE_HDR.exec(lines[i$2]);
			h = m[1].toLowerCase();
			this.header[h] = this.header[h] || [];
			this.header[h].push(m[2] || "");
			if (++this.npairs === this.maxHeaderPairs) break;
		}
	};
	module.exports = HeaderParser$1;
} });

//#endregion
//#region ../node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/dicer/lib/Dicer.js
var require_Dicer = __commonJS({ "../node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/dicer/lib/Dicer.js"(exports, module) {
	const WritableStream$1 = require("node:stream").Writable;
	const inherits$2 = require("node:util").inherits;
	const StreamSearch = require_sbmh();
	const PartStream = require_PartStream();
	const HeaderParser = require_HeaderParser();
	const DASH = 45;
	const B_ONEDASH = Buffer.from("-");
	const B_CRLF = Buffer.from("\r\n");
	const EMPTY_FN = function() {};
	function Dicer$2(cfg) {
		if (!(this instanceof Dicer$2)) return new Dicer$2(cfg);
		WritableStream$1.call(this, cfg);
		if (!cfg || !cfg.headerFirst && typeof cfg.boundary !== "string") throw new TypeError("Boundary required");
		if (typeof cfg.boundary === "string") this.setBoundary(cfg.boundary);
else this._bparser = undefined;
		this._headerFirst = cfg.headerFirst;
		this._dashes = 0;
		this._parts = 0;
		this._finished = false;
		this._realFinish = false;
		this._isPreamble = true;
		this._justMatched = false;
		this._firstWrite = true;
		this._inHeader = true;
		this._part = undefined;
		this._cb = undefined;
		this._ignoreData = false;
		this._partOpts = { highWaterMark: cfg.partHwm };
		this._pause = false;
		const self$1 = this;
		this._hparser = new HeaderParser(cfg);
		this._hparser.on("header", function(header) {
			self$1._inHeader = false;
			self$1._part.emit("header", header);
		});
	}
	inherits$2(Dicer$2, WritableStream$1);
	Dicer$2.prototype.emit = function(ev) {
		if (ev === "finish" && !this._realFinish) {
			if (!this._finished) {
				const self$1 = this;
				process.nextTick(function() {
					self$1.emit("error", new Error("Unexpected end of multipart data"));
					if (self$1._part && !self$1._ignoreData) {
						const type = self$1._isPreamble ? "Preamble" : "Part";
						self$1._part.emit("error", new Error(type + " terminated early due to unexpected end of multipart data"));
						self$1._part.push(null);
						process.nextTick(function() {
							self$1._realFinish = true;
							self$1.emit("finish");
							self$1._realFinish = false;
						});
						return;
					}
					self$1._realFinish = true;
					self$1.emit("finish");
					self$1._realFinish = false;
				});
			}
		} else WritableStream$1.prototype.emit.apply(this, arguments);
	};
	Dicer$2.prototype._write = function(data, encoding, cb) {
		if (!this._hparser && !this._bparser) return cb();
		if (this._headerFirst && this._isPreamble) {
			if (!this._part) {
				this._part = new PartStream(this._partOpts);
				if (this.listenerCount("preamble") !== 0) this.emit("preamble", this._part);
else this._ignore();
			}
			const r = this._hparser.push(data);
			if (!this._inHeader && r !== undefined && r < data.length) data = data.slice(r);
else return cb();
		}
		if (this._firstWrite) {
			this._bparser.push(B_CRLF);
			this._firstWrite = false;
		}
		this._bparser.push(data);
		if (this._pause) this._cb = cb;
else cb();
	};
	Dicer$2.prototype.reset = function() {
		this._part = undefined;
		this._bparser = undefined;
		this._hparser = undefined;
	};
	Dicer$2.prototype.setBoundary = function(boundary) {
		const self$1 = this;
		this._bparser = new StreamSearch("\r\n--" + boundary);
		this._bparser.on("info", function(isMatch, data, start, end) {
			self$1._oninfo(isMatch, data, start, end);
		});
	};
	Dicer$2.prototype._ignore = function() {
		if (this._part && !this._ignoreData) {
			this._ignoreData = true;
			this._part.on("error", EMPTY_FN);
			this._part.resume();
		}
	};
	Dicer$2.prototype._oninfo = function(isMatch, data, start, end) {
		let buf;
		const self$1 = this;
		let i$2 = 0;
		let r;
		let shouldWriteMore = true;
		if (!this._part && this._justMatched && data) {
			while (this._dashes < 2 && start + i$2 < end) if (data[start + i$2] === DASH) {
				++i$2;
				++this._dashes;
			} else {
				if (this._dashes) buf = B_ONEDASH;
				this._dashes = 0;
				break;
			}
			if (this._dashes === 2) {
				if (start + i$2 < end && this.listenerCount("trailer") !== 0) this.emit("trailer", data.slice(start + i$2, end));
				this.reset();
				this._finished = true;
				if (self$1._parts === 0) {
					self$1._realFinish = true;
					self$1.emit("finish");
					self$1._realFinish = false;
				}
			}
			if (this._dashes) return;
		}
		if (this._justMatched) this._justMatched = false;
		if (!this._part) {
			this._part = new PartStream(this._partOpts);
			this._part._read = function(n) {
				self$1._unpause();
			};
			if (this._isPreamble && this.listenerCount("preamble") !== 0) this.emit("preamble", this._part);
else if (this._isPreamble !== true && this.listenerCount("part") !== 0) this.emit("part", this._part);
else this._ignore();
			if (!this._isPreamble) this._inHeader = true;
		}
		if (data && start < end && !this._ignoreData) {
			if (this._isPreamble || !this._inHeader) {
				if (buf) shouldWriteMore = this._part.push(buf);
				shouldWriteMore = this._part.push(data.slice(start, end));
				if (!shouldWriteMore) this._pause = true;
			} else if (!this._isPreamble && this._inHeader) {
				if (buf) this._hparser.push(buf);
				r = this._hparser.push(data.slice(start, end));
				if (!this._inHeader && r !== undefined && r < end) this._oninfo(false, data, start + r, end);
			}
		}
		if (isMatch) {
			this._hparser.reset();
			if (this._isPreamble) this._isPreamble = false;
else if (start !== end) {
				++this._parts;
				this._part.on("end", function() {
					if (--self$1._parts === 0) if (self$1._finished) {
						self$1._realFinish = true;
						self$1.emit("finish");
						self$1._realFinish = false;
					} else self$1._unpause();
				});
			}
			this._part.push(null);
			this._part = undefined;
			this._ignoreData = false;
			this._justMatched = true;
			this._dashes = 0;
		}
	};
	Dicer$2.prototype._unpause = function() {
		if (!this._pause) return;
		this._pause = false;
		if (this._cb) {
			const cb = this._cb;
			this._cb = undefined;
			cb();
		}
	};
	module.exports = Dicer$2;
} });

//#endregion
//#region ../node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/decodeText.js
var require_decodeText = __commonJS({ "../node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/decodeText.js"(exports, module) {
	const utf8Decoder = new TextDecoder("utf-8");
	const textDecoders = new Map([["utf-8", utf8Decoder], ["utf8", utf8Decoder]]);
	function getDecoder(charset) {
		let lc;
		while (true) switch (charset) {
			case "utf-8":
			case "utf8": return decoders.utf8;
			case "latin1":
			case "ascii":
			case "us-ascii":
			case "iso-8859-1":
			case "iso8859-1":
			case "iso88591":
			case "iso_8859-1":
			case "windows-1252":
			case "iso_8859-1:1987":
			case "cp1252":
			case "x-cp1252": return decoders.latin1;
			case "utf16le":
			case "utf-16le":
			case "ucs2":
			case "ucs-2": return decoders.utf16le;
			case "base64": return decoders.base64;
			default:
				if (lc === undefined) {
					lc = true;
					charset = charset.toLowerCase();
					continue;
				}
				return decoders.other.bind(charset);
		}
	}
	const decoders = {
		utf8: (data, sourceEncoding) => {
			if (data.length === 0) return "";
			if (typeof data === "string") data = Buffer.from(data, sourceEncoding);
			return data.utf8Slice(0, data.length);
		},
		latin1: (data, sourceEncoding) => {
			if (data.length === 0) return "";
			if (typeof data === "string") return data;
			return data.latin1Slice(0, data.length);
		},
		utf16le: (data, sourceEncoding) => {
			if (data.length === 0) return "";
			if (typeof data === "string") data = Buffer.from(data, sourceEncoding);
			return data.ucs2Slice(0, data.length);
		},
		base64: (data, sourceEncoding) => {
			if (data.length === 0) return "";
			if (typeof data === "string") data = Buffer.from(data, sourceEncoding);
			return data.base64Slice(0, data.length);
		},
		other: (data, sourceEncoding) => {
			if (data.length === 0) return "";
			if (typeof data === "string") data = Buffer.from(data, sourceEncoding);
			if (textDecoders.has(this.toString())) try {
				return textDecoders.get(this).decode(data);
			} catch {}
			return typeof data === "string" ? data : data.toString();
		}
	};
	function decodeText$3(text$3, sourceEncoding, destEncoding) {
		if (text$3) return getDecoder(destEncoding)(text$3, sourceEncoding);
		return text$3;
	}
	module.exports = decodeText$3;
} });

//#endregion
//#region ../node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/parseParams.js
var require_parseParams = __commonJS({ "../node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/parseParams.js"(exports, module) {
	const decodeText$2 = require_decodeText();
	const RE_ENCODED = /%[a-fA-F0-9][a-fA-F0-9]/g;
	const EncodedLookup = {
		"%00": "\0",
		"%01": "",
		"%02": "",
		"%03": "",
		"%04": "",
		"%05": "",
		"%06": "",
		"%07": "\x07",
		"%08": "\b",
		"%09": "	",
		"%0a": "\n",
		"%0A": "\n",
		"%0b": "\v",
		"%0B": "\v",
		"%0c": "\f",
		"%0C": "\f",
		"%0d": "\r",
		"%0D": "\r",
		"%0e": "",
		"%0E": "",
		"%0f": "",
		"%0F": "",
		"%10": "",
		"%11": "",
		"%12": "",
		"%13": "",
		"%14": "",
		"%15": "",
		"%16": "",
		"%17": "",
		"%18": "",
		"%19": "",
		"%1a": "",
		"%1A": "",
		"%1b": "\x1B",
		"%1B": "\x1B",
		"%1c": "",
		"%1C": "",
		"%1d": "",
		"%1D": "",
		"%1e": "",
		"%1E": "",
		"%1f": "",
		"%1F": "",
		"%20": " ",
		"%21": "!",
		"%22": "\"",
		"%23": "#",
		"%24": "$",
		"%25": "%",
		"%26": "&",
		"%27": "'",
		"%28": "(",
		"%29": ")",
		"%2a": "*",
		"%2A": "*",
		"%2b": "+",
		"%2B": "+",
		"%2c": ",",
		"%2C": ",",
		"%2d": "-",
		"%2D": "-",
		"%2e": ".",
		"%2E": ".",
		"%2f": "/",
		"%2F": "/",
		"%30": "0",
		"%31": "1",
		"%32": "2",
		"%33": "3",
		"%34": "4",
		"%35": "5",
		"%36": "6",
		"%37": "7",
		"%38": "8",
		"%39": "9",
		"%3a": ":",
		"%3A": ":",
		"%3b": ";",
		"%3B": ";",
		"%3c": "<",
		"%3C": "<",
		"%3d": "=",
		"%3D": "=",
		"%3e": ">",
		"%3E": ">",
		"%3f": "?",
		"%3F": "?",
		"%40": "@",
		"%41": "A",
		"%42": "B",
		"%43": "C",
		"%44": "D",
		"%45": "E",
		"%46": "F",
		"%47": "G",
		"%48": "H",
		"%49": "I",
		"%4a": "J",
		"%4A": "J",
		"%4b": "K",
		"%4B": "K",
		"%4c": "L",
		"%4C": "L",
		"%4d": "M",
		"%4D": "M",
		"%4e": "N",
		"%4E": "N",
		"%4f": "O",
		"%4F": "O",
		"%50": "P",
		"%51": "Q",
		"%52": "R",
		"%53": "S",
		"%54": "T",
		"%55": "U",
		"%56": "V",
		"%57": "W",
		"%58": "X",
		"%59": "Y",
		"%5a": "Z",
		"%5A": "Z",
		"%5b": "[",
		"%5B": "[",
		"%5c": "\\",
		"%5C": "\\",
		"%5d": "]",
		"%5D": "]",
		"%5e": "^",
		"%5E": "^",
		"%5f": "_",
		"%5F": "_",
		"%60": "`",
		"%61": "a",
		"%62": "b",
		"%63": "c",
		"%64": "d",
		"%65": "e",
		"%66": "f",
		"%67": "g",
		"%68": "h",
		"%69": "i",
		"%6a": "j",
		"%6A": "j",
		"%6b": "k",
		"%6B": "k",
		"%6c": "l",
		"%6C": "l",
		"%6d": "m",
		"%6D": "m",
		"%6e": "n",
		"%6E": "n",
		"%6f": "o",
		"%6F": "o",
		"%70": "p",
		"%71": "q",
		"%72": "r",
		"%73": "s",
		"%74": "t",
		"%75": "u",
		"%76": "v",
		"%77": "w",
		"%78": "x",
		"%79": "y",
		"%7a": "z",
		"%7A": "z",
		"%7b": "{",
		"%7B": "{",
		"%7c": "|",
		"%7C": "|",
		"%7d": "}",
		"%7D": "}",
		"%7e": "~",
		"%7E": "~",
		"%7f": "",
		"%7F": "",
		"%80": "",
		"%81": "",
		"%82": "",
		"%83": "",
		"%84": "",
		"%85": "",
		"%86": "",
		"%87": "",
		"%88": "",
		"%89": "",
		"%8a": "",
		"%8A": "",
		"%8b": "",
		"%8B": "",
		"%8c": "",
		"%8C": "",
		"%8d": "",
		"%8D": "",
		"%8e": "",
		"%8E": "",
		"%8f": "",
		"%8F": "",
		"%90": "",
		"%91": "",
		"%92": "",
		"%93": "",
		"%94": "",
		"%95": "",
		"%96": "",
		"%97": "",
		"%98": "",
		"%99": "",
		"%9a": "",
		"%9A": "",
		"%9b": "",
		"%9B": "",
		"%9c": "",
		"%9C": "",
		"%9d": "",
		"%9D": "",
		"%9e": "",
		"%9E": "",
		"%9f": "",
		"%9F": "",
		"%a0": "\xA0",
		"%A0": "\xA0",
		"%a1": "¡",
		"%A1": "¡",
		"%a2": "¢",
		"%A2": "¢",
		"%a3": "£",
		"%A3": "£",
		"%a4": "¤",
		"%A4": "¤",
		"%a5": "¥",
		"%A5": "¥",
		"%a6": "¦",
		"%A6": "¦",
		"%a7": "§",
		"%A7": "§",
		"%a8": "¨",
		"%A8": "¨",
		"%a9": "©",
		"%A9": "©",
		"%aa": "ª",
		"%Aa": "ª",
		"%aA": "ª",
		"%AA": "ª",
		"%ab": "«",
		"%Ab": "«",
		"%aB": "«",
		"%AB": "«",
		"%ac": "¬",
		"%Ac": "¬",
		"%aC": "¬",
		"%AC": "¬",
		"%ad": "­",
		"%Ad": "­",
		"%aD": "­",
		"%AD": "­",
		"%ae": "®",
		"%Ae": "®",
		"%aE": "®",
		"%AE": "®",
		"%af": "¯",
		"%Af": "¯",
		"%aF": "¯",
		"%AF": "¯",
		"%b0": "°",
		"%B0": "°",
		"%b1": "±",
		"%B1": "±",
		"%b2": "²",
		"%B2": "²",
		"%b3": "³",
		"%B3": "³",
		"%b4": "´",
		"%B4": "´",
		"%b5": "µ",
		"%B5": "µ",
		"%b6": "¶",
		"%B6": "¶",
		"%b7": "·",
		"%B7": "·",
		"%b8": "¸",
		"%B8": "¸",
		"%b9": "¹",
		"%B9": "¹",
		"%ba": "º",
		"%Ba": "º",
		"%bA": "º",
		"%BA": "º",
		"%bb": "»",
		"%Bb": "»",
		"%bB": "»",
		"%BB": "»",
		"%bc": "¼",
		"%Bc": "¼",
		"%bC": "¼",
		"%BC": "¼",
		"%bd": "½",
		"%Bd": "½",
		"%bD": "½",
		"%BD": "½",
		"%be": "¾",
		"%Be": "¾",
		"%bE": "¾",
		"%BE": "¾",
		"%bf": "¿",
		"%Bf": "¿",
		"%bF": "¿",
		"%BF": "¿",
		"%c0": "À",
		"%C0": "À",
		"%c1": "Á",
		"%C1": "Á",
		"%c2": "Â",
		"%C2": "Â",
		"%c3": "Ã",
		"%C3": "Ã",
		"%c4": "Ä",
		"%C4": "Ä",
		"%c5": "Å",
		"%C5": "Å",
		"%c6": "Æ",
		"%C6": "Æ",
		"%c7": "Ç",
		"%C7": "Ç",
		"%c8": "È",
		"%C8": "È",
		"%c9": "É",
		"%C9": "É",
		"%ca": "Ê",
		"%Ca": "Ê",
		"%cA": "Ê",
		"%CA": "Ê",
		"%cb": "Ë",
		"%Cb": "Ë",
		"%cB": "Ë",
		"%CB": "Ë",
		"%cc": "Ì",
		"%Cc": "Ì",
		"%cC": "Ì",
		"%CC": "Ì",
		"%cd": "Í",
		"%Cd": "Í",
		"%cD": "Í",
		"%CD": "Í",
		"%ce": "Î",
		"%Ce": "Î",
		"%cE": "Î",
		"%CE": "Î",
		"%cf": "Ï",
		"%Cf": "Ï",
		"%cF": "Ï",
		"%CF": "Ï",
		"%d0": "Ð",
		"%D0": "Ð",
		"%d1": "Ñ",
		"%D1": "Ñ",
		"%d2": "Ò",
		"%D2": "Ò",
		"%d3": "Ó",
		"%D3": "Ó",
		"%d4": "Ô",
		"%D4": "Ô",
		"%d5": "Õ",
		"%D5": "Õ",
		"%d6": "Ö",
		"%D6": "Ö",
		"%d7": "×",
		"%D7": "×",
		"%d8": "Ø",
		"%D8": "Ø",
		"%d9": "Ù",
		"%D9": "Ù",
		"%da": "Ú",
		"%Da": "Ú",
		"%dA": "Ú",
		"%DA": "Ú",
		"%db": "Û",
		"%Db": "Û",
		"%dB": "Û",
		"%DB": "Û",
		"%dc": "Ü",
		"%Dc": "Ü",
		"%dC": "Ü",
		"%DC": "Ü",
		"%dd": "Ý",
		"%Dd": "Ý",
		"%dD": "Ý",
		"%DD": "Ý",
		"%de": "Þ",
		"%De": "Þ",
		"%dE": "Þ",
		"%DE": "Þ",
		"%df": "ß",
		"%Df": "ß",
		"%dF": "ß",
		"%DF": "ß",
		"%e0": "à",
		"%E0": "à",
		"%e1": "á",
		"%E1": "á",
		"%e2": "â",
		"%E2": "â",
		"%e3": "ã",
		"%E3": "ã",
		"%e4": "ä",
		"%E4": "ä",
		"%e5": "å",
		"%E5": "å",
		"%e6": "æ",
		"%E6": "æ",
		"%e7": "ç",
		"%E7": "ç",
		"%e8": "è",
		"%E8": "è",
		"%e9": "é",
		"%E9": "é",
		"%ea": "ê",
		"%Ea": "ê",
		"%eA": "ê",
		"%EA": "ê",
		"%eb": "ë",
		"%Eb": "ë",
		"%eB": "ë",
		"%EB": "ë",
		"%ec": "ì",
		"%Ec": "ì",
		"%eC": "ì",
		"%EC": "ì",
		"%ed": "í",
		"%Ed": "í",
		"%eD": "í",
		"%ED": "í",
		"%ee": "î",
		"%Ee": "î",
		"%eE": "î",
		"%EE": "î",
		"%ef": "ï",
		"%Ef": "ï",
		"%eF": "ï",
		"%EF": "ï",
		"%f0": "ð",
		"%F0": "ð",
		"%f1": "ñ",
		"%F1": "ñ",
		"%f2": "ò",
		"%F2": "ò",
		"%f3": "ó",
		"%F3": "ó",
		"%f4": "ô",
		"%F4": "ô",
		"%f5": "õ",
		"%F5": "õ",
		"%f6": "ö",
		"%F6": "ö",
		"%f7": "÷",
		"%F7": "÷",
		"%f8": "ø",
		"%F8": "ø",
		"%f9": "ù",
		"%F9": "ù",
		"%fa": "ú",
		"%Fa": "ú",
		"%fA": "ú",
		"%FA": "ú",
		"%fb": "û",
		"%Fb": "û",
		"%fB": "û",
		"%FB": "û",
		"%fc": "ü",
		"%Fc": "ü",
		"%fC": "ü",
		"%FC": "ü",
		"%fd": "ý",
		"%Fd": "ý",
		"%fD": "ý",
		"%FD": "ý",
		"%fe": "þ",
		"%Fe": "þ",
		"%fE": "þ",
		"%FE": "þ",
		"%ff": "ÿ",
		"%Ff": "ÿ",
		"%fF": "ÿ",
		"%FF": "ÿ"
	};
	function encodedReplacer(match) {
		return EncodedLookup[match];
	}
	const STATE_KEY = 0;
	const STATE_VALUE = 1;
	const STATE_CHARSET = 2;
	const STATE_LANG = 3;
	function parseParams$2(str) {
		const res = [];
		let state = STATE_KEY;
		let charset = "";
		let inquote = false;
		let escaping = false;
		let p = 0;
		let tmp = "";
		const len = str.length;
		for (var i$2 = 0; i$2 < len; ++i$2) {
			const char = str[i$2];
			if (char === "\\" && inquote) if (escaping) escaping = false;
else {
				escaping = true;
				continue;
			}
else if (char === "\"") if (!escaping) {
				if (inquote) {
					inquote = false;
					state = STATE_KEY;
				} else inquote = true;
				continue;
			} else escaping = false;
else {
				if (escaping && inquote) tmp += "\\";
				escaping = false;
				if ((state === STATE_CHARSET || state === STATE_LANG) && char === "'") {
					if (state === STATE_CHARSET) {
						state = STATE_LANG;
						charset = tmp.substring(1);
					} else state = STATE_VALUE;
					tmp = "";
					continue;
				} else if (state === STATE_KEY && (char === "*" || char === "=") && res.length) {
					state = char === "*" ? STATE_CHARSET : STATE_VALUE;
					res[p] = [tmp, undefined];
					tmp = "";
					continue;
				} else if (!inquote && char === ";") {
					state = STATE_KEY;
					if (charset) {
						if (tmp.length) tmp = decodeText$2(tmp.replace(RE_ENCODED, encodedReplacer), "binary", charset);
						charset = "";
					} else if (tmp.length) tmp = decodeText$2(tmp, "binary", "utf8");
					if (res[p] === undefined) res[p] = tmp;
else res[p][1] = tmp;
					tmp = "";
					++p;
					continue;
				} else if (!inquote && (char === " " || char === "	")) continue;
			}
			tmp += char;
		}
		if (charset && tmp.length) tmp = decodeText$2(tmp.replace(RE_ENCODED, encodedReplacer), "binary", charset);
else if (tmp) tmp = decodeText$2(tmp, "binary", "utf8");
		if (res[p] === undefined) {
			if (tmp) res[p] = tmp;
		} else res[p][1] = tmp;
		return res;
	}
	module.exports = parseParams$2;
} });

//#endregion
//#region ../node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/basename.js
var require_basename = __commonJS({ "../node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/basename.js"(exports, module) {
	module.exports = function basename$1(path$72) {
		if (typeof path$72 !== "string") return "";
		for (var i$2 = path$72.length - 1; i$2 >= 0; --i$2) switch (path$72.charCodeAt(i$2)) {
			case 47:
			case 92:
				path$72 = path$72.slice(i$2 + 1);
				return path$72 === ".." || path$72 === "." ? "" : path$72;
		}
		return path$72 === ".." || path$72 === "." ? "" : path$72;
	};
} });

//#endregion
//#region ../node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/types/multipart.js
var require_multipart = __commonJS({ "../node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/types/multipart.js"(exports, module) {
	const { Readable: Readable$4 } = require("node:stream");
	const { inherits: inherits$1 } = require("node:util");
	const Dicer$1 = require_Dicer();
	const parseParams$1 = require_parseParams();
	const decodeText$1 = require_decodeText();
	const basename = require_basename();
	const getLimit$1 = require_getLimit();
	const RE_BOUNDARY = /^boundary$/i;
	const RE_FIELD = /^form-data$/i;
	const RE_CHARSET$1 = /^charset$/i;
	const RE_FILENAME = /^filename$/i;
	const RE_NAME = /^name$/i;
	Multipart.detect = /^multipart\/form-data/i;
	function Multipart(boy, cfg) {
		let i$2;
		let len;
		const self$1 = this;
		let boundary;
		const limits = cfg.limits;
		const isPartAFile = cfg.isPartAFile || ((fieldName, contentType, fileName) => contentType === "application/octet-stream" || fileName !== undefined);
		const parsedConType = cfg.parsedConType || [];
		const defCharset = cfg.defCharset || "utf8";
		const preservePath = cfg.preservePath;
		const fileOpts = { highWaterMark: cfg.fileHwm };
		for (i$2 = 0, len = parsedConType.length; i$2 < len; ++i$2) if (Array.isArray(parsedConType[i$2]) && RE_BOUNDARY.test(parsedConType[i$2][0])) {
			boundary = parsedConType[i$2][1];
			break;
		}
		function checkFinished() {
			if (nends === 0 && finished$1 && !boy._done) {
				finished$1 = false;
				self$1.end();
			}
		}
		if (typeof boundary !== "string") throw new Error("Multipart: Boundary not found");
		const fieldSizeLimit = getLimit$1(limits, "fieldSize", 1048576);
		const fileSizeLimit = getLimit$1(limits, "fileSize", Infinity);
		const filesLimit = getLimit$1(limits, "files", Infinity);
		const fieldsLimit = getLimit$1(limits, "fields", Infinity);
		const partsLimit = getLimit$1(limits, "parts", Infinity);
		const headerPairsLimit = getLimit$1(limits, "headerPairs", 2e3);
		const headerSizeLimit = getLimit$1(limits, "headerSize", 81920);
		let nfiles = 0;
		let nfields = 0;
		let nends = 0;
		let curFile;
		let curField;
		let finished$1 = false;
		this._needDrain = false;
		this._pause = false;
		this._cb = undefined;
		this._nparts = 0;
		this._boy = boy;
		const parserCfg = {
			boundary,
			maxHeaderPairs: headerPairsLimit,
			maxHeaderSize: headerSizeLimit,
			partHwm: fileOpts.highWaterMark,
			highWaterMark: cfg.highWaterMark
		};
		this.parser = new Dicer$1(parserCfg);
		this.parser.on("drain", function() {
			self$1._needDrain = false;
			if (self$1._cb && !self$1._pause) {
				const cb = self$1._cb;
				self$1._cb = undefined;
				cb();
			}
		}).on("part", function onPart(part) {
			if (++self$1._nparts > partsLimit) {
				self$1.parser.removeListener("part", onPart);
				self$1.parser.on("part", skipPart);
				boy.hitPartsLimit = true;
				boy.emit("partsLimit");
				return skipPart(part);
			}
			if (curField) {
				const field = curField;
				field.emit("end");
				field.removeAllListeners("end");
			}
			part.on("header", function(header) {
				let contype;
				let fieldname;
				let parsed;
				let charset;
				let encoding;
				let filename;
				let nsize = 0;
				if (header["content-type"]) {
					parsed = parseParams$1(header["content-type"][0]);
					if (parsed[0]) {
						contype = parsed[0].toLowerCase();
						for (i$2 = 0, len = parsed.length; i$2 < len; ++i$2) if (RE_CHARSET$1.test(parsed[i$2][0])) {
							charset = parsed[i$2][1].toLowerCase();
							break;
						}
					}
				}
				if (contype === undefined) contype = "text/plain";
				if (charset === undefined) charset = defCharset;
				if (header["content-disposition"]) {
					parsed = parseParams$1(header["content-disposition"][0]);
					if (!RE_FIELD.test(parsed[0])) return skipPart(part);
					for (i$2 = 0, len = parsed.length; i$2 < len; ++i$2) if (RE_NAME.test(parsed[i$2][0])) fieldname = parsed[i$2][1];
else if (RE_FILENAME.test(parsed[i$2][0])) {
						filename = parsed[i$2][1];
						if (!preservePath) filename = basename(filename);
					}
				} else return skipPart(part);
				if (header["content-transfer-encoding"]) encoding = header["content-transfer-encoding"][0].toLowerCase();
else encoding = "7bit";
				let onData, onEnd;
				if (isPartAFile(fieldname, contype, filename)) {
					if (nfiles === filesLimit) {
						if (!boy.hitFilesLimit) {
							boy.hitFilesLimit = true;
							boy.emit("filesLimit");
						}
						return skipPart(part);
					}
					++nfiles;
					if (boy.listenerCount("file") === 0) {
						self$1.parser._ignore();
						return;
					}
					++nends;
					const file$2 = new FileStream(fileOpts);
					curFile = file$2;
					file$2.on("end", function() {
						--nends;
						self$1._pause = false;
						checkFinished();
						if (self$1._cb && !self$1._needDrain) {
							const cb = self$1._cb;
							self$1._cb = undefined;
							cb();
						}
					});
					file$2._read = function(n) {
						if (!self$1._pause) return;
						self$1._pause = false;
						if (self$1._cb && !self$1._needDrain) {
							const cb = self$1._cb;
							self$1._cb = undefined;
							cb();
						}
					};
					boy.emit("file", fieldname, file$2, filename, encoding, contype);
					onData = function(data) {
						if ((nsize += data.length) > fileSizeLimit) {
							const extralen = fileSizeLimit - nsize + data.length;
							if (extralen > 0) file$2.push(data.slice(0, extralen));
							file$2.truncated = true;
							file$2.bytesRead = fileSizeLimit;
							part.removeAllListeners("data");
							file$2.emit("limit");
							return;
						} else if (!file$2.push(data)) self$1._pause = true;
						file$2.bytesRead = nsize;
					};
					onEnd = function() {
						curFile = undefined;
						file$2.push(null);
					};
				} else {
					if (nfields === fieldsLimit) {
						if (!boy.hitFieldsLimit) {
							boy.hitFieldsLimit = true;
							boy.emit("fieldsLimit");
						}
						return skipPart(part);
					}
					++nfields;
					++nends;
					let buffer$1 = "";
					let truncated = false;
					curField = part;
					onData = function(data) {
						if ((nsize += data.length) > fieldSizeLimit) {
							const extralen = fieldSizeLimit - (nsize - data.length);
							buffer$1 += data.toString("binary", 0, extralen);
							truncated = true;
							part.removeAllListeners("data");
						} else buffer$1 += data.toString("binary");
					};
					onEnd = function() {
						curField = undefined;
						if (buffer$1.length) buffer$1 = decodeText$1(buffer$1, "binary", charset);
						boy.emit("field", fieldname, buffer$1, false, truncated, encoding, contype);
						--nends;
						checkFinished();
					};
				}
				part._readableState.sync = false;
				part.on("data", onData);
				part.on("end", onEnd);
			}).on("error", function(err) {
				if (curFile) curFile.emit("error", err);
			});
		}).on("error", function(err) {
			boy.emit("error", err);
		}).on("finish", function() {
			finished$1 = true;
			checkFinished();
		});
	}
	Multipart.prototype.write = function(chunk, cb) {
		const r = this.parser.write(chunk);
		if (r && !this._pause) cb();
else {
			this._needDrain = !r;
			this._cb = cb;
		}
	};
	Multipart.prototype.end = function() {
		const self$1 = this;
		if (self$1.parser.writable) self$1.parser.end();
else if (!self$1._boy._done) process.nextTick(function() {
			self$1._boy._done = true;
			self$1._boy.emit("finish");
		});
	};
	function skipPart(part) {
		part.resume();
	}
	function FileStream(opts) {
		Readable$4.call(this, opts);
		this.bytesRead = 0;
		this.truncated = false;
	}
	inherits$1(FileStream, Readable$4);
	FileStream.prototype._read = function(n) {};
	module.exports = Multipart;
} });

//#endregion
//#region ../node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/Decoder.js
var require_Decoder = __commonJS({ "../node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/Decoder.js"(exports, module) {
	const RE_PLUS = /\+/g;
	const HEX = [
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		1,
		1,
		1,
		1,
		1,
		1,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		1,
		1,
		1,
		1,
		1,
		1,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	];
	function Decoder$1() {
		this.buffer = undefined;
	}
	Decoder$1.prototype.write = function(str) {
		str = str.replace(RE_PLUS, " ");
		let res = "";
		let i$2 = 0;
		let p = 0;
		const len = str.length;
		for (; i$2 < len; ++i$2) if (this.buffer !== undefined) if (!HEX[str.charCodeAt(i$2)]) {
			res += "%" + this.buffer;
			this.buffer = undefined;
			--i$2;
		} else {
			this.buffer += str[i$2];
			++p;
			if (this.buffer.length === 2) {
				res += String.fromCharCode(parseInt(this.buffer, 16));
				this.buffer = undefined;
			}
		}
else if (str[i$2] === "%") {
			if (i$2 > p) {
				res += str.substring(p, i$2);
				p = i$2;
			}
			this.buffer = "";
			++p;
		}
		if (p < len && this.buffer === undefined) res += str.substring(p);
		return res;
	};
	Decoder$1.prototype.reset = function() {
		this.buffer = undefined;
	};
	module.exports = Decoder$1;
} });

//#endregion
//#region ../node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/types/urlencoded.js
var require_urlencoded = __commonJS({ "../node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/types/urlencoded.js"(exports, module) {
	const Decoder = require_Decoder();
	const decodeText = require_decodeText();
	const getLimit = require_getLimit();
	const RE_CHARSET = /^charset$/i;
	UrlEncoded.detect = /^application\/x-www-form-urlencoded/i;
	function UrlEncoded(boy, cfg) {
		const limits = cfg.limits;
		const parsedConType = cfg.parsedConType;
		this.boy = boy;
		this.fieldSizeLimit = getLimit(limits, "fieldSize", 1048576);
		this.fieldNameSizeLimit = getLimit(limits, "fieldNameSize", 100);
		this.fieldsLimit = getLimit(limits, "fields", Infinity);
		let charset;
		for (var i$2 = 0, len = parsedConType.length; i$2 < len; ++i$2) if (Array.isArray(parsedConType[i$2]) && RE_CHARSET.test(parsedConType[i$2][0])) {
			charset = parsedConType[i$2][1].toLowerCase();
			break;
		}
		if (charset === undefined) charset = cfg.defCharset || "utf8";
		this.decoder = new Decoder();
		this.charset = charset;
		this._fields = 0;
		this._state = "key";
		this._checkingBytes = true;
		this._bytesKey = 0;
		this._bytesVal = 0;
		this._key = "";
		this._val = "";
		this._keyTrunc = false;
		this._valTrunc = false;
		this._hitLimit = false;
	}
	UrlEncoded.prototype.write = function(data, cb) {
		if (this._fields === this.fieldsLimit) {
			if (!this.boy.hitFieldsLimit) {
				this.boy.hitFieldsLimit = true;
				this.boy.emit("fieldsLimit");
			}
			return cb();
		}
		let idxeq;
		let idxamp;
		let i$2;
		let p = 0;
		const len = data.length;
		while (p < len) if (this._state === "key") {
			idxeq = idxamp = undefined;
			for (i$2 = p; i$2 < len; ++i$2) {
				if (!this._checkingBytes) ++p;
				if (data[i$2] === 61) {
					idxeq = i$2;
					break;
				} else if (data[i$2] === 38) {
					idxamp = i$2;
					break;
				}
				if (this._checkingBytes && this._bytesKey === this.fieldNameSizeLimit) {
					this._hitLimit = true;
					break;
				} else if (this._checkingBytes) ++this._bytesKey;
			}
			if (idxeq !== undefined) {
				if (idxeq > p) this._key += this.decoder.write(data.toString("binary", p, idxeq));
				this._state = "val";
				this._hitLimit = false;
				this._checkingBytes = true;
				this._val = "";
				this._bytesVal = 0;
				this._valTrunc = false;
				this.decoder.reset();
				p = idxeq + 1;
			} else if (idxamp !== undefined) {
				++this._fields;
				let key;
				const keyTrunc = this._keyTrunc;
				if (idxamp > p) key = this._key += this.decoder.write(data.toString("binary", p, idxamp));
else key = this._key;
				this._hitLimit = false;
				this._checkingBytes = true;
				this._key = "";
				this._bytesKey = 0;
				this._keyTrunc = false;
				this.decoder.reset();
				if (key.length) this.boy.emit("field", decodeText(key, "binary", this.charset), "", keyTrunc, false);
				p = idxamp + 1;
				if (this._fields === this.fieldsLimit) return cb();
			} else if (this._hitLimit) {
				if (i$2 > p) this._key += this.decoder.write(data.toString("binary", p, i$2));
				p = i$2;
				if ((this._bytesKey = this._key.length) === this.fieldNameSizeLimit) {
					this._checkingBytes = false;
					this._keyTrunc = true;
				}
			} else {
				if (p < len) this._key += this.decoder.write(data.toString("binary", p));
				p = len;
			}
		} else {
			idxamp = undefined;
			for (i$2 = p; i$2 < len; ++i$2) {
				if (!this._checkingBytes) ++p;
				if (data[i$2] === 38) {
					idxamp = i$2;
					break;
				}
				if (this._checkingBytes && this._bytesVal === this.fieldSizeLimit) {
					this._hitLimit = true;
					break;
				} else if (this._checkingBytes) ++this._bytesVal;
			}
			if (idxamp !== undefined) {
				++this._fields;
				if (idxamp > p) this._val += this.decoder.write(data.toString("binary", p, idxamp));
				this.boy.emit("field", decodeText(this._key, "binary", this.charset), decodeText(this._val, "binary", this.charset), this._keyTrunc, this._valTrunc);
				this._state = "key";
				this._hitLimit = false;
				this._checkingBytes = true;
				this._key = "";
				this._bytesKey = 0;
				this._keyTrunc = false;
				this.decoder.reset();
				p = idxamp + 1;
				if (this._fields === this.fieldsLimit) return cb();
			} else if (this._hitLimit) {
				if (i$2 > p) this._val += this.decoder.write(data.toString("binary", p, i$2));
				p = i$2;
				if (this._val === "" && this.fieldSizeLimit === 0 || (this._bytesVal = this._val.length) === this.fieldSizeLimit) {
					this._checkingBytes = false;
					this._valTrunc = true;
				}
			} else {
				if (p < len) this._val += this.decoder.write(data.toString("binary", p));
				p = len;
			}
		}
		cb();
	};
	UrlEncoded.prototype.end = function() {
		if (this.boy._done) return;
		if (this._state === "key" && this._key.length > 0) this.boy.emit("field", decodeText(this._key, "binary", this.charset), "", this._keyTrunc, false);
else if (this._state === "val") this.boy.emit("field", decodeText(this._key, "binary", this.charset), decodeText(this._val, "binary", this.charset), this._keyTrunc, this._valTrunc);
		this.boy._done = true;
		this.boy.emit("finish");
	};
	module.exports = UrlEncoded;
} });

//#endregion
//#region ../node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/main.js
var require_main = __commonJS({ "../node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/main.js"(exports, module) {
	const WritableStream = require("node:stream").Writable;
	const { inherits } = require("node:util");
	const Dicer = require_Dicer();
	const MultipartParser = require_multipart();
	const UrlencodedParser = require_urlencoded();
	const parseParams = require_parseParams();
	function Busboy$1(opts) {
		if (!(this instanceof Busboy$1)) return new Busboy$1(opts);
		if (typeof opts !== "object") throw new TypeError("Busboy expected an options-Object.");
		if (typeof opts.headers !== "object") throw new TypeError("Busboy expected an options-Object with headers-attribute.");
		if (typeof opts.headers["content-type"] !== "string") throw new TypeError("Missing Content-Type-header.");
		const { headers,...streamOptions } = opts;
		this.opts = {
			autoDestroy: false,
			...streamOptions
		};
		WritableStream.call(this, this.opts);
		this._done = false;
		this._parser = this.getParserByHeaders(headers);
		this._finished = false;
	}
	inherits(Busboy$1, WritableStream);
	Busboy$1.prototype.emit = function(ev) {
		if (ev === "finish") {
			if (!this._done) {
				this._parser?.end();
				return;
			} else if (this._finished) return;
			this._finished = true;
		}
		WritableStream.prototype.emit.apply(this, arguments);
	};
	Busboy$1.prototype.getParserByHeaders = function(headers) {
		const parsed = parseParams(headers["content-type"]);
		const cfg = {
			defCharset: this.opts.defCharset,
			fileHwm: this.opts.fileHwm,
			headers,
			highWaterMark: this.opts.highWaterMark,
			isPartAFile: this.opts.isPartAFile,
			limits: this.opts.limits,
			parsedConType: parsed,
			preservePath: this.opts.preservePath
		};
		if (MultipartParser.detect.test(parsed[0])) return new MultipartParser(this, cfg);
		if (UrlencodedParser.detect.test(parsed[0])) return new UrlencodedParser(this, cfg);
		throw new Error("Unsupported Content-Type.");
	};
	Busboy$1.prototype._write = function(chunk, encoding, cb) {
		this._parser.write(chunk, cb);
	};
	module.exports = Busboy$1;
	module.exports.default = Busboy$1;
	module.exports.Busboy = Busboy$1;
	module.exports.Dicer = Dicer;
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/constants.js
var require_constants$7 = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/constants.js"(exports, module) {
	const { MessageChannel, receiveMessageOnPort } = require("worker_threads");
	const corsSafeListedMethods = [
		"GET",
		"HEAD",
		"POST"
	];
	const corsSafeListedMethodsSet$1 = new Set(corsSafeListedMethods);
	const nullBodyStatus$2 = [
		101,
		204,
		205,
		304
	];
	const redirectStatus = [
		301,
		302,
		303,
		307,
		308
	];
	const redirectStatusSet$3 = new Set(redirectStatus);
	const badPorts = [
		"1",
		"7",
		"9",
		"11",
		"13",
		"15",
		"17",
		"19",
		"20",
		"21",
		"22",
		"23",
		"25",
		"37",
		"42",
		"43",
		"53",
		"69",
		"77",
		"79",
		"87",
		"95",
		"101",
		"102",
		"103",
		"104",
		"109",
		"110",
		"111",
		"113",
		"115",
		"117",
		"119",
		"123",
		"135",
		"137",
		"139",
		"143",
		"161",
		"179",
		"389",
		"427",
		"465",
		"512",
		"513",
		"514",
		"515",
		"526",
		"530",
		"531",
		"532",
		"540",
		"548",
		"554",
		"556",
		"563",
		"587",
		"601",
		"636",
		"989",
		"990",
		"993",
		"995",
		"1719",
		"1720",
		"1723",
		"2049",
		"3659",
		"4045",
		"5060",
		"5061",
		"6000",
		"6566",
		"6665",
		"6666",
		"6667",
		"6668",
		"6669",
		"6697",
		"10080"
	];
	const badPortsSet$1 = new Set(badPorts);
	const referrerPolicy$1 = [
		"",
		"no-referrer",
		"no-referrer-when-downgrade",
		"same-origin",
		"origin",
		"strict-origin",
		"origin-when-cross-origin",
		"strict-origin-when-cross-origin",
		"unsafe-url"
	];
	const referrerPolicySet = new Set(referrerPolicy$1);
	const requestRedirect$1 = [
		"follow",
		"manual",
		"error"
	];
	const safeMethods = [
		"GET",
		"HEAD",
		"OPTIONS",
		"TRACE"
	];
	const safeMethodsSet$1 = new Set(safeMethods);
	const requestMode$1 = [
		"navigate",
		"same-origin",
		"no-cors",
		"cors"
	];
	const requestCredentials$1 = [
		"omit",
		"same-origin",
		"include"
	];
	const requestCache$1 = [
		"default",
		"no-store",
		"reload",
		"no-cache",
		"force-cache",
		"only-if-cached"
	];
	const requestBodyHeader$1 = [
		"content-encoding",
		"content-language",
		"content-location",
		"content-type",
		"content-length"
	];
	const requestDuplex$1 = ["half"];
	const forbiddenMethods = [
		"CONNECT",
		"TRACE",
		"TRACK"
	];
	const forbiddenMethodsSet$1 = new Set(forbiddenMethods);
	const subresource = [
		"audio",
		"audioworklet",
		"font",
		"image",
		"manifest",
		"paintworklet",
		"script",
		"style",
		"track",
		"video",
		"xslt",
		""
	];
	const subresourceSet$1 = new Set(subresource);
	/** @type {globalThis['DOMException']} */
	const DOMException$6 = globalThis.DOMException ?? (() => {
		try {
			atob("~");
		} catch (err) {
			return Object.getPrototypeOf(err).constructor;
		}
	})();
	let channel;
	/** @type {globalThis['structuredClone']} */
	const structuredClone$1 = globalThis.structuredClone ?? function structuredClone$2(value, options = undefined) {
		if (arguments.length === 0) throw new TypeError("missing argument");
		if (!channel) channel = new MessageChannel();
		channel.port1.unref();
		channel.port2.unref();
		channel.port1.postMessage(value, options?.transfer);
		return receiveMessageOnPort(channel.port2).message;
	};
	module.exports = {
		DOMException: DOMException$6,
		structuredClone: structuredClone$1,
		subresource,
		forbiddenMethods,
		requestBodyHeader: requestBodyHeader$1,
		referrerPolicy: referrerPolicy$1,
		requestRedirect: requestRedirect$1,
		requestMode: requestMode$1,
		requestCredentials: requestCredentials$1,
		requestCache: requestCache$1,
		redirectStatus,
		corsSafeListedMethods,
		nullBodyStatus: nullBodyStatus$2,
		safeMethods,
		badPorts,
		requestDuplex: requestDuplex$1,
		subresourceSet: subresourceSet$1,
		badPortsSet: badPortsSet$1,
		redirectStatusSet: redirectStatusSet$3,
		corsSafeListedMethodsSet: corsSafeListedMethodsSet$1,
		safeMethodsSet: safeMethodsSet$1,
		forbiddenMethodsSet: forbiddenMethodsSet$1,
		referrerPolicySet
	};
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/global.js
var require_global$1 = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/global.js"(exports, module) {
	const globalOrigin = Symbol.for("undici.globalOrigin.1");
	function getGlobalOrigin$4() {
		return globalThis[globalOrigin];
	}
	function setGlobalOrigin(newOrigin) {
		if (newOrigin === undefined) {
			Object.defineProperty(globalThis, globalOrigin, {
				value: undefined,
				writable: true,
				enumerable: false,
				configurable: false
			});
			return;
		}
		const parsedURL = new URL(newOrigin);
		if (parsedURL.protocol !== "http:" && parsedURL.protocol !== "https:") throw new TypeError(`Only http & https urls are allowed, received ${parsedURL.protocol}`);
		Object.defineProperty(globalThis, globalOrigin, {
			value: parsedURL,
			writable: true,
			enumerable: false,
			configurable: false
		});
	}
	module.exports = {
		getGlobalOrigin: getGlobalOrigin$4,
		setGlobalOrigin
	};
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/util.js
var require_util$5 = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/util.js"(exports, module) {
	const { redirectStatusSet: redirectStatusSet$2, referrerPolicySet: referrerPolicyTokens, badPortsSet } = require_constants$7();
	const { getGlobalOrigin: getGlobalOrigin$3 } = require_global$1();
	const { performance: performance$1 } = require("perf_hooks");
	const { isBlobLike: isBlobLike$6, toUSVString: toUSVString$4, ReadableStreamFrom: ReadableStreamFrom$2 } = require_util$6();
	const assert$22 = require("assert");
	const { isUint8Array: isUint8Array$3 } = require("util/types");
	let supportedHashes = [];
	/** @type {import('crypto')|undefined} */
	let crypto$2;
	try {
		crypto$2 = require("crypto");
		const possibleRelevantHashes = [
			"sha256",
			"sha384",
			"sha512"
		];
		supportedHashes = crypto$2.getHashes().filter((hash) => possibleRelevantHashes.includes(hash));
	} catch {}
	function responseURL(response) {
		const urlList = response.urlList;
		const length = urlList.length;
		return length === 0 ? null : urlList[length - 1].toString();
	}
	function responseLocationURL$1(response, requestFragment) {
		if (!redirectStatusSet$2.has(response.status)) return null;
		let location = response.headersList.get("location");
		if (location !== null && isValidHeaderValue$1(location)) location = new URL(location, responseURL(response));
		if (location && !location.hash) location.hash = requestFragment;
		return location;
	}
	/** @returns {URL} */
	function requestCurrentURL$1(request$2) {
		return request$2.urlList[request$2.urlList.length - 1];
	}
	function requestBadPort$1(request$2) {
		const url = requestCurrentURL$1(request$2);
		if (urlIsHttpHttpsScheme$2(url) && badPortsSet.has(url.port)) return "blocked";
		return "allowed";
	}
	function isErrorLike$2(object) {
		return object instanceof Error || (object?.constructor?.name === "Error" || object?.constructor?.name === "DOMException");
	}
	function isValidReasonPhrase$1(statusText) {
		for (let i$2 = 0; i$2 < statusText.length; ++i$2) {
			const c = statusText.charCodeAt(i$2);
			if (!(c === 9 || c >= 32 && c <= 126 || c >= 128 && c <= 255)) return false;
		}
		return true;
	}
	/**
	* @see https://tools.ietf.org/html/rfc7230#section-3.2.6
	* @param {number} c
	*/
	function isTokenCharCode(c) {
		switch (c) {
			case 34:
			case 40:
			case 41:
			case 44:
			case 47:
			case 58:
			case 59:
			case 60:
			case 61:
			case 62:
			case 63:
			case 64:
			case 91:
			case 92:
			case 93:
			case 123:
			case 125: return false;
			default: return c >= 33 && c <= 126;
		}
	}
	/**
	* @param {string} characters
	*/
	function isValidHTTPToken$1(characters) {
		if (characters.length === 0) return false;
		for (let i$2 = 0; i$2 < characters.length; ++i$2) if (!isTokenCharCode(characters.charCodeAt(i$2))) return false;
		return true;
	}
	/**
	* @see https://fetch.spec.whatwg.org/#header-name
	* @param {string} potentialValue
	*/
	function isValidHeaderName$2(potentialValue) {
		return isValidHTTPToken$1(potentialValue);
	}
	/**
	* @see https://fetch.spec.whatwg.org/#header-value
	* @param {string} potentialValue
	*/
	function isValidHeaderValue$1(potentialValue) {
		if (potentialValue.startsWith("	") || potentialValue.startsWith(" ") || potentialValue.endsWith("	") || potentialValue.endsWith(" ")) return false;
		if (potentialValue.includes("\0") || potentialValue.includes("\r") || potentialValue.includes("\n")) return false;
		return true;
	}
	function setRequestReferrerPolicyOnRedirect$1(request$2, actualResponse) {
		const { headersList } = actualResponse;
		const policyHeader = (headersList.get("referrer-policy") ?? "").split(",");
		let policy = "";
		if (policyHeader.length > 0) for (let i$2 = policyHeader.length; i$2 !== 0; i$2--) {
			const token = policyHeader[i$2 - 1].trim();
			if (referrerPolicyTokens.has(token)) {
				policy = token;
				break;
			}
		}
		if (policy !== "") request$2.referrerPolicy = policy;
	}
	function crossOriginResourcePolicyCheck$1() {
		return "allowed";
	}
	function corsCheck$1() {
		return "success";
	}
	function TAOCheck$1() {
		return "success";
	}
	function appendFetchMetadata$1(httpRequest) {
		let header = null;
		header = httpRequest.mode;
		httpRequest.headersList.set("sec-fetch-mode", header);
	}
	function appendRequestOriginHeader$1(request$2) {
		let serializedOrigin = request$2.origin;
		if (request$2.responseTainting === "cors" || request$2.mode === "websocket") {
			if (serializedOrigin) request$2.headersList.append("origin", serializedOrigin);
		} else if (request$2.method !== "GET" && request$2.method !== "HEAD") {
			switch (request$2.referrerPolicy) {
				case "no-referrer":
					serializedOrigin = null;
					break;
				case "no-referrer-when-downgrade":
				case "strict-origin":
				case "strict-origin-when-cross-origin":
					if (request$2.origin && urlHasHttpsScheme$1(request$2.origin) && !urlHasHttpsScheme$1(requestCurrentURL$1(request$2))) serializedOrigin = null;
					break;
				case "same-origin":
					if (!sameOrigin$2(request$2, requestCurrentURL$1(request$2))) serializedOrigin = null;
					break;
				default:
			}
			if (serializedOrigin) request$2.headersList.append("origin", serializedOrigin);
		}
	}
	function coarsenedSharedCurrentTime$1(crossOriginIsolatedCapability) {
		return performance$1.now();
	}
	function createOpaqueTimingInfo$1(timingInfo) {
		return {
			startTime: timingInfo.startTime ?? 0,
			redirectStartTime: 0,
			redirectEndTime: 0,
			postRedirectStartTime: timingInfo.startTime ?? 0,
			finalServiceWorkerStartTime: 0,
			finalNetworkResponseStartTime: 0,
			finalNetworkRequestStartTime: 0,
			endTime: 0,
			encodedBodySize: 0,
			decodedBodySize: 0,
			finalConnectionTimingInfo: null
		};
	}
	function makePolicyContainer$2() {
		return { referrerPolicy: "strict-origin-when-cross-origin" };
	}
	function clonePolicyContainer$1(policyContainer) {
		return { referrerPolicy: policyContainer.referrerPolicy };
	}
	function determineRequestsReferrer$1(request$2) {
		const policy = request$2.referrerPolicy;
		assert$22(policy);
		let referrerSource = null;
		if (request$2.referrer === "client") {
			const globalOrigin$1 = getGlobalOrigin$3();
			if (!globalOrigin$1 || globalOrigin$1.origin === "null") return "no-referrer";
			referrerSource = new URL(globalOrigin$1);
		} else if (request$2.referrer instanceof URL) referrerSource = request$2.referrer;
		let referrerURL = stripURLForReferrer(referrerSource);
		const referrerOrigin = stripURLForReferrer(referrerSource, true);
		if (referrerURL.toString().length > 4096) referrerURL = referrerOrigin;
		const areSameOrigin = sameOrigin$2(request$2, referrerURL);
		const isNonPotentiallyTrustWorthy = isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(request$2.url);
		switch (policy) {
			case "origin": return referrerOrigin != null ? referrerOrigin : stripURLForReferrer(referrerSource, true);
			case "unsafe-url": return referrerURL;
			case "same-origin": return areSameOrigin ? referrerOrigin : "no-referrer";
			case "origin-when-cross-origin": return areSameOrigin ? referrerURL : referrerOrigin;
			case "strict-origin-when-cross-origin": {
				const currentURL = requestCurrentURL$1(request$2);
				if (sameOrigin$2(referrerURL, currentURL)) return referrerURL;
				if (isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(currentURL)) return "no-referrer";
				return referrerOrigin;
			}
			case "strict-origin":
			case "no-referrer-when-downgrade":
			default: return isNonPotentiallyTrustWorthy ? "no-referrer" : referrerOrigin;
		}
	}
	/**
	* @see https://w3c.github.io/webappsec-referrer-policy/#strip-url
	* @param {URL} url
	* @param {boolean|undefined} originOnly
	*/
	function stripURLForReferrer(url, originOnly) {
		assert$22(url instanceof URL);
		if (url.protocol === "file:" || url.protocol === "about:" || url.protocol === "blank:") return "no-referrer";
		url.username = "";
		url.password = "";
		url.hash = "";
		if (originOnly) {
			url.pathname = "";
			url.search = "";
		}
		return url;
	}
	function isURLPotentiallyTrustworthy(url) {
		if (!(url instanceof URL)) return false;
		if (url.href === "about:blank" || url.href === "about:srcdoc") return true;
		if (url.protocol === "data:") return true;
		if (url.protocol === "file:") return true;
		return isOriginPotentiallyTrustworthy(url.origin);
		function isOriginPotentiallyTrustworthy(origin) {
			if (origin == null || origin === "null") return false;
			const originAsURL = new URL(origin);
			if (originAsURL.protocol === "https:" || originAsURL.protocol === "wss:") return true;
			if (/^127(?:\.[0-9]+){0,2}\.[0-9]+$|^\[(?:0*:)*?:?0*1\]$/.test(originAsURL.hostname) || (originAsURL.hostname === "localhost" || originAsURL.hostname.includes("localhost.")) || originAsURL.hostname.endsWith(".localhost")) return true;
			return false;
		}
	}
	/**
	* @see https://w3c.github.io/webappsec-subresource-integrity/#does-response-match-metadatalist
	* @param {Uint8Array} bytes
	* @param {string} metadataList
	*/
	function bytesMatch$1(bytes, metadataList) {
		if (crypto$2 === undefined) return true;
		const parsedMetadata = parseMetadata(metadataList);
		if (parsedMetadata === "no metadata") return true;
		if (parsedMetadata.length === 0) return true;
		const strongest = getStrongestMetadata(parsedMetadata);
		const metadata = filterMetadataListByAlgorithm(parsedMetadata, strongest);
		for (const item of metadata) {
			const algorithm = item.algo;
			const expectedValue = item.hash;
			let actualValue = crypto$2.createHash(algorithm).update(bytes).digest("base64");
			if (actualValue[actualValue.length - 1] === "=") if (actualValue[actualValue.length - 2] === "=") actualValue = actualValue.slice(0, -2);
else actualValue = actualValue.slice(0, -1);
			if (compareBase64Mixed(actualValue, expectedValue)) return true;
		}
		return false;
	}
	const parseHashWithOptions = /(?<algo>sha256|sha384|sha512)-((?<hash>[A-Za-z0-9+/]+|[A-Za-z0-9_-]+)={0,2}(?:\s|$)( +[!-~]*)?)?/i;
	/**
	* @see https://w3c.github.io/webappsec-subresource-integrity/#parse-metadata
	* @param {string} metadata
	*/
	function parseMetadata(metadata) {
		/** @type {{ algo: string, hash: string }[]} */
		const result = [];
		let empty$1 = true;
		for (const token of metadata.split(" ")) {
			empty$1 = false;
			const parsedToken = parseHashWithOptions.exec(token);
			if (parsedToken === null || parsedToken.groups === undefined || parsedToken.groups.algo === undefined) continue;
			const algorithm = parsedToken.groups.algo.toLowerCase();
			if (supportedHashes.includes(algorithm)) result.push(parsedToken.groups);
		}
		if (empty$1 === true) return "no metadata";
		return result;
	}
	/**
	* @param {{ algo: 'sha256' | 'sha384' | 'sha512' }[]} metadataList
	*/
	function getStrongestMetadata(metadataList) {
		let algorithm = metadataList[0].algo;
		if (algorithm[3] === "5") return algorithm;
		for (let i$2 = 1; i$2 < metadataList.length; ++i$2) {
			const metadata = metadataList[i$2];
			if (metadata.algo[3] === "5") {
				algorithm = "sha512";
				break;
			} else if (algorithm[3] === "3") continue;
else if (metadata.algo[3] === "3") algorithm = "sha384";
		}
		return algorithm;
	}
	function filterMetadataListByAlgorithm(metadataList, algorithm) {
		if (metadataList.length === 1) return metadataList;
		let pos = 0;
		for (let i$2 = 0; i$2 < metadataList.length; ++i$2) if (metadataList[i$2].algo === algorithm) metadataList[pos++] = metadataList[i$2];
		metadataList.length = pos;
		return metadataList;
	}
	/**
	* Compares two base64 strings, allowing for base64url
	* in the second string.
	*
	* @param {string} actualValue always base64
	* @param {string} expectedValue base64 or base64url
	* @returns {boolean}
	*/
	function compareBase64Mixed(actualValue, expectedValue) {
		if (actualValue.length !== expectedValue.length) return false;
		for (let i$2 = 0; i$2 < actualValue.length; ++i$2) if (actualValue[i$2] !== expectedValue[i$2]) {
			if (actualValue[i$2] === "+" && expectedValue[i$2] === "-" || actualValue[i$2] === "/" && expectedValue[i$2] === "_") continue;
			return false;
		}
		return true;
	}
	function tryUpgradeRequestToAPotentiallyTrustworthyURL$1(request$2) {}
	/**
	* @link {https://html.spec.whatwg.org/multipage/origin.html#same-origin}
	* @param {URL} A
	* @param {URL} B
	*/
	function sameOrigin$2(A, B) {
		if (A.origin === B.origin && A.origin === "null") return true;
		if (A.protocol === B.protocol && A.hostname === B.hostname && A.port === B.port) return true;
		return false;
	}
	function createDeferredPromise$3() {
		let res;
		let rej;
		const promise$1 = new Promise((resolve$1, reject) => {
			res = resolve$1;
			rej = reject;
		});
		return {
			promise: promise$1,
			resolve: res,
			reject: rej
		};
	}
	function isAborted$2(fetchParams) {
		return fetchParams.controller.state === "aborted";
	}
	function isCancelled$2(fetchParams) {
		return fetchParams.controller.state === "aborted" || fetchParams.controller.state === "terminated";
	}
	const normalizeMethodRecord$1 = {
		delete: "DELETE",
		DELETE: "DELETE",
		get: "GET",
		GET: "GET",
		head: "HEAD",
		HEAD: "HEAD",
		options: "OPTIONS",
		OPTIONS: "OPTIONS",
		post: "POST",
		POST: "POST",
		put: "PUT",
		PUT: "PUT"
	};
	Object.setPrototypeOf(normalizeMethodRecord$1, null);
	/**
	* @see https://fetch.spec.whatwg.org/#concept-method-normalize
	* @param {string} method
	*/
	function normalizeMethod$1(method) {
		return normalizeMethodRecord$1[method.toLowerCase()] ?? method;
	}
	function serializeJavascriptValueToJSONString$1(value) {
		const result = JSON.stringify(value);
		if (result === undefined) throw new TypeError("Value is not JSON serializable");
		assert$22(typeof result === "string");
		return result;
	}
	const esIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));
	/**
	* @see https://webidl.spec.whatwg.org/#dfn-iterator-prototype-object
	* @param {() => unknown[]} iterator
	* @param {string} name name of the instance
	* @param {'key'|'value'|'key+value'} kind
	*/
	function makeIterator$2(iterator$1, name, kind) {
		const object = {
			index: 0,
			kind,
			target: iterator$1
		};
		const i$2 = {
			next() {
				if (Object.getPrototypeOf(this) !== i$2) throw new TypeError(`'next' called on an object that does not implement interface ${name} Iterator.`);
				const { index: index$1, kind: kind$1, target } = object;
				const values = target();
				const len = values.length;
				if (index$1 >= len) return {
					value: undefined,
					done: true
				};
				const pair = values[index$1];
				object.index = index$1 + 1;
				return iteratorResult(pair, kind$1);
			},
			[Symbol.toStringTag]: `${name} Iterator`
		};
		Object.setPrototypeOf(i$2, esIteratorPrototype);
		return Object.setPrototypeOf({}, i$2);
	}
	function iteratorResult(pair, kind) {
		let result;
		switch (kind) {
			case "key": {
				result = pair[0];
				break;
			}
			case "value": {
				result = pair[1];
				break;
			}
			case "key+value": {
				result = pair;
				break;
			}
		}
		return {
			value: result,
			done: false
		};
	}
	/**
	* @see https://fetch.spec.whatwg.org/#body-fully-read
	*/
	async function fullyReadBody$2(body, processBody, processBodyError) {
		const successSteps = processBody;
		const errorSteps = processBodyError;
		let reader;
		try {
			reader = body.stream.getReader();
		} catch (e) {
			errorSteps(e);
			return;
		}
		try {
			const result = await readAllBytes$1(reader);
			successSteps(result);
		} catch (e) {
			errorSteps(e);
		}
	}
	/** @type {ReadableStream} */
	let ReadableStream$3 = globalThis.ReadableStream;
	function isReadableStreamLike$1(stream$3) {
		if (!ReadableStream$3) ReadableStream$3 = require("stream/web").ReadableStream;
		return stream$3 instanceof ReadableStream$3 || stream$3[Symbol.toStringTag] === "ReadableStream" && typeof stream$3.tee === "function";
	}
	const MAXIMUM_ARGUMENT_LENGTH = 65535;
	/**
	* @see https://infra.spec.whatwg.org/#isomorphic-decode
	* @param {number[]|Uint8Array} input
	*/
	function isomorphicDecode$1(input) {
		if (input.length < MAXIMUM_ARGUMENT_LENGTH) return String.fromCharCode(...input);
		return input.reduce((previous$1, current) => previous$1 + String.fromCharCode(current), "");
	}
	/**
	* @param {ReadableStreamController<Uint8Array>} controller
	*/
	function readableStreamClose$2(controller) {
		try {
			controller.close();
		} catch (err) {
			if (!err.message.includes("Controller is already closed")) throw err;
		}
	}
	/**
	* @see https://infra.spec.whatwg.org/#isomorphic-encode
	* @param {string} input
	*/
	function isomorphicEncode$2(input) {
		for (let i$2 = 0; i$2 < input.length; i$2++) assert$22(input.charCodeAt(i$2) <= 255);
		return input;
	}
	/**
	* @see https://streams.spec.whatwg.org/#readablestreamdefaultreader-read-all-bytes
	* @see https://streams.spec.whatwg.org/#read-loop
	* @param {ReadableStreamDefaultReader} reader
	*/
	async function readAllBytes$1(reader) {
		const bytes = [];
		let byteLength = 0;
		while (true) {
			const { done, value: chunk } = await reader.read();
			if (done) return Buffer.concat(bytes, byteLength);
			if (!isUint8Array$3(chunk)) throw new TypeError("Received non-Uint8Array chunk");
			bytes.push(chunk);
			byteLength += chunk.length;
		}
	}
	/**
	* @see https://fetch.spec.whatwg.org/#is-local
	* @param {URL} url
	*/
	function urlIsLocal$1(url) {
		assert$22("protocol" in url);
		const protocol = url.protocol;
		return protocol === "about:" || protocol === "blob:" || protocol === "data:";
	}
	/**
	* @param {string|URL} url
	*/
	function urlHasHttpsScheme$1(url) {
		if (typeof url === "string") return url.startsWith("https:");
		return url.protocol === "https:";
	}
	/**
	* @see https://fetch.spec.whatwg.org/#http-scheme
	* @param {URL} url
	*/
	function urlIsHttpHttpsScheme$2(url) {
		assert$22("protocol" in url);
		const protocol = url.protocol;
		return protocol === "http:" || protocol === "https:";
	}
	/**
	* Fetch supports node >= 16.8.0, but Object.hasOwn was added in v16.9.0.
	*/
	const hasOwn$2 = Object.hasOwn || ((dict, key) => Object.prototype.hasOwnProperty.call(dict, key));
	module.exports = {
		isAborted: isAborted$2,
		isCancelled: isCancelled$2,
		createDeferredPromise: createDeferredPromise$3,
		ReadableStreamFrom: ReadableStreamFrom$2,
		toUSVString: toUSVString$4,
		tryUpgradeRequestToAPotentiallyTrustworthyURL: tryUpgradeRequestToAPotentiallyTrustworthyURL$1,
		coarsenedSharedCurrentTime: coarsenedSharedCurrentTime$1,
		determineRequestsReferrer: determineRequestsReferrer$1,
		makePolicyContainer: makePolicyContainer$2,
		clonePolicyContainer: clonePolicyContainer$1,
		appendFetchMetadata: appendFetchMetadata$1,
		appendRequestOriginHeader: appendRequestOriginHeader$1,
		TAOCheck: TAOCheck$1,
		corsCheck: corsCheck$1,
		crossOriginResourcePolicyCheck: crossOriginResourcePolicyCheck$1,
		createOpaqueTimingInfo: createOpaqueTimingInfo$1,
		setRequestReferrerPolicyOnRedirect: setRequestReferrerPolicyOnRedirect$1,
		isValidHTTPToken: isValidHTTPToken$1,
		requestBadPort: requestBadPort$1,
		requestCurrentURL: requestCurrentURL$1,
		responseURL,
		responseLocationURL: responseLocationURL$1,
		isBlobLike: isBlobLike$6,
		isURLPotentiallyTrustworthy,
		isValidReasonPhrase: isValidReasonPhrase$1,
		sameOrigin: sameOrigin$2,
		normalizeMethod: normalizeMethod$1,
		serializeJavascriptValueToJSONString: serializeJavascriptValueToJSONString$1,
		makeIterator: makeIterator$2,
		isValidHeaderName: isValidHeaderName$2,
		isValidHeaderValue: isValidHeaderValue$1,
		hasOwn: hasOwn$2,
		isErrorLike: isErrorLike$2,
		fullyReadBody: fullyReadBody$2,
		bytesMatch: bytesMatch$1,
		isReadableStreamLike: isReadableStreamLike$1,
		readableStreamClose: readableStreamClose$2,
		isomorphicEncode: isomorphicEncode$2,
		isomorphicDecode: isomorphicDecode$1,
		urlIsLocal: urlIsLocal$1,
		urlHasHttpsScheme: urlHasHttpsScheme$1,
		urlIsHttpHttpsScheme: urlIsHttpHttpsScheme$2,
		readAllBytes: readAllBytes$1,
		normalizeMethodRecord: normalizeMethodRecord$1,
		parseMetadata
	};
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/symbols.js
var require_symbols$3 = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/symbols.js"(exports, module) {
	module.exports = {
		kUrl: Symbol("url"),
		kHeaders: Symbol("headers"),
		kSignal: Symbol("signal"),
		kState: Symbol("state"),
		kGuard: Symbol("guard"),
		kRealm: Symbol("realm")
	};
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/webidl.js
var require_webidl = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/webidl.js"(exports, module) {
	const { types: types$4 } = require("util");
	const { hasOwn: hasOwn$1, toUSVString: toUSVString$3 } = require_util$5();
	/** @type {import('../../types/webidl').Webidl} */
	const webidl$14 = {};
	webidl$14.converters = {};
	webidl$14.util = {};
	webidl$14.errors = {};
	webidl$14.errors.exception = function(message) {
		return new TypeError(`${message.header}: ${message.message}`);
	};
	webidl$14.errors.conversionFailed = function(context$1) {
		const plural = context$1.types.length === 1 ? "" : " one of";
		const message = `${context$1.argument} could not be converted to` + `${plural}: ${context$1.types.join(", ")}.`;
		return webidl$14.errors.exception({
			header: context$1.prefix,
			message
		});
	};
	webidl$14.errors.invalidArgument = function(context$1) {
		return webidl$14.errors.exception({
			header: context$1.prefix,
			message: `"${context$1.value}" is an invalid ${context$1.type}.`
		});
	};
	webidl$14.brandCheck = function(V, I, opts = undefined) {
		if (opts?.strict !== false && !(V instanceof I)) throw new TypeError("Illegal invocation");
else return V?.[Symbol.toStringTag] === I.prototype[Symbol.toStringTag];
	};
	webidl$14.argumentLengthCheck = function({ length }, min, ctx) {
		if (length < min) throw webidl$14.errors.exception({
			message: `${min} argument${min !== 1 ? "s" : ""} required, ` + `but${length ? " only" : ""} ${length} found.`,
			...ctx
		});
	};
	webidl$14.illegalConstructor = function() {
		throw webidl$14.errors.exception({
			header: "TypeError",
			message: "Illegal constructor"
		});
	};
	webidl$14.util.Type = function(V) {
		switch (typeof V) {
			case "undefined": return "Undefined";
			case "boolean": return "Boolean";
			case "string": return "String";
			case "symbol": return "Symbol";
			case "number": return "Number";
			case "bigint": return "BigInt";
			case "function":
			case "object": {
				if (V === null) return "Null";
				return "Object";
			}
		}
	};
	webidl$14.util.ConvertToInt = function(V, bitLength, signedness, opts = {}) {
		let upperBound;
		let lowerBound;
		if (bitLength === 64) {
			upperBound = Math.pow(2, 53) - 1;
			if (signedness === "unsigned") lowerBound = 0;
else lowerBound = Math.pow(-2, 53) + 1;
		} else if (signedness === "unsigned") {
			lowerBound = 0;
			upperBound = Math.pow(2, bitLength) - 1;
		} else {
			lowerBound = Math.pow(-2, bitLength) - 1;
			upperBound = Math.pow(2, bitLength - 1) - 1;
		}
		let x = Number(V);
		if (x === 0) x = 0;
		if (opts.enforceRange === true) {
			if (Number.isNaN(x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) throw webidl$14.errors.exception({
				header: "Integer conversion",
				message: `Could not convert ${V} to an integer.`
			});
			x = webidl$14.util.IntegerPart(x);
			if (x < lowerBound || x > upperBound) throw webidl$14.errors.exception({
				header: "Integer conversion",
				message: `Value must be between ${lowerBound}-${upperBound}, got ${x}.`
			});
			return x;
		}
		if (!Number.isNaN(x) && opts.clamp === true) {
			x = Math.min(Math.max(x, lowerBound), upperBound);
			if (Math.floor(x) % 2 === 0) x = Math.floor(x);
else x = Math.ceil(x);
			return x;
		}
		if (Number.isNaN(x) || x === 0 && Object.is(0, x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) return 0;
		x = webidl$14.util.IntegerPart(x);
		x = x % Math.pow(2, bitLength);
		if (signedness === "signed" && x >= Math.pow(2, bitLength) - 1) return x - Math.pow(2, bitLength);
		return x;
	};
	webidl$14.util.IntegerPart = function(n) {
		const r = Math.floor(Math.abs(n));
		if (n < 0) return -1 * r;
		return r;
	};
	webidl$14.sequenceConverter = function(converter) {
		return (V) => {
			if (webidl$14.util.Type(V) !== "Object") throw webidl$14.errors.exception({
				header: "Sequence",
				message: `Value of type ${webidl$14.util.Type(V)} is not an Object.`
			});
			/** @type {Generator} */
			const method = V?.[Symbol.iterator]?.();
			const seq = [];
			if (method === undefined || typeof method.next !== "function") throw webidl$14.errors.exception({
				header: "Sequence",
				message: "Object is not an iterator."
			});
			while (true) {
				const { done, value } = method.next();
				if (done) break;
				seq.push(converter(value));
			}
			return seq;
		};
	};
	webidl$14.recordConverter = function(keyConverter, valueConverter) {
		return (O) => {
			if (webidl$14.util.Type(O) !== "Object") throw webidl$14.errors.exception({
				header: "Record",
				message: `Value of type ${webidl$14.util.Type(O)} is not an Object.`
			});
			const result = {};
			if (!types$4.isProxy(O)) {
				const keys$1 = Object.keys(O);
				for (const key of keys$1) {
					const typedKey = keyConverter(key);
					const typedValue = valueConverter(O[key]);
					result[typedKey] = typedValue;
				}
				return result;
			}
			const keys = Reflect.ownKeys(O);
			for (const key of keys) {
				const desc = Reflect.getOwnPropertyDescriptor(O, key);
				if (desc?.enumerable) {
					const typedKey = keyConverter(key);
					const typedValue = valueConverter(O[key]);
					result[typedKey] = typedValue;
				}
			}
			return result;
		};
	};
	webidl$14.interfaceConverter = function(i$2) {
		return (V, opts = {}) => {
			if (opts.strict !== false && !(V instanceof i$2)) throw webidl$14.errors.exception({
				header: i$2.name,
				message: `Expected ${V} to be an instance of ${i$2.name}.`
			});
			return V;
		};
	};
	webidl$14.dictionaryConverter = function(converters) {
		return (dictionary) => {
			const type = webidl$14.util.Type(dictionary);
			const dict = {};
			if (type === "Null" || type === "Undefined") return dict;
else if (type !== "Object") throw webidl$14.errors.exception({
				header: "Dictionary",
				message: `Expected ${dictionary} to be one of: Null, Undefined, Object.`
			});
			for (const options of converters) {
				const { key, defaultValue, required, converter } = options;
				if (required === true) {
					if (!hasOwn$1(dictionary, key)) throw webidl$14.errors.exception({
						header: "Dictionary",
						message: `Missing required key "${key}".`
					});
				}
				let value = dictionary[key];
				const hasDefault = hasOwn$1(options, "defaultValue");
				if (hasDefault && value !== null) value = value ?? defaultValue;
				if (required || hasDefault || value !== undefined) {
					value = converter(value);
					if (options.allowedValues && !options.allowedValues.includes(value)) throw webidl$14.errors.exception({
						header: "Dictionary",
						message: `${value} is not an accepted type. Expected one of ${options.allowedValues.join(", ")}.`
					});
					dict[key] = value;
				}
			}
			return dict;
		};
	};
	webidl$14.nullableConverter = function(converter) {
		return (V) => {
			if (V === null) return V;
			return converter(V);
		};
	};
	webidl$14.converters.DOMString = function(V, opts = {}) {
		if (V === null && opts.legacyNullToEmptyString) return "";
		if (typeof V === "symbol") throw new TypeError("Could not convert argument of type symbol to string.");
		return String(V);
	};
	webidl$14.converters.ByteString = function(V) {
		const x = webidl$14.converters.DOMString(V);
		for (let index$1 = 0; index$1 < x.length; index$1++) if (x.charCodeAt(index$1) > 255) throw new TypeError("Cannot convert argument to a ByteString because the character at " + `index ${index$1} has a value of ${x.charCodeAt(index$1)} which is greater than 255.`);
		return x;
	};
	webidl$14.converters.USVString = toUSVString$3;
	webidl$14.converters.boolean = function(V) {
		const x = Boolean(V);
		return x;
	};
	webidl$14.converters.any = function(V) {
		return V;
	};
	webidl$14.converters["long long"] = function(V) {
		const x = webidl$14.util.ConvertToInt(V, 64, "signed");
		return x;
	};
	webidl$14.converters["unsigned long long"] = function(V) {
		const x = webidl$14.util.ConvertToInt(V, 64, "unsigned");
		return x;
	};
	webidl$14.converters["unsigned long"] = function(V) {
		const x = webidl$14.util.ConvertToInt(V, 32, "unsigned");
		return x;
	};
	webidl$14.converters["unsigned short"] = function(V, opts) {
		const x = webidl$14.util.ConvertToInt(V, 16, "unsigned", opts);
		return x;
	};
	webidl$14.converters.ArrayBuffer = function(V, opts = {}) {
		if (webidl$14.util.Type(V) !== "Object" || !types$4.isAnyArrayBuffer(V)) throw webidl$14.errors.conversionFailed({
			prefix: `${V}`,
			argument: `${V}`,
			types: ["ArrayBuffer"]
		});
		if (opts.allowShared === false && types$4.isSharedArrayBuffer(V)) throw webidl$14.errors.exception({
			header: "ArrayBuffer",
			message: "SharedArrayBuffer is not allowed."
		});
		return V;
	};
	webidl$14.converters.TypedArray = function(V, T, opts = {}) {
		if (webidl$14.util.Type(V) !== "Object" || !types$4.isTypedArray(V) || V.constructor.name !== T.name) throw webidl$14.errors.conversionFailed({
			prefix: `${T.name}`,
			argument: `${V}`,
			types: [T.name]
		});
		if (opts.allowShared === false && types$4.isSharedArrayBuffer(V.buffer)) throw webidl$14.errors.exception({
			header: "ArrayBuffer",
			message: "SharedArrayBuffer is not allowed."
		});
		return V;
	};
	webidl$14.converters.DataView = function(V, opts = {}) {
		if (webidl$14.util.Type(V) !== "Object" || !types$4.isDataView(V)) throw webidl$14.errors.exception({
			header: "DataView",
			message: "Object is not a DataView."
		});
		if (opts.allowShared === false && types$4.isSharedArrayBuffer(V.buffer)) throw webidl$14.errors.exception({
			header: "ArrayBuffer",
			message: "SharedArrayBuffer is not allowed."
		});
		return V;
	};
	webidl$14.converters.BufferSource = function(V, opts = {}) {
		if (types$4.isAnyArrayBuffer(V)) return webidl$14.converters.ArrayBuffer(V, opts);
		if (types$4.isTypedArray(V)) return webidl$14.converters.TypedArray(V, V.constructor);
		if (types$4.isDataView(V)) return webidl$14.converters.DataView(V, opts);
		throw new TypeError(`Could not convert ${V} to a BufferSource.`);
	};
	webidl$14.converters["sequence<ByteString>"] = webidl$14.sequenceConverter(webidl$14.converters.ByteString);
	webidl$14.converters["sequence<sequence<ByteString>>"] = webidl$14.sequenceConverter(webidl$14.converters["sequence<ByteString>"]);
	webidl$14.converters["record<ByteString, ByteString>"] = webidl$14.recordConverter(webidl$14.converters.ByteString, webidl$14.converters.ByteString);
	module.exports = { webidl: webidl$14 };
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/dataURL.js
var require_dataURL = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/dataURL.js"(exports, module) {
	const assert$21 = require("assert");
	const { atob: atob$1 } = require("buffer");
	const { isomorphicDecode } = require_util$5();
	const encoder$1 = new TextEncoder();
	/**
	* @see https://mimesniff.spec.whatwg.org/#http-token-code-point
	*/
	const HTTP_TOKEN_CODEPOINTS = /^[!#$%&'*+-.^_|~A-Za-z0-9]+$/;
	const HTTP_WHITESPACE_REGEX = /(\u000A|\u000D|\u0009|\u0020)/;
	/**
	* @see https://mimesniff.spec.whatwg.org/#http-quoted-string-token-code-point
	*/
	const HTTP_QUOTED_STRING_TOKENS = /[\u0009|\u0020-\u007E|\u0080-\u00FF]/;
	/** @param {URL} dataURL */
	function dataURLProcessor$1(dataURL) {
		assert$21(dataURL.protocol === "data:");
		let input = URLSerializer$4(dataURL, true);
		input = input.slice(5);
		const position$1 = { position: 0 };
		let mimeType = collectASequenceOfCodePointsFast$1(",", input, position$1);
		const mimeTypeLength = mimeType.length;
		mimeType = removeASCIIWhitespace(mimeType, true, true);
		if (position$1.position >= input.length) return "failure";
		position$1.position++;
		const encodedBody = input.slice(mimeTypeLength + 1);
		let body = stringPercentDecode(encodedBody);
		if (/;(\u0020){0,}base64$/i.test(mimeType)) {
			const stringBody = isomorphicDecode(body);
			body = forgivingBase64(stringBody);
			if (body === "failure") return "failure";
			mimeType = mimeType.slice(0, -6);
			mimeType = mimeType.replace(/(\u0020)+$/, "");
			mimeType = mimeType.slice(0, -1);
		}
		if (mimeType.startsWith(";")) mimeType = "text/plain" + mimeType;
		let mimeTypeRecord = parseMIMEType$3(mimeType);
		if (mimeTypeRecord === "failure") mimeTypeRecord = parseMIMEType$3("text/plain;charset=US-ASCII");
		return {
			mimeType: mimeTypeRecord,
			body
		};
	}
	/**
	* @param {URL} url
	* @param {boolean} excludeFragment
	*/
	function URLSerializer$4(url, excludeFragment = false) {
		if (!excludeFragment) return url.href;
		const href = url.href;
		const hashLength = url.hash.length;
		return hashLength === 0 ? href : href.substring(0, href.length - hashLength);
	}
	/**
	* @param {(char: string) => boolean} condition
	* @param {string} input
	* @param {{ position: number }} position
	*/
	function collectASequenceOfCodePoints(condition, input, position$1) {
		let result = "";
		while (position$1.position < input.length && condition(input[position$1.position])) {
			result += input[position$1.position];
			position$1.position++;
		}
		return result;
	}
	/**
	* A faster collectASequenceOfCodePoints that only works when comparing a single character.
	* @param {string} char
	* @param {string} input
	* @param {{ position: number }} position
	*/
	function collectASequenceOfCodePointsFast$1(char, input, position$1) {
		const idx = input.indexOf(char, position$1.position);
		const start = position$1.position;
		if (idx === -1) {
			position$1.position = input.length;
			return input.slice(start);
		}
		position$1.position = idx;
		return input.slice(start, position$1.position);
	}
	/** @param {string} input */
	function stringPercentDecode(input) {
		const bytes = encoder$1.encode(input);
		return percentDecode(bytes);
	}
	/** @param {Uint8Array} input */
	function percentDecode(input) {
		/** @type {number[]} */
		const output = [];
		for (let i$2 = 0; i$2 < input.length; i$2++) {
			const byte = input[i$2];
			if (byte !== 37) output.push(byte);
else if (byte === 37 && !/^[0-9A-Fa-f]{2}$/i.test(String.fromCharCode(input[i$2 + 1], input[i$2 + 2]))) output.push(37);
else {
				const nextTwoBytes = String.fromCharCode(input[i$2 + 1], input[i$2 + 2]);
				const bytePoint = Number.parseInt(nextTwoBytes, 16);
				output.push(bytePoint);
				i$2 += 2;
			}
		}
		return Uint8Array.from(output);
	}
	/** @param {string} input */
	function parseMIMEType$3(input) {
		input = removeHTTPWhitespace(input, true, true);
		const position$1 = { position: 0 };
		const type = collectASequenceOfCodePointsFast$1("/", input, position$1);
		if (type.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(type)) return "failure";
		if (position$1.position > input.length) return "failure";
		position$1.position++;
		let subtype = collectASequenceOfCodePointsFast$1(";", input, position$1);
		subtype = removeHTTPWhitespace(subtype, false, true);
		if (subtype.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(subtype)) return "failure";
		const typeLowercase = type.toLowerCase();
		const subtypeLowercase = subtype.toLowerCase();
		const mimeType = {
			type: typeLowercase,
			subtype: subtypeLowercase,
			parameters: new Map(),
			essence: `${typeLowercase}/${subtypeLowercase}`
		};
		while (position$1.position < input.length) {
			position$1.position++;
			collectASequenceOfCodePoints(
				// https://fetch.spec.whatwg.org/#http-whitespace
				(char) => HTTP_WHITESPACE_REGEX.test(char),
				input,
				position$1
);
			let parameterName = collectASequenceOfCodePoints((char) => char !== ";" && char !== "=", input, position$1);
			parameterName = parameterName.toLowerCase();
			if (position$1.position < input.length) {
				if (input[position$1.position] === ";") continue;
				position$1.position++;
			}
			if (position$1.position > input.length) break;
			let parameterValue = null;
			if (input[position$1.position] === "\"") {
				parameterValue = collectAnHTTPQuotedString(input, position$1, true);
				collectASequenceOfCodePointsFast$1(";", input, position$1);
			} else {
				parameterValue = collectASequenceOfCodePointsFast$1(";", input, position$1);
				parameterValue = removeHTTPWhitespace(parameterValue, false, true);
				if (parameterValue.length === 0) continue;
			}
			if (parameterName.length !== 0 && HTTP_TOKEN_CODEPOINTS.test(parameterName) && (parameterValue.length === 0 || HTTP_QUOTED_STRING_TOKENS.test(parameterValue)) && !mimeType.parameters.has(parameterName)) mimeType.parameters.set(parameterName, parameterValue);
		}
		return mimeType;
	}
	/** @param {string} data */
	function forgivingBase64(data) {
		data = data.replace(/[\u0009\u000A\u000C\u000D\u0020]/g, "");
		if (data.length % 4 === 0) data = data.replace(/=?=$/, "");
		if (data.length % 4 === 1) return "failure";
		if (/[^+/0-9A-Za-z]/.test(data)) return "failure";
		const binary = atob$1(data);
		const bytes = new Uint8Array(binary.length);
		for (let byte = 0; byte < binary.length; byte++) bytes[byte] = binary.charCodeAt(byte);
		return bytes;
	}
	/**
	* @param {string} input
	* @param {{ position: number }} position
	* @param {boolean?} extractValue
	*/
	function collectAnHTTPQuotedString(input, position$1, extractValue) {
		const positionStart = position$1.position;
		let value = "";
		assert$21(input[position$1.position] === "\"");
		position$1.position++;
		while (true) {
			value += collectASequenceOfCodePoints((char) => char !== "\"" && char !== "\\", input, position$1);
			if (position$1.position >= input.length) break;
			const quoteOrBackslash = input[position$1.position];
			position$1.position++;
			if (quoteOrBackslash === "\\") {
				if (position$1.position >= input.length) {
					value += "\\";
					break;
				}
				value += input[position$1.position];
				position$1.position++;
			} else {
				assert$21(quoteOrBackslash === "\"");
				break;
			}
		}
		if (extractValue) return value;
		return input.slice(positionStart, position$1.position);
	}
	/**
	* @see https://mimesniff.spec.whatwg.org/#serialize-a-mime-type
	*/
	function serializeAMimeType$4(mimeType) {
		assert$21(mimeType !== "failure");
		const { parameters, essence } = mimeType;
		let serialization = essence;
		for (let [name, value] of parameters.entries()) {
			serialization += ";";
			serialization += name;
			serialization += "=";
			if (!HTTP_TOKEN_CODEPOINTS.test(value)) {
				value = value.replace(/(\\|")/g, "\\$1");
				value = "\"" + value;
				value += "\"";
			}
			serialization += value;
		}
		return serialization;
	}
	/**
	* @see https://fetch.spec.whatwg.org/#http-whitespace
	* @param {string} char
	*/
	function isHTTPWhiteSpace(char) {
		return char === "\r" || char === "\n" || char === "	" || char === " ";
	}
	/**
	* @see https://fetch.spec.whatwg.org/#http-whitespace
	* @param {string} str
	*/
	function removeHTTPWhitespace(str, leading = true, trailing = true) {
		let lead = 0;
		let trail = str.length - 1;
		if (leading) for (; lead < str.length && isHTTPWhiteSpace(str[lead]); lead++);
		if (trailing) for (; trail > 0 && isHTTPWhiteSpace(str[trail]); trail--);
		return str.slice(lead, trail + 1);
	}
	/**
	* @see https://infra.spec.whatwg.org/#ascii-whitespace
	* @param {string} char
	*/
	function isASCIIWhitespace(char) {
		return char === "\r" || char === "\n" || char === "	" || char === "\f" || char === " ";
	}
	/**
	* @see https://infra.spec.whatwg.org/#strip-leading-and-trailing-ascii-whitespace
	*/
	function removeASCIIWhitespace(str, leading = true, trailing = true) {
		let lead = 0;
		let trail = str.length - 1;
		if (leading) for (; lead < str.length && isASCIIWhitespace(str[lead]); lead++);
		if (trailing) for (; trail > 0 && isASCIIWhitespace(str[trail]); trail--);
		return str.slice(lead, trail + 1);
	}
	module.exports = {
		dataURLProcessor: dataURLProcessor$1,
		URLSerializer: URLSerializer$4,
		collectASequenceOfCodePoints,
		collectASequenceOfCodePointsFast: collectASequenceOfCodePointsFast$1,
		stringPercentDecode,
		parseMIMEType: parseMIMEType$3,
		collectAnHTTPQuotedString,
		serializeAMimeType: serializeAMimeType$4
	};
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/file.js
var require_file$2 = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/file.js"(exports, module) {
	const { Blob: Blob$4, File: NativeFile$2 } = require("buffer");
	const { types: types$3 } = require("util");
	const { kState: kState$9 } = require_symbols$3();
	const { isBlobLike: isBlobLike$5 } = require_util$5();
	const { webidl: webidl$13 } = require_webidl();
	const { parseMIMEType: parseMIMEType$2, serializeAMimeType: serializeAMimeType$3 } = require_dataURL();
	const { kEnumerableProperty: kEnumerableProperty$8 } = require_util$6();
	const encoder = new TextEncoder();
	var File$2 = class File$2 extends Blob$4 {
		constructor(fileBits, fileName, options = {}) {
			webidl$13.argumentLengthCheck(arguments, 2, { header: "File constructor" });
			fileBits = webidl$13.converters["sequence<BlobPart>"](fileBits);
			fileName = webidl$13.converters.USVString(fileName);
			options = webidl$13.converters.FilePropertyBag(options);
			const n = fileName;
			let t$5 = options.type;
			let d;
			substep: {
				if (t$5) {
					t$5 = parseMIMEType$2(t$5);
					if (t$5 === "failure") {
						t$5 = "";
						break substep;
					}
					t$5 = serializeAMimeType$3(t$5).toLowerCase();
				}
				d = options.lastModified;
			}
			super(processBlobParts(fileBits, options), { type: t$5 });
			this[kState$9] = {
				name: n,
				lastModified: d,
				type: t$5
			};
		}
		get name() {
			webidl$13.brandCheck(this, File$2);
			return this[kState$9].name;
		}
		get lastModified() {
			webidl$13.brandCheck(this, File$2);
			return this[kState$9].lastModified;
		}
		get type() {
			webidl$13.brandCheck(this, File$2);
			return this[kState$9].type;
		}
	};
	var FileLike$1 = class FileLike$1 {
		constructor(blobLike, fileName, options = {}) {
			const n = fileName;
			const t$5 = options.type;
			const d = options.lastModified ?? Date.now();
			this[kState$9] = {
				blobLike,
				name: n,
				type: t$5,
				lastModified: d
			};
		}
		stream(...args) {
			webidl$13.brandCheck(this, FileLike$1);
			return this[kState$9].blobLike.stream(...args);
		}
		arrayBuffer(...args) {
			webidl$13.brandCheck(this, FileLike$1);
			return this[kState$9].blobLike.arrayBuffer(...args);
		}
		slice(...args) {
			webidl$13.brandCheck(this, FileLike$1);
			return this[kState$9].blobLike.slice(...args);
		}
		text(...args) {
			webidl$13.brandCheck(this, FileLike$1);
			return this[kState$9].blobLike.text(...args);
		}
		get size() {
			webidl$13.brandCheck(this, FileLike$1);
			return this[kState$9].blobLike.size;
		}
		get type() {
			webidl$13.brandCheck(this, FileLike$1);
			return this[kState$9].blobLike.type;
		}
		get name() {
			webidl$13.brandCheck(this, FileLike$1);
			return this[kState$9].name;
		}
		get lastModified() {
			webidl$13.brandCheck(this, FileLike$1);
			return this[kState$9].lastModified;
		}
		get [Symbol.toStringTag]() {
			return "File";
		}
	};
	Object.defineProperties(File$2.prototype, {
		[Symbol.toStringTag]: {
			value: "File",
			configurable: true
		},
		name: kEnumerableProperty$8,
		lastModified: kEnumerableProperty$8
	});
	webidl$13.converters.Blob = webidl$13.interfaceConverter(Blob$4);
	webidl$13.converters.BlobPart = function(V, opts) {
		if (webidl$13.util.Type(V) === "Object") {
			if (isBlobLike$5(V)) return webidl$13.converters.Blob(V, { strict: false });
			if (ArrayBuffer.isView(V) || types$3.isAnyArrayBuffer(V)) return webidl$13.converters.BufferSource(V, opts);
		}
		return webidl$13.converters.USVString(V, opts);
	};
	webidl$13.converters["sequence<BlobPart>"] = webidl$13.sequenceConverter(webidl$13.converters.BlobPart);
	webidl$13.converters.FilePropertyBag = webidl$13.dictionaryConverter([
		{
			key: "lastModified",
			converter: webidl$13.converters["long long"],
			get defaultValue() {
				return Date.now();
			}
		},
		{
			key: "type",
			converter: webidl$13.converters.DOMString,
			defaultValue: ""
		},
		{
			key: "endings",
			converter: (value) => {
				value = webidl$13.converters.DOMString(value);
				value = value.toLowerCase();
				if (value !== "native") value = "transparent";
				return value;
			},
			defaultValue: "transparent"
		}
	]);
	/**
	* @see https://www.w3.org/TR/FileAPI/#process-blob-parts
	* @param {(NodeJS.TypedArray|Blob|string)[]} parts
	* @param {{ type: string, endings: string }} options
	*/
	function processBlobParts(parts, options) {
		/** @type {NodeJS.TypedArray[]} */
		const bytes = [];
		for (const element of parts) if (typeof element === "string") {
			let s = element;
			if (options.endings === "native") s = convertLineEndingsNative(s);
			bytes.push(encoder.encode(s));
		} else if (types$3.isAnyArrayBuffer(element) || types$3.isTypedArray(element)) if (!element.buffer) bytes.push(new Uint8Array(element));
else bytes.push(new Uint8Array(element.buffer, element.byteOffset, element.byteLength));
else if (isBlobLike$5(element)) bytes.push(element);
		return bytes;
	}
	/**
	* @see https://www.w3.org/TR/FileAPI/#convert-line-endings-to-native
	* @param {string} s
	*/
	function convertLineEndingsNative(s) {
		let nativeLineEnding = "\n";
		if (process.platform === "win32") nativeLineEnding = "\r\n";
		return s.replace(/\r?\n/g, nativeLineEnding);
	}
	function isFileLike$1(object) {
		return NativeFile$2 && object instanceof NativeFile$2 || object instanceof File$2 || object && (typeof object.stream === "function" || typeof object.arrayBuffer === "function") && object[Symbol.toStringTag] === "File";
	}
	module.exports = {
		File: File$2,
		FileLike: FileLike$1,
		isFileLike: isFileLike$1
	};
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/formdata.js
var require_formdata = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/formdata.js"(exports, module) {
	const { isBlobLike: isBlobLike$4, toUSVString: toUSVString$2, makeIterator: makeIterator$1 } = require_util$5();
	const { kState: kState$8 } = require_symbols$3();
	const { File: UndiciFile$1, FileLike, isFileLike } = require_file$2();
	const { webidl: webidl$12 } = require_webidl();
	const { Blob: Blob$3, File: NativeFile$1 } = require("buffer");
	/** @type {globalThis['File']} */
	const File$1 = NativeFile$1 ?? UndiciFile$1;
	var FormData$2 = class FormData$2 {
		constructor(form) {
			if (form !== undefined) throw webidl$12.errors.conversionFailed({
				prefix: "FormData constructor",
				argument: "Argument 1",
				types: ["undefined"]
			});
			this[kState$8] = [];
		}
		append(name, value, filename = undefined) {
			webidl$12.brandCheck(this, FormData$2);
			webidl$12.argumentLengthCheck(arguments, 2, { header: "FormData.append" });
			if (arguments.length === 3 && !isBlobLike$4(value)) throw new TypeError("Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'");
			name = webidl$12.converters.USVString(name);
			value = isBlobLike$4(value) ? webidl$12.converters.Blob(value, { strict: false }) : webidl$12.converters.USVString(value);
			filename = arguments.length === 3 ? webidl$12.converters.USVString(filename) : undefined;
			const entry = makeEntry(name, value, filename);
			this[kState$8].push(entry);
		}
		delete(name) {
			webidl$12.brandCheck(this, FormData$2);
			webidl$12.argumentLengthCheck(arguments, 1, { header: "FormData.delete" });
			name = webidl$12.converters.USVString(name);
			this[kState$8] = this[kState$8].filter((entry) => entry.name !== name);
		}
		get(name) {
			webidl$12.brandCheck(this, FormData$2);
			webidl$12.argumentLengthCheck(arguments, 1, { header: "FormData.get" });
			name = webidl$12.converters.USVString(name);
			const idx = this[kState$8].findIndex((entry) => entry.name === name);
			if (idx === -1) return null;
			return this[kState$8][idx].value;
		}
		getAll(name) {
			webidl$12.brandCheck(this, FormData$2);
			webidl$12.argumentLengthCheck(arguments, 1, { header: "FormData.getAll" });
			name = webidl$12.converters.USVString(name);
			return this[kState$8].filter((entry) => entry.name === name).map((entry) => entry.value);
		}
		has(name) {
			webidl$12.brandCheck(this, FormData$2);
			webidl$12.argumentLengthCheck(arguments, 1, { header: "FormData.has" });
			name = webidl$12.converters.USVString(name);
			return this[kState$8].findIndex((entry) => entry.name === name) !== -1;
		}
		set(name, value, filename = undefined) {
			webidl$12.brandCheck(this, FormData$2);
			webidl$12.argumentLengthCheck(arguments, 2, { header: "FormData.set" });
			if (arguments.length === 3 && !isBlobLike$4(value)) throw new TypeError("Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'");
			name = webidl$12.converters.USVString(name);
			value = isBlobLike$4(value) ? webidl$12.converters.Blob(value, { strict: false }) : webidl$12.converters.USVString(value);
			filename = arguments.length === 3 ? toUSVString$2(filename) : undefined;
			const entry = makeEntry(name, value, filename);
			const idx = this[kState$8].findIndex((entry$1) => entry$1.name === name);
			if (idx !== -1) this[kState$8] = [
				...this[kState$8].slice(0, idx),
				entry,
				...this[kState$8].slice(idx + 1).filter((entry$1) => entry$1.name !== name)
			];
else this[kState$8].push(entry);
		}
		entries() {
			webidl$12.brandCheck(this, FormData$2);
			return makeIterator$1(() => this[kState$8].map((pair) => [pair.name, pair.value]), "FormData", "key+value");
		}
		keys() {
			webidl$12.brandCheck(this, FormData$2);
			return makeIterator$1(() => this[kState$8].map((pair) => [pair.name, pair.value]), "FormData", "key");
		}
		values() {
			webidl$12.brandCheck(this, FormData$2);
			return makeIterator$1(() => this[kState$8].map((pair) => [pair.name, pair.value]), "FormData", "value");
		}
		/**
		* @param {(value: string, key: string, self: FormData) => void} callbackFn
		* @param {unknown} thisArg
		*/
		forEach(callbackFn, thisArg = globalThis) {
			webidl$12.brandCheck(this, FormData$2);
			webidl$12.argumentLengthCheck(arguments, 1, { header: "FormData.forEach" });
			if (typeof callbackFn !== "function") throw new TypeError("Failed to execute 'forEach' on 'FormData': parameter 1 is not of type 'Function'.");
			for (const [key, value] of this) callbackFn.apply(thisArg, [
				value,
				key,
				this
			]);
		}
	};
	FormData$2.prototype[Symbol.iterator] = FormData$2.prototype.entries;
	Object.defineProperties(FormData$2.prototype, { [Symbol.toStringTag]: {
		value: "FormData",
		configurable: true
	} });
	/**
	* @see https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#create-an-entry
	* @param {string} name
	* @param {string|Blob} value
	* @param {?string} filename
	* @returns
	*/
	function makeEntry(name, value, filename) {
		name = Buffer.from(name).toString("utf8");
		if (typeof value === "string") value = Buffer.from(value).toString("utf8");
else {
			if (!isFileLike(value)) value = value instanceof Blob$3 ? new File$1([value], "blob", { type: value.type }) : new FileLike(value, "blob", { type: value.type });
			if (filename !== undefined) {
				/** @type {FilePropertyBag} */
				const options = {
					type: value.type,
					lastModified: value.lastModified
				};
				value = NativeFile$1 && value instanceof NativeFile$1 || value instanceof UndiciFile$1 ? new File$1([value], filename, options) : new FileLike(value, filename, options);
			}
		}
		return {
			name,
			value
		};
	}
	module.exports = { FormData: FormData$2 };
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/body.js
var require_body = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/body.js"(exports, module) {
	const Busboy = require_main();
	const util$19 = require_util$6();
	const { ReadableStreamFrom: ReadableStreamFrom$1, isBlobLike: isBlobLike$3, isReadableStreamLike, readableStreamClose: readableStreamClose$1, createDeferredPromise: createDeferredPromise$2, fullyReadBody: fullyReadBody$1 } = require_util$5();
	const { FormData: FormData$1 } = require_formdata();
	const { kState: kState$7 } = require_symbols$3();
	const { webidl: webidl$11 } = require_webidl();
	const { DOMException: DOMException$5, structuredClone } = require_constants$7();
	const { Blob: Blob$2, File: NativeFile } = require("buffer");
	const { kBodyUsed: kBodyUsed$1 } = require_symbols$4();
	const assert$20 = require("assert");
	const { isErrored: isErrored$1 } = require_util$6();
	const { isUint8Array: isUint8Array$2, isArrayBuffer } = require("util/types");
	const { File: UndiciFile } = require_file$2();
	const { parseMIMEType: parseMIMEType$1, serializeAMimeType: serializeAMimeType$2 } = require_dataURL();
	let ReadableStream$2 = globalThis.ReadableStream;
	/** @type {globalThis['File']} */
	const File = NativeFile ?? UndiciFile;
	const textEncoder$1 = new TextEncoder();
	const textDecoder = new TextDecoder();
	function extractBody$3(object, keepalive = false) {
		if (!ReadableStream$2) ReadableStream$2 = require("stream/web").ReadableStream;
		let stream$3 = null;
		if (object instanceof ReadableStream$2) stream$3 = object;
else if (isBlobLike$3(object)) stream$3 = object.stream();
else stream$3 = new ReadableStream$2({
			async pull(controller) {
				controller.enqueue(typeof source === "string" ? textEncoder$1.encode(source) : source);
				queueMicrotask(() => readableStreamClose$1(controller));
			},
			start() {},
			type: undefined
		});
		assert$20(isReadableStreamLike(stream$3));
		let action = null;
		let source = null;
		let length = null;
		let type = null;
		if (typeof object === "string") {
			source = object;
			type = "text/plain;charset=UTF-8";
		} else if (object instanceof URLSearchParams) {
			source = object.toString();
			type = "application/x-www-form-urlencoded;charset=UTF-8";
		} else if (isArrayBuffer(object)) source = new Uint8Array(object.slice());
else if (ArrayBuffer.isView(object)) source = new Uint8Array(object.buffer.slice(object.byteOffset, object.byteOffset + object.byteLength));
else if (util$19.isFormDataLike(object)) {
			const boundary = `----formdata-undici-0${`${Math.floor(Math.random() * 1e11)}`.padStart(11, "0")}`;
			const prefix$1 = `--${boundary}\r\nContent-Disposition: form-data`;
			/*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */
			const escape$1 = (str) => str.replace(/\n/g, "%0A").replace(/\r/g, "%0D").replace(/"/g, "%22");
			const normalizeLinefeeds = (value) => value.replace(/\r?\n|\r/g, "\r\n");
			const blobParts = [];
			const rn = new Uint8Array([13, 10]);
			length = 0;
			let hasUnknownSizeValue = false;
			for (const [name, value] of object) if (typeof value === "string") {
				const chunk$1 = textEncoder$1.encode(prefix$1 + `; name="${escape$1(normalizeLinefeeds(name))}"` + `\r\n\r\n${normalizeLinefeeds(value)}\r\n`);
				blobParts.push(chunk$1);
				length += chunk$1.byteLength;
			} else {
				const chunk$1 = textEncoder$1.encode(`${prefix$1}; name="${escape$1(normalizeLinefeeds(name))}"` + (value.name ? `; filename="${escape$1(value.name)}"` : "") + "\r\n" + `Content-Type: ${value.type || "application/octet-stream"}\r\n\r\n`);
				blobParts.push(chunk$1, value, rn);
				if (typeof value.size === "number") length += chunk$1.byteLength + value.size + rn.byteLength;
else hasUnknownSizeValue = true;
			}
			const chunk = textEncoder$1.encode(`--${boundary}--`);
			blobParts.push(chunk);
			length += chunk.byteLength;
			if (hasUnknownSizeValue) length = null;
			source = object;
			action = async function* () {
				for (const part of blobParts) if (part.stream) yield* part.stream();
else yield part;
			};
			type = "multipart/form-data; boundary=" + boundary;
		} else if (isBlobLike$3(object)) {
			source = object;
			length = object.size;
			if (object.type) type = object.type;
		} else if (typeof object[Symbol.asyncIterator] === "function") {
			if (keepalive) throw new TypeError("keepalive");
			if (util$19.isDisturbed(object) || object.locked) throw new TypeError("Response body object should not be disturbed or locked");
			stream$3 = object instanceof ReadableStream$2 ? object : ReadableStreamFrom$1(object);
		}
		if (typeof source === "string" || util$19.isBuffer(source)) length = Buffer.byteLength(source);
		if (action != null) {
			let iterator$1;
			stream$3 = new ReadableStream$2({
				async start() {
					iterator$1 = action(object)[Symbol.asyncIterator]();
				},
				async pull(controller) {
					const { value, done } = await iterator$1.next();
					if (done) queueMicrotask(() => {
						controller.close();
					});
else if (!isErrored$1(stream$3)) controller.enqueue(new Uint8Array(value));
					return controller.desiredSize > 0;
				},
				async cancel(reason) {
					await iterator$1.return();
				},
				type: undefined
			});
		}
		const body = {
			stream: stream$3,
			source,
			length
		};
		return [body, type];
	}
	function safelyExtractBody$1(object, keepalive = false) {
		if (!ReadableStream$2) ReadableStream$2 = require("stream/web").ReadableStream;
		if (object instanceof ReadableStream$2) {
			assert$20(!util$19.isDisturbed(object), "The body has already been consumed.");
			assert$20(!object.locked, "The stream is locked.");
		}
		return extractBody$3(object, keepalive);
	}
	function cloneBody$2(body) {
		const [out1, out2] = body.stream.tee();
		const out2Clone = structuredClone(out2, { transfer: [out2] });
		const [, finalClone] = out2Clone.tee();
		body.stream = out1;
		return {
			stream: finalClone,
			length: body.length,
			source: body.source
		};
	}
	async function* consumeBody(body) {
		if (body) if (isUint8Array$2(body)) yield body;
else {
			const stream$3 = body.stream;
			if (util$19.isDisturbed(stream$3)) throw new TypeError("The body has already been consumed.");
			if (stream$3.locked) throw new TypeError("The stream is locked.");
			stream$3[kBodyUsed$1] = true;
			yield* stream$3;
		}
	}
	function throwIfAborted(state) {
		if (state.aborted) throw new DOMException$5("The operation was aborted.", "AbortError");
	}
	function bodyMixinMethods(instance) {
		const methods = {
			blob() {
				return specConsumeBody(this, (bytes) => {
					let mimeType = bodyMimeType(this);
					if (mimeType === "failure") mimeType = "";
else if (mimeType) mimeType = serializeAMimeType$2(mimeType);
					return new Blob$2([bytes], { type: mimeType });
				}, instance);
			},
			arrayBuffer() {
				return specConsumeBody(this, (bytes) => {
					return new Uint8Array(bytes).buffer;
				}, instance);
			},
			text() {
				return specConsumeBody(this, utf8DecodeBytes, instance);
			},
			json() {
				return specConsumeBody(this, parseJSONFromBytes, instance);
			},
			async formData() {
				webidl$11.brandCheck(this, instance);
				throwIfAborted(this[kState$7]);
				const contentType = this.headers.get("Content-Type");
				if (/multipart\/form-data/.test(contentType)) {
					const headers = {};
					for (const [key, value] of this.headers) headers[key.toLowerCase()] = value;
					const responseFormData = new FormData$1();
					let busboy;
					try {
						busboy = new Busboy({
							headers,
							preservePath: true
						});
					} catch (err) {
						throw new DOMException$5(`${err}`, "AbortError");
					}
					busboy.on("field", (name, value) => {
						responseFormData.append(name, value);
					});
					busboy.on("file", (name, value, filename, encoding, mimeType) => {
						const chunks = [];
						if (encoding === "base64" || encoding.toLowerCase() === "base64") {
							let base64chunk = "";
							value.on("data", (chunk) => {
								base64chunk += chunk.toString().replace(/[\r\n]/gm, "");
								const end = base64chunk.length - base64chunk.length % 4;
								chunks.push(Buffer.from(base64chunk.slice(0, end), "base64"));
								base64chunk = base64chunk.slice(end);
							});
							value.on("end", () => {
								chunks.push(Buffer.from(base64chunk, "base64"));
								responseFormData.append(name, new File(chunks, filename, { type: mimeType }));
							});
						} else {
							value.on("data", (chunk) => {
								chunks.push(chunk);
							});
							value.on("end", () => {
								responseFormData.append(name, new File(chunks, filename, { type: mimeType }));
							});
						}
					});
					const busboyResolve = new Promise((resolve$1, reject) => {
						busboy.on("finish", resolve$1);
						busboy.on("error", (err) => reject(new TypeError(err)));
					});
					if (this.body !== null) for await (const chunk of consumeBody(this[kState$7].body)) busboy.write(chunk);
					busboy.end();
					await busboyResolve;
					return responseFormData;
				} else if (/application\/x-www-form-urlencoded/.test(contentType)) {
					let entries;
					try {
						let text$3 = "";
						const streamingDecoder = new TextDecoder("utf-8", { ignoreBOM: true });
						for await (const chunk of consumeBody(this[kState$7].body)) {
							if (!isUint8Array$2(chunk)) throw new TypeError("Expected Uint8Array chunk");
							text$3 += streamingDecoder.decode(chunk, { stream: true });
						}
						text$3 += streamingDecoder.decode();
						entries = new URLSearchParams(text$3);
					} catch (err) {
						throw Object.assign(new TypeError(), { cause: err });
					}
					const formData = new FormData$1();
					for (const [name, value] of entries) formData.append(name, value);
					return formData;
				} else {
					await Promise.resolve();
					throwIfAborted(this[kState$7]);
					throw webidl$11.errors.exception({
						header: `${instance.name}.formData`,
						message: "Could not parse content as FormData."
					});
				}
			}
		};
		return methods;
	}
	function mixinBody$2(prototype) {
		Object.assign(prototype.prototype, bodyMixinMethods(prototype));
	}
	/**
	* @see https://fetch.spec.whatwg.org/#concept-body-consume-body
	* @param {Response|Request} object
	* @param {(value: unknown) => unknown} convertBytesToJSValue
	* @param {Response|Request} instance
	*/
	async function specConsumeBody(object, convertBytesToJSValue, instance) {
		webidl$11.brandCheck(object, instance);
		throwIfAborted(object[kState$7]);
		if (bodyUnusable(object[kState$7].body)) throw new TypeError("Body is unusable");
		const promise$1 = createDeferredPromise$2();
		const errorSteps = (error$2) => promise$1.reject(error$2);
		const successSteps = (data) => {
			try {
				promise$1.resolve(convertBytesToJSValue(data));
			} catch (e) {
				errorSteps(e);
			}
		};
		if (object[kState$7].body == null) {
			successSteps(new Uint8Array());
			return promise$1.promise;
		}
		await fullyReadBody$1(object[kState$7].body, successSteps, errorSteps);
		return promise$1.promise;
	}
	function bodyUnusable(body) {
		return body != null && (body.stream.locked || util$19.isDisturbed(body.stream));
	}
	/**
	* @see https://encoding.spec.whatwg.org/#utf-8-decode
	* @param {Buffer} buffer
	*/
	function utf8DecodeBytes(buffer$1) {
		if (buffer$1.length === 0) return "";
		if (buffer$1[0] === 239 && buffer$1[1] === 187 && buffer$1[2] === 191) buffer$1 = buffer$1.subarray(3);
		const output = textDecoder.decode(buffer$1);
		return output;
	}
	/**
	* @see https://infra.spec.whatwg.org/#parse-json-bytes-to-a-javascript-value
	* @param {Uint8Array} bytes
	*/
	function parseJSONFromBytes(bytes) {
		return JSON.parse(utf8DecodeBytes(bytes));
	}
	/**
	* @see https://fetch.spec.whatwg.org/#concept-body-mime-type
	* @param {import('./response').Response|import('./request').Request} object
	*/
	function bodyMimeType(object) {
		const { headersList } = object[kState$7];
		const contentType = headersList.get("content-type");
		if (contentType === null) return "failure";
		return parseMIMEType$1(contentType);
	}
	module.exports = {
		extractBody: extractBody$3,
		safelyExtractBody: safelyExtractBody$1,
		cloneBody: cloneBody$2,
		mixinBody: mixinBody$2
	};
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/core/request.js
var require_request$1 = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/core/request.js"(exports, module) {
	const { InvalidArgumentError: InvalidArgumentError$20, NotSupportedError: NotSupportedError$1 } = require_errors();
	const assert$19 = require("assert");
	const { kHTTP2BuildRequest: kHTTP2BuildRequest$1, kHTTP2CopyHeaders: kHTTP2CopyHeaders$1, kHTTP1BuildRequest: kHTTP1BuildRequest$1 } = require_symbols$4();
	const util$18 = require_util$6();
	/**
	* Verifies that the given val is a valid HTTP token
	* per the rules defined in RFC 7230
	* See https://tools.ietf.org/html/rfc7230#section-3.2.6
	*/
	const tokenRegExp = /^[\^_`a-zA-Z\-0-9!#$%&'*+.|~]+$/;
	/**
	* Matches if val contains an invalid field-vchar
	*  field-value    = *( field-content / obs-fold )
	*  field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]
	*  field-vchar    = VCHAR / obs-text
	*/
	const headerCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
	const invalidPathRegex = /[^\u0021-\u00ff]/;
	const kHandler = Symbol("handler");
	const channels$3 = {};
	let extractBody$2;
	try {
		const diagnosticsChannel$2 = require("diagnostics_channel");
		channels$3.create = diagnosticsChannel$2.channel("undici:request:create");
		channels$3.bodySent = diagnosticsChannel$2.channel("undici:request:bodySent");
		channels$3.headers = diagnosticsChannel$2.channel("undici:request:headers");
		channels$3.trailers = diagnosticsChannel$2.channel("undici:request:trailers");
		channels$3.error = diagnosticsChannel$2.channel("undici:request:error");
	} catch {
		channels$3.create = { hasSubscribers: false };
		channels$3.bodySent = { hasSubscribers: false };
		channels$3.headers = { hasSubscribers: false };
		channels$3.trailers = { hasSubscribers: false };
		channels$3.error = { hasSubscribers: false };
	}
	var Request$4 = class Request$4 {
		constructor(origin, { path: path$72, method, body, headers, query, idempotent, blocking, upgrade: upgrade$1, headersTimeout, bodyTimeout, reset, throwOnError, expectContinue }, handler$1) {
			if (typeof path$72 !== "string") throw new InvalidArgumentError$20("path must be a string");
else if (path$72[0] !== "/" && !(path$72.startsWith("http://") || path$72.startsWith("https://")) && method !== "CONNECT") throw new InvalidArgumentError$20("path must be an absolute URL or start with a slash");
else if (invalidPathRegex.exec(path$72) !== null) throw new InvalidArgumentError$20("invalid request path");
			if (typeof method !== "string") throw new InvalidArgumentError$20("method must be a string");
else if (tokenRegExp.exec(method) === null) throw new InvalidArgumentError$20("invalid request method");
			if (upgrade$1 && typeof upgrade$1 !== "string") throw new InvalidArgumentError$20("upgrade must be a string");
			if (headersTimeout != null && (!Number.isFinite(headersTimeout) || headersTimeout < 0)) throw new InvalidArgumentError$20("invalid headersTimeout");
			if (bodyTimeout != null && (!Number.isFinite(bodyTimeout) || bodyTimeout < 0)) throw new InvalidArgumentError$20("invalid bodyTimeout");
			if (reset != null && typeof reset !== "boolean") throw new InvalidArgumentError$20("invalid reset");
			if (expectContinue != null && typeof expectContinue !== "boolean") throw new InvalidArgumentError$20("invalid expectContinue");
			this.headersTimeout = headersTimeout;
			this.bodyTimeout = bodyTimeout;
			this.throwOnError = throwOnError === true;
			this.method = method;
			this.abort = null;
			if (body == null) this.body = null;
else if (util$18.isStream(body)) {
				this.body = body;
				const rState = this.body._readableState;
				if (!rState || !rState.autoDestroy) {
					this.endHandler = function autoDestroy() {
						util$18.destroy(this);
					};
					this.body.on("end", this.endHandler);
				}
				this.errorHandler = (err) => {
					if (this.abort) this.abort(err);
else this.error = err;
				};
				this.body.on("error", this.errorHandler);
			} else if (util$18.isBuffer(body)) this.body = body.byteLength ? body : null;
else if (ArrayBuffer.isView(body)) this.body = body.buffer.byteLength ? Buffer.from(body.buffer, body.byteOffset, body.byteLength) : null;
else if (body instanceof ArrayBuffer) this.body = body.byteLength ? Buffer.from(body) : null;
else if (typeof body === "string") this.body = body.length ? Buffer.from(body) : null;
else if (util$18.isFormDataLike(body) || util$18.isIterable(body) || util$18.isBlobLike(body)) this.body = body;
else throw new InvalidArgumentError$20("body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable");
			this.completed = false;
			this.aborted = false;
			this.upgrade = upgrade$1 || null;
			this.path = query ? util$18.buildURL(path$72, query) : path$72;
			this.origin = origin;
			this.idempotent = idempotent == null ? method === "HEAD" || method === "GET" : idempotent;
			this.blocking = blocking == null ? false : blocking;
			this.reset = reset == null ? null : reset;
			this.host = null;
			this.contentLength = null;
			this.contentType = null;
			this.headers = "";
			this.expectContinue = expectContinue != null ? expectContinue : false;
			if (Array.isArray(headers)) {
				if (headers.length % 2 !== 0) throw new InvalidArgumentError$20("headers array must be even");
				for (let i$2 = 0; i$2 < headers.length; i$2 += 2) processHeader(this, headers[i$2], headers[i$2 + 1]);
			} else if (headers && typeof headers === "object") {
				const keys = Object.keys(headers);
				for (let i$2 = 0; i$2 < keys.length; i$2++) {
					const key = keys[i$2];
					processHeader(this, key, headers[key]);
				}
			} else if (headers != null) throw new InvalidArgumentError$20("headers must be an object or an array");
			if (util$18.isFormDataLike(this.body)) {
				if (util$18.nodeMajor < 16 || util$18.nodeMajor === 16 && util$18.nodeMinor < 8) throw new InvalidArgumentError$20("Form-Data bodies are only supported in node v16.8 and newer.");
				if (!extractBody$2) extractBody$2 = require_body().extractBody;
				const [bodyStream, contentType] = extractBody$2(body);
				if (this.contentType == null) {
					this.contentType = contentType;
					this.headers += `content-type: ${contentType}\r\n`;
				}
				this.body = bodyStream.stream;
				this.contentLength = bodyStream.length;
			} else if (util$18.isBlobLike(body) && this.contentType == null && body.type) {
				this.contentType = body.type;
				this.headers += `content-type: ${body.type}\r\n`;
			}
			util$18.validateHandler(handler$1, method, upgrade$1);
			this.servername = util$18.getServerName(this.host);
			this[kHandler] = handler$1;
			if (channels$3.create.hasSubscribers) channels$3.create.publish({ request: this });
		}
		onBodySent(chunk) {
			if (this[kHandler].onBodySent) try {
				return this[kHandler].onBodySent(chunk);
			} catch (err) {
				this.abort(err);
			}
		}
		onRequestSent() {
			if (channels$3.bodySent.hasSubscribers) channels$3.bodySent.publish({ request: this });
			if (this[kHandler].onRequestSent) try {
				return this[kHandler].onRequestSent();
			} catch (err) {
				this.abort(err);
			}
		}
		onConnect(abort$1) {
			assert$19(!this.aborted);
			assert$19(!this.completed);
			if (this.error) abort$1(this.error);
else {
				this.abort = abort$1;
				return this[kHandler].onConnect(abort$1);
			}
		}
		onHeaders(statusCode, headers, resume$1, statusText) {
			assert$19(!this.aborted);
			assert$19(!this.completed);
			if (channels$3.headers.hasSubscribers) channels$3.headers.publish({
				request: this,
				response: {
					statusCode,
					headers,
					statusText
				}
			});
			try {
				return this[kHandler].onHeaders(statusCode, headers, resume$1, statusText);
			} catch (err) {
				this.abort(err);
			}
		}
		onData(chunk) {
			assert$19(!this.aborted);
			assert$19(!this.completed);
			try {
				return this[kHandler].onData(chunk);
			} catch (err) {
				this.abort(err);
				return false;
			}
		}
		onUpgrade(statusCode, headers, socket) {
			assert$19(!this.aborted);
			assert$19(!this.completed);
			return this[kHandler].onUpgrade(statusCode, headers, socket);
		}
		onComplete(trailers) {
			this.onFinally();
			assert$19(!this.aborted);
			this.completed = true;
			if (channels$3.trailers.hasSubscribers) channels$3.trailers.publish({
				request: this,
				trailers
			});
			try {
				return this[kHandler].onComplete(trailers);
			} catch (err) {
				this.onError(err);
			}
		}
		onError(error$2) {
			this.onFinally();
			if (channels$3.error.hasSubscribers) channels$3.error.publish({
				request: this,
				error: error$2
			});
			if (this.aborted) return;
			this.aborted = true;
			return this[kHandler].onError(error$2);
		}
		onFinally() {
			if (this.errorHandler) {
				this.body.off("error", this.errorHandler);
				this.errorHandler = null;
			}
			if (this.endHandler) {
				this.body.off("end", this.endHandler);
				this.endHandler = null;
			}
		}
		addHeader(key, value) {
			processHeader(this, key, value);
			return this;
		}
		static [kHTTP1BuildRequest$1](origin, opts, handler$1) {
			return new Request$4(origin, opts, handler$1);
		}
		static [kHTTP2BuildRequest$1](origin, opts, handler$1) {
			const headers = opts.headers;
			opts = {
				...opts,
				headers: null
			};
			const request$2 = new Request$4(origin, opts, handler$1);
			request$2.headers = {};
			if (Array.isArray(headers)) {
				if (headers.length % 2 !== 0) throw new InvalidArgumentError$20("headers array must be even");
				for (let i$2 = 0; i$2 < headers.length; i$2 += 2) processHeader(request$2, headers[i$2], headers[i$2 + 1], true);
			} else if (headers && typeof headers === "object") {
				const keys = Object.keys(headers);
				for (let i$2 = 0; i$2 < keys.length; i$2++) {
					const key = keys[i$2];
					processHeader(request$2, key, headers[key], true);
				}
			} else if (headers != null) throw new InvalidArgumentError$20("headers must be an object or an array");
			return request$2;
		}
		static [kHTTP2CopyHeaders$1](raw) {
			const rawHeaders = raw.split("\r\n");
			const headers = {};
			for (const header of rawHeaders) {
				const [key, value] = header.split(": ");
				if (value == null || value.length === 0) continue;
				if (headers[key]) headers[key] += `,${value}`;
else headers[key] = value;
			}
			return headers;
		}
	};
	function processHeaderValue(key, val, skipAppend) {
		if (val && typeof val === "object") throw new InvalidArgumentError$20(`invalid ${key} header`);
		val = val != null ? `${val}` : "";
		if (headerCharRegex.exec(val) !== null) throw new InvalidArgumentError$20(`invalid ${key} header`);
		return skipAppend ? val : `${key}: ${val}\r\n`;
	}
	function processHeader(request$2, key, val, skipAppend = false) {
		if (val && (typeof val === "object" && !Array.isArray(val))) throw new InvalidArgumentError$20(`invalid ${key} header`);
else if (val === undefined) return;
		if (request$2.host === null && key.length === 4 && key.toLowerCase() === "host") {
			if (headerCharRegex.exec(val) !== null) throw new InvalidArgumentError$20(`invalid ${key} header`);
			request$2.host = val;
		} else if (request$2.contentLength === null && key.length === 14 && key.toLowerCase() === "content-length") {
			request$2.contentLength = parseInt(val, 10);
			if (!Number.isFinite(request$2.contentLength)) throw new InvalidArgumentError$20("invalid content-length header");
		} else if (request$2.contentType === null && key.length === 12 && key.toLowerCase() === "content-type") {
			request$2.contentType = val;
			if (skipAppend) request$2.headers[key] = processHeaderValue(key, val, skipAppend);
else request$2.headers += processHeaderValue(key, val);
		} else if (key.length === 17 && key.toLowerCase() === "transfer-encoding") throw new InvalidArgumentError$20("invalid transfer-encoding header");
else if (key.length === 10 && key.toLowerCase() === "connection") {
			const value = typeof val === "string" ? val.toLowerCase() : null;
			if (value !== "close" && value !== "keep-alive") throw new InvalidArgumentError$20("invalid connection header");
else if (value === "close") request$2.reset = true;
		} else if (key.length === 10 && key.toLowerCase() === "keep-alive") throw new InvalidArgumentError$20("invalid keep-alive header");
else if (key.length === 7 && key.toLowerCase() === "upgrade") throw new InvalidArgumentError$20("invalid upgrade header");
else if (key.length === 6 && key.toLowerCase() === "expect") throw new NotSupportedError$1("expect header not supported");
else if (tokenRegExp.exec(key) === null) throw new InvalidArgumentError$20("invalid header key");
else if (Array.isArray(val)) for (let i$2 = 0; i$2 < val.length; i$2++) if (skipAppend) if (request$2.headers[key]) request$2.headers[key] += `,${processHeaderValue(key, val[i$2], skipAppend)}`;
else request$2.headers[key] = processHeaderValue(key, val[i$2], skipAppend);
else request$2.headers += processHeaderValue(key, val[i$2]);
else if (skipAppend) request$2.headers[key] = processHeaderValue(key, val, skipAppend);
else request$2.headers += processHeaderValue(key, val);
	}
	module.exports = Request$4;
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/dispatcher.js
var require_dispatcher = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/dispatcher.js"(exports, module) {
	const EventEmitter$2 = require("events");
	var Dispatcher$3 = class extends EventEmitter$2 {
		dispatch() {
			throw new Error("not implemented");
		}
		close() {
			throw new Error("not implemented");
		}
		destroy() {
			throw new Error("not implemented");
		}
	};
	module.exports = Dispatcher$3;
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/dispatcher-base.js
var require_dispatcher_base = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/dispatcher-base.js"(exports, module) {
	const Dispatcher$2 = require_dispatcher();
	const { ClientDestroyedError: ClientDestroyedError$1, ClientClosedError, InvalidArgumentError: InvalidArgumentError$19 } = require_errors();
	const { kDestroy: kDestroy$4, kClose: kClose$6, kDispatch: kDispatch$3, kInterceptors: kInterceptors$5 } = require_symbols$4();
	const kDestroyed = Symbol("destroyed");
	const kClosed = Symbol("closed");
	const kOnDestroyed = Symbol("onDestroyed");
	const kOnClosed = Symbol("onClosed");
	const kInterceptedDispatch = Symbol("Intercepted Dispatch");
	var DispatcherBase$4 = class extends Dispatcher$2 {
		constructor() {
			super();
			this[kDestroyed] = false;
			this[kOnDestroyed] = null;
			this[kClosed] = false;
			this[kOnClosed] = [];
		}
		get destroyed() {
			return this[kDestroyed];
		}
		get closed() {
			return this[kClosed];
		}
		get interceptors() {
			return this[kInterceptors$5];
		}
		set interceptors(newInterceptors) {
			if (newInterceptors) for (let i$2 = newInterceptors.length - 1; i$2 >= 0; i$2--) {
				const interceptor = this[kInterceptors$5][i$2];
				if (typeof interceptor !== "function") throw new InvalidArgumentError$19("interceptor must be an function");
			}
			this[kInterceptors$5] = newInterceptors;
		}
		close(callback) {
			if (callback === undefined) return new Promise((resolve$1, reject) => {
				this.close((err, data) => {
					return err ? reject(err) : resolve$1(data);
				});
			});
			if (typeof callback !== "function") throw new InvalidArgumentError$19("invalid callback");
			if (this[kDestroyed]) {
				queueMicrotask(() => callback(new ClientDestroyedError$1(), null));
				return;
			}
			if (this[kClosed]) {
				if (this[kOnClosed]) this[kOnClosed].push(callback);
else queueMicrotask(() => callback(null, null));
				return;
			}
			this[kClosed] = true;
			this[kOnClosed].push(callback);
			const onClosed = () => {
				const callbacks = this[kOnClosed];
				this[kOnClosed] = null;
				for (let i$2 = 0; i$2 < callbacks.length; i$2++) callbacks[i$2](null, null);
			};
			this[kClose$6]().then(() => this.destroy()).then(() => {
				queueMicrotask(onClosed);
			});
		}
		destroy(err, callback) {
			if (typeof err === "function") {
				callback = err;
				err = null;
			}
			if (callback === undefined) return new Promise((resolve$1, reject) => {
				this.destroy(err, (err$1, data) => {
					return err$1 ? reject(err$1) : resolve$1(data);
				});
			});
			if (typeof callback !== "function") throw new InvalidArgumentError$19("invalid callback");
			if (this[kDestroyed]) {
				if (this[kOnDestroyed]) this[kOnDestroyed].push(callback);
else queueMicrotask(() => callback(null, null));
				return;
			}
			if (!err) err = new ClientDestroyedError$1();
			this[kDestroyed] = true;
			this[kOnDestroyed] = this[kOnDestroyed] || [];
			this[kOnDestroyed].push(callback);
			const onDestroyed = () => {
				const callbacks = this[kOnDestroyed];
				this[kOnDestroyed] = null;
				for (let i$2 = 0; i$2 < callbacks.length; i$2++) callbacks[i$2](null, null);
			};
			this[kDestroy$4](err).then(() => {
				queueMicrotask(onDestroyed);
			});
		}
		[kInterceptedDispatch](opts, handler$1) {
			if (!this[kInterceptors$5] || this[kInterceptors$5].length === 0) {
				this[kInterceptedDispatch] = this[kDispatch$3];
				return this[kDispatch$3](opts, handler$1);
			}
			let dispatch = this[kDispatch$3].bind(this);
			for (let i$2 = this[kInterceptors$5].length - 1; i$2 >= 0; i$2--) dispatch = this[kInterceptors$5][i$2](dispatch);
			this[kInterceptedDispatch] = dispatch;
			return dispatch(opts, handler$1);
		}
		dispatch(opts, handler$1) {
			if (!handler$1 || typeof handler$1 !== "object") throw new InvalidArgumentError$19("handler must be an object");
			try {
				if (!opts || typeof opts !== "object") throw new InvalidArgumentError$19("opts must be an object.");
				if (this[kDestroyed] || this[kOnDestroyed]) throw new ClientDestroyedError$1();
				if (this[kClosed]) throw new ClientClosedError();
				return this[kInterceptedDispatch](opts, handler$1);
			} catch (err) {
				if (typeof handler$1.onError !== "function") throw new InvalidArgumentError$19("invalid onError method");
				handler$1.onError(err);
				return false;
			}
		}
	};
	module.exports = DispatcherBase$4;
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/core/connect.js
var require_connect = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/core/connect.js"(exports, module) {
	const net$1 = require("net");
	const assert$18 = require("assert");
	const util$17 = require_util$6();
	const { InvalidArgumentError: InvalidArgumentError$18, ConnectTimeoutError } = require_errors();
	let tls;
	let SessionCache;
	if (global.FinalizationRegistry && !process.env.NODE_V8_COVERAGE) SessionCache = class WeakSessionCache {
		constructor(maxCachedSessions) {
			this._maxCachedSessions = maxCachedSessions;
			this._sessionCache = new Map();
			this._sessionRegistry = new global.FinalizationRegistry((key) => {
				if (this._sessionCache.size < this._maxCachedSessions) return;
				const ref = this._sessionCache.get(key);
				if (ref !== undefined && ref.deref() === undefined) this._sessionCache.delete(key);
			});
		}
		get(sessionKey) {
			const ref = this._sessionCache.get(sessionKey);
			return ref ? ref.deref() : null;
		}
		set(sessionKey, session) {
			if (this._maxCachedSessions === 0) return;
			this._sessionCache.set(sessionKey, new WeakRef(session));
			this._sessionRegistry.register(session, sessionKey);
		}
	};
else SessionCache = class SimpleSessionCache {
		constructor(maxCachedSessions) {
			this._maxCachedSessions = maxCachedSessions;
			this._sessionCache = new Map();
		}
		get(sessionKey) {
			return this._sessionCache.get(sessionKey);
		}
		set(sessionKey, session) {
			if (this._maxCachedSessions === 0) return;
			if (this._sessionCache.size >= this._maxCachedSessions) {
				const { value: oldestKey } = this._sessionCache.keys().next();
				this._sessionCache.delete(oldestKey);
			}
			this._sessionCache.set(sessionKey, session);
		}
	};
	function buildConnector$4({ allowH2, maxCachedSessions, socketPath, timeout,...opts }) {
		if (maxCachedSessions != null && (!Number.isInteger(maxCachedSessions) || maxCachedSessions < 0)) throw new InvalidArgumentError$18("maxCachedSessions must be a positive integer or zero");
		const options = {
			path: socketPath,
			...opts
		};
		const sessionCache = new SessionCache(maxCachedSessions == null ? 100 : maxCachedSessions);
		timeout = timeout == null ? 1e4 : timeout;
		allowH2 = allowH2 != null ? allowH2 : false;
		return function connect$2({ hostname, host, protocol, port, servername, localAddress, httpSocket }, callback) {
			let socket;
			if (protocol === "https:") {
				if (!tls) tls = require("tls");
				servername = servername || options.servername || util$17.getServerName(host) || null;
				const sessionKey = servername || hostname;
				const session = sessionCache.get(sessionKey) || null;
				assert$18(sessionKey);
				socket = tls.connect({
					highWaterMark: 16384,
					...options,
					servername,
					session,
					localAddress,
					ALPNProtocols: allowH2 ? ["http/1.1", "h2"] : ["http/1.1"],
					socket: httpSocket,
					port: port || 443,
					host: hostname
				});
				socket.on("session", function(session$1) {
					sessionCache.set(sessionKey, session$1);
				});
			} else {
				assert$18(!httpSocket, "httpSocket can only be sent on TLS update");
				socket = net$1.connect({
					highWaterMark: 65536,
					...options,
					localAddress,
					port: port || 80,
					host: hostname
				});
			}
			if (options.keepAlive == null || options.keepAlive) {
				const keepAliveInitialDelay = options.keepAliveInitialDelay === undefined ? 6e4 : options.keepAliveInitialDelay;
				socket.setKeepAlive(true, keepAliveInitialDelay);
			}
			const cancelTimeout = setupTimeout(() => onConnectTimeout(socket), timeout);
			socket.setNoDelay(true).once(protocol === "https:" ? "secureConnect" : "connect", function() {
				cancelTimeout();
				if (callback) {
					const cb = callback;
					callback = null;
					cb(null, this);
				}
			}).on("error", function(err) {
				cancelTimeout();
				if (callback) {
					const cb = callback;
					callback = null;
					cb(err);
				}
			});
			return socket;
		};
	}
	function setupTimeout(onConnectTimeout$1, timeout) {
		if (!timeout) return () => {};
		let s1 = null;
		let s2 = null;
		const timeoutId = setTimeout(() => {
			s1 = setImmediate(() => {
				if (process.platform === "win32") s2 = setImmediate(() => onConnectTimeout$1());
else onConnectTimeout$1();
			});
		}, timeout);
		return () => {
			clearTimeout(timeoutId);
			clearImmediate(s1);
			clearImmediate(s2);
		};
	}
	function onConnectTimeout(socket) {
		util$17.destroy(socket, new ConnectTimeoutError());
	}
	module.exports = buildConnector$4;
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/llhttp/utils.js
var require_utils$7 = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/llhttp/utils.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.enumToMap = void 0;
	function enumToMap(obj) {
		const res = {};
		Object.keys(obj).forEach((key) => {
			const value = obj[key];
			if (typeof value === "number") res[key] = value;
		});
		return res;
	}
	exports.enumToMap = enumToMap;
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/llhttp/constants.js
var require_constants$6 = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/llhttp/constants.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.SPECIAL_HEADERS = exports.HEADER_STATE = exports.MINOR = exports.MAJOR = exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS = exports.TOKEN = exports.STRICT_TOKEN = exports.HEX = exports.URL_CHAR = exports.STRICT_URL_CHAR = exports.USERINFO_CHARS = exports.MARK = exports.ALPHANUM = exports.NUM = exports.HEX_MAP = exports.NUM_MAP = exports.ALPHA = exports.FINISH = exports.H_METHOD_MAP = exports.METHOD_MAP = exports.METHODS_RTSP = exports.METHODS_ICE = exports.METHODS_HTTP = exports.METHODS = exports.LENIENT_FLAGS = exports.FLAGS = exports.TYPE = exports.ERROR = void 0;
	const utils_1$2 = require_utils$7();
	var ERROR;
	(function(ERROR$1) {
		ERROR$1[ERROR$1["OK"] = 0] = "OK";
		ERROR$1[ERROR$1["INTERNAL"] = 1] = "INTERNAL";
		ERROR$1[ERROR$1["STRICT"] = 2] = "STRICT";
		ERROR$1[ERROR$1["LF_EXPECTED"] = 3] = "LF_EXPECTED";
		ERROR$1[ERROR$1["UNEXPECTED_CONTENT_LENGTH"] = 4] = "UNEXPECTED_CONTENT_LENGTH";
		ERROR$1[ERROR$1["CLOSED_CONNECTION"] = 5] = "CLOSED_CONNECTION";
		ERROR$1[ERROR$1["INVALID_METHOD"] = 6] = "INVALID_METHOD";
		ERROR$1[ERROR$1["INVALID_URL"] = 7] = "INVALID_URL";
		ERROR$1[ERROR$1["INVALID_CONSTANT"] = 8] = "INVALID_CONSTANT";
		ERROR$1[ERROR$1["INVALID_VERSION"] = 9] = "INVALID_VERSION";
		ERROR$1[ERROR$1["INVALID_HEADER_TOKEN"] = 10] = "INVALID_HEADER_TOKEN";
		ERROR$1[ERROR$1["INVALID_CONTENT_LENGTH"] = 11] = "INVALID_CONTENT_LENGTH";
		ERROR$1[ERROR$1["INVALID_CHUNK_SIZE"] = 12] = "INVALID_CHUNK_SIZE";
		ERROR$1[ERROR$1["INVALID_STATUS"] = 13] = "INVALID_STATUS";
		ERROR$1[ERROR$1["INVALID_EOF_STATE"] = 14] = "INVALID_EOF_STATE";
		ERROR$1[ERROR$1["INVALID_TRANSFER_ENCODING"] = 15] = "INVALID_TRANSFER_ENCODING";
		ERROR$1[ERROR$1["CB_MESSAGE_BEGIN"] = 16] = "CB_MESSAGE_BEGIN";
		ERROR$1[ERROR$1["CB_HEADERS_COMPLETE"] = 17] = "CB_HEADERS_COMPLETE";
		ERROR$1[ERROR$1["CB_MESSAGE_COMPLETE"] = 18] = "CB_MESSAGE_COMPLETE";
		ERROR$1[ERROR$1["CB_CHUNK_HEADER"] = 19] = "CB_CHUNK_HEADER";
		ERROR$1[ERROR$1["CB_CHUNK_COMPLETE"] = 20] = "CB_CHUNK_COMPLETE";
		ERROR$1[ERROR$1["PAUSED"] = 21] = "PAUSED";
		ERROR$1[ERROR$1["PAUSED_UPGRADE"] = 22] = "PAUSED_UPGRADE";
		ERROR$1[ERROR$1["PAUSED_H2_UPGRADE"] = 23] = "PAUSED_H2_UPGRADE";
		ERROR$1[ERROR$1["USER"] = 24] = "USER";
	})(ERROR = exports.ERROR || (exports.ERROR = {}));
	var TYPE;
	(function(TYPE$1) {
		TYPE$1[TYPE$1["BOTH"] = 0] = "BOTH";
		TYPE$1[TYPE$1["REQUEST"] = 1] = "REQUEST";
		TYPE$1[TYPE$1["RESPONSE"] = 2] = "RESPONSE";
	})(TYPE = exports.TYPE || (exports.TYPE = {}));
	var FLAGS;
	(function(FLAGS$1) {
		FLAGS$1[FLAGS$1["CONNECTION_KEEP_ALIVE"] = 1] = "CONNECTION_KEEP_ALIVE";
		FLAGS$1[FLAGS$1["CONNECTION_CLOSE"] = 2] = "CONNECTION_CLOSE";
		FLAGS$1[FLAGS$1["CONNECTION_UPGRADE"] = 4] = "CONNECTION_UPGRADE";
		FLAGS$1[FLAGS$1["CHUNKED"] = 8] = "CHUNKED";
		FLAGS$1[FLAGS$1["UPGRADE"] = 16] = "UPGRADE";
		FLAGS$1[FLAGS$1["CONTENT_LENGTH"] = 32] = "CONTENT_LENGTH";
		FLAGS$1[FLAGS$1["SKIPBODY"] = 64] = "SKIPBODY";
		FLAGS$1[FLAGS$1["TRAILING"] = 128] = "TRAILING";
		FLAGS$1[FLAGS$1["TRANSFER_ENCODING"] = 512] = "TRANSFER_ENCODING";
	})(FLAGS = exports.FLAGS || (exports.FLAGS = {}));
	var LENIENT_FLAGS;
	(function(LENIENT_FLAGS$1) {
		LENIENT_FLAGS$1[LENIENT_FLAGS$1["HEADERS"] = 1] = "HEADERS";
		LENIENT_FLAGS$1[LENIENT_FLAGS$1["CHUNKED_LENGTH"] = 2] = "CHUNKED_LENGTH";
		LENIENT_FLAGS$1[LENIENT_FLAGS$1["KEEP_ALIVE"] = 4] = "KEEP_ALIVE";
	})(LENIENT_FLAGS = exports.LENIENT_FLAGS || (exports.LENIENT_FLAGS = {}));
	var METHODS;
	(function(METHODS$1) {
		METHODS$1[METHODS$1["DELETE"] = 0] = "DELETE";
		METHODS$1[METHODS$1["GET"] = 1] = "GET";
		METHODS$1[METHODS$1["HEAD"] = 2] = "HEAD";
		METHODS$1[METHODS$1["POST"] = 3] = "POST";
		METHODS$1[METHODS$1["PUT"] = 4] = "PUT";
		METHODS$1[METHODS$1["CONNECT"] = 5] = "CONNECT";
		METHODS$1[METHODS$1["OPTIONS"] = 6] = "OPTIONS";
		METHODS$1[METHODS$1["TRACE"] = 7] = "TRACE";
		METHODS$1[METHODS$1["COPY"] = 8] = "COPY";
		METHODS$1[METHODS$1["LOCK"] = 9] = "LOCK";
		METHODS$1[METHODS$1["MKCOL"] = 10] = "MKCOL";
		METHODS$1[METHODS$1["MOVE"] = 11] = "MOVE";
		METHODS$1[METHODS$1["PROPFIND"] = 12] = "PROPFIND";
		METHODS$1[METHODS$1["PROPPATCH"] = 13] = "PROPPATCH";
		METHODS$1[METHODS$1["SEARCH"] = 14] = "SEARCH";
		METHODS$1[METHODS$1["UNLOCK"] = 15] = "UNLOCK";
		METHODS$1[METHODS$1["BIND"] = 16] = "BIND";
		METHODS$1[METHODS$1["REBIND"] = 17] = "REBIND";
		METHODS$1[METHODS$1["UNBIND"] = 18] = "UNBIND";
		METHODS$1[METHODS$1["ACL"] = 19] = "ACL";
		METHODS$1[METHODS$1["REPORT"] = 20] = "REPORT";
		METHODS$1[METHODS$1["MKACTIVITY"] = 21] = "MKACTIVITY";
		METHODS$1[METHODS$1["CHECKOUT"] = 22] = "CHECKOUT";
		METHODS$1[METHODS$1["MERGE"] = 23] = "MERGE";
		METHODS$1[METHODS$1["M-SEARCH"] = 24] = "M-SEARCH";
		METHODS$1[METHODS$1["NOTIFY"] = 25] = "NOTIFY";
		METHODS$1[METHODS$1["SUBSCRIBE"] = 26] = "SUBSCRIBE";
		METHODS$1[METHODS$1["UNSUBSCRIBE"] = 27] = "UNSUBSCRIBE";
		METHODS$1[METHODS$1["PATCH"] = 28] = "PATCH";
		METHODS$1[METHODS$1["PURGE"] = 29] = "PURGE";
		METHODS$1[METHODS$1["MKCALENDAR"] = 30] = "MKCALENDAR";
		METHODS$1[METHODS$1["LINK"] = 31] = "LINK";
		METHODS$1[METHODS$1["UNLINK"] = 32] = "UNLINK";
		METHODS$1[METHODS$1["SOURCE"] = 33] = "SOURCE";
		METHODS$1[METHODS$1["PRI"] = 34] = "PRI";
		METHODS$1[METHODS$1["DESCRIBE"] = 35] = "DESCRIBE";
		METHODS$1[METHODS$1["ANNOUNCE"] = 36] = "ANNOUNCE";
		METHODS$1[METHODS$1["SETUP"] = 37] = "SETUP";
		METHODS$1[METHODS$1["PLAY"] = 38] = "PLAY";
		METHODS$1[METHODS$1["PAUSE"] = 39] = "PAUSE";
		METHODS$1[METHODS$1["TEARDOWN"] = 40] = "TEARDOWN";
		METHODS$1[METHODS$1["GET_PARAMETER"] = 41] = "GET_PARAMETER";
		METHODS$1[METHODS$1["SET_PARAMETER"] = 42] = "SET_PARAMETER";
		METHODS$1[METHODS$1["REDIRECT"] = 43] = "REDIRECT";
		METHODS$1[METHODS$1["RECORD"] = 44] = "RECORD";
		METHODS$1[METHODS$1["FLUSH"] = 45] = "FLUSH";
	})(METHODS = exports.METHODS || (exports.METHODS = {}));
	exports.METHODS_HTTP = [
		METHODS.DELETE,
		METHODS.GET,
		METHODS.HEAD,
		METHODS.POST,
		METHODS.PUT,
		METHODS.CONNECT,
		METHODS.OPTIONS,
		METHODS.TRACE,
		METHODS.COPY,
		METHODS.LOCK,
		METHODS.MKCOL,
		METHODS.MOVE,
		METHODS.PROPFIND,
		METHODS.PROPPATCH,
		METHODS.SEARCH,
		METHODS.UNLOCK,
		METHODS.BIND,
		METHODS.REBIND,
		METHODS.UNBIND,
		METHODS.ACL,
		METHODS.REPORT,
		METHODS.MKACTIVITY,
		METHODS.CHECKOUT,
		METHODS.MERGE,
		METHODS["M-SEARCH"],
		METHODS.NOTIFY,
		METHODS.SUBSCRIBE,
		METHODS.UNSUBSCRIBE,
		METHODS.PATCH,
		METHODS.PURGE,
		METHODS.MKCALENDAR,
		METHODS.LINK,
		METHODS.UNLINK,
		METHODS.PRI,
		METHODS.SOURCE
	];
	exports.METHODS_ICE = [METHODS.SOURCE];
	exports.METHODS_RTSP = [
		METHODS.OPTIONS,
		METHODS.DESCRIBE,
		METHODS.ANNOUNCE,
		METHODS.SETUP,
		METHODS.PLAY,
		METHODS.PAUSE,
		METHODS.TEARDOWN,
		METHODS.GET_PARAMETER,
		METHODS.SET_PARAMETER,
		METHODS.REDIRECT,
		METHODS.RECORD,
		METHODS.FLUSH,
		METHODS.GET,
		METHODS.POST
	];
	exports.METHOD_MAP = utils_1$2.enumToMap(METHODS);
	exports.H_METHOD_MAP = {};
	Object.keys(exports.METHOD_MAP).forEach((key) => {
		if (/^H/.test(key)) exports.H_METHOD_MAP[key] = exports.METHOD_MAP[key];
	});
	var FINISH;
	(function(FINISH$1) {
		FINISH$1[FINISH$1["SAFE"] = 0] = "SAFE";
		FINISH$1[FINISH$1["SAFE_WITH_CB"] = 1] = "SAFE_WITH_CB";
		FINISH$1[FINISH$1["UNSAFE"] = 2] = "UNSAFE";
	})(FINISH = exports.FINISH || (exports.FINISH = {}));
	exports.ALPHA = [];
	for (let i$2 = "A".charCodeAt(0); i$2 <= "Z".charCodeAt(0); i$2++) {
		exports.ALPHA.push(String.fromCharCode(i$2));
		exports.ALPHA.push(String.fromCharCode(i$2 + 32));
	}
	exports.NUM_MAP = {
		0: 0,
		1: 1,
		2: 2,
		3: 3,
		4: 4,
		5: 5,
		6: 6,
		7: 7,
		8: 8,
		9: 9
	};
	exports.HEX_MAP = {
		0: 0,
		1: 1,
		2: 2,
		3: 3,
		4: 4,
		5: 5,
		6: 6,
		7: 7,
		8: 8,
		9: 9,
		A: 10,
		B: 11,
		C: 12,
		D: 13,
		E: 14,
		F: 15,
		a: 10,
		b: 11,
		c: 12,
		d: 13,
		e: 14,
		f: 15
	};
	exports.NUM = [
		"0",
		"1",
		"2",
		"3",
		"4",
		"5",
		"6",
		"7",
		"8",
		"9"
	];
	exports.ALPHANUM = exports.ALPHA.concat(exports.NUM);
	exports.MARK = [
		"-",
		"_",
		".",
		"!",
		"~",
		"*",
		"'",
		"(",
		")"
	];
	exports.USERINFO_CHARS = exports.ALPHANUM.concat(exports.MARK).concat([
		"%",
		";",
		":",
		"&",
		"=",
		"+",
		"$",
		","
	]);
	exports.STRICT_URL_CHAR = [
		"!",
		"\"",
		"$",
		"%",
		"&",
		"'",
		"(",
		")",
		"*",
		"+",
		",",
		"-",
		".",
		"/",
		":",
		";",
		"<",
		"=",
		">",
		"@",
		"[",
		"\\",
		"]",
		"^",
		"_",
		"`",
		"{",
		"|",
		"}",
		"~"
	].concat(exports.ALPHANUM);
	exports.URL_CHAR = exports.STRICT_URL_CHAR.concat(["	", "\f"]);
	for (let i$2 = 128; i$2 <= 255; i$2++) exports.URL_CHAR.push(i$2);
	exports.HEX = exports.NUM.concat([
		"a",
		"b",
		"c",
		"d",
		"e",
		"f",
		"A",
		"B",
		"C",
		"D",
		"E",
		"F"
	]);
	exports.STRICT_TOKEN = [
		"!",
		"#",
		"$",
		"%",
		"&",
		"'",
		"*",
		"+",
		"-",
		".",
		"^",
		"_",
		"`",
		"|",
		"~"
	].concat(exports.ALPHANUM);
	exports.TOKEN = exports.STRICT_TOKEN.concat([" "]);
	exports.HEADER_CHARS = ["	"];
	for (let i$2 = 32; i$2 <= 255; i$2++) if (i$2 !== 127) exports.HEADER_CHARS.push(i$2);
	exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS.filter((c) => c !== 44);
	exports.MAJOR = exports.NUM_MAP;
	exports.MINOR = exports.MAJOR;
	var HEADER_STATE;
	(function(HEADER_STATE$1) {
		HEADER_STATE$1[HEADER_STATE$1["GENERAL"] = 0] = "GENERAL";
		HEADER_STATE$1[HEADER_STATE$1["CONNECTION"] = 1] = "CONNECTION";
		HEADER_STATE$1[HEADER_STATE$1["CONTENT_LENGTH"] = 2] = "CONTENT_LENGTH";
		HEADER_STATE$1[HEADER_STATE$1["TRANSFER_ENCODING"] = 3] = "TRANSFER_ENCODING";
		HEADER_STATE$1[HEADER_STATE$1["UPGRADE"] = 4] = "UPGRADE";
		HEADER_STATE$1[HEADER_STATE$1["CONNECTION_KEEP_ALIVE"] = 5] = "CONNECTION_KEEP_ALIVE";
		HEADER_STATE$1[HEADER_STATE$1["CONNECTION_CLOSE"] = 6] = "CONNECTION_CLOSE";
		HEADER_STATE$1[HEADER_STATE$1["CONNECTION_UPGRADE"] = 7] = "CONNECTION_UPGRADE";
		HEADER_STATE$1[HEADER_STATE$1["TRANSFER_ENCODING_CHUNKED"] = 8] = "TRANSFER_ENCODING_CHUNKED";
	})(HEADER_STATE = exports.HEADER_STATE || (exports.HEADER_STATE = {}));
	exports.SPECIAL_HEADERS = {
		"connection": HEADER_STATE.CONNECTION,
		"content-length": HEADER_STATE.CONTENT_LENGTH,
		"proxy-connection": HEADER_STATE.CONNECTION,
		"transfer-encoding": HEADER_STATE.TRANSFER_ENCODING,
		"upgrade": HEADER_STATE.UPGRADE
	};
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/handler/RedirectHandler.js
var require_RedirectHandler = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/handler/RedirectHandler.js"(exports, module) {
	const util$16 = require_util$6();
	const { kBodyUsed } = require_symbols$4();
	const assert$17 = require("assert");
	const { InvalidArgumentError: InvalidArgumentError$17 } = require_errors();
	const EE$1 = require("events");
	const redirectableStatusCodes = [
		300,
		301,
		302,
		303,
		307,
		308
	];
	const kBody$1 = Symbol("body");
	var BodyAsyncIterable = class {
		constructor(body) {
			this[kBody$1] = body;
			this[kBodyUsed] = false;
		}
		async *[Symbol.asyncIterator]() {
			assert$17(!this[kBodyUsed], "disturbed");
			this[kBodyUsed] = true;
			yield* this[kBody$1];
		}
	};
	var RedirectHandler$2 = class {
		constructor(dispatch, maxRedirections, opts, handler$1) {
			if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) throw new InvalidArgumentError$17("maxRedirections must be a positive number");
			util$16.validateHandler(handler$1, opts.method, opts.upgrade);
			this.dispatch = dispatch;
			this.location = null;
			this.abort = null;
			this.opts = {
				...opts,
				maxRedirections: 0
			};
			this.maxRedirections = maxRedirections;
			this.handler = handler$1;
			this.history = [];
			if (util$16.isStream(this.opts.body)) {
				if (util$16.bodyLength(this.opts.body) === 0) this.opts.body.on("data", function() {
					assert$17(false);
				});
				if (typeof this.opts.body.readableDidRead !== "boolean") {
					this.opts.body[kBodyUsed] = false;
					EE$1.prototype.on.call(this.opts.body, "data", function() {
						this[kBodyUsed] = true;
					});
				}
			} else if (this.opts.body && typeof this.opts.body.pipeTo === "function") this.opts.body = new BodyAsyncIterable(this.opts.body);
else if (this.opts.body && typeof this.opts.body !== "string" && !ArrayBuffer.isView(this.opts.body) && util$16.isIterable(this.opts.body)) this.opts.body = new BodyAsyncIterable(this.opts.body);
		}
		onConnect(abort$1) {
			this.abort = abort$1;
			this.handler.onConnect(abort$1, { history: this.history });
		}
		onUpgrade(statusCode, headers, socket) {
			this.handler.onUpgrade(statusCode, headers, socket);
		}
		onError(error$2) {
			this.handler.onError(error$2);
		}
		onHeaders(statusCode, headers, resume$1, statusText) {
			this.location = this.history.length >= this.maxRedirections || util$16.isDisturbed(this.opts.body) ? null : parseLocation(statusCode, headers);
			if (this.opts.origin) this.history.push(new URL(this.opts.path, this.opts.origin));
			if (!this.location) return this.handler.onHeaders(statusCode, headers, resume$1, statusText);
			const { origin, pathname, search: search$1 } = util$16.parseURL(new URL(this.location, this.opts.origin && new URL(this.opts.path, this.opts.origin)));
			const path$72 = search$1 ? `${pathname}${search$1}` : pathname;
			this.opts.headers = cleanRequestHeaders(this.opts.headers, statusCode === 303, this.opts.origin !== origin);
			this.opts.path = path$72;
			this.opts.origin = origin;
			this.opts.maxRedirections = 0;
			this.opts.query = null;
			if (statusCode === 303 && this.opts.method !== "HEAD") {
				this.opts.method = "GET";
				this.opts.body = null;
			}
		}
		onData(chunk) {
			if (this.location) {} else return this.handler.onData(chunk);
		}
		onComplete(trailers) {
			if (this.location) {
				this.location = null;
				this.abort = null;
				this.dispatch(this.opts, this);
			} else this.handler.onComplete(trailers);
		}
		onBodySent(chunk) {
			if (this.handler.onBodySent) this.handler.onBodySent(chunk);
		}
	};
	function parseLocation(statusCode, headers) {
		if (redirectableStatusCodes.indexOf(statusCode) === -1) return null;
		for (let i$2 = 0; i$2 < headers.length; i$2 += 2) if (headers[i$2].toString().toLowerCase() === "location") return headers[i$2 + 1];
	}
	function shouldRemoveHeader(header, removeContent, unknownOrigin) {
		if (header.length === 4) return util$16.headerNameToString(header) === "host";
		if (removeContent && util$16.headerNameToString(header).startsWith("content-")) return true;
		if (unknownOrigin && (header.length === 13 || header.length === 6 || header.length === 19)) {
			const name = util$16.headerNameToString(header);
			return name === "authorization" || name === "cookie" || name === "proxy-authorization";
		}
		return false;
	}
	function cleanRequestHeaders(headers, removeContent, unknownOrigin) {
		const ret = [];
		if (Array.isArray(headers)) {
			for (let i$2 = 0; i$2 < headers.length; i$2 += 2) if (!shouldRemoveHeader(headers[i$2], removeContent, unknownOrigin)) ret.push(headers[i$2], headers[i$2 + 1]);
		} else if (headers && typeof headers === "object") {
			for (const key of Object.keys(headers)) if (!shouldRemoveHeader(key, removeContent, unknownOrigin)) ret.push(key, headers[key]);
		} else assert$17(headers == null, "headers must be an object or an array");
		return ret;
	}
	module.exports = RedirectHandler$2;
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/interceptor/redirectInterceptor.js
var require_redirectInterceptor = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/interceptor/redirectInterceptor.js"(exports, module) {
	const RedirectHandler$1 = require_RedirectHandler();
	function createRedirectInterceptor$3({ maxRedirections: defaultMaxRedirections }) {
		return (dispatch) => {
			return function Intercept(opts, handler$1) {
				const { maxRedirections = defaultMaxRedirections } = opts;
				if (!maxRedirections) return dispatch(opts, handler$1);
				const redirectHandler = new RedirectHandler$1(dispatch, maxRedirections, opts, handler$1);
				opts = {
					...opts,
					maxRedirections: 0
				};
				return dispatch(opts, redirectHandler);
			};
		};
	}
	module.exports = createRedirectInterceptor$3;
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/llhttp/llhttp-wasm.js
var require_llhttp_wasm = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/llhttp/llhttp-wasm.js"(exports, module) {
	module.exports = "";
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/llhttp/llhttp_simd-wasm.js
var require_llhttp_simd_wasm = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/llhttp/llhttp_simd-wasm.js"(exports, module) {
	module.exports = "";
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/client.js
var require_client = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/client.js"(exports, module) {
	const assert$16 = require("assert");
	const net = require("net");
	const http$1 = require("http");
	const { pipeline: pipeline$2 } = require("stream");
	const util$15 = require_util$6();
	const timers = require_timers();
	const Request$3 = require_request$1();
	const DispatcherBase$3 = require_dispatcher_base();
	const { RequestContentLengthMismatchError, ResponseContentLengthMismatchError, InvalidArgumentError: InvalidArgumentError$16, RequestAbortedError: RequestAbortedError$8, HeadersTimeoutError, HeadersOverflowError, SocketError: SocketError$2, InformationalError, BodyTimeoutError, HTTPParserError, ResponseExceededMaxSizeError, ClientDestroyedError } = require_errors();
	const buildConnector$3 = require_connect();
	const { kUrl: kUrl$3, kReset, kServerName, kClient: kClient$1, kBusy: kBusy$1, kParser, kConnect, kBlocking, kResuming, kRunning: kRunning$3, kPending: kPending$2, kSize: kSize$4, kWriting, kQueue: kQueue$1, kConnected: kConnected$5, kConnecting, kNeedDrain: kNeedDrain$3, kNoRef, kKeepAliveDefaultTimeout, kHostHeader, kPendingIdx, kRunningIdx, kError: kError$2, kPipelining, kSocket, kKeepAliveTimeoutValue, kMaxHeadersSize, kKeepAliveMaxTimeout, kKeepAliveTimeoutThreshold, kHeadersTimeout, kBodyTimeout, kStrictContentLength, kConnector, kMaxRedirections: kMaxRedirections$1, kMaxRequests, kCounter, kClose: kClose$5, kDestroy: kDestroy$3, kDispatch: kDispatch$2, kInterceptors: kInterceptors$4, kLocalAddress, kMaxResponseSize, kHTTPConnVersion, kHost, kHTTP2Session, kHTTP2SessionState, kHTTP2BuildRequest, kHTTP2CopyHeaders, kHTTP1BuildRequest } = require_symbols$4();
	/** @type {import('http2')} */
	let http2;
	try {
		http2 = require("http2");
	} catch {
		http2 = { constants: {} };
	}
	const { constants: { HTTP2_HEADER_AUTHORITY, HTTP2_HEADER_METHOD, HTTP2_HEADER_PATH, HTTP2_HEADER_SCHEME, HTTP2_HEADER_CONTENT_LENGTH, HTTP2_HEADER_EXPECT, HTTP2_HEADER_STATUS } } = http2;
	let h2ExperimentalWarned = false;
	const FastBuffer = Buffer[Symbol.species];
	const kClosedResolve$1 = Symbol("kClosedResolve");
	const channels$2 = {};
	try {
		const diagnosticsChannel$2 = require("diagnostics_channel");
		channels$2.sendHeaders = diagnosticsChannel$2.channel("undici:client:sendHeaders");
		channels$2.beforeConnect = diagnosticsChannel$2.channel("undici:client:beforeConnect");
		channels$2.connectError = diagnosticsChannel$2.channel("undici:client:connectError");
		channels$2.connected = diagnosticsChannel$2.channel("undici:client:connected");
	} catch {
		channels$2.sendHeaders = { hasSubscribers: false };
		channels$2.beforeConnect = { hasSubscribers: false };
		channels$2.connectError = { hasSubscribers: false };
		channels$2.connected = { hasSubscribers: false };
	}
	var Client$4 = class extends DispatcherBase$3 {
		/**
		*
		* @param {string|URL} url
		* @param {import('../types/client').Client.Options} options
		*/
		constructor(url, { interceptors, maxHeaderSize, headersTimeout, socketTimeout, requestTimeout, connectTimeout, bodyTimeout, idleTimeout, keepAlive, keepAliveTimeout, maxKeepAliveTimeout, keepAliveMaxTimeout, keepAliveTimeoutThreshold, socketPath, pipelining, tls: tls$2, strictContentLength, maxCachedSessions, maxRedirections, connect: connect$2, maxRequestsPerClient, localAddress, maxResponseSize, autoSelectFamily, autoSelectFamilyAttemptTimeout, allowH2, maxConcurrentStreams } = {}) {
			super();
			if (keepAlive !== undefined) throw new InvalidArgumentError$16("unsupported keepAlive, use pipelining=0 instead");
			if (socketTimeout !== undefined) throw new InvalidArgumentError$16("unsupported socketTimeout, use headersTimeout & bodyTimeout instead");
			if (requestTimeout !== undefined) throw new InvalidArgumentError$16("unsupported requestTimeout, use headersTimeout & bodyTimeout instead");
			if (idleTimeout !== undefined) throw new InvalidArgumentError$16("unsupported idleTimeout, use keepAliveTimeout instead");
			if (maxKeepAliveTimeout !== undefined) throw new InvalidArgumentError$16("unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead");
			if (maxHeaderSize != null && !Number.isFinite(maxHeaderSize)) throw new InvalidArgumentError$16("invalid maxHeaderSize");
			if (socketPath != null && typeof socketPath !== "string") throw new InvalidArgumentError$16("invalid socketPath");
			if (connectTimeout != null && (!Number.isFinite(connectTimeout) || connectTimeout < 0)) throw new InvalidArgumentError$16("invalid connectTimeout");
			if (keepAliveTimeout != null && (!Number.isFinite(keepAliveTimeout) || keepAliveTimeout <= 0)) throw new InvalidArgumentError$16("invalid keepAliveTimeout");
			if (keepAliveMaxTimeout != null && (!Number.isFinite(keepAliveMaxTimeout) || keepAliveMaxTimeout <= 0)) throw new InvalidArgumentError$16("invalid keepAliveMaxTimeout");
			if (keepAliveTimeoutThreshold != null && !Number.isFinite(keepAliveTimeoutThreshold)) throw new InvalidArgumentError$16("invalid keepAliveTimeoutThreshold");
			if (headersTimeout != null && (!Number.isInteger(headersTimeout) || headersTimeout < 0)) throw new InvalidArgumentError$16("headersTimeout must be a positive integer or zero");
			if (bodyTimeout != null && (!Number.isInteger(bodyTimeout) || bodyTimeout < 0)) throw new InvalidArgumentError$16("bodyTimeout must be a positive integer or zero");
			if (connect$2 != null && typeof connect$2 !== "function" && typeof connect$2 !== "object") throw new InvalidArgumentError$16("connect must be a function or an object");
			if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) throw new InvalidArgumentError$16("maxRedirections must be a positive number");
			if (maxRequestsPerClient != null && (!Number.isInteger(maxRequestsPerClient) || maxRequestsPerClient < 0)) throw new InvalidArgumentError$16("maxRequestsPerClient must be a positive number");
			if (localAddress != null && (typeof localAddress !== "string" || net.isIP(localAddress) === 0)) throw new InvalidArgumentError$16("localAddress must be valid string IP address");
			if (maxResponseSize != null && (!Number.isInteger(maxResponseSize) || maxResponseSize < -1)) throw new InvalidArgumentError$16("maxResponseSize must be a positive number");
			if (autoSelectFamilyAttemptTimeout != null && (!Number.isInteger(autoSelectFamilyAttemptTimeout) || autoSelectFamilyAttemptTimeout < -1)) throw new InvalidArgumentError$16("autoSelectFamilyAttemptTimeout must be a positive number");
			if (allowH2 != null && typeof allowH2 !== "boolean") throw new InvalidArgumentError$16("allowH2 must be a valid boolean value");
			if (maxConcurrentStreams != null && (typeof maxConcurrentStreams !== "number" || maxConcurrentStreams < 1)) throw new InvalidArgumentError$16("maxConcurrentStreams must be a possitive integer, greater than 0");
			if (typeof connect$2 !== "function") connect$2 = buildConnector$3({
				...tls$2,
				maxCachedSessions,
				allowH2,
				socketPath,
				timeout: connectTimeout,
				...util$15.nodeHasAutoSelectFamily && autoSelectFamily ? {
					autoSelectFamily,
					autoSelectFamilyAttemptTimeout
				} : undefined,
				...connect$2
			});
			this[kInterceptors$4] = interceptors && interceptors.Client && Array.isArray(interceptors.Client) ? interceptors.Client : [createRedirectInterceptor$2({ maxRedirections })];
			this[kUrl$3] = util$15.parseOrigin(url);
			this[kConnector] = connect$2;
			this[kSocket] = null;
			this[kPipelining] = pipelining != null ? pipelining : 1;
			this[kMaxHeadersSize] = maxHeaderSize || http$1.maxHeaderSize;
			this[kKeepAliveDefaultTimeout] = keepAliveTimeout == null ? 4e3 : keepAliveTimeout;
			this[kKeepAliveMaxTimeout] = keepAliveMaxTimeout == null ? 6e5 : keepAliveMaxTimeout;
			this[kKeepAliveTimeoutThreshold] = keepAliveTimeoutThreshold == null ? 1e3 : keepAliveTimeoutThreshold;
			this[kKeepAliveTimeoutValue] = this[kKeepAliveDefaultTimeout];
			this[kServerName] = null;
			this[kLocalAddress] = localAddress != null ? localAddress : null;
			this[kResuming] = 0;
			this[kNeedDrain$3] = 0;
			this[kHostHeader] = `host: ${this[kUrl$3].hostname}${this[kUrl$3].port ? `:${this[kUrl$3].port}` : ""}\r\n`;
			this[kBodyTimeout] = bodyTimeout != null ? bodyTimeout : 3e5;
			this[kHeadersTimeout] = headersTimeout != null ? headersTimeout : 3e5;
			this[kStrictContentLength] = strictContentLength == null ? true : strictContentLength;
			this[kMaxRedirections$1] = maxRedirections;
			this[kMaxRequests] = maxRequestsPerClient;
			this[kClosedResolve$1] = null;
			this[kMaxResponseSize] = maxResponseSize > -1 ? maxResponseSize : -1;
			this[kHTTPConnVersion] = "h1";
			this[kHTTP2Session] = null;
			this[kHTTP2SessionState] = !allowH2 ? null : {
				openStreams: 0,
				maxConcurrentStreams: maxConcurrentStreams != null ? maxConcurrentStreams : 100
			};
			this[kHost] = `${this[kUrl$3].hostname}${this[kUrl$3].port ? `:${this[kUrl$3].port}` : ""}`;
			this[kQueue$1] = [];
			this[kRunningIdx] = 0;
			this[kPendingIdx] = 0;
		}
		get pipelining() {
			return this[kPipelining];
		}
		set pipelining(value) {
			this[kPipelining] = value;
			resume(this, true);
		}
		get [kPending$2]() {
			return this[kQueue$1].length - this[kPendingIdx];
		}
		get [kRunning$3]() {
			return this[kPendingIdx] - this[kRunningIdx];
		}
		get [kSize$4]() {
			return this[kQueue$1].length - this[kRunningIdx];
		}
		get [kConnected$5]() {
			return !!this[kSocket] && !this[kConnecting] && !this[kSocket].destroyed;
		}
		get [kBusy$1]() {
			const socket = this[kSocket];
			return socket && (socket[kReset] || socket[kWriting] || socket[kBlocking]) || this[kSize$4] >= (this[kPipelining] || 1) || this[kPending$2] > 0;
		}
		[kConnect](cb) {
			connect$1(this);
			this.once("connect", cb);
		}
		[kDispatch$2](opts, handler$1) {
			const origin = opts.origin || this[kUrl$3].origin;
			const request$2 = this[kHTTPConnVersion] === "h2" ? Request$3[kHTTP2BuildRequest](origin, opts, handler$1) : Request$3[kHTTP1BuildRequest](origin, opts, handler$1);
			this[kQueue$1].push(request$2);
			if (this[kResuming]) {} else if (util$15.bodyLength(request$2.body) == null && util$15.isIterable(request$2.body)) {
				this[kResuming] = 1;
				process.nextTick(resume, this);
			} else resume(this, true);
			if (this[kResuming] && this[kNeedDrain$3] !== 2 && this[kBusy$1]) this[kNeedDrain$3] = 2;
			return this[kNeedDrain$3] < 2;
		}
		async [kClose$5]() {
			return new Promise((resolve$1) => {
				if (!this[kSize$4]) resolve$1(null);
else this[kClosedResolve$1] = resolve$1;
			});
		}
		async [kDestroy$3](err) {
			return new Promise((resolve$1) => {
				const requests = this[kQueue$1].splice(this[kPendingIdx]);
				for (let i$2 = 0; i$2 < requests.length; i$2++) {
					const request$2 = requests[i$2];
					errorRequest(this, request$2, err);
				}
				const callback = () => {
					if (this[kClosedResolve$1]) {
						this[kClosedResolve$1]();
						this[kClosedResolve$1] = null;
					}
					resolve$1();
				};
				if (this[kHTTP2Session] != null) {
					util$15.destroy(this[kHTTP2Session], err);
					this[kHTTP2Session] = null;
					this[kHTTP2SessionState] = null;
				}
				if (!this[kSocket]) queueMicrotask(callback);
else util$15.destroy(this[kSocket].on("close", callback), err);
				resume(this);
			});
		}
	};
	function onHttp2SessionError(err) {
		assert$16(err.code !== "ERR_TLS_CERT_ALTNAME_INVALID");
		this[kSocket][kError$2] = err;
		onError(this[kClient$1], err);
	}
	function onHttp2FrameError(type, code$1, id) {
		const err = new InformationalError(`HTTP/2: "frameError" received - type ${type}, code ${code$1}`);
		if (id === 0) {
			this[kSocket][kError$2] = err;
			onError(this[kClient$1], err);
		}
	}
	function onHttp2SessionEnd() {
		util$15.destroy(this, new SocketError$2("other side closed"));
		util$15.destroy(this[kSocket], new SocketError$2("other side closed"));
	}
	function onHTTP2GoAway(code$1) {
		const client = this[kClient$1];
		const err = new InformationalError(`HTTP/2: "GOAWAY" frame received with code ${code$1}`);
		client[kSocket] = null;
		client[kHTTP2Session] = null;
		if (client.destroyed) {
			assert$16(this[kPending$2] === 0);
			const requests = client[kQueue$1].splice(client[kRunningIdx]);
			for (let i$2 = 0; i$2 < requests.length; i$2++) {
				const request$2 = requests[i$2];
				errorRequest(this, request$2, err);
			}
		} else if (client[kRunning$3] > 0) {
			const request$2 = client[kQueue$1][client[kRunningIdx]];
			client[kQueue$1][client[kRunningIdx]++] = null;
			errorRequest(client, request$2, err);
		}
		client[kPendingIdx] = client[kRunningIdx];
		assert$16(client[kRunning$3] === 0);
		client.emit("disconnect", client[kUrl$3], [client], err);
		resume(client);
	}
	const constants$4 = require_constants$6();
	const createRedirectInterceptor$2 = require_redirectInterceptor();
	const EMPTY_BUF = Buffer.alloc(0);
	async function lazyllhttp() {
		const llhttpWasmData = process.env.JEST_WORKER_ID ? require_llhttp_wasm() : undefined;
		let mod;
		try {
			mod = await WebAssembly.compile(Buffer.from(require_llhttp_simd_wasm(), "base64"));
		} catch (e) {
			mod = await WebAssembly.compile(Buffer.from(llhttpWasmData || require_llhttp_wasm(), "base64"));
		}
		return await WebAssembly.instantiate(mod, { env: {
			wasm_on_url: (p, at, len) => {
				return 0;
			},
			wasm_on_status: (p, at, len) => {
				assert$16.strictEqual(currentParser.ptr, p);
				const start = at - currentBufferPtr + currentBufferRef.byteOffset;
				return currentParser.onStatus(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
			},
			wasm_on_message_begin: (p) => {
				assert$16.strictEqual(currentParser.ptr, p);
				return currentParser.onMessageBegin() || 0;
			},
			wasm_on_header_field: (p, at, len) => {
				assert$16.strictEqual(currentParser.ptr, p);
				const start = at - currentBufferPtr + currentBufferRef.byteOffset;
				return currentParser.onHeaderField(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
			},
			wasm_on_header_value: (p, at, len) => {
				assert$16.strictEqual(currentParser.ptr, p);
				const start = at - currentBufferPtr + currentBufferRef.byteOffset;
				return currentParser.onHeaderValue(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
			},
			wasm_on_headers_complete: (p, statusCode, upgrade$1, shouldKeepAlive) => {
				assert$16.strictEqual(currentParser.ptr, p);
				return currentParser.onHeadersComplete(statusCode, Boolean(upgrade$1), Boolean(shouldKeepAlive)) || 0;
			},
			wasm_on_body: (p, at, len) => {
				assert$16.strictEqual(currentParser.ptr, p);
				const start = at - currentBufferPtr + currentBufferRef.byteOffset;
				return currentParser.onBody(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
			},
			wasm_on_message_complete: (p) => {
				assert$16.strictEqual(currentParser.ptr, p);
				return currentParser.onMessageComplete() || 0;
			}
		} });
	}
	let llhttpInstance = null;
	let llhttpPromise = lazyllhttp();
	llhttpPromise.catch();
	let currentParser = null;
	let currentBufferRef = null;
	let currentBufferSize = 0;
	let currentBufferPtr = null;
	const TIMEOUT_HEADERS = 1;
	const TIMEOUT_BODY = 2;
	const TIMEOUT_IDLE = 3;
	var Parser = class {
		constructor(client, socket, { exports: exports$1 }) {
			assert$16(Number.isFinite(client[kMaxHeadersSize]) && client[kMaxHeadersSize] > 0);
			this.llhttp = exports$1;
			this.ptr = this.llhttp.llhttp_alloc(constants$4.TYPE.RESPONSE);
			this.client = client;
			this.socket = socket;
			this.timeout = null;
			this.timeoutValue = null;
			this.timeoutType = null;
			this.statusCode = null;
			this.statusText = "";
			this.upgrade = false;
			this.headers = [];
			this.headersSize = 0;
			this.headersMaxSize = client[kMaxHeadersSize];
			this.shouldKeepAlive = false;
			this.paused = false;
			this.resume = this.resume.bind(this);
			this.bytesRead = 0;
			this.keepAlive = "";
			this.contentLength = "";
			this.connection = "";
			this.maxResponseSize = client[kMaxResponseSize];
		}
		setTimeout(value, type) {
			this.timeoutType = type;
			if (value !== this.timeoutValue) {
				timers.clearTimeout(this.timeout);
				if (value) {
					this.timeout = timers.setTimeout(onParserTimeout, value, this);
					if (this.timeout.unref) this.timeout.unref();
				} else this.timeout = null;
				this.timeoutValue = value;
			} else if (this.timeout) {
				if (this.timeout.refresh) this.timeout.refresh();
			}
		}
		resume() {
			if (this.socket.destroyed || !this.paused) return;
			assert$16(this.ptr != null);
			assert$16(currentParser == null);
			this.llhttp.llhttp_resume(this.ptr);
			assert$16(this.timeoutType === TIMEOUT_BODY);
			if (this.timeout) {
				if (this.timeout.refresh) this.timeout.refresh();
			}
			this.paused = false;
			this.execute(this.socket.read() || EMPTY_BUF);
			this.readMore();
		}
		readMore() {
			while (!this.paused && this.ptr) {
				const chunk = this.socket.read();
				if (chunk === null) break;
				this.execute(chunk);
			}
		}
		execute(data) {
			assert$16(this.ptr != null);
			assert$16(currentParser == null);
			assert$16(!this.paused);
			const { socket, llhttp } = this;
			if (data.length > currentBufferSize) {
				if (currentBufferPtr) llhttp.free(currentBufferPtr);
				currentBufferSize = Math.ceil(data.length / 4096) * 4096;
				currentBufferPtr = llhttp.malloc(currentBufferSize);
			}
			new Uint8Array(llhttp.memory.buffer, currentBufferPtr, currentBufferSize).set(data);
			try {
				let ret;
				try {
					currentBufferRef = data;
					currentParser = this;
					ret = llhttp.llhttp_execute(this.ptr, currentBufferPtr, data.length);
				} catch (err) {
					throw err;
				} finally {
					currentParser = null;
					currentBufferRef = null;
				}
				const offset = llhttp.llhttp_get_error_pos(this.ptr) - currentBufferPtr;
				if (ret === constants$4.ERROR.PAUSED_UPGRADE) this.onUpgrade(data.slice(offset));
else if (ret === constants$4.ERROR.PAUSED) {
					this.paused = true;
					socket.unshift(data.slice(offset));
				} else if (ret !== constants$4.ERROR.OK) {
					const ptr = llhttp.llhttp_get_error_reason(this.ptr);
					let message = "";
					if (ptr) {
						const len = new Uint8Array(llhttp.memory.buffer, ptr).indexOf(0);
						message = "Response does not match the HTTP/1.1 protocol (" + Buffer.from(llhttp.memory.buffer, ptr, len).toString() + ")";
					}
					throw new HTTPParserError(message, constants$4.ERROR[ret], data.slice(offset));
				}
			} catch (err) {
				util$15.destroy(socket, err);
			}
		}
		destroy() {
			assert$16(this.ptr != null);
			assert$16(currentParser == null);
			this.llhttp.llhttp_free(this.ptr);
			this.ptr = null;
			timers.clearTimeout(this.timeout);
			this.timeout = null;
			this.timeoutValue = null;
			this.timeoutType = null;
			this.paused = false;
		}
		onStatus(buf) {
			this.statusText = buf.toString();
		}
		onMessageBegin() {
			const { socket, client } = this;
			if (socket.destroyed) return -1;
			const request$2 = client[kQueue$1][client[kRunningIdx]];
			if (!request$2) return -1;
		}
		onHeaderField(buf) {
			const len = this.headers.length;
			if ((len & 1) === 0) this.headers.push(buf);
else this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);
			this.trackHeader(buf.length);
		}
		onHeaderValue(buf) {
			let len = this.headers.length;
			if ((len & 1) === 1) {
				this.headers.push(buf);
				len += 1;
			} else this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);
			const key = this.headers[len - 2];
			if (key.length === 10 && key.toString().toLowerCase() === "keep-alive") this.keepAlive += buf.toString();
else if (key.length === 10 && key.toString().toLowerCase() === "connection") this.connection += buf.toString();
else if (key.length === 14 && key.toString().toLowerCase() === "content-length") this.contentLength += buf.toString();
			this.trackHeader(buf.length);
		}
		trackHeader(len) {
			this.headersSize += len;
			if (this.headersSize >= this.headersMaxSize) util$15.destroy(this.socket, new HeadersOverflowError());
		}
		onUpgrade(head) {
			const { upgrade: upgrade$1, client, socket, headers, statusCode } = this;
			assert$16(upgrade$1);
			const request$2 = client[kQueue$1][client[kRunningIdx]];
			assert$16(request$2);
			assert$16(!socket.destroyed);
			assert$16(socket === client[kSocket]);
			assert$16(!this.paused);
			assert$16(request$2.upgrade || request$2.method === "CONNECT");
			this.statusCode = null;
			this.statusText = "";
			this.shouldKeepAlive = null;
			assert$16(this.headers.length % 2 === 0);
			this.headers = [];
			this.headersSize = 0;
			socket.unshift(head);
			socket[kParser].destroy();
			socket[kParser] = null;
			socket[kClient$1] = null;
			socket[kError$2] = null;
			socket.removeListener("error", onSocketError$1).removeListener("readable", onSocketReadable).removeListener("end", onSocketEnd).removeListener("close", onSocketClose$1);
			client[kSocket] = null;
			client[kQueue$1][client[kRunningIdx]++] = null;
			client.emit("disconnect", client[kUrl$3], [client], new InformationalError("upgrade"));
			try {
				request$2.onUpgrade(statusCode, headers, socket);
			} catch (err) {
				util$15.destroy(socket, err);
			}
			resume(client);
		}
		onHeadersComplete(statusCode, upgrade$1, shouldKeepAlive) {
			const { client, socket, headers, statusText } = this;
			if (socket.destroyed) return -1;
			const request$2 = client[kQueue$1][client[kRunningIdx]];
			if (!request$2) return -1;
			assert$16(!this.upgrade);
			assert$16(this.statusCode < 200);
			if (statusCode === 100) {
				util$15.destroy(socket, new SocketError$2("bad response", util$15.getSocketInfo(socket)));
				return -1;
			}
			if (upgrade$1 && !request$2.upgrade) {
				util$15.destroy(socket, new SocketError$2("bad upgrade", util$15.getSocketInfo(socket)));
				return -1;
			}
			assert$16.strictEqual(this.timeoutType, TIMEOUT_HEADERS);
			this.statusCode = statusCode;
			this.shouldKeepAlive = shouldKeepAlive || request$2.method === "HEAD" && !socket[kReset] && this.connection.toLowerCase() === "keep-alive";
			if (this.statusCode >= 200) {
				const bodyTimeout = request$2.bodyTimeout != null ? request$2.bodyTimeout : client[kBodyTimeout];
				this.setTimeout(bodyTimeout, TIMEOUT_BODY);
			} else if (this.timeout) {
				if (this.timeout.refresh) this.timeout.refresh();
			}
			if (request$2.method === "CONNECT") {
				assert$16(client[kRunning$3] === 1);
				this.upgrade = true;
				return 2;
			}
			if (upgrade$1) {
				assert$16(client[kRunning$3] === 1);
				this.upgrade = true;
				return 2;
			}
			assert$16(this.headers.length % 2 === 0);
			this.headers = [];
			this.headersSize = 0;
			if (this.shouldKeepAlive && client[kPipelining]) {
				const keepAliveTimeout = this.keepAlive ? util$15.parseKeepAliveTimeout(this.keepAlive) : null;
				if (keepAliveTimeout != null) {
					const timeout = Math.min(keepAliveTimeout - client[kKeepAliveTimeoutThreshold], client[kKeepAliveMaxTimeout]);
					if (timeout <= 0) socket[kReset] = true;
else client[kKeepAliveTimeoutValue] = timeout;
				} else client[kKeepAliveTimeoutValue] = client[kKeepAliveDefaultTimeout];
			} else socket[kReset] = true;
			const pause = request$2.onHeaders(statusCode, headers, this.resume, statusText) === false;
			if (request$2.aborted) return -1;
			if (request$2.method === "HEAD") return 1;
			if (statusCode < 200) return 1;
			if (socket[kBlocking]) {
				socket[kBlocking] = false;
				resume(client);
			}
			return pause ? constants$4.ERROR.PAUSED : 0;
		}
		onBody(buf) {
			const { client, socket, statusCode, maxResponseSize } = this;
			if (socket.destroyed) return -1;
			const request$2 = client[kQueue$1][client[kRunningIdx]];
			assert$16(request$2);
			assert$16.strictEqual(this.timeoutType, TIMEOUT_BODY);
			if (this.timeout) {
				if (this.timeout.refresh) this.timeout.refresh();
			}
			assert$16(statusCode >= 200);
			if (maxResponseSize > -1 && this.bytesRead + buf.length > maxResponseSize) {
				util$15.destroy(socket, new ResponseExceededMaxSizeError());
				return -1;
			}
			this.bytesRead += buf.length;
			if (request$2.onData(buf) === false) return constants$4.ERROR.PAUSED;
		}
		onMessageComplete() {
			const { client, socket, statusCode, upgrade: upgrade$1, headers, contentLength, bytesRead, shouldKeepAlive } = this;
			if (socket.destroyed && (!statusCode || shouldKeepAlive)) return -1;
			if (upgrade$1) return;
			const request$2 = client[kQueue$1][client[kRunningIdx]];
			assert$16(request$2);
			assert$16(statusCode >= 100);
			this.statusCode = null;
			this.statusText = "";
			this.bytesRead = 0;
			this.contentLength = "";
			this.keepAlive = "";
			this.connection = "";
			assert$16(this.headers.length % 2 === 0);
			this.headers = [];
			this.headersSize = 0;
			if (statusCode < 200) return;
			if (request$2.method !== "HEAD" && contentLength && bytesRead !== parseInt(contentLength, 10)) {
				util$15.destroy(socket, new ResponseContentLengthMismatchError());
				return -1;
			}
			request$2.onComplete(headers);
			client[kQueue$1][client[kRunningIdx]++] = null;
			if (socket[kWriting]) {
				assert$16.strictEqual(client[kRunning$3], 0);
				util$15.destroy(socket, new InformationalError("reset"));
				return constants$4.ERROR.PAUSED;
			} else if (!shouldKeepAlive) {
				util$15.destroy(socket, new InformationalError("reset"));
				return constants$4.ERROR.PAUSED;
			} else if (socket[kReset] && client[kRunning$3] === 0) {
				util$15.destroy(socket, new InformationalError("reset"));
				return constants$4.ERROR.PAUSED;
			} else if (client[kPipelining] === 1) setImmediate(resume, client);
else resume(client);
		}
	};
	function onParserTimeout(parser) {
		const { socket, timeoutType, client } = parser;
		if (timeoutType === TIMEOUT_HEADERS) {
			if (!socket[kWriting] || socket.writableNeedDrain || client[kRunning$3] > 1) {
				assert$16(!parser.paused, "cannot be paused while waiting for headers");
				util$15.destroy(socket, new HeadersTimeoutError());
			}
		} else if (timeoutType === TIMEOUT_BODY) {
			if (!parser.paused) util$15.destroy(socket, new BodyTimeoutError());
		} else if (timeoutType === TIMEOUT_IDLE) {
			assert$16(client[kRunning$3] === 0 && client[kKeepAliveTimeoutValue]);
			util$15.destroy(socket, new InformationalError("socket idle timeout"));
		}
	}
	function onSocketReadable() {
		const { [kParser]: parser } = this;
		if (parser) parser.readMore();
	}
	function onSocketError$1(err) {
		const { [kClient$1]: client, [kParser]: parser } = this;
		assert$16(err.code !== "ERR_TLS_CERT_ALTNAME_INVALID");
		if (client[kHTTPConnVersion] !== "h2") {
			if (err.code === "ECONNRESET" && parser.statusCode && !parser.shouldKeepAlive) {
				parser.onMessageComplete();
				return;
			}
		}
		this[kError$2] = err;
		onError(this[kClient$1], err);
	}
	function onError(client, err) {
		if (client[kRunning$3] === 0 && err.code !== "UND_ERR_INFO" && err.code !== "UND_ERR_SOCKET") {
			assert$16(client[kPendingIdx] === client[kRunningIdx]);
			const requests = client[kQueue$1].splice(client[kRunningIdx]);
			for (let i$2 = 0; i$2 < requests.length; i$2++) {
				const request$2 = requests[i$2];
				errorRequest(client, request$2, err);
			}
			assert$16(client[kSize$4] === 0);
		}
	}
	function onSocketEnd() {
		const { [kParser]: parser, [kClient$1]: client } = this;
		if (client[kHTTPConnVersion] !== "h2") {
			if (parser.statusCode && !parser.shouldKeepAlive) {
				parser.onMessageComplete();
				return;
			}
		}
		util$15.destroy(this, new SocketError$2("other side closed", util$15.getSocketInfo(this)));
	}
	function onSocketClose$1() {
		const { [kClient$1]: client, [kParser]: parser } = this;
		if (client[kHTTPConnVersion] === "h1" && parser) {
			if (!this[kError$2] && parser.statusCode && !parser.shouldKeepAlive) parser.onMessageComplete();
			this[kParser].destroy();
			this[kParser] = null;
		}
		const err = this[kError$2] || new SocketError$2("closed", util$15.getSocketInfo(this));
		client[kSocket] = null;
		if (client.destroyed) {
			assert$16(client[kPending$2] === 0);
			const requests = client[kQueue$1].splice(client[kRunningIdx]);
			for (let i$2 = 0; i$2 < requests.length; i$2++) {
				const request$2 = requests[i$2];
				errorRequest(client, request$2, err);
			}
		} else if (client[kRunning$3] > 0 && err.code !== "UND_ERR_INFO") {
			const request$2 = client[kQueue$1][client[kRunningIdx]];
			client[kQueue$1][client[kRunningIdx]++] = null;
			errorRequest(client, request$2, err);
		}
		client[kPendingIdx] = client[kRunningIdx];
		assert$16(client[kRunning$3] === 0);
		client.emit("disconnect", client[kUrl$3], [client], err);
		resume(client);
	}
	async function connect$1(client) {
		assert$16(!client[kConnecting]);
		assert$16(!client[kSocket]);
		let { host, hostname, protocol, port } = client[kUrl$3];
		if (hostname[0] === "[") {
			const idx = hostname.indexOf("]");
			assert$16(idx !== -1);
			const ip = hostname.substring(1, idx);
			assert$16(net.isIP(ip));
			hostname = ip;
		}
		client[kConnecting] = true;
		if (channels$2.beforeConnect.hasSubscribers) channels$2.beforeConnect.publish({
			connectParams: {
				host,
				hostname,
				protocol,
				port,
				servername: client[kServerName],
				localAddress: client[kLocalAddress]
			},
			connector: client[kConnector]
		});
		try {
			const socket = await new Promise((resolve$1, reject) => {
				client[kConnector]({
					host,
					hostname,
					protocol,
					port,
					servername: client[kServerName],
					localAddress: client[kLocalAddress]
				}, (err, socket$1) => {
					if (err) reject(err);
else resolve$1(socket$1);
				});
			});
			if (client.destroyed) {
				util$15.destroy(socket.on("error", () => {}), new ClientDestroyedError());
				return;
			}
			client[kConnecting] = false;
			assert$16(socket);
			const isH2 = socket.alpnProtocol === "h2";
			if (isH2) {
				if (!h2ExperimentalWarned) {
					h2ExperimentalWarned = true;
					process.emitWarning("H2 support is experimental, expect them to change at any time.", { code: "UNDICI-H2" });
				}
				const session = http2.connect(client[kUrl$3], {
					createConnection: () => socket,
					peerMaxConcurrentStreams: client[kHTTP2SessionState].maxConcurrentStreams
				});
				client[kHTTPConnVersion] = "h2";
				session[kClient$1] = client;
				session[kSocket] = socket;
				session.on("error", onHttp2SessionError);
				session.on("frameError", onHttp2FrameError);
				session.on("end", onHttp2SessionEnd);
				session.on("goaway", onHTTP2GoAway);
				session.on("close", onSocketClose$1);
				session.unref();
				client[kHTTP2Session] = session;
				socket[kHTTP2Session] = session;
			} else {
				if (!llhttpInstance) {
					llhttpInstance = await llhttpPromise;
					llhttpPromise = null;
				}
				socket[kNoRef] = false;
				socket[kWriting] = false;
				socket[kReset] = false;
				socket[kBlocking] = false;
				socket[kParser] = new Parser(client, socket, llhttpInstance);
			}
			socket[kCounter] = 0;
			socket[kMaxRequests] = client[kMaxRequests];
			socket[kClient$1] = client;
			socket[kError$2] = null;
			socket.on("error", onSocketError$1).on("readable", onSocketReadable).on("end", onSocketEnd).on("close", onSocketClose$1);
			client[kSocket] = socket;
			if (channels$2.connected.hasSubscribers) channels$2.connected.publish({
				connectParams: {
					host,
					hostname,
					protocol,
					port,
					servername: client[kServerName],
					localAddress: client[kLocalAddress]
				},
				connector: client[kConnector],
				socket
			});
			client.emit("connect", client[kUrl$3], [client]);
		} catch (err) {
			if (client.destroyed) return;
			client[kConnecting] = false;
			if (channels$2.connectError.hasSubscribers) channels$2.connectError.publish({
				connectParams: {
					host,
					hostname,
					protocol,
					port,
					servername: client[kServerName],
					localAddress: client[kLocalAddress]
				},
				connector: client[kConnector],
				error: err
			});
			if (err.code === "ERR_TLS_CERT_ALTNAME_INVALID") {
				assert$16(client[kRunning$3] === 0);
				while (client[kPending$2] > 0 && client[kQueue$1][client[kPendingIdx]].servername === client[kServerName]) {
					const request$2 = client[kQueue$1][client[kPendingIdx]++];
					errorRequest(client, request$2, err);
				}
			} else onError(client, err);
			client.emit("connectionError", client[kUrl$3], [client], err);
		}
		resume(client);
	}
	function emitDrain(client) {
		client[kNeedDrain$3] = 0;
		client.emit("drain", client[kUrl$3], [client]);
	}
	function resume(client, sync$5) {
		if (client[kResuming] === 2) return;
		client[kResuming] = 2;
		_resume(client, sync$5);
		client[kResuming] = 0;
		if (client[kRunningIdx] > 256) {
			client[kQueue$1].splice(0, client[kRunningIdx]);
			client[kPendingIdx] -= client[kRunningIdx];
			client[kRunningIdx] = 0;
		}
	}
	function _resume(client, sync$5) {
		while (true) {
			if (client.destroyed) {
				assert$16(client[kPending$2] === 0);
				return;
			}
			if (client[kClosedResolve$1] && !client[kSize$4]) {
				client[kClosedResolve$1]();
				client[kClosedResolve$1] = null;
				return;
			}
			const socket = client[kSocket];
			if (socket && !socket.destroyed && socket.alpnProtocol !== "h2") {
				if (client[kSize$4] === 0) {
					if (!socket[kNoRef] && socket.unref) {
						socket.unref();
						socket[kNoRef] = true;
					}
				} else if (socket[kNoRef] && socket.ref) {
					socket.ref();
					socket[kNoRef] = false;
				}
				if (client[kSize$4] === 0) {
					if (socket[kParser].timeoutType !== TIMEOUT_IDLE) socket[kParser].setTimeout(client[kKeepAliveTimeoutValue], TIMEOUT_IDLE);
				} else if (client[kRunning$3] > 0 && socket[kParser].statusCode < 200) {
					if (socket[kParser].timeoutType !== TIMEOUT_HEADERS) {
						const request$3 = client[kQueue$1][client[kRunningIdx]];
						const headersTimeout = request$3.headersTimeout != null ? request$3.headersTimeout : client[kHeadersTimeout];
						socket[kParser].setTimeout(headersTimeout, TIMEOUT_HEADERS);
					}
				}
			}
			if (client[kBusy$1]) client[kNeedDrain$3] = 2;
else if (client[kNeedDrain$3] === 2) {
				if (sync$5) {
					client[kNeedDrain$3] = 1;
					process.nextTick(emitDrain, client);
				} else emitDrain(client);
				continue;
			}
			if (client[kPending$2] === 0) return;
			if (client[kRunning$3] >= (client[kPipelining] || 1)) return;
			const request$2 = client[kQueue$1][client[kPendingIdx]];
			if (client[kUrl$3].protocol === "https:" && client[kServerName] !== request$2.servername) {
				if (client[kRunning$3] > 0) return;
				client[kServerName] = request$2.servername;
				if (socket && socket.servername !== request$2.servername) {
					util$15.destroy(socket, new InformationalError("servername changed"));
					return;
				}
			}
			if (client[kConnecting]) return;
			if (!socket && !client[kHTTP2Session]) {
				connect$1(client);
				return;
			}
			if (socket.destroyed || socket[kWriting] || socket[kReset] || socket[kBlocking]) return;
			if (client[kRunning$3] > 0 && !request$2.idempotent) return;
			if (client[kRunning$3] > 0 && (request$2.upgrade || request$2.method === "CONNECT")) return;
			if (client[kRunning$3] > 0 && util$15.bodyLength(request$2.body) !== 0 && (util$15.isStream(request$2.body) || util$15.isAsyncIterable(request$2.body))) return;
			if (!request$2.aborted && write(client, request$2)) client[kPendingIdx]++;
else client[kQueue$1].splice(client[kPendingIdx], 1);
		}
	}
	function shouldSendContentLength(method) {
		return method !== "GET" && method !== "HEAD" && method !== "OPTIONS" && method !== "TRACE" && method !== "CONNECT";
	}
	function write(client, request$2) {
		if (client[kHTTPConnVersion] === "h2") {
			writeH2(client, client[kHTTP2Session], request$2);
			return;
		}
		const { body, method, path: path$72, host, upgrade: upgrade$1, headers, blocking, reset } = request$2;
		const expectsPayload = method === "PUT" || method === "POST" || method === "PATCH";
		if (body && typeof body.read === "function") body.read(0);
		const bodyLength$1 = util$15.bodyLength(body);
		let contentLength = bodyLength$1;
		if (contentLength === null) contentLength = request$2.contentLength;
		if (contentLength === 0 && !expectsPayload) contentLength = null;
		if (shouldSendContentLength(method) && contentLength > 0 && request$2.contentLength !== null && request$2.contentLength !== contentLength) {
			if (client[kStrictContentLength]) {
				errorRequest(client, request$2, new RequestContentLengthMismatchError());
				return false;
			}
			process.emitWarning(new RequestContentLengthMismatchError());
		}
		const socket = client[kSocket];
		try {
			request$2.onConnect((err) => {
				if (request$2.aborted || request$2.completed) return;
				errorRequest(client, request$2, err || new RequestAbortedError$8());
				util$15.destroy(socket, new InformationalError("aborted"));
			});
		} catch (err) {
			errorRequest(client, request$2, err);
		}
		if (request$2.aborted) return false;
		if (method === "HEAD") socket[kReset] = true;
		if (upgrade$1 || method === "CONNECT") socket[kReset] = true;
		if (reset != null) socket[kReset] = reset;
		if (client[kMaxRequests] && socket[kCounter]++ >= client[kMaxRequests]) socket[kReset] = true;
		if (blocking) socket[kBlocking] = true;
		let header = `${method} ${path$72} HTTP/1.1\r\n`;
		if (typeof host === "string") header += `host: ${host}\r\n`;
else header += client[kHostHeader];
		if (upgrade$1) header += `connection: upgrade\r\nupgrade: ${upgrade$1}\r\n`;
else if (client[kPipelining] && !socket[kReset]) header += "connection: keep-alive\r\n";
else header += "connection: close\r\n";
		if (headers) header += headers;
		if (channels$2.sendHeaders.hasSubscribers) channels$2.sendHeaders.publish({
			request: request$2,
			headers: header,
			socket
		});
		if (!body || bodyLength$1 === 0) {
			if (contentLength === 0) socket.write(`${header}content-length: 0\r\n\r\n`, "latin1");
else {
				assert$16(contentLength === null, "no body must not have content length");
				socket.write(`${header}\r\n`, "latin1");
			}
			request$2.onRequestSent();
		} else if (util$15.isBuffer(body)) {
			assert$16(contentLength === body.byteLength, "buffer body must have content length");
			socket.cork();
			socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, "latin1");
			socket.write(body);
			socket.uncork();
			request$2.onBodySent(body);
			request$2.onRequestSent();
			if (!expectsPayload) socket[kReset] = true;
		} else if (util$15.isBlobLike(body)) if (typeof body.stream === "function") writeIterable({
			body: body.stream(),
			client,
			request: request$2,
			socket,
			contentLength,
			header,
			expectsPayload
		});
else writeBlob({
			body,
			client,
			request: request$2,
			socket,
			contentLength,
			header,
			expectsPayload
		});
else if (util$15.isStream(body)) writeStream({
			body,
			client,
			request: request$2,
			socket,
			contentLength,
			header,
			expectsPayload
		});
else if (util$15.isIterable(body)) writeIterable({
			body,
			client,
			request: request$2,
			socket,
			contentLength,
			header,
			expectsPayload
		});
else assert$16(false);
		return true;
	}
	function writeH2(client, session, request$2) {
		const { body, method, path: path$72, host, upgrade: upgrade$1, expectContinue, signal, headers: reqHeaders } = request$2;
		let headers;
		if (typeof reqHeaders === "string") headers = Request$3[kHTTP2CopyHeaders](reqHeaders.trim());
else headers = reqHeaders;
		if (upgrade$1) {
			errorRequest(client, request$2, new Error("Upgrade not supported for H2"));
			return false;
		}
		try {
			request$2.onConnect((err) => {
				if (request$2.aborted || request$2.completed) return;
				errorRequest(client, request$2, err || new RequestAbortedError$8());
			});
		} catch (err) {
			errorRequest(client, request$2, err);
		}
		if (request$2.aborted) return false;
		/** @type {import('node:http2').ClientHttp2Stream} */
		let stream$3;
		const h2State = client[kHTTP2SessionState];
		headers[HTTP2_HEADER_AUTHORITY] = host || client[kHost];
		headers[HTTP2_HEADER_METHOD] = method;
		if (method === "CONNECT") {
			session.ref();
			stream$3 = session.request(headers, {
				endStream: false,
				signal
			});
			if (stream$3.id && !stream$3.pending) {
				request$2.onUpgrade(null, null, stream$3);
				++h2State.openStreams;
			} else stream$3.once("ready", () => {
				request$2.onUpgrade(null, null, stream$3);
				++h2State.openStreams;
			});
			stream$3.once("close", () => {
				h2State.openStreams -= 1;
				if (h2State.openStreams === 0) session.unref();
			});
			return true;
		}
		headers[HTTP2_HEADER_PATH] = path$72;
		headers[HTTP2_HEADER_SCHEME] = "https";
		const expectsPayload = method === "PUT" || method === "POST" || method === "PATCH";
		if (body && typeof body.read === "function") body.read(0);
		let contentLength = util$15.bodyLength(body);
		if (contentLength == null) contentLength = request$2.contentLength;
		if (contentLength === 0 || !expectsPayload) contentLength = null;
		if (shouldSendContentLength(method) && contentLength > 0 && request$2.contentLength != null && request$2.contentLength !== contentLength) {
			if (client[kStrictContentLength]) {
				errorRequest(client, request$2, new RequestContentLengthMismatchError());
				return false;
			}
			process.emitWarning(new RequestContentLengthMismatchError());
		}
		if (contentLength != null) {
			assert$16(body, "no body must not have content length");
			headers[HTTP2_HEADER_CONTENT_LENGTH] = `${contentLength}`;
		}
		session.ref();
		const shouldEndStream = method === "GET" || method === "HEAD";
		if (expectContinue) {
			headers[HTTP2_HEADER_EXPECT] = "100-continue";
			stream$3 = session.request(headers, {
				endStream: shouldEndStream,
				signal
			});
			stream$3.once("continue", writeBodyH2);
		} else {
			stream$3 = session.request(headers, {
				endStream: shouldEndStream,
				signal
			});
			writeBodyH2();
		}
		++h2State.openStreams;
		stream$3.once("response", (headers$1) => {
			const { [HTTP2_HEADER_STATUS]: statusCode,...realHeaders } = headers$1;
			if (request$2.onHeaders(Number(statusCode), realHeaders, stream$3.resume.bind(stream$3), "") === false) stream$3.pause();
		});
		stream$3.once("end", () => {
			request$2.onComplete([]);
		});
		stream$3.on("data", (chunk) => {
			if (request$2.onData(chunk) === false) stream$3.pause();
		});
		stream$3.once("close", () => {
			h2State.openStreams -= 1;
			if (h2State.openStreams === 0) session.unref();
		});
		stream$3.once("error", function(err) {
			if (client[kHTTP2Session] && !client[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {
				h2State.streams -= 1;
				util$15.destroy(stream$3, err);
			}
		});
		stream$3.once("frameError", (type, code$1) => {
			const err = new InformationalError(`HTTP/2: "frameError" received - type ${type}, code ${code$1}`);
			errorRequest(client, request$2, err);
			if (client[kHTTP2Session] && !client[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {
				h2State.streams -= 1;
				util$15.destroy(stream$3, err);
			}
		});
		return true;
		function writeBodyH2() {
			if (!body) request$2.onRequestSent();
else if (util$15.isBuffer(body)) {
				assert$16(contentLength === body.byteLength, "buffer body must have content length");
				stream$3.cork();
				stream$3.write(body);
				stream$3.uncork();
				stream$3.end();
				request$2.onBodySent(body);
				request$2.onRequestSent();
			} else if (util$15.isBlobLike(body)) if (typeof body.stream === "function") writeIterable({
				client,
				request: request$2,
				contentLength,
				h2stream: stream$3,
				expectsPayload,
				body: body.stream(),
				socket: client[kSocket],
				header: ""
			});
else writeBlob({
				body,
				client,
				request: request$2,
				contentLength,
				expectsPayload,
				h2stream: stream$3,
				header: "",
				socket: client[kSocket]
			});
else if (util$15.isStream(body)) writeStream({
				body,
				client,
				request: request$2,
				contentLength,
				expectsPayload,
				socket: client[kSocket],
				h2stream: stream$3,
				header: ""
			});
else if (util$15.isIterable(body)) writeIterable({
				body,
				client,
				request: request$2,
				contentLength,
				expectsPayload,
				header: "",
				h2stream: stream$3,
				socket: client[kSocket]
			});
else assert$16(false);
		}
	}
	function writeStream({ h2stream, body, client, request: request$2, socket, contentLength, header, expectsPayload }) {
		assert$16(contentLength !== 0 || client[kRunning$3] === 0, "stream body cannot be pipelined");
		if (client[kHTTPConnVersion] === "h2") {
			const pipe = pipeline$2(body, h2stream, (err) => {
				if (err) {
					util$15.destroy(body, err);
					util$15.destroy(h2stream, err);
				} else request$2.onRequestSent();
			});
			pipe.on("data", onPipeData);
			pipe.once("end", () => {
				pipe.removeListener("data", onPipeData);
				util$15.destroy(pipe);
			});
			function onPipeData(chunk) {
				request$2.onBodySent(chunk);
			}
			return;
		}
		let finished$1 = false;
		const writer = new AsyncWriter({
			socket,
			request: request$2,
			contentLength,
			client,
			expectsPayload,
			header
		});
		const onData = function(chunk) {
			if (finished$1) return;
			try {
				if (!writer.write(chunk) && this.pause) this.pause();
			} catch (err) {
				util$15.destroy(this, err);
			}
		};
		const onDrain = function() {
			if (finished$1) return;
			if (body.resume) body.resume();
		};
		const onAbort = function() {
			if (finished$1) return;
			const err = new RequestAbortedError$8();
			queueMicrotask(() => onFinished(err));
		};
		const onFinished = function(err) {
			if (finished$1) return;
			finished$1 = true;
			assert$16(socket.destroyed || socket[kWriting] && client[kRunning$3] <= 1);
			socket.off("drain", onDrain).off("error", onFinished);
			body.removeListener("data", onData).removeListener("end", onFinished).removeListener("error", onFinished).removeListener("close", onAbort);
			if (!err) try {
				writer.end();
			} catch (er) {
				err = er;
			}
			writer.destroy(err);
			if (err && (err.code !== "UND_ERR_INFO" || err.message !== "reset")) util$15.destroy(body, err);
else util$15.destroy(body);
		};
		body.on("data", onData).on("end", onFinished).on("error", onFinished).on("close", onAbort);
		if (body.resume) body.resume();
		socket.on("drain", onDrain).on("error", onFinished);
	}
	async function writeBlob({ h2stream, body, client, request: request$2, socket, contentLength, header, expectsPayload }) {
		assert$16(contentLength === body.size, "blob body must have content length");
		const isH2 = client[kHTTPConnVersion] === "h2";
		try {
			if (contentLength != null && contentLength !== body.size) throw new RequestContentLengthMismatchError();
			const buffer$1 = Buffer.from(await body.arrayBuffer());
			if (isH2) {
				h2stream.cork();
				h2stream.write(buffer$1);
				h2stream.uncork();
			} else {
				socket.cork();
				socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, "latin1");
				socket.write(buffer$1);
				socket.uncork();
			}
			request$2.onBodySent(buffer$1);
			request$2.onRequestSent();
			if (!expectsPayload) socket[kReset] = true;
			resume(client);
		} catch (err) {
			util$15.destroy(isH2 ? h2stream : socket, err);
		}
	}
	async function writeIterable({ h2stream, body, client, request: request$2, socket, contentLength, header, expectsPayload }) {
		assert$16(contentLength !== 0 || client[kRunning$3] === 0, "iterator body cannot be pipelined");
		let callback = null;
		function onDrain() {
			if (callback) {
				const cb = callback;
				callback = null;
				cb();
			}
		}
		const waitForDrain = () => new Promise((resolve$1, reject) => {
			assert$16(callback === null);
			if (socket[kError$2]) reject(socket[kError$2]);
else callback = resolve$1;
		});
		if (client[kHTTPConnVersion] === "h2") {
			h2stream.on("close", onDrain).on("drain", onDrain);
			try {
				for await (const chunk of body) {
					if (socket[kError$2]) throw socket[kError$2];
					const res = h2stream.write(chunk);
					request$2.onBodySent(chunk);
					if (!res) await waitForDrain();
				}
			} catch (err) {
				h2stream.destroy(err);
			} finally {
				request$2.onRequestSent();
				h2stream.end();
				h2stream.off("close", onDrain).off("drain", onDrain);
			}
			return;
		}
		socket.on("close", onDrain).on("drain", onDrain);
		const writer = new AsyncWriter({
			socket,
			request: request$2,
			contentLength,
			client,
			expectsPayload,
			header
		});
		try {
			for await (const chunk of body) {
				if (socket[kError$2]) throw socket[kError$2];
				if (!writer.write(chunk)) await waitForDrain();
			}
			writer.end();
		} catch (err) {
			writer.destroy(err);
		} finally {
			socket.off("close", onDrain).off("drain", onDrain);
		}
	}
	var AsyncWriter = class {
		constructor({ socket, request: request$2, contentLength, client, expectsPayload, header }) {
			this.socket = socket;
			this.request = request$2;
			this.contentLength = contentLength;
			this.client = client;
			this.bytesWritten = 0;
			this.expectsPayload = expectsPayload;
			this.header = header;
			socket[kWriting] = true;
		}
		write(chunk) {
			const { socket, request: request$2, contentLength, client, bytesWritten, expectsPayload, header } = this;
			if (socket[kError$2]) throw socket[kError$2];
			if (socket.destroyed) return false;
			const len = Buffer.byteLength(chunk);
			if (!len) return true;
			if (contentLength !== null && bytesWritten + len > contentLength) {
				if (client[kStrictContentLength]) throw new RequestContentLengthMismatchError();
				process.emitWarning(new RequestContentLengthMismatchError());
			}
			socket.cork();
			if (bytesWritten === 0) {
				if (!expectsPayload) socket[kReset] = true;
				if (contentLength === null) socket.write(`${header}transfer-encoding: chunked\r\n`, "latin1");
else socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, "latin1");
			}
			if (contentLength === null) socket.write(`\r\n${len.toString(16)}\r\n`, "latin1");
			this.bytesWritten += len;
			const ret = socket.write(chunk);
			socket.uncork();
			request$2.onBodySent(chunk);
			if (!ret) {
				if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {
					if (socket[kParser].timeout.refresh) socket[kParser].timeout.refresh();
				}
			}
			return ret;
		}
		end() {
			const { socket, contentLength, client, bytesWritten, expectsPayload, header, request: request$2 } = this;
			request$2.onRequestSent();
			socket[kWriting] = false;
			if (socket[kError$2]) throw socket[kError$2];
			if (socket.destroyed) return;
			if (bytesWritten === 0) if (expectsPayload) socket.write(`${header}content-length: 0\r\n\r\n`, "latin1");
else socket.write(`${header}\r\n`, "latin1");
else if (contentLength === null) socket.write("\r\n0\r\n\r\n", "latin1");
			if (contentLength !== null && bytesWritten !== contentLength) if (client[kStrictContentLength]) throw new RequestContentLengthMismatchError();
else process.emitWarning(new RequestContentLengthMismatchError());
			if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {
				if (socket[kParser].timeout.refresh) socket[kParser].timeout.refresh();
			}
			resume(client);
		}
		destroy(err) {
			const { socket, client } = this;
			socket[kWriting] = false;
			if (err) {
				assert$16(client[kRunning$3] <= 1, "pipeline should only contain this request");
				util$15.destroy(socket, err);
			}
		}
	};
	function errorRequest(client, request$2, err) {
		try {
			request$2.onError(err);
			assert$16(request$2.aborted);
		} catch (err$1) {
			client.emit("error", err$1);
		}
	}
	module.exports = Client$4;
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/node/fixed-queue.js
var require_fixed_queue = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/node/fixed-queue.js"(exports, module) {
	const kSize$3 = 2048;
	const kMask = kSize$3 - 1;
	var FixedCircularBuffer = class {
		constructor() {
			this.bottom = 0;
			this.top = 0;
			this.list = new Array(kSize$3);
			this.next = null;
		}
		isEmpty() {
			return this.top === this.bottom;
		}
		isFull() {
			return (this.top + 1 & kMask) === this.bottom;
		}
		push(data) {
			this.list[this.top] = data;
			this.top = this.top + 1 & kMask;
		}
		shift() {
			const nextItem = this.list[this.bottom];
			if (nextItem === undefined) return null;
			this.list[this.bottom] = undefined;
			this.bottom = this.bottom + 1 & kMask;
			return nextItem;
		}
	};
	module.exports = class FixedQueue$1 {
		constructor() {
			this.head = this.tail = new FixedCircularBuffer();
		}
		isEmpty() {
			return this.head.isEmpty();
		}
		push(data) {
			if (this.head.isFull()) this.head = this.head.next = new FixedCircularBuffer();
			this.head.push(data);
		}
		shift() {
			const tail = this.tail;
			const next = tail.shift();
			if (tail.isEmpty() && tail.next !== null) this.tail = tail.next;
			return next;
		}
	};
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/pool-stats.js
var require_pool_stats = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/pool-stats.js"(exports, module) {
	const { kFree: kFree$1, kConnected: kConnected$4, kPending: kPending$1, kQueued: kQueued$1, kRunning: kRunning$2, kSize: kSize$2 } = require_symbols$4();
	const kPool = Symbol("pool");
	var PoolStats$1 = class {
		constructor(pool) {
			this[kPool] = pool;
		}
		get connected() {
			return this[kPool][kConnected$4];
		}
		get free() {
			return this[kPool][kFree$1];
		}
		get pending() {
			return this[kPool][kPending$1];
		}
		get queued() {
			return this[kPool][kQueued$1];
		}
		get running() {
			return this[kPool][kRunning$2];
		}
		get size() {
			return this[kPool][kSize$2];
		}
	};
	module.exports = PoolStats$1;
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/pool-base.js
var require_pool_base = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/pool-base.js"(exports, module) {
	const DispatcherBase$2 = require_dispatcher_base();
	const FixedQueue = require_fixed_queue();
	const { kConnected: kConnected$3, kSize: kSize$1, kRunning: kRunning$1, kPending, kQueued, kBusy, kFree, kUrl: kUrl$2, kClose: kClose$4, kDestroy: kDestroy$2, kDispatch: kDispatch$1 } = require_symbols$4();
	const PoolStats = require_pool_stats();
	const kClients$4 = Symbol("clients");
	const kNeedDrain$2 = Symbol("needDrain");
	const kQueue = Symbol("queue");
	const kClosedResolve = Symbol("closed resolve");
	const kOnDrain$1 = Symbol("onDrain");
	const kOnConnect$1 = Symbol("onConnect");
	const kOnDisconnect$1 = Symbol("onDisconnect");
	const kOnConnectionError$1 = Symbol("onConnectionError");
	const kGetDispatcher$2 = Symbol("get dispatcher");
	const kAddClient$2 = Symbol("add client");
	const kRemoveClient$1 = Symbol("remove client");
	const kStats = Symbol("stats");
	var PoolBase$2 = class extends DispatcherBase$2 {
		constructor() {
			super();
			this[kQueue] = new FixedQueue();
			this[kClients$4] = [];
			this[kQueued] = 0;
			const pool = this;
			this[kOnDrain$1] = function onDrain(origin, targets) {
				const queue$1 = pool[kQueue];
				let needDrain = false;
				while (!needDrain) {
					const item = queue$1.shift();
					if (!item) break;
					pool[kQueued]--;
					needDrain = !this.dispatch(item.opts, item.handler);
				}
				this[kNeedDrain$2] = needDrain;
				if (!this[kNeedDrain$2] && pool[kNeedDrain$2]) {
					pool[kNeedDrain$2] = false;
					pool.emit("drain", origin, [pool, ...targets]);
				}
				if (pool[kClosedResolve] && queue$1.isEmpty()) Promise.all(pool[kClients$4].map((c) => c.close())).then(pool[kClosedResolve]);
			};
			this[kOnConnect$1] = (origin, targets) => {
				pool.emit("connect", origin, [pool, ...targets]);
			};
			this[kOnDisconnect$1] = (origin, targets, err) => {
				pool.emit("disconnect", origin, [pool, ...targets], err);
			};
			this[kOnConnectionError$1] = (origin, targets, err) => {
				pool.emit("connectionError", origin, [pool, ...targets], err);
			};
			this[kStats] = new PoolStats(this);
		}
		get [kBusy]() {
			return this[kNeedDrain$2];
		}
		get [kConnected$3]() {
			return this[kClients$4].filter((client) => client[kConnected$3]).length;
		}
		get [kFree]() {
			return this[kClients$4].filter((client) => client[kConnected$3] && !client[kNeedDrain$2]).length;
		}
		get [kPending]() {
			let ret = this[kQueued];
			for (const { [kPending]: pending } of this[kClients$4]) ret += pending;
			return ret;
		}
		get [kRunning$1]() {
			let ret = 0;
			for (const { [kRunning$1]: running } of this[kClients$4]) ret += running;
			return ret;
		}
		get [kSize$1]() {
			let ret = this[kQueued];
			for (const { [kSize$1]: size } of this[kClients$4]) ret += size;
			return ret;
		}
		get stats() {
			return this[kStats];
		}
		async [kClose$4]() {
			if (this[kQueue].isEmpty()) return Promise.all(this[kClients$4].map((c) => c.close()));
else return new Promise((resolve$1) => {
				this[kClosedResolve] = resolve$1;
			});
		}
		async [kDestroy$2](err) {
			while (true) {
				const item = this[kQueue].shift();
				if (!item) break;
				item.handler.onError(err);
			}
			return Promise.all(this[kClients$4].map((c) => c.destroy(err)));
		}
		[kDispatch$1](opts, handler$1) {
			const dispatcher = this[kGetDispatcher$2]();
			if (!dispatcher) {
				this[kNeedDrain$2] = true;
				this[kQueue].push({
					opts,
					handler: handler$1
				});
				this[kQueued]++;
			} else if (!dispatcher.dispatch(opts, handler$1)) {
				dispatcher[kNeedDrain$2] = true;
				this[kNeedDrain$2] = !this[kGetDispatcher$2]();
			}
			return !this[kNeedDrain$2];
		}
		[kAddClient$2](client) {
			client.on("drain", this[kOnDrain$1]).on("connect", this[kOnConnect$1]).on("disconnect", this[kOnDisconnect$1]).on("connectionError", this[kOnConnectionError$1]);
			this[kClients$4].push(client);
			if (this[kNeedDrain$2]) process.nextTick(() => {
				if (this[kNeedDrain$2]) this[kOnDrain$1](client[kUrl$2], [this, client]);
			});
			return this;
		}
		[kRemoveClient$1](client) {
			client.close(() => {
				const idx = this[kClients$4].indexOf(client);
				if (idx !== -1) this[kClients$4].splice(idx, 1);
			});
			this[kNeedDrain$2] = this[kClients$4].some((dispatcher) => !dispatcher[kNeedDrain$2] && dispatcher.closed !== true && dispatcher.destroyed !== true);
		}
	};
	module.exports = {
		PoolBase: PoolBase$2,
		kClients: kClients$4,
		kNeedDrain: kNeedDrain$2,
		kAddClient: kAddClient$2,
		kRemoveClient: kRemoveClient$1,
		kGetDispatcher: kGetDispatcher$2
	};
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/pool.js
var require_pool = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/pool.js"(exports, module) {
	const { PoolBase: PoolBase$1, kClients: kClients$3, kNeedDrain: kNeedDrain$1, kAddClient: kAddClient$1, kGetDispatcher: kGetDispatcher$1 } = require_pool_base();
	const Client$3 = require_client();
	const { InvalidArgumentError: InvalidArgumentError$15 } = require_errors();
	const util$14 = require_util$6();
	const { kUrl: kUrl$1, kInterceptors: kInterceptors$3 } = require_symbols$4();
	const buildConnector$2 = require_connect();
	const kOptions$3 = Symbol("options");
	const kConnections = Symbol("connections");
	const kFactory$3 = Symbol("factory");
	function defaultFactory$3(origin, opts) {
		return new Client$3(origin, opts);
	}
	var Pool$5 = class extends PoolBase$1 {
		constructor(origin, { connections, factory: factory$1 = defaultFactory$3, connect: connect$2, connectTimeout, tls: tls$2, maxCachedSessions, socketPath, autoSelectFamily, autoSelectFamilyAttemptTimeout, allowH2,...options } = {}) {
			super();
			if (connections != null && (!Number.isFinite(connections) || connections < 0)) throw new InvalidArgumentError$15("invalid connections");
			if (typeof factory$1 !== "function") throw new InvalidArgumentError$15("factory must be a function.");
			if (connect$2 != null && typeof connect$2 !== "function" && typeof connect$2 !== "object") throw new InvalidArgumentError$15("connect must be a function or an object");
			if (typeof connect$2 !== "function") connect$2 = buildConnector$2({
				...tls$2,
				maxCachedSessions,
				allowH2,
				socketPath,
				timeout: connectTimeout,
				...util$14.nodeHasAutoSelectFamily && autoSelectFamily ? {
					autoSelectFamily,
					autoSelectFamilyAttemptTimeout
				} : undefined,
				...connect$2
			});
			this[kInterceptors$3] = options.interceptors && options.interceptors.Pool && Array.isArray(options.interceptors.Pool) ? options.interceptors.Pool : [];
			this[kConnections] = connections || null;
			this[kUrl$1] = util$14.parseOrigin(origin);
			this[kOptions$3] = {
				...util$14.deepClone(options),
				connect: connect$2,
				allowH2
			};
			this[kOptions$3].interceptors = options.interceptors ? { ...options.interceptors } : undefined;
			this[kFactory$3] = factory$1;
		}
		[kGetDispatcher$1]() {
			let dispatcher = this[kClients$3].find((dispatcher$1) => !dispatcher$1[kNeedDrain$1]);
			if (dispatcher) return dispatcher;
			if (!this[kConnections] || this[kClients$3].length < this[kConnections]) {
				dispatcher = this[kFactory$3](this[kUrl$1], this[kOptions$3]);
				this[kAddClient$1](dispatcher);
			}
			return dispatcher;
		}
	};
	module.exports = Pool$5;
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/balanced-pool.js
var require_balanced_pool = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/balanced-pool.js"(exports, module) {
	const { BalancedPoolMissingUpstreamError, InvalidArgumentError: InvalidArgumentError$14 } = require_errors();
	const { PoolBase, kClients: kClients$2, kNeedDrain, kAddClient, kRemoveClient, kGetDispatcher } = require_pool_base();
	const Pool$4 = require_pool();
	const { kUrl, kInterceptors: kInterceptors$2 } = require_symbols$4();
	const { parseOrigin } = require_util$6();
	const kFactory$2 = Symbol("factory");
	const kOptions$2 = Symbol("options");
	const kGreatestCommonDivisor = Symbol("kGreatestCommonDivisor");
	const kCurrentWeight = Symbol("kCurrentWeight");
	const kIndex = Symbol("kIndex");
	const kWeight = Symbol("kWeight");
	const kMaxWeightPerServer = Symbol("kMaxWeightPerServer");
	const kErrorPenalty = Symbol("kErrorPenalty");
	function getGreatestCommonDivisor(a, b) {
		if (b === 0) return a;
		return getGreatestCommonDivisor(b, a % b);
	}
	function defaultFactory$2(origin, opts) {
		return new Pool$4(origin, opts);
	}
	var BalancedPool$1 = class extends PoolBase {
		constructor(upstreams = [], { factory: factory$1 = defaultFactory$2,...opts } = {}) {
			super();
			this[kOptions$2] = opts;
			this[kIndex] = -1;
			this[kCurrentWeight] = 0;
			this[kMaxWeightPerServer] = this[kOptions$2].maxWeightPerServer || 100;
			this[kErrorPenalty] = this[kOptions$2].errorPenalty || 15;
			if (!Array.isArray(upstreams)) upstreams = [upstreams];
			if (typeof factory$1 !== "function") throw new InvalidArgumentError$14("factory must be a function.");
			this[kInterceptors$2] = opts.interceptors && opts.interceptors.BalancedPool && Array.isArray(opts.interceptors.BalancedPool) ? opts.interceptors.BalancedPool : [];
			this[kFactory$2] = factory$1;
			for (const upstream of upstreams) this.addUpstream(upstream);
			this._updateBalancedPoolStats();
		}
		addUpstream(upstream) {
			const upstreamOrigin = parseOrigin(upstream).origin;
			if (this[kClients$2].find((pool$1) => pool$1[kUrl].origin === upstreamOrigin && pool$1.closed !== true && pool$1.destroyed !== true)) return this;
			const pool = this[kFactory$2](upstreamOrigin, Object.assign({}, this[kOptions$2]));
			this[kAddClient](pool);
			pool.on("connect", () => {
				pool[kWeight] = Math.min(this[kMaxWeightPerServer], pool[kWeight] + this[kErrorPenalty]);
			});
			pool.on("connectionError", () => {
				pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);
				this._updateBalancedPoolStats();
			});
			pool.on("disconnect", (...args) => {
				const err = args[2];
				if (err && err.code === "UND_ERR_SOCKET") {
					pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);
					this._updateBalancedPoolStats();
				}
			});
			for (const client of this[kClients$2]) client[kWeight] = this[kMaxWeightPerServer];
			this._updateBalancedPoolStats();
			return this;
		}
		_updateBalancedPoolStats() {
			this[kGreatestCommonDivisor] = this[kClients$2].map((p) => p[kWeight]).reduce(getGreatestCommonDivisor, 0);
		}
		removeUpstream(upstream) {
			const upstreamOrigin = parseOrigin(upstream).origin;
			const pool = this[kClients$2].find((pool$1) => pool$1[kUrl].origin === upstreamOrigin && pool$1.closed !== true && pool$1.destroyed !== true);
			if (pool) this[kRemoveClient](pool);
			return this;
		}
		get upstreams() {
			return this[kClients$2].filter((dispatcher) => dispatcher.closed !== true && dispatcher.destroyed !== true).map((p) => p[kUrl].origin);
		}
		[kGetDispatcher]() {
			if (this[kClients$2].length === 0) throw new BalancedPoolMissingUpstreamError();
			const dispatcher = this[kClients$2].find((dispatcher$1) => !dispatcher$1[kNeedDrain] && dispatcher$1.closed !== true && dispatcher$1.destroyed !== true);
			if (!dispatcher) return;
			const allClientsBusy = this[kClients$2].map((pool) => pool[kNeedDrain]).reduce((a, b) => a && b, true);
			if (allClientsBusy) return;
			let counter = 0;
			let maxWeightIndex = this[kClients$2].findIndex((pool) => !pool[kNeedDrain]);
			while (counter++ < this[kClients$2].length) {
				this[kIndex] = (this[kIndex] + 1) % this[kClients$2].length;
				const pool = this[kClients$2][this[kIndex]];
				if (pool[kWeight] > this[kClients$2][maxWeightIndex][kWeight] && !pool[kNeedDrain]) maxWeightIndex = this[kIndex];
				if (this[kIndex] === 0) {
					this[kCurrentWeight] = this[kCurrentWeight] - this[kGreatestCommonDivisor];
					if (this[kCurrentWeight] <= 0) this[kCurrentWeight] = this[kMaxWeightPerServer];
				}
				if (pool[kWeight] >= this[kCurrentWeight] && !pool[kNeedDrain]) return pool;
			}
			this[kCurrentWeight] = this[kClients$2][maxWeightIndex][kWeight];
			this[kIndex] = maxWeightIndex;
			return this[kClients$2][maxWeightIndex];
		}
	};
	module.exports = BalancedPool$1;
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/compat/dispatcher-weakref.js
var require_dispatcher_weakref = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/compat/dispatcher-weakref.js"(exports, module) {
	const { kConnected: kConnected$2, kSize } = require_symbols$4();
	var CompatWeakRef = class {
		constructor(value) {
			this.value = value;
		}
		deref() {
			return this.value[kConnected$2] === 0 && this.value[kSize] === 0 ? undefined : this.value;
		}
	};
	var CompatFinalizer = class {
		constructor(finalizer) {
			this.finalizer = finalizer;
		}
		register(dispatcher, key) {
			if (dispatcher.on) dispatcher.on("disconnect", () => {
				if (dispatcher[kConnected$2] === 0 && dispatcher[kSize] === 0) this.finalizer(key);
			});
		}
	};
	module.exports = function() {
		if (process.env.NODE_V8_COVERAGE) return {
			WeakRef: CompatWeakRef,
			FinalizationRegistry: CompatFinalizer
		};
		return {
			WeakRef: global.WeakRef || CompatWeakRef,
			FinalizationRegistry: global.FinalizationRegistry || CompatFinalizer
		};
	};
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/agent.js
var require_agent = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/agent.js"(exports, module) {
	const { InvalidArgumentError: InvalidArgumentError$13 } = require_errors();
	const { kClients: kClients$1, kRunning, kClose: kClose$3, kDestroy: kDestroy$1, kDispatch, kInterceptors: kInterceptors$1 } = require_symbols$4();
	const DispatcherBase$1 = require_dispatcher_base();
	const Pool$3 = require_pool();
	const Client$2 = require_client();
	const util$13 = require_util$6();
	const createRedirectInterceptor$1 = require_redirectInterceptor();
	const { WeakRef: WeakRef$1, FinalizationRegistry: FinalizationRegistry$1 } = require_dispatcher_weakref()();
	const kOnConnect = Symbol("onConnect");
	const kOnDisconnect = Symbol("onDisconnect");
	const kOnConnectionError = Symbol("onConnectionError");
	const kMaxRedirections = Symbol("maxRedirections");
	const kOnDrain = Symbol("onDrain");
	const kFactory$1 = Symbol("factory");
	const kFinalizer = Symbol("finalizer");
	const kOptions$1 = Symbol("options");
	function defaultFactory$1(origin, opts) {
		return opts && opts.connections === 1 ? new Client$2(origin, opts) : new Pool$3(origin, opts);
	}
	var Agent$4 = class extends DispatcherBase$1 {
		constructor({ factory: factory$1 = defaultFactory$1, maxRedirections = 0, connect: connect$2,...options } = {}) {
			super();
			if (typeof factory$1 !== "function") throw new InvalidArgumentError$13("factory must be a function.");
			if (connect$2 != null && typeof connect$2 !== "function" && typeof connect$2 !== "object") throw new InvalidArgumentError$13("connect must be a function or an object");
			if (!Number.isInteger(maxRedirections) || maxRedirections < 0) throw new InvalidArgumentError$13("maxRedirections must be a positive number");
			if (connect$2 && typeof connect$2 !== "function") connect$2 = { ...connect$2 };
			this[kInterceptors$1] = options.interceptors && options.interceptors.Agent && Array.isArray(options.interceptors.Agent) ? options.interceptors.Agent : [createRedirectInterceptor$1({ maxRedirections })];
			this[kOptions$1] = {
				...util$13.deepClone(options),
				connect: connect$2
			};
			this[kOptions$1].interceptors = options.interceptors ? { ...options.interceptors } : undefined;
			this[kMaxRedirections] = maxRedirections;
			this[kFactory$1] = factory$1;
			this[kClients$1] = new Map();
			this[kFinalizer] = new FinalizationRegistry$1(
				/* istanbul ignore next: gc is undeterministic */
				(key) => {
					const ref = this[kClients$1].get(key);
					if (ref !== undefined && ref.deref() === undefined) this[kClients$1].delete(key);
				}
);
			const agent = this;
			this[kOnDrain] = (origin, targets) => {
				agent.emit("drain", origin, [agent, ...targets]);
			};
			this[kOnConnect] = (origin, targets) => {
				agent.emit("connect", origin, [agent, ...targets]);
			};
			this[kOnDisconnect] = (origin, targets, err) => {
				agent.emit("disconnect", origin, [agent, ...targets], err);
			};
			this[kOnConnectionError] = (origin, targets, err) => {
				agent.emit("connectionError", origin, [agent, ...targets], err);
			};
		}
		get [kRunning]() {
			let ret = 0;
			for (const ref of this[kClients$1].values()) {
				const client = ref.deref();
				if (client) ret += client[kRunning];
			}
			return ret;
		}
		[kDispatch](opts, handler$1) {
			let key;
			if (opts.origin && (typeof opts.origin === "string" || opts.origin instanceof URL)) key = String(opts.origin);
else throw new InvalidArgumentError$13("opts.origin must be a non-empty string or URL.");
			const ref = this[kClients$1].get(key);
			let dispatcher = ref ? ref.deref() : null;
			if (!dispatcher) {
				dispatcher = this[kFactory$1](opts.origin, this[kOptions$1]).on("drain", this[kOnDrain]).on("connect", this[kOnConnect]).on("disconnect", this[kOnDisconnect]).on("connectionError", this[kOnConnectionError]);
				this[kClients$1].set(key, new WeakRef$1(dispatcher));
				this[kFinalizer].register(dispatcher, key);
			}
			return dispatcher.dispatch(opts, handler$1);
		}
		async [kClose$3]() {
			const closePromises = [];
			for (const ref of this[kClients$1].values()) {
				const client = ref.deref();
				if (client) closePromises.push(client.close());
			}
			await Promise.all(closePromises);
		}
		async [kDestroy$1](err) {
			const destroyPromises = [];
			for (const ref of this[kClients$1].values()) {
				const client = ref.deref();
				if (client) destroyPromises.push(client.destroy(err));
			}
			await Promise.all(destroyPromises);
		}
	};
	module.exports = Agent$4;
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/api/readable.js
var require_readable = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/api/readable.js"(exports, module) {
	const assert$15 = require("assert");
	const { Readable: Readable$3 } = require("stream");
	const { RequestAbortedError: RequestAbortedError$7, NotSupportedError, InvalidArgumentError: InvalidArgumentError$12 } = require_errors();
	const util$12 = require_util$6();
	const { ReadableStreamFrom, toUSVString: toUSVString$1 } = require_util$6();
	let Blob$1;
	const kConsume = Symbol("kConsume");
	const kReading = Symbol("kReading");
	const kBody = Symbol("kBody");
	const kAbort = Symbol("abort");
	const kContentType = Symbol("kContentType");
	const noop$3 = () => {};
	module.exports = class BodyReadable extends Readable$3 {
		constructor({ resume: resume$1, abort: abort$1, contentType = "", highWaterMark = 65536 }) {
			super({
				autoDestroy: true,
				read: resume$1,
				highWaterMark
			});
			this._readableState.dataEmitted = false;
			this[kAbort] = abort$1;
			this[kConsume] = null;
			this[kBody] = null;
			this[kContentType] = contentType;
			this[kReading] = false;
		}
		destroy(err) {
			if (this.destroyed) return this;
			if (!err && !this._readableState.endEmitted) err = new RequestAbortedError$7();
			if (err) this[kAbort]();
			return super.destroy(err);
		}
		emit(ev, ...args) {
			if (ev === "data") this._readableState.dataEmitted = true;
else if (ev === "error") this._readableState.errorEmitted = true;
			return super.emit(ev, ...args);
		}
		on(ev, ...args) {
			if (ev === "data" || ev === "readable") this[kReading] = true;
			return super.on(ev, ...args);
		}
		addListener(ev, ...args) {
			return this.on(ev, ...args);
		}
		off(ev, ...args) {
			const ret = super.off(ev, ...args);
			if (ev === "data" || ev === "readable") this[kReading] = this.listenerCount("data") > 0 || this.listenerCount("readable") > 0;
			return ret;
		}
		removeListener(ev, ...args) {
			return this.off(ev, ...args);
		}
		push(chunk) {
			if (this[kConsume] && chunk !== null && this.readableLength === 0) {
				consumePush(this[kConsume], chunk);
				return this[kReading] ? super.push(chunk) : true;
			}
			return super.push(chunk);
		}
		async text() {
			return consume(this, "text");
		}
		async json() {
			return consume(this, "json");
		}
		async blob() {
			return consume(this, "blob");
		}
		async arrayBuffer() {
			return consume(this, "arrayBuffer");
		}
		async formData() {
			throw new NotSupportedError();
		}
		get bodyUsed() {
			return util$12.isDisturbed(this);
		}
		get body() {
			if (!this[kBody]) {
				this[kBody] = ReadableStreamFrom(this);
				if (this[kConsume]) {
					this[kBody].getReader();
					assert$15(this[kBody].locked);
				}
			}
			return this[kBody];
		}
		dump(opts) {
			let limit = opts && Number.isFinite(opts.limit) ? opts.limit : 262144;
			const signal = opts && opts.signal;
			if (signal) try {
				if (typeof signal !== "object" || !("aborted" in signal)) throw new InvalidArgumentError$12("signal must be an AbortSignal");
				util$12.throwIfAborted(signal);
			} catch (err) {
				return Promise.reject(err);
			}
			if (this.closed) return Promise.resolve(null);
			return new Promise((resolve$1, reject) => {
				const signalListenerCleanup = signal ? util$12.addAbortListener(signal, () => {
					this.destroy();
				}) : noop$3;
				this.on("close", function() {
					signalListenerCleanup();
					if (signal && signal.aborted) reject(signal.reason || Object.assign(new Error("The operation was aborted"), { name: "AbortError" }));
else resolve$1(null);
				}).on("error", noop$3).on("data", function(chunk) {
					limit -= chunk.length;
					if (limit <= 0) this.destroy();
				}).resume();
			});
		}
	};
	function isLocked(self$1) {
		return self$1[kBody] && self$1[kBody].locked === true || self$1[kConsume];
	}
	function isUnusable(self$1) {
		return util$12.isDisturbed(self$1) || isLocked(self$1);
	}
	async function consume(stream$3, type) {
		if (isUnusable(stream$3)) throw new TypeError("unusable");
		assert$15(!stream$3[kConsume]);
		return new Promise((resolve$1, reject) => {
			stream$3[kConsume] = {
				type,
				stream: stream$3,
				resolve: resolve$1,
				reject,
				length: 0,
				body: []
			};
			stream$3.on("error", function(err) {
				consumeFinish(this[kConsume], err);
			}).on("close", function() {
				if (this[kConsume].body !== null) consumeFinish(this[kConsume], new RequestAbortedError$7());
			});
			process.nextTick(consumeStart, stream$3[kConsume]);
		});
	}
	function consumeStart(consume$1) {
		if (consume$1.body === null) return;
		const { _readableState: state } = consume$1.stream;
		for (const chunk of state.buffer) consumePush(consume$1, chunk);
		if (state.endEmitted) consumeEnd(this[kConsume]);
else consume$1.stream.on("end", function() {
			consumeEnd(this[kConsume]);
		});
		consume$1.stream.resume();
		while (consume$1.stream.read() != null);
	}
	function consumeEnd(consume$1) {
		const { type, body, resolve: resolve$1, stream: stream$3, length } = consume$1;
		try {
			if (type === "text") resolve$1(toUSVString$1(Buffer.concat(body)));
else if (type === "json") resolve$1(JSON.parse(Buffer.concat(body)));
else if (type === "arrayBuffer") {
				const dst = new Uint8Array(length);
				let pos = 0;
				for (const buf of body) {
					dst.set(buf, pos);
					pos += buf.byteLength;
				}
				resolve$1(dst.buffer);
			} else if (type === "blob") {
				if (!Blob$1) Blob$1 = require("buffer").Blob;
				resolve$1(new Blob$1(body, { type: stream$3[kContentType] }));
			}
			consumeFinish(consume$1);
		} catch (err) {
			stream$3.destroy(err);
		}
	}
	function consumePush(consume$1, chunk) {
		consume$1.length += chunk.length;
		consume$1.body.push(chunk);
	}
	function consumeFinish(consume$1, err) {
		if (consume$1.body === null) return;
		if (err) consume$1.reject(err);
else consume$1.resolve();
		consume$1.type = null;
		consume$1.stream = null;
		consume$1.resolve = null;
		consume$1.reject = null;
		consume$1.length = 0;
		consume$1.body = null;
	}
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/api/util.js
var require_util$4 = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/api/util.js"(exports, module) {
	const assert$14 = require("assert");
	const { ResponseStatusCodeError } = require_errors();
	const { toUSVString } = require_util$6();
	async function getResolveErrorBodyCallback$2({ callback, body, contentType, statusCode, statusMessage, headers }) {
		assert$14(body);
		let chunks = [];
		let limit = 0;
		for await (const chunk of body) {
			chunks.push(chunk);
			limit += chunk.length;
			if (limit > 131072) {
				chunks = null;
				break;
			}
		}
		if (statusCode === 204 || !contentType || !chunks) {
			process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers));
			return;
		}
		try {
			if (contentType.startsWith("application/json")) {
				const payload = JSON.parse(toUSVString(Buffer.concat(chunks)));
				process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers, payload));
				return;
			}
			if (contentType.startsWith("text/")) {
				const payload = toUSVString(Buffer.concat(chunks));
				process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers, payload));
				return;
			}
		} catch (err) {}
		process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers));
	}
	module.exports = { getResolveErrorBodyCallback: getResolveErrorBodyCallback$2 };
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/api/abort-signal.js
var require_abort_signal = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/api/abort-signal.js"(exports, module) {
	const { addAbortListener: addAbortListener$1 } = require_util$6();
	const { RequestAbortedError: RequestAbortedError$6 } = require_errors();
	const kListener = Symbol("kListener");
	const kSignal$1 = Symbol("kSignal");
	function abort(self$1) {
		if (self$1.abort) self$1.abort();
else self$1.onError(new RequestAbortedError$6());
	}
	function addSignal$5(self$1, signal) {
		self$1[kSignal$1] = null;
		self$1[kListener] = null;
		if (!signal) return;
		if (signal.aborted) {
			abort(self$1);
			return;
		}
		self$1[kSignal$1] = signal;
		self$1[kListener] = () => {
			abort(self$1);
		};
		addAbortListener$1(self$1[kSignal$1], self$1[kListener]);
	}
	function removeSignal$5(self$1) {
		if (!self$1[kSignal$1]) return;
		if ("removeEventListener" in self$1[kSignal$1]) self$1[kSignal$1].removeEventListener("abort", self$1[kListener]);
else self$1[kSignal$1].removeListener("abort", self$1[kListener]);
		self$1[kSignal$1] = null;
		self$1[kListener] = null;
	}
	module.exports = {
		addSignal: addSignal$5,
		removeSignal: removeSignal$5
	};
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/api/api-request.js
var require_api_request = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/api/api-request.js"(exports, module) {
	const Readable$2 = require_readable();
	const { InvalidArgumentError: InvalidArgumentError$11, RequestAbortedError: RequestAbortedError$5 } = require_errors();
	const util$11 = require_util$6();
	const { getResolveErrorBodyCallback: getResolveErrorBodyCallback$1 } = require_util$4();
	const { AsyncResource: AsyncResource$4 } = require("async_hooks");
	const { addSignal: addSignal$4, removeSignal: removeSignal$4 } = require_abort_signal();
	var RequestHandler = class extends AsyncResource$4 {
		constructor(opts, callback) {
			if (!opts || typeof opts !== "object") throw new InvalidArgumentError$11("invalid opts");
			const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError, highWaterMark } = opts;
			try {
				if (typeof callback !== "function") throw new InvalidArgumentError$11("invalid callback");
				if (highWaterMark && (typeof highWaterMark !== "number" || highWaterMark < 0)) throw new InvalidArgumentError$11("invalid highWaterMark");
				if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") throw new InvalidArgumentError$11("signal must be an EventEmitter or EventTarget");
				if (method === "CONNECT") throw new InvalidArgumentError$11("invalid method");
				if (onInfo && typeof onInfo !== "function") throw new InvalidArgumentError$11("invalid onInfo callback");
				super("UNDICI_REQUEST");
			} catch (err) {
				if (util$11.isStream(body)) util$11.destroy(body.on("error", util$11.nop), err);
				throw err;
			}
			this.responseHeaders = responseHeaders || null;
			this.opaque = opaque || null;
			this.callback = callback;
			this.res = null;
			this.abort = null;
			this.body = body;
			this.trailers = {};
			this.context = null;
			this.onInfo = onInfo || null;
			this.throwOnError = throwOnError;
			this.highWaterMark = highWaterMark;
			if (util$11.isStream(body)) body.on("error", (err) => {
				this.onError(err);
			});
			addSignal$4(this, signal);
		}
		onConnect(abort$1, context$1) {
			if (!this.callback) throw new RequestAbortedError$5();
			this.abort = abort$1;
			this.context = context$1;
		}
		onHeaders(statusCode, rawHeaders, resume$1, statusMessage) {
			const { callback, opaque, abort: abort$1, context: context$1, responseHeaders, highWaterMark } = this;
			const headers = responseHeaders === "raw" ? util$11.parseRawHeaders(rawHeaders) : util$11.parseHeaders(rawHeaders);
			if (statusCode < 200) {
				if (this.onInfo) this.onInfo({
					statusCode,
					headers
				});
				return;
			}
			const parsedHeaders = responseHeaders === "raw" ? util$11.parseHeaders(rawHeaders) : headers;
			const contentType = parsedHeaders["content-type"];
			const body = new Readable$2({
				resume: resume$1,
				abort: abort$1,
				contentType,
				highWaterMark
			});
			this.callback = null;
			this.res = body;
			if (callback !== null) if (this.throwOnError && statusCode >= 400) this.runInAsyncScope(getResolveErrorBodyCallback$1, null, {
				callback,
				body,
				contentType,
				statusCode,
				statusMessage,
				headers
			});
else this.runInAsyncScope(callback, null, null, {
				statusCode,
				headers,
				trailers: this.trailers,
				opaque,
				body,
				context: context$1
			});
		}
		onData(chunk) {
			const { res } = this;
			return res.push(chunk);
		}
		onComplete(trailers) {
			const { res } = this;
			removeSignal$4(this);
			util$11.parseHeaders(trailers, this.trailers);
			res.push(null);
		}
		onError(err) {
			const { res, callback, body, opaque } = this;
			removeSignal$4(this);
			if (callback) {
				this.callback = null;
				queueMicrotask(() => {
					this.runInAsyncScope(callback, null, err, { opaque });
				});
			}
			if (res) {
				this.res = null;
				queueMicrotask(() => {
					util$11.destroy(res, err);
				});
			}
			if (body) {
				this.body = null;
				util$11.destroy(body, err);
			}
		}
	};
	function request$1(opts, callback) {
		if (callback === undefined) return new Promise((resolve$1, reject) => {
			request$1.call(this, opts, (err, data) => {
				return err ? reject(err) : resolve$1(data);
			});
		});
		try {
			this.dispatch(opts, new RequestHandler(opts, callback));
		} catch (err) {
			if (typeof callback !== "function") throw err;
			const opaque = opts && opts.opaque;
			queueMicrotask(() => callback(err, { opaque }));
		}
	}
	module.exports = request$1;
	module.exports.RequestHandler = RequestHandler;
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/api/api-stream.js
var require_api_stream = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/api/api-stream.js"(exports, module) {
	const { finished, PassThrough: PassThrough$2 } = require("stream");
	const { InvalidArgumentError: InvalidArgumentError$10, InvalidReturnValueError: InvalidReturnValueError$1, RequestAbortedError: RequestAbortedError$4 } = require_errors();
	const util$10 = require_util$6();
	const { getResolveErrorBodyCallback } = require_util$4();
	const { AsyncResource: AsyncResource$3 } = require("async_hooks");
	const { addSignal: addSignal$3, removeSignal: removeSignal$3 } = require_abort_signal();
	var StreamHandler = class extends AsyncResource$3 {
		constructor(opts, factory$1, callback) {
			if (!opts || typeof opts !== "object") throw new InvalidArgumentError$10("invalid opts");
			const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError } = opts;
			try {
				if (typeof callback !== "function") throw new InvalidArgumentError$10("invalid callback");
				if (typeof factory$1 !== "function") throw new InvalidArgumentError$10("invalid factory");
				if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") throw new InvalidArgumentError$10("signal must be an EventEmitter or EventTarget");
				if (method === "CONNECT") throw new InvalidArgumentError$10("invalid method");
				if (onInfo && typeof onInfo !== "function") throw new InvalidArgumentError$10("invalid onInfo callback");
				super("UNDICI_STREAM");
			} catch (err) {
				if (util$10.isStream(body)) util$10.destroy(body.on("error", util$10.nop), err);
				throw err;
			}
			this.responseHeaders = responseHeaders || null;
			this.opaque = opaque || null;
			this.factory = factory$1;
			this.callback = callback;
			this.res = null;
			this.abort = null;
			this.context = null;
			this.trailers = null;
			this.body = body;
			this.onInfo = onInfo || null;
			this.throwOnError = throwOnError || false;
			if (util$10.isStream(body)) body.on("error", (err) => {
				this.onError(err);
			});
			addSignal$3(this, signal);
		}
		onConnect(abort$1, context$1) {
			if (!this.callback) throw new RequestAbortedError$4();
			this.abort = abort$1;
			this.context = context$1;
		}
		onHeaders(statusCode, rawHeaders, resume$1, statusMessage) {
			const { factory: factory$1, opaque, context: context$1, callback, responseHeaders } = this;
			const headers = responseHeaders === "raw" ? util$10.parseRawHeaders(rawHeaders) : util$10.parseHeaders(rawHeaders);
			if (statusCode < 200) {
				if (this.onInfo) this.onInfo({
					statusCode,
					headers
				});
				return;
			}
			this.factory = null;
			let res;
			if (this.throwOnError && statusCode >= 400) {
				const parsedHeaders = responseHeaders === "raw" ? util$10.parseHeaders(rawHeaders) : headers;
				const contentType = parsedHeaders["content-type"];
				res = new PassThrough$2();
				this.callback = null;
				this.runInAsyncScope(getResolveErrorBodyCallback, null, {
					callback,
					body: res,
					contentType,
					statusCode,
					statusMessage,
					headers
				});
			} else {
				if (factory$1 === null) return;
				res = this.runInAsyncScope(factory$1, null, {
					statusCode,
					headers,
					opaque,
					context: context$1
				});
				if (!res || typeof res.write !== "function" || typeof res.end !== "function" || typeof res.on !== "function") throw new InvalidReturnValueError$1("expected Writable");
				finished(res, { readable: false }, (err) => {
					const { callback: callback$1, res: res$1, opaque: opaque$1, trailers, abort: abort$1 } = this;
					this.res = null;
					if (err || !res$1.readable) util$10.destroy(res$1, err);
					this.callback = null;
					this.runInAsyncScope(callback$1, null, err || null, {
						opaque: opaque$1,
						trailers
					});
					if (err) abort$1();
				});
			}
			res.on("drain", resume$1);
			this.res = res;
			const needDrain = res.writableNeedDrain !== undefined ? res.writableNeedDrain : res._writableState && res._writableState.needDrain;
			return needDrain !== true;
		}
		onData(chunk) {
			const { res } = this;
			return res ? res.write(chunk) : true;
		}
		onComplete(trailers) {
			const { res } = this;
			removeSignal$3(this);
			if (!res) return;
			this.trailers = util$10.parseHeaders(trailers);
			res.end();
		}
		onError(err) {
			const { res, callback, opaque, body } = this;
			removeSignal$3(this);
			this.factory = null;
			if (res) {
				this.res = null;
				util$10.destroy(res, err);
			} else if (callback) {
				this.callback = null;
				queueMicrotask(() => {
					this.runInAsyncScope(callback, null, err, { opaque });
				});
			}
			if (body) {
				this.body = null;
				util$10.destroy(body, err);
			}
		}
	};
	function stream$1(opts, factory$1, callback) {
		if (callback === undefined) return new Promise((resolve$1, reject) => {
			stream$1.call(this, opts, factory$1, (err, data) => {
				return err ? reject(err) : resolve$1(data);
			});
		});
		try {
			this.dispatch(opts, new StreamHandler(opts, factory$1, callback));
		} catch (err) {
			if (typeof callback !== "function") throw err;
			const opaque = opts && opts.opaque;
			queueMicrotask(() => callback(err, { opaque }));
		}
	}
	module.exports = stream$1;
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/api/api-pipeline.js
var require_api_pipeline = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/api/api-pipeline.js"(exports, module) {
	const { Readable: Readable$1, Duplex, PassThrough: PassThrough$1 } = require("stream");
	const { InvalidArgumentError: InvalidArgumentError$9, InvalidReturnValueError, RequestAbortedError: RequestAbortedError$3 } = require_errors();
	const util$9 = require_util$6();
	const { AsyncResource: AsyncResource$2 } = require("async_hooks");
	const { addSignal: addSignal$2, removeSignal: removeSignal$2 } = require_abort_signal();
	const assert$13 = require("assert");
	const kResume = Symbol("resume");
	var PipelineRequest = class extends Readable$1 {
		constructor() {
			super({ autoDestroy: true });
			this[kResume] = null;
		}
		_read() {
			const { [kResume]: resume$1 } = this;
			if (resume$1) {
				this[kResume] = null;
				resume$1();
			}
		}
		_destroy(err, callback) {
			this._read();
			callback(err);
		}
	};
	var PipelineResponse = class extends Readable$1 {
		constructor(resume$1) {
			super({ autoDestroy: true });
			this[kResume] = resume$1;
		}
		_read() {
			this[kResume]();
		}
		_destroy(err, callback) {
			if (!err && !this._readableState.endEmitted) err = new RequestAbortedError$3();
			callback(err);
		}
	};
	var PipelineHandler = class extends AsyncResource$2 {
		constructor(opts, handler$1) {
			if (!opts || typeof opts !== "object") throw new InvalidArgumentError$9("invalid opts");
			if (typeof handler$1 !== "function") throw new InvalidArgumentError$9("invalid handler");
			const { signal, method, opaque, onInfo, responseHeaders } = opts;
			if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") throw new InvalidArgumentError$9("signal must be an EventEmitter or EventTarget");
			if (method === "CONNECT") throw new InvalidArgumentError$9("invalid method");
			if (onInfo && typeof onInfo !== "function") throw new InvalidArgumentError$9("invalid onInfo callback");
			super("UNDICI_PIPELINE");
			this.opaque = opaque || null;
			this.responseHeaders = responseHeaders || null;
			this.handler = handler$1;
			this.abort = null;
			this.context = null;
			this.onInfo = onInfo || null;
			this.req = new PipelineRequest().on("error", util$9.nop);
			this.ret = new Duplex({
				readableObjectMode: opts.objectMode,
				autoDestroy: true,
				read: () => {
					const { body } = this;
					if (body && body.resume) body.resume();
				},
				write: (chunk, encoding, callback) => {
					const { req } = this;
					if (req.push(chunk, encoding) || req._readableState.destroyed) callback();
else req[kResume] = callback;
				},
				destroy: (err, callback) => {
					const { body, req, res, ret, abort: abort$1 } = this;
					if (!err && !ret._readableState.endEmitted) err = new RequestAbortedError$3();
					if (abort$1 && err) abort$1();
					util$9.destroy(body, err);
					util$9.destroy(req, err);
					util$9.destroy(res, err);
					removeSignal$2(this);
					callback(err);
				}
			}).on("prefinish", () => {
				const { req } = this;
				req.push(null);
			});
			this.res = null;
			addSignal$2(this, signal);
		}
		onConnect(abort$1, context$1) {
			const { ret, res } = this;
			assert$13(!res, "pipeline cannot be retried");
			if (ret.destroyed) throw new RequestAbortedError$3();
			this.abort = abort$1;
			this.context = context$1;
		}
		onHeaders(statusCode, rawHeaders, resume$1) {
			const { opaque, handler: handler$1, context: context$1 } = this;
			if (statusCode < 200) {
				if (this.onInfo) {
					const headers = this.responseHeaders === "raw" ? util$9.parseRawHeaders(rawHeaders) : util$9.parseHeaders(rawHeaders);
					this.onInfo({
						statusCode,
						headers
					});
				}
				return;
			}
			this.res = new PipelineResponse(resume$1);
			let body;
			try {
				this.handler = null;
				const headers = this.responseHeaders === "raw" ? util$9.parseRawHeaders(rawHeaders) : util$9.parseHeaders(rawHeaders);
				body = this.runInAsyncScope(handler$1, null, {
					statusCode,
					headers,
					opaque,
					body: this.res,
					context: context$1
				});
			} catch (err) {
				this.res.on("error", util$9.nop);
				throw err;
			}
			if (!body || typeof body.on !== "function") throw new InvalidReturnValueError("expected Readable");
			body.on("data", (chunk) => {
				const { ret, body: body$1 } = this;
				if (!ret.push(chunk) && body$1.pause) body$1.pause();
			}).on("error", (err) => {
				const { ret } = this;
				util$9.destroy(ret, err);
			}).on("end", () => {
				const { ret } = this;
				ret.push(null);
			}).on("close", () => {
				const { ret } = this;
				if (!ret._readableState.ended) util$9.destroy(ret, new RequestAbortedError$3());
			});
			this.body = body;
		}
		onData(chunk) {
			const { res } = this;
			return res.push(chunk);
		}
		onComplete(trailers) {
			const { res } = this;
			res.push(null);
		}
		onError(err) {
			const { ret } = this;
			this.handler = null;
			util$9.destroy(ret, err);
		}
	};
	function pipeline$1(opts, handler$1) {
		try {
			const pipelineHandler = new PipelineHandler(opts, handler$1);
			this.dispatch({
				...opts,
				body: pipelineHandler.req
			}, pipelineHandler);
			return pipelineHandler.ret;
		} catch (err) {
			return new PassThrough$1().destroy(err);
		}
	}
	module.exports = pipeline$1;
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/api/api-upgrade.js
var require_api_upgrade = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/api/api-upgrade.js"(exports, module) {
	const { InvalidArgumentError: InvalidArgumentError$8, RequestAbortedError: RequestAbortedError$2, SocketError: SocketError$1 } = require_errors();
	const { AsyncResource: AsyncResource$1 } = require("async_hooks");
	const util$8 = require_util$6();
	const { addSignal: addSignal$1, removeSignal: removeSignal$1 } = require_abort_signal();
	const assert$12 = require("assert");
	var UpgradeHandler = class extends AsyncResource$1 {
		constructor(opts, callback) {
			if (!opts || typeof opts !== "object") throw new InvalidArgumentError$8("invalid opts");
			if (typeof callback !== "function") throw new InvalidArgumentError$8("invalid callback");
			const { signal, opaque, responseHeaders } = opts;
			if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") throw new InvalidArgumentError$8("signal must be an EventEmitter or EventTarget");
			super("UNDICI_UPGRADE");
			this.responseHeaders = responseHeaders || null;
			this.opaque = opaque || null;
			this.callback = callback;
			this.abort = null;
			this.context = null;
			addSignal$1(this, signal);
		}
		onConnect(abort$1, context$1) {
			if (!this.callback) throw new RequestAbortedError$2();
			this.abort = abort$1;
			this.context = null;
		}
		onHeaders() {
			throw new SocketError$1("bad upgrade", null);
		}
		onUpgrade(statusCode, rawHeaders, socket) {
			const { callback, opaque, context: context$1 } = this;
			assert$12.strictEqual(statusCode, 101);
			removeSignal$1(this);
			this.callback = null;
			const headers = this.responseHeaders === "raw" ? util$8.parseRawHeaders(rawHeaders) : util$8.parseHeaders(rawHeaders);
			this.runInAsyncScope(callback, null, null, {
				headers,
				socket,
				opaque,
				context: context$1
			});
		}
		onError(err) {
			const { callback, opaque } = this;
			removeSignal$1(this);
			if (callback) {
				this.callback = null;
				queueMicrotask(() => {
					this.runInAsyncScope(callback, null, err, { opaque });
				});
			}
		}
	};
	function upgrade(opts, callback) {
		if (callback === undefined) return new Promise((resolve$1, reject) => {
			upgrade.call(this, opts, (err, data) => {
				return err ? reject(err) : resolve$1(data);
			});
		});
		try {
			const upgradeHandler = new UpgradeHandler(opts, callback);
			this.dispatch({
				...opts,
				method: opts.method || "GET",
				upgrade: opts.protocol || "Websocket"
			}, upgradeHandler);
		} catch (err) {
			if (typeof callback !== "function") throw err;
			const opaque = opts && opts.opaque;
			queueMicrotask(() => callback(err, { opaque }));
		}
	}
	module.exports = upgrade;
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/api/api-connect.js
var require_api_connect = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/api/api-connect.js"(exports, module) {
	const { AsyncResource } = require("async_hooks");
	const { InvalidArgumentError: InvalidArgumentError$7, RequestAbortedError: RequestAbortedError$1, SocketError } = require_errors();
	const util$7 = require_util$6();
	const { addSignal, removeSignal } = require_abort_signal();
	var ConnectHandler = class extends AsyncResource {
		constructor(opts, callback) {
			if (!opts || typeof opts !== "object") throw new InvalidArgumentError$7("invalid opts");
			if (typeof callback !== "function") throw new InvalidArgumentError$7("invalid callback");
			const { signal, opaque, responseHeaders } = opts;
			if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") throw new InvalidArgumentError$7("signal must be an EventEmitter or EventTarget");
			super("UNDICI_CONNECT");
			this.opaque = opaque || null;
			this.responseHeaders = responseHeaders || null;
			this.callback = callback;
			this.abort = null;
			addSignal(this, signal);
		}
		onConnect(abort$1, context$1) {
			if (!this.callback) throw new RequestAbortedError$1();
			this.abort = abort$1;
			this.context = context$1;
		}
		onHeaders() {
			throw new SocketError("bad connect", null);
		}
		onUpgrade(statusCode, rawHeaders, socket) {
			const { callback, opaque, context: context$1 } = this;
			removeSignal(this);
			this.callback = null;
			let headers = rawHeaders;
			if (headers != null) headers = this.responseHeaders === "raw" ? util$7.parseRawHeaders(rawHeaders) : util$7.parseHeaders(rawHeaders);
			this.runInAsyncScope(callback, null, null, {
				statusCode,
				headers,
				socket,
				opaque,
				context: context$1
			});
		}
		onError(err) {
			const { callback, opaque } = this;
			removeSignal(this);
			if (callback) {
				this.callback = null;
				queueMicrotask(() => {
					this.runInAsyncScope(callback, null, err, { opaque });
				});
			}
		}
	};
	function connect(opts, callback) {
		if (callback === undefined) return new Promise((resolve$1, reject) => {
			connect.call(this, opts, (err, data) => {
				return err ? reject(err) : resolve$1(data);
			});
		});
		try {
			const connectHandler = new ConnectHandler(opts, callback);
			this.dispatch({
				...opts,
				method: "CONNECT"
			}, connectHandler);
		} catch (err) {
			if (typeof callback !== "function") throw err;
			const opaque = opts && opts.opaque;
			queueMicrotask(() => callback(err, { opaque }));
		}
	}
	module.exports = connect;
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/api/index.js
var require_api = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/api/index.js"(exports, module) {
	module.exports.request = require_api_request();
	module.exports.stream = require_api_stream();
	module.exports.pipeline = require_api_pipeline();
	module.exports.upgrade = require_api_upgrade();
	module.exports.connect = require_api_connect();
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/mock/mock-errors.js
var require_mock_errors = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/mock/mock-errors.js"(exports, module) {
	const { UndiciError: UndiciError$1 } = require_errors();
	var MockNotMatchedError$1 = class MockNotMatchedError$1 extends UndiciError$1 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, MockNotMatchedError$1);
			this.name = "MockNotMatchedError";
			this.message = message || "The request does not match any registered mock dispatches";
			this.code = "UND_MOCK_ERR_MOCK_NOT_MATCHED";
		}
	};
	module.exports = { MockNotMatchedError: MockNotMatchedError$1 };
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/mock/mock-symbols.js
var require_mock_symbols = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/mock/mock-symbols.js"(exports, module) {
	module.exports = {
		kAgent: Symbol("agent"),
		kOptions: Symbol("options"),
		kFactory: Symbol("factory"),
		kDispatches: Symbol("dispatches"),
		kDispatchKey: Symbol("dispatch key"),
		kDefaultHeaders: Symbol("default headers"),
		kDefaultTrailers: Symbol("default trailers"),
		kContentLength: Symbol("content length"),
		kMockAgent: Symbol("mock agent"),
		kMockAgentSet: Symbol("mock agent set"),
		kMockAgentGet: Symbol("mock agent get"),
		kMockDispatch: Symbol("mock dispatch"),
		kClose: Symbol("close"),
		kOriginalClose: Symbol("original agent close"),
		kOrigin: Symbol("origin"),
		kIsMockActive: Symbol("is mock active"),
		kNetConnect: Symbol("net connect"),
		kGetNetConnect: Symbol("get net connect"),
		kConnected: Symbol("connected")
	};
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/mock/mock-utils.js
var require_mock_utils = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/mock/mock-utils.js"(exports, module) {
	const { MockNotMatchedError } = require_mock_errors();
	const { kDispatches: kDispatches$4, kMockAgent: kMockAgent$2, kOriginalDispatch: kOriginalDispatch$2, kOrigin: kOrigin$2, kGetNetConnect: kGetNetConnect$1 } = require_mock_symbols();
	const { buildURL: buildURL$1, nop } = require_util$6();
	const { STATUS_CODES: STATUS_CODES$1 } = require("http");
	const { types: { isPromise } } = require("util");
	function matchValue$1(match, value) {
		if (typeof match === "string") return match === value;
		if (match instanceof RegExp) return match.test(value);
		if (typeof match === "function") return match(value) === true;
		return false;
	}
	function lowerCaseEntries(headers) {
		return Object.fromEntries(Object.entries(headers).map(([headerName, headerValue]) => {
			return [headerName.toLocaleLowerCase(), headerValue];
		}));
	}
	/**
	* @param {import('../../index').Headers|string[]|Record<string, string>} headers
	* @param {string} key
	*/
	function getHeaderByName(headers, key) {
		if (Array.isArray(headers)) {
			for (let i$2 = 0; i$2 < headers.length; i$2 += 2) if (headers[i$2].toLocaleLowerCase() === key.toLocaleLowerCase()) return headers[i$2 + 1];
			return undefined;
		} else if (typeof headers.get === "function") return headers.get(key);
else return lowerCaseEntries(headers)[key.toLocaleLowerCase()];
	}
	/** @param {string[]} headers */
	function buildHeadersFromArray(headers) {
		const clone$2 = headers.slice();
		const entries = [];
		for (let index$1 = 0; index$1 < clone$2.length; index$1 += 2) entries.push([clone$2[index$1], clone$2[index$1 + 1]]);
		return Object.fromEntries(entries);
	}
	function matchHeaders(mockDispatch$1, headers) {
		if (typeof mockDispatch$1.headers === "function") {
			if (Array.isArray(headers)) headers = buildHeadersFromArray(headers);
			return mockDispatch$1.headers(headers ? lowerCaseEntries(headers) : {});
		}
		if (typeof mockDispatch$1.headers === "undefined") return true;
		if (typeof headers !== "object" || typeof mockDispatch$1.headers !== "object") return false;
		for (const [matchHeaderName, matchHeaderValue] of Object.entries(mockDispatch$1.headers)) {
			const headerValue = getHeaderByName(headers, matchHeaderName);
			if (!matchValue$1(matchHeaderValue, headerValue)) return false;
		}
		return true;
	}
	function safeUrl(path$72) {
		if (typeof path$72 !== "string") return path$72;
		const pathSegments = path$72.split("?");
		if (pathSegments.length !== 2) return path$72;
		const qp = new URLSearchParams(pathSegments.pop());
		qp.sort();
		return [...pathSegments, qp.toString()].join("?");
	}
	function matchKey(mockDispatch$1, { path: path$72, method, body, headers }) {
		const pathMatch = matchValue$1(mockDispatch$1.path, path$72);
		const methodMatch = matchValue$1(mockDispatch$1.method, method);
		const bodyMatch = typeof mockDispatch$1.body !== "undefined" ? matchValue$1(mockDispatch$1.body, body) : true;
		const headersMatch = matchHeaders(mockDispatch$1, headers);
		return pathMatch && methodMatch && bodyMatch && headersMatch;
	}
	function getResponseData$2(data) {
		if (Buffer.isBuffer(data)) return data;
else if (typeof data === "object") return JSON.stringify(data);
else return data.toString();
	}
	function getMockDispatch(mockDispatches, key) {
		const basePath = key.query ? buildURL$1(key.path, key.query) : key.path;
		const resolvedPath = typeof basePath === "string" ? safeUrl(basePath) : basePath;
		let matchedMockDispatches = mockDispatches.filter(({ consumed }) => !consumed).filter(({ path: path$72 }) => matchValue$1(safeUrl(path$72), resolvedPath));
		if (matchedMockDispatches.length === 0) throw new MockNotMatchedError(`Mock dispatch not matched for path '${resolvedPath}'`);
		matchedMockDispatches = matchedMockDispatches.filter(({ method }) => matchValue$1(method, key.method));
		if (matchedMockDispatches.length === 0) throw new MockNotMatchedError(`Mock dispatch not matched for method '${key.method}'`);
		matchedMockDispatches = matchedMockDispatches.filter(({ body }) => typeof body !== "undefined" ? matchValue$1(body, key.body) : true);
		if (matchedMockDispatches.length === 0) throw new MockNotMatchedError(`Mock dispatch not matched for body '${key.body}'`);
		matchedMockDispatches = matchedMockDispatches.filter((mockDispatch$1) => matchHeaders(mockDispatch$1, key.headers));
		if (matchedMockDispatches.length === 0) throw new MockNotMatchedError(`Mock dispatch not matched for headers '${typeof key.headers === "object" ? JSON.stringify(key.headers) : key.headers}'`);
		return matchedMockDispatches[0];
	}
	function addMockDispatch$1(mockDispatches, key, data) {
		const baseData = {
			timesInvoked: 0,
			times: 1,
			persist: false,
			consumed: false
		};
		const replyData = typeof data === "function" ? { callback: data } : { ...data };
		const newMockDispatch = {
			...baseData,
			...key,
			pending: true,
			data: {
				error: null,
				...replyData
			}
		};
		mockDispatches.push(newMockDispatch);
		return newMockDispatch;
	}
	function deleteMockDispatch(mockDispatches, key) {
		const index$1 = mockDispatches.findIndex((dispatch) => {
			if (!dispatch.consumed) return false;
			return matchKey(dispatch, key);
		});
		if (index$1 !== -1) mockDispatches.splice(index$1, 1);
	}
	function buildKey$1(opts) {
		const { path: path$72, method, body, headers, query } = opts;
		return {
			path: path$72,
			method,
			body,
			headers,
			query
		};
	}
	function generateKeyValues(data) {
		return Object.entries(data).reduce((keyValuePairs, [key, value]) => [
			...keyValuePairs,
			Buffer.from(`${key}`),
			Array.isArray(value) ? value.map((x) => Buffer.from(`${x}`)) : Buffer.from(`${value}`)
		], []);
	}
	/**
	* @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
	* @param {number} statusCode
	*/
	function getStatusText(statusCode) {
		return STATUS_CODES$1[statusCode] || "unknown";
	}
	async function getResponse(body) {
		const buffers = [];
		for await (const data of body) buffers.push(data);
		return Buffer.concat(buffers).toString("utf8");
	}
	/**
	* Mock dispatch function used to simulate undici dispatches
	*/
	function mockDispatch(opts, handler$1) {
		const key = buildKey$1(opts);
		const mockDispatch$1 = getMockDispatch(this[kDispatches$4], key);
		mockDispatch$1.timesInvoked++;
		if (mockDispatch$1.data.callback) mockDispatch$1.data = {
			...mockDispatch$1.data,
			...mockDispatch$1.data.callback(opts)
		};
		const { data: { statusCode, data, headers, trailers, error: error$2 }, delay, persist } = mockDispatch$1;
		const { timesInvoked, times } = mockDispatch$1;
		mockDispatch$1.consumed = !persist && timesInvoked >= times;
		mockDispatch$1.pending = timesInvoked < times;
		if (error$2 !== null) {
			deleteMockDispatch(this[kDispatches$4], key);
			handler$1.onError(error$2);
			return true;
		}
		if (typeof delay === "number" && delay > 0) setTimeout(() => {
			handleReply(this[kDispatches$4]);
		}, delay);
else handleReply(this[kDispatches$4]);
		function handleReply(mockDispatches, _data = data) {
			const optsHeaders = Array.isArray(opts.headers) ? buildHeadersFromArray(opts.headers) : opts.headers;
			const body = typeof _data === "function" ? _data({
				...opts,
				headers: optsHeaders
			}) : _data;
			if (isPromise(body)) {
				body.then((newData) => handleReply(mockDispatches, newData));
				return;
			}
			const responseData = getResponseData$2(body);
			const responseHeaders = generateKeyValues(headers);
			const responseTrailers = generateKeyValues(trailers);
			handler$1.abort = nop;
			handler$1.onHeaders(statusCode, responseHeaders, resume$1, getStatusText(statusCode));
			handler$1.onData(Buffer.from(responseData));
			handler$1.onComplete(responseTrailers);
			deleteMockDispatch(mockDispatches, key);
		}
		function resume$1() {}
		return true;
	}
	function buildMockDispatch$2() {
		const agent = this[kMockAgent$2];
		const origin = this[kOrigin$2];
		const originalDispatch = this[kOriginalDispatch$2];
		return function dispatch(opts, handler$1) {
			if (agent.isMockActive) try {
				mockDispatch.call(this, opts, handler$1);
			} catch (error$2) {
				if (error$2 instanceof MockNotMatchedError) {
					const netConnect = agent[kGetNetConnect$1]();
					if (netConnect === false) throw new MockNotMatchedError(`${error$2.message}: subsequent request to origin ${origin} was not allowed (net.connect disabled)`);
					if (checkNetConnect(netConnect, origin)) originalDispatch.call(this, opts, handler$1);
else throw new MockNotMatchedError(`${error$2.message}: subsequent request to origin ${origin} was not allowed (net.connect is not enabled for this origin)`);
				} else throw error$2;
			}
else originalDispatch.call(this, opts, handler$1);
		};
	}
	function checkNetConnect(netConnect, origin) {
		const url = new URL(origin);
		if (netConnect === true) return true;
else if (Array.isArray(netConnect) && netConnect.some((matcher) => matchValue$1(matcher, url.host))) return true;
		return false;
	}
	function buildMockOptions$1(opts) {
		if (opts) {
			const { agent,...mockOptions } = opts;
			return mockOptions;
		}
	}
	module.exports = {
		getResponseData: getResponseData$2,
		getMockDispatch,
		addMockDispatch: addMockDispatch$1,
		deleteMockDispatch,
		buildKey: buildKey$1,
		generateKeyValues,
		matchValue: matchValue$1,
		getResponse,
		getStatusText,
		mockDispatch,
		buildMockDispatch: buildMockDispatch$2,
		checkNetConnect,
		buildMockOptions: buildMockOptions$1,
		getHeaderByName
	};
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/mock/mock-interceptor.js
var require_mock_interceptor = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/mock/mock-interceptor.js"(exports, module) {
	const { getResponseData: getResponseData$1, buildKey, addMockDispatch } = require_mock_utils();
	const { kDispatches: kDispatches$3, kDispatchKey, kDefaultHeaders, kDefaultTrailers, kContentLength, kMockDispatch } = require_mock_symbols();
	const { InvalidArgumentError: InvalidArgumentError$6 } = require_errors();
	const { buildURL } = require_util$6();
	var MockScope = class {
		constructor(mockDispatch$1) {
			this[kMockDispatch] = mockDispatch$1;
		}
		/**
		* Delay a reply by a set amount in ms.
		*/
		delay(waitInMs) {
			if (typeof waitInMs !== "number" || !Number.isInteger(waitInMs) || waitInMs <= 0) throw new InvalidArgumentError$6("waitInMs must be a valid integer > 0");
			this[kMockDispatch].delay = waitInMs;
			return this;
		}
		/**
		* For a defined reply, never mark as consumed.
		*/
		persist() {
			this[kMockDispatch].persist = true;
			return this;
		}
		/**
		* Allow one to define a reply for a set amount of matching requests.
		*/
		times(repeatTimes) {
			if (typeof repeatTimes !== "number" || !Number.isInteger(repeatTimes) || repeatTimes <= 0) throw new InvalidArgumentError$6("repeatTimes must be a valid integer > 0");
			this[kMockDispatch].times = repeatTimes;
			return this;
		}
	};
	var MockInterceptor$2 = class {
		constructor(opts, mockDispatches) {
			if (typeof opts !== "object") throw new InvalidArgumentError$6("opts must be an object");
			if (typeof opts.path === "undefined") throw new InvalidArgumentError$6("opts.path must be defined");
			if (typeof opts.method === "undefined") opts.method = "GET";
			if (typeof opts.path === "string") if (opts.query) opts.path = buildURL(opts.path, opts.query);
else {
				const parsedURL = new URL(opts.path, "data://");
				opts.path = parsedURL.pathname + parsedURL.search;
			}
			if (typeof opts.method === "string") opts.method = opts.method.toUpperCase();
			this[kDispatchKey] = buildKey(opts);
			this[kDispatches$3] = mockDispatches;
			this[kDefaultHeaders] = {};
			this[kDefaultTrailers] = {};
			this[kContentLength] = false;
		}
		createMockScopeDispatchData(statusCode, data, responseOptions = {}) {
			const responseData = getResponseData$1(data);
			const contentLength = this[kContentLength] ? { "content-length": responseData.length } : {};
			const headers = {
				...this[kDefaultHeaders],
				...contentLength,
				...responseOptions.headers
			};
			const trailers = {
				...this[kDefaultTrailers],
				...responseOptions.trailers
			};
			return {
				statusCode,
				data,
				headers,
				trailers
			};
		}
		validateReplyParameters(statusCode, data, responseOptions) {
			if (typeof statusCode === "undefined") throw new InvalidArgumentError$6("statusCode must be defined");
			if (typeof data === "undefined") throw new InvalidArgumentError$6("data must be defined");
			if (typeof responseOptions !== "object") throw new InvalidArgumentError$6("responseOptions must be an object");
		}
		/**
		* Mock an undici request with a defined reply.
		*/
		reply(replyData) {
			if (typeof replyData === "function") {
				const wrappedDefaultsCallback = (opts) => {
					const resolvedData = replyData(opts);
					if (typeof resolvedData !== "object") throw new InvalidArgumentError$6("reply options callback must return an object");
					const { statusCode: statusCode$1, data: data$1 = "", responseOptions: responseOptions$1 = {} } = resolvedData;
					this.validateReplyParameters(statusCode$1, data$1, responseOptions$1);
					return { ...this.createMockScopeDispatchData(statusCode$1, data$1, responseOptions$1) };
				};
				const newMockDispatch$1 = addMockDispatch(this[kDispatches$3], this[kDispatchKey], wrappedDefaultsCallback);
				return new MockScope(newMockDispatch$1);
			}
			const [statusCode, data = "", responseOptions = {}] = [...arguments];
			this.validateReplyParameters(statusCode, data, responseOptions);
			const dispatchData = this.createMockScopeDispatchData(statusCode, data, responseOptions);
			const newMockDispatch = addMockDispatch(this[kDispatches$3], this[kDispatchKey], dispatchData);
			return new MockScope(newMockDispatch);
		}
		/**
		* Mock an undici request with a defined error.
		*/
		replyWithError(error$2) {
			if (typeof error$2 === "undefined") throw new InvalidArgumentError$6("error must be defined");
			const newMockDispatch = addMockDispatch(this[kDispatches$3], this[kDispatchKey], { error: error$2 });
			return new MockScope(newMockDispatch);
		}
		/**
		* Set default reply headers on the interceptor for subsequent replies
		*/
		defaultReplyHeaders(headers) {
			if (typeof headers === "undefined") throw new InvalidArgumentError$6("headers must be defined");
			this[kDefaultHeaders] = headers;
			return this;
		}
		/**
		* Set default reply trailers on the interceptor for subsequent replies
		*/
		defaultReplyTrailers(trailers) {
			if (typeof trailers === "undefined") throw new InvalidArgumentError$6("trailers must be defined");
			this[kDefaultTrailers] = trailers;
			return this;
		}
		/**
		* Set reply content length header for replies on the interceptor
		*/
		replyContentLength() {
			this[kContentLength] = true;
			return this;
		}
	};
	module.exports.MockInterceptor = MockInterceptor$2;
	module.exports.MockScope = MockScope;
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/mock/mock-client.js
var require_mock_client = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/mock/mock-client.js"(exports, module) {
	const { promisify: promisify$6 } = require("util");
	const Client$1 = require_client();
	const { buildMockDispatch: buildMockDispatch$1 } = require_mock_utils();
	const { kDispatches: kDispatches$2, kMockAgent: kMockAgent$1, kClose: kClose$2, kOriginalClose: kOriginalClose$1, kOrigin: kOrigin$1, kOriginalDispatch: kOriginalDispatch$1, kConnected: kConnected$1 } = require_mock_symbols();
	const { MockInterceptor: MockInterceptor$1 } = require_mock_interceptor();
	const Symbols$1 = require_symbols$4();
	const { InvalidArgumentError: InvalidArgumentError$5 } = require_errors();
	var MockClient$2 = class extends Client$1 {
		constructor(origin, opts) {
			super(origin, opts);
			if (!opts || !opts.agent || typeof opts.agent.dispatch !== "function") throw new InvalidArgumentError$5("Argument opts.agent must implement Agent");
			this[kMockAgent$1] = opts.agent;
			this[kOrigin$1] = origin;
			this[kDispatches$2] = [];
			this[kConnected$1] = 1;
			this[kOriginalDispatch$1] = this.dispatch;
			this[kOriginalClose$1] = this.close.bind(this);
			this.dispatch = buildMockDispatch$1.call(this);
			this.close = this[kClose$2];
		}
		get [Symbols$1.kConnected]() {
			return this[kConnected$1];
		}
		/**
		* Sets up the base interceptor for mocking replies from undici.
		*/
		intercept(opts) {
			return new MockInterceptor$1(opts, this[kDispatches$2]);
		}
		async [kClose$2]() {
			await promisify$6(this[kOriginalClose$1])();
			this[kConnected$1] = 0;
			this[kMockAgent$1][Symbols$1.kClients].delete(this[kOrigin$1]);
		}
	};
	module.exports = MockClient$2;
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/mock/mock-pool.js
var require_mock_pool = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/mock/mock-pool.js"(exports, module) {
	const { promisify: promisify$5 } = require("util");
	const Pool$2 = require_pool();
	const { buildMockDispatch } = require_mock_utils();
	const { kDispatches: kDispatches$1, kMockAgent, kClose: kClose$1, kOriginalClose, kOrigin, kOriginalDispatch, kConnected } = require_mock_symbols();
	const { MockInterceptor } = require_mock_interceptor();
	const Symbols = require_symbols$4();
	const { InvalidArgumentError: InvalidArgumentError$4 } = require_errors();
	var MockPool$2 = class extends Pool$2 {
		constructor(origin, opts) {
			super(origin, opts);
			if (!opts || !opts.agent || typeof opts.agent.dispatch !== "function") throw new InvalidArgumentError$4("Argument opts.agent must implement Agent");
			this[kMockAgent] = opts.agent;
			this[kOrigin] = origin;
			this[kDispatches$1] = [];
			this[kConnected] = 1;
			this[kOriginalDispatch] = this.dispatch;
			this[kOriginalClose] = this.close.bind(this);
			this.dispatch = buildMockDispatch.call(this);
			this.close = this[kClose$1];
		}
		get [Symbols.kConnected]() {
			return this[kConnected];
		}
		/**
		* Sets up the base interceptor for mocking replies from undici.
		*/
		intercept(opts) {
			return new MockInterceptor(opts, this[kDispatches$1]);
		}
		async [kClose$1]() {
			await promisify$5(this[kOriginalClose])();
			this[kConnected] = 0;
			this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);
		}
	};
	module.exports = MockPool$2;
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/mock/pluralizer.js
var require_pluralizer = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/mock/pluralizer.js"(exports, module) {
	const singulars = {
		pronoun: "it",
		is: "is",
		was: "was",
		this: "this"
	};
	const plurals = {
		pronoun: "they",
		is: "are",
		was: "were",
		this: "these"
	};
	module.exports = class Pluralizer$1 {
		constructor(singular, plural) {
			this.singular = singular;
			this.plural = plural;
		}
		pluralize(count) {
			const one$1 = count === 1;
			const keys = one$1 ? singulars : plurals;
			const noun = one$1 ? this.singular : this.plural;
			return {
				...keys,
				count,
				noun
			};
		}
	};
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/mock/pending-interceptors-formatter.js
var require_pending_interceptors_formatter = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/mock/pending-interceptors-formatter.js"(exports, module) {
	const { Transform: Transform$1 } = require("stream");
	const { Console } = require("console");
	/**
	* Gets the output of `console.table(…)` as a string.
	*/
	module.exports = class PendingInterceptorsFormatter$1 {
		constructor({ disableColors } = {}) {
			this.transform = new Transform$1({ transform(chunk, _enc, cb) {
				cb(null, chunk);
			} });
			this.logger = new Console({
				stdout: this.transform,
				inspectOptions: { colors: !disableColors && !process.env.CI }
			});
		}
		format(pendingInterceptors) {
			const withPrettyHeaders = pendingInterceptors.map(({ method, path: path$72, data: { statusCode }, persist, times, timesInvoked, origin }) => ({
				Method: method,
				Origin: origin,
				Path: path$72,
				"Status code": statusCode,
				Persistent: persist ? "✅" : "❌",
				Invocations: timesInvoked,
				Remaining: persist ? Infinity : times - timesInvoked
			}));
			this.logger.table(withPrettyHeaders);
			return this.transform.read().toString();
		}
	};
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/mock/mock-agent.js
var require_mock_agent = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/mock/mock-agent.js"(exports, module) {
	const { kClients } = require_symbols$4();
	const Agent$3 = require_agent();
	const { kAgent: kAgent$1, kMockAgentSet, kMockAgentGet, kDispatches, kIsMockActive, kNetConnect, kGetNetConnect, kOptions, kFactory } = require_mock_symbols();
	const MockClient$1 = require_mock_client();
	const MockPool$1 = require_mock_pool();
	const { matchValue, buildMockOptions } = require_mock_utils();
	const { InvalidArgumentError: InvalidArgumentError$3, UndiciError } = require_errors();
	const Dispatcher$1 = require_dispatcher();
	const Pluralizer = require_pluralizer();
	const PendingInterceptorsFormatter = require_pending_interceptors_formatter();
	var FakeWeakRef = class {
		constructor(value) {
			this.value = value;
		}
		deref() {
			return this.value;
		}
	};
	var MockAgent$1 = class extends Dispatcher$1 {
		constructor(opts) {
			super(opts);
			this[kNetConnect] = true;
			this[kIsMockActive] = true;
			if (opts && opts.agent && typeof opts.agent.dispatch !== "function") throw new InvalidArgumentError$3("Argument opts.agent must implement Agent");
			const agent = opts && opts.agent ? opts.agent : new Agent$3(opts);
			this[kAgent$1] = agent;
			this[kClients] = agent[kClients];
			this[kOptions] = buildMockOptions(opts);
		}
		get(origin) {
			let dispatcher = this[kMockAgentGet](origin);
			if (!dispatcher) {
				dispatcher = this[kFactory](origin);
				this[kMockAgentSet](origin, dispatcher);
			}
			return dispatcher;
		}
		dispatch(opts, handler$1) {
			this.get(opts.origin);
			return this[kAgent$1].dispatch(opts, handler$1);
		}
		async close() {
			await this[kAgent$1].close();
			this[kClients].clear();
		}
		deactivate() {
			this[kIsMockActive] = false;
		}
		activate() {
			this[kIsMockActive] = true;
		}
		enableNetConnect(matcher) {
			if (typeof matcher === "string" || typeof matcher === "function" || matcher instanceof RegExp) if (Array.isArray(this[kNetConnect])) this[kNetConnect].push(matcher);
else this[kNetConnect] = [matcher];
else if (typeof matcher === "undefined") this[kNetConnect] = true;
else throw new InvalidArgumentError$3("Unsupported matcher. Must be one of String|Function|RegExp.");
		}
		disableNetConnect() {
			this[kNetConnect] = false;
		}
		get isMockActive() {
			return this[kIsMockActive];
		}
		[kMockAgentSet](origin, dispatcher) {
			this[kClients].set(origin, new FakeWeakRef(dispatcher));
		}
		[kFactory](origin) {
			const mockOptions = Object.assign({ agent: this }, this[kOptions]);
			return this[kOptions] && this[kOptions].connections === 1 ? new MockClient$1(origin, mockOptions) : new MockPool$1(origin, mockOptions);
		}
		[kMockAgentGet](origin) {
			const ref = this[kClients].get(origin);
			if (ref) return ref.deref();
			if (typeof origin !== "string") {
				const dispatcher = this[kFactory]("http://localhost:9999");
				this[kMockAgentSet](origin, dispatcher);
				return dispatcher;
			}
			for (const [keyMatcher, nonExplicitRef] of Array.from(this[kClients])) {
				const nonExplicitDispatcher = nonExplicitRef.deref();
				if (nonExplicitDispatcher && typeof keyMatcher !== "string" && matchValue(keyMatcher, origin)) {
					const dispatcher = this[kFactory](origin);
					this[kMockAgentSet](origin, dispatcher);
					dispatcher[kDispatches] = nonExplicitDispatcher[kDispatches];
					return dispatcher;
				}
			}
		}
		[kGetNetConnect]() {
			return this[kNetConnect];
		}
		pendingInterceptors() {
			const mockAgentClients = this[kClients];
			return Array.from(mockAgentClients.entries()).flatMap(([origin, scope]) => scope.deref()[kDispatches].map((dispatch) => ({
				...dispatch,
				origin
			}))).filter(({ pending }) => pending);
		}
		assertNoPendingInterceptors({ pendingInterceptorsFormatter = new PendingInterceptorsFormatter() } = {}) {
			const pending = this.pendingInterceptors();
			if (pending.length === 0) return;
			const pluralizer = new Pluralizer("interceptor", "interceptors").pluralize(pending.length);
			throw new UndiciError(`
${pluralizer.count} ${pluralizer.noun} ${pluralizer.is} pending:

${pendingInterceptorsFormatter.format(pending)}
`.trim());
		}
	};
	module.exports = MockAgent$1;
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/proxy-agent.js
var require_proxy_agent = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/proxy-agent.js"(exports, module) {
	const { kProxy, kClose, kDestroy, kInterceptors } = require_symbols$4();
	const { URL: URL$1 } = require("url");
	const Agent$2 = require_agent();
	const Pool$1 = require_pool();
	const DispatcherBase = require_dispatcher_base();
	const { InvalidArgumentError: InvalidArgumentError$2, RequestAbortedError } = require_errors();
	const buildConnector$1 = require_connect();
	const kAgent = Symbol("proxy agent");
	const kClient = Symbol("proxy client");
	const kProxyHeaders = Symbol("proxy headers");
	const kRequestTls = Symbol("request tls settings");
	const kProxyTls = Symbol("proxy tls settings");
	const kConnectEndpoint = Symbol("connect endpoint function");
	function defaultProtocolPort(protocol) {
		return protocol === "https:" ? 443 : 80;
	}
	function buildProxyOptions(opts) {
		if (typeof opts === "string") opts = { uri: opts };
		if (!opts || !opts.uri) throw new InvalidArgumentError$2("Proxy opts.uri is mandatory");
		return {
			uri: opts.uri,
			protocol: opts.protocol || "https"
		};
	}
	function defaultFactory(origin, opts) {
		return new Pool$1(origin, opts);
	}
	var ProxyAgent$1 = class extends DispatcherBase {
		constructor(opts) {
			super(opts);
			this[kProxy] = buildProxyOptions(opts);
			this[kAgent] = new Agent$2(opts);
			this[kInterceptors] = opts.interceptors && opts.interceptors.ProxyAgent && Array.isArray(opts.interceptors.ProxyAgent) ? opts.interceptors.ProxyAgent : [];
			if (typeof opts === "string") opts = { uri: opts };
			if (!opts || !opts.uri) throw new InvalidArgumentError$2("Proxy opts.uri is mandatory");
			const { clientFactory = defaultFactory } = opts;
			if (typeof clientFactory !== "function") throw new InvalidArgumentError$2("Proxy opts.clientFactory must be a function.");
			this[kRequestTls] = opts.requestTls;
			this[kProxyTls] = opts.proxyTls;
			this[kProxyHeaders] = opts.headers || {};
			const resolvedUrl = new URL$1(opts.uri);
			const { origin, port, host, username, password } = resolvedUrl;
			if (opts.auth && opts.token) throw new InvalidArgumentError$2("opts.auth cannot be used in combination with opts.token");
else if (opts.auth) this[kProxyHeaders]["proxy-authorization"] = `Basic ${opts.auth}`;
else if (opts.token) this[kProxyHeaders]["proxy-authorization"] = opts.token;
else if (username && password) this[kProxyHeaders]["proxy-authorization"] = `Basic ${Buffer.from(`${decodeURIComponent(username)}:${decodeURIComponent(password)}`).toString("base64")}`;
			const connect$2 = buildConnector$1({ ...opts.proxyTls });
			this[kConnectEndpoint] = buildConnector$1({ ...opts.requestTls });
			this[kClient] = clientFactory(resolvedUrl, { connect: connect$2 });
			this[kAgent] = new Agent$2({
				...opts,
				connect: async (opts$1, callback) => {
					let requestedHost = opts$1.host;
					if (!opts$1.port) requestedHost += `:${defaultProtocolPort(opts$1.protocol)}`;
					try {
						const { socket, statusCode } = await this[kClient].connect({
							origin,
							port,
							path: requestedHost,
							signal: opts$1.signal,
							headers: {
								...this[kProxyHeaders],
								host
							}
						});
						if (statusCode !== 200) {
							socket.on("error", () => {}).destroy();
							callback(new RequestAbortedError(`Proxy response (${statusCode}) !== 200 when HTTP Tunneling`));
						}
						if (opts$1.protocol !== "https:") {
							callback(null, socket);
							return;
						}
						let servername;
						if (this[kRequestTls]) servername = this[kRequestTls].servername;
else servername = opts$1.servername;
						this[kConnectEndpoint]({
							...opts$1,
							servername,
							httpSocket: socket
						}, callback);
					} catch (err) {
						callback(err);
					}
				}
			});
		}
		dispatch(opts, handler$1) {
			const { host } = new URL$1(opts.origin);
			const headers = buildHeaders(opts.headers);
			throwIfProxyAuthIsSent(headers);
			return this[kAgent].dispatch({
				...opts,
				headers: {
					...headers,
					host
				}
			}, handler$1);
		}
		async [kClose]() {
			await this[kAgent].close();
			await this[kClient].close();
		}
		async [kDestroy]() {
			await this[kAgent].destroy();
			await this[kClient].destroy();
		}
	};
	/**
	* @param {string[] | Record<string, string>} headers
	* @returns {Record<string, string>}
	*/
	function buildHeaders(headers) {
		if (Array.isArray(headers)) {
			/** @type {Record<string, string>} */
			const headersPair = {};
			for (let i$2 = 0; i$2 < headers.length; i$2 += 2) headersPair[headers[i$2]] = headers[i$2 + 1];
			return headersPair;
		}
		return headers;
	}
	/**
	* @param {Record<string, string>} headers
	*
	* Previous versions of ProxyAgent suggests the Proxy-Authorization in request headers
	* Nevertheless, it was changed and to avoid a security vulnerability by end users
	* this check was created.
	* It should be removed in the next major version for performance reasons
	*/
	function throwIfProxyAuthIsSent(headers) {
		const existProxyAuth = headers && Object.keys(headers).find((key) => key.toLowerCase() === "proxy-authorization");
		if (existProxyAuth) throw new InvalidArgumentError$2("Proxy-Authorization should be sent in ProxyAgent constructor");
	}
	module.exports = ProxyAgent$1;
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/handler/RetryHandler.js
var require_RetryHandler = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/handler/RetryHandler.js"(exports, module) {
	const assert$11 = require("assert");
	const { kRetryHandlerDefaultRetry } = require_symbols$4();
	const { RequestRetryError } = require_errors();
	const { isDisturbed: isDisturbed$1, parseHeaders, parseRangeHeader } = require_util$6();
	function calculateRetryAfterHeader(retryAfter) {
		const current = Date.now();
		const diff$2 = new Date(retryAfter).getTime() - current;
		return diff$2;
	}
	var RetryHandler$1 = class RetryHandler$1 {
		constructor(opts, handlers) {
			const { retryOptions,...dispatchOpts } = opts;
			const { retry: retryFn, maxRetries, maxTimeout, minTimeout, timeoutFactor, methods, errorCodes, retryAfter, statusCodes } = retryOptions ?? {};
			this.dispatch = handlers.dispatch;
			this.handler = handlers.handler;
			this.opts = dispatchOpts;
			this.abort = null;
			this.aborted = false;
			this.retryOpts = {
				retry: retryFn ?? RetryHandler$1[kRetryHandlerDefaultRetry],
				retryAfter: retryAfter ?? true,
				maxTimeout: maxTimeout ?? 3e4,
				timeout: minTimeout ?? 500,
				timeoutFactor: timeoutFactor ?? 2,
				maxRetries: maxRetries ?? 5,
				methods: methods ?? [
					"GET",
					"HEAD",
					"OPTIONS",
					"PUT",
					"DELETE",
					"TRACE"
				],
				statusCodes: statusCodes ?? [
					500,
					502,
					503,
					504,
					429
				],
				errorCodes: errorCodes ?? [
					"ECONNRESET",
					"ECONNREFUSED",
					"ENOTFOUND",
					"ENETDOWN",
					"ENETUNREACH",
					"EHOSTDOWN",
					"EHOSTUNREACH",
					"EPIPE"
				]
			};
			this.retryCount = 0;
			this.start = 0;
			this.end = null;
			this.etag = null;
			this.resume = null;
			this.handler.onConnect((reason) => {
				this.aborted = true;
				if (this.abort) this.abort(reason);
else this.reason = reason;
			});
		}
		onRequestSent() {
			if (this.handler.onRequestSent) this.handler.onRequestSent();
		}
		onUpgrade(statusCode, headers, socket) {
			if (this.handler.onUpgrade) this.handler.onUpgrade(statusCode, headers, socket);
		}
		onConnect(abort$1) {
			if (this.aborted) abort$1(this.reason);
else this.abort = abort$1;
		}
		onBodySent(chunk) {
			if (this.handler.onBodySent) return this.handler.onBodySent(chunk);
		}
		static [kRetryHandlerDefaultRetry](err, { state, opts }, cb) {
			const { statusCode, code: code$1, headers } = err;
			const { method, retryOptions } = opts;
			const { maxRetries, timeout, maxTimeout, timeoutFactor, statusCodes, errorCodes, methods } = retryOptions;
			let { counter, currentTimeout } = state;
			currentTimeout = currentTimeout != null && currentTimeout > 0 ? currentTimeout : timeout;
			if (code$1 && code$1 !== "UND_ERR_REQ_RETRY" && code$1 !== "UND_ERR_SOCKET" && !errorCodes.includes(code$1)) {
				cb(err);
				return;
			}
			if (Array.isArray(methods) && !methods.includes(method)) {
				cb(err);
				return;
			}
			if (statusCode != null && Array.isArray(statusCodes) && !statusCodes.includes(statusCode)) {
				cb(err);
				return;
			}
			if (counter > maxRetries) {
				cb(err);
				return;
			}
			let retryAfterHeader = headers != null && headers["retry-after"];
			if (retryAfterHeader) {
				retryAfterHeader = Number(retryAfterHeader);
				retryAfterHeader = isNaN(retryAfterHeader) ? calculateRetryAfterHeader(retryAfterHeader) : retryAfterHeader * 1e3;
			}
			const retryTimeout = retryAfterHeader > 0 ? Math.min(retryAfterHeader, maxTimeout) : Math.min(currentTimeout * timeoutFactor ** counter, maxTimeout);
			state.currentTimeout = retryTimeout;
			setTimeout(() => cb(null), retryTimeout);
		}
		onHeaders(statusCode, rawHeaders, resume$1, statusMessage) {
			const headers = parseHeaders(rawHeaders);
			this.retryCount += 1;
			if (statusCode >= 300) {
				this.abort(new RequestRetryError("Request failed", statusCode, {
					headers,
					count: this.retryCount
				}));
				return false;
			}
			if (this.resume != null) {
				this.resume = null;
				if (statusCode !== 206) return true;
				const contentRange = parseRangeHeader(headers["content-range"]);
				if (!contentRange) {
					this.abort(new RequestRetryError("Content-Range mismatch", statusCode, {
						headers,
						count: this.retryCount
					}));
					return false;
				}
				if (this.etag != null && this.etag !== headers.etag) {
					this.abort(new RequestRetryError("ETag mismatch", statusCode, {
						headers,
						count: this.retryCount
					}));
					return false;
				}
				const { start, size, end = size } = contentRange;
				assert$11(this.start === start, "content-range mismatch");
				assert$11(this.end == null || this.end === end, "content-range mismatch");
				this.resume = resume$1;
				return true;
			}
			if (this.end == null) {
				if (statusCode === 206) {
					const range = parseRangeHeader(headers["content-range"]);
					if (range == null) return this.handler.onHeaders(statusCode, rawHeaders, resume$1, statusMessage);
					const { start, size, end = size } = range;
					assert$11(start != null && Number.isFinite(start) && this.start !== start, "content-range mismatch");
					assert$11(Number.isFinite(start));
					assert$11(end != null && Number.isFinite(end) && this.end !== end, "invalid content-length");
					this.start = start;
					this.end = end;
				}
				if (this.end == null) {
					const contentLength = headers["content-length"];
					this.end = contentLength != null ? Number(contentLength) : null;
				}
				assert$11(Number.isFinite(this.start));
				assert$11(this.end == null || Number.isFinite(this.end), "invalid content-length");
				this.resume = resume$1;
				this.etag = headers.etag != null ? headers.etag : null;
				return this.handler.onHeaders(statusCode, rawHeaders, resume$1, statusMessage);
			}
			const err = new RequestRetryError("Request failed", statusCode, {
				headers,
				count: this.retryCount
			});
			this.abort(err);
			return false;
		}
		onData(chunk) {
			this.start += chunk.length;
			return this.handler.onData(chunk);
		}
		onComplete(rawTrailers) {
			this.retryCount = 0;
			return this.handler.onComplete(rawTrailers);
		}
		onError(err) {
			if (this.aborted || isDisturbed$1(this.opts.body)) return this.handler.onError(err);
			this.retryOpts.retry(err, {
				state: {
					counter: this.retryCount++,
					currentTimeout: this.retryAfter
				},
				opts: {
					retryOptions: this.retryOpts,
					...this.opts
				}
			}, onRetry.bind(this));
			function onRetry(err$1) {
				if (err$1 != null || this.aborted || isDisturbed$1(this.opts.body)) return this.handler.onError(err$1);
				if (this.start !== 0) this.opts = {
					...this.opts,
					headers: {
						...this.opts.headers,
						range: `bytes=${this.start}-${this.end ?? ""}`
					}
				};
				try {
					this.dispatch(this.opts, this);
				} catch (err$2) {
					this.handler.onError(err$2);
				}
			}
		}
	};
	module.exports = RetryHandler$1;
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/global.js
var require_global = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/global.js"(exports, module) {
	const globalDispatcher = Symbol.for("undici.globalDispatcher.1");
	const { InvalidArgumentError: InvalidArgumentError$1 } = require_errors();
	const Agent$1 = require_agent();
	if (getGlobalDispatcher$5() === undefined) setGlobalDispatcher$1(new Agent$1());
	function setGlobalDispatcher$1(agent) {
		if (!agent || typeof agent.dispatch !== "function") throw new InvalidArgumentError$1("Argument agent must implement Agent");
		Object.defineProperty(globalThis, globalDispatcher, {
			value: agent,
			writable: true,
			enumerable: false,
			configurable: false
		});
	}
	function getGlobalDispatcher$5() {
		return globalThis[globalDispatcher];
	}
	module.exports = {
		setGlobalDispatcher: setGlobalDispatcher$1,
		getGlobalDispatcher: getGlobalDispatcher$5
	};
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/handler/DecoratorHandler.js
var require_DecoratorHandler = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/handler/DecoratorHandler.js"(exports, module) {
	module.exports = class DecoratorHandler$1 {
		constructor(handler$1) {
			this.handler = handler$1;
		}
		onConnect(...args) {
			return this.handler.onConnect(...args);
		}
		onError(...args) {
			return this.handler.onError(...args);
		}
		onUpgrade(...args) {
			return this.handler.onUpgrade(...args);
		}
		onHeaders(...args) {
			return this.handler.onHeaders(...args);
		}
		onData(...args) {
			return this.handler.onData(...args);
		}
		onComplete(...args) {
			return this.handler.onComplete(...args);
		}
		onBodySent(...args) {
			return this.handler.onBodySent(...args);
		}
	};
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/headers.js
var require_headers = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/headers.js"(exports, module) {
	const { kHeadersList: kHeadersList$6, kConstruct: kConstruct$4 } = require_symbols$4();
	const { kGuard: kGuard$4 } = require_symbols$3();
	const { kEnumerableProperty: kEnumerableProperty$7 } = require_util$6();
	const { makeIterator, isValidHeaderName: isValidHeaderName$1, isValidHeaderValue } = require_util$5();
	const { webidl: webidl$10 } = require_webidl();
	const assert$10 = require("assert");
	const kHeadersMap = Symbol("headers map");
	const kHeadersSortedMap = Symbol("headers map sorted");
	/**
	* @param {number} code
	*/
	function isHTTPWhiteSpaceCharCode(code$1) {
		return code$1 === 10 || code$1 === 13 || code$1 === 9 || code$1 === 32;
	}
	/**
	* @see https://fetch.spec.whatwg.org/#concept-header-value-normalize
	* @param {string} potentialValue
	*/
	function headerValueNormalize(potentialValue) {
		let i$2 = 0;
		let j = potentialValue.length;
		while (j > i$2 && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(j - 1))) --j;
		while (j > i$2 && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(i$2))) ++i$2;
		return i$2 === 0 && j === potentialValue.length ? potentialValue : potentialValue.substring(i$2, j);
	}
	function fill$4(headers, object) {
		if (Array.isArray(object)) for (let i$2 = 0; i$2 < object.length; ++i$2) {
			const header = object[i$2];
			if (header.length !== 2) throw webidl$10.errors.exception({
				header: "Headers constructor",
				message: `expected name/value pair to be length 2, found ${header.length}.`
			});
			appendHeader(headers, header[0], header[1]);
		}
else if (typeof object === "object" && object !== null) {
			const keys = Object.keys(object);
			for (let i$2 = 0; i$2 < keys.length; ++i$2) appendHeader(headers, keys[i$2], object[keys[i$2]]);
		} else throw webidl$10.errors.conversionFailed({
			prefix: "Headers constructor",
			argument: "Argument 1",
			types: ["sequence<sequence<ByteString>>", "record<ByteString, ByteString>"]
		});
	}
	/**
	* @see https://fetch.spec.whatwg.org/#concept-headers-append
	*/
	function appendHeader(headers, name, value) {
		value = headerValueNormalize(value);
		if (!isValidHeaderName$1(name)) throw webidl$10.errors.invalidArgument({
			prefix: "Headers.append",
			value: name,
			type: "header name"
		});
else if (!isValidHeaderValue(value)) throw webidl$10.errors.invalidArgument({
			prefix: "Headers.append",
			value,
			type: "header value"
		});
		if (headers[kGuard$4] === "immutable") throw new TypeError("immutable");
else if (headers[kGuard$4] === "request-no-cors") {}
		return headers[kHeadersList$6].append(name, value);
	}
	var HeadersList$2 = class HeadersList$2 {
		/** @type {[string, string][]|null} */
		cookies = null;
		constructor(init) {
			if (init instanceof HeadersList$2) {
				this[kHeadersMap] = new Map(init[kHeadersMap]);
				this[kHeadersSortedMap] = init[kHeadersSortedMap];
				this.cookies = init.cookies === null ? null : [...init.cookies];
			} else {
				this[kHeadersMap] = new Map(init);
				this[kHeadersSortedMap] = null;
			}
		}
		contains(name) {
			name = name.toLowerCase();
			return this[kHeadersMap].has(name);
		}
		clear() {
			this[kHeadersMap].clear();
			this[kHeadersSortedMap] = null;
			this.cookies = null;
		}
		append(name, value) {
			this[kHeadersSortedMap] = null;
			const lowercaseName = name.toLowerCase();
			const exists$1 = this[kHeadersMap].get(lowercaseName);
			if (exists$1) {
				const delimiter = lowercaseName === "cookie" ? "; " : ", ";
				this[kHeadersMap].set(lowercaseName, {
					name: exists$1.name,
					value: `${exists$1.value}${delimiter}${value}`
				});
			} else this[kHeadersMap].set(lowercaseName, {
				name,
				value
			});
			if (lowercaseName === "set-cookie") {
				this.cookies ??= [];
				this.cookies.push(value);
			}
		}
		set(name, value) {
			this[kHeadersSortedMap] = null;
			const lowercaseName = name.toLowerCase();
			if (lowercaseName === "set-cookie") this.cookies = [value];
			this[kHeadersMap].set(lowercaseName, {
				name,
				value
			});
		}
		delete(name) {
			this[kHeadersSortedMap] = null;
			name = name.toLowerCase();
			if (name === "set-cookie") this.cookies = null;
			this[kHeadersMap].delete(name);
		}
		get(name) {
			const value = this[kHeadersMap].get(name.toLowerCase());
			return value === undefined ? null : value.value;
		}
		*[Symbol.iterator]() {
			for (const [name, { value }] of this[kHeadersMap]) yield [name, value];
		}
		get entries() {
			const headers = {};
			if (this[kHeadersMap].size) for (const { name, value } of this[kHeadersMap].values()) headers[name] = value;
			return headers;
		}
	};
	var Headers$6 = class Headers$6 {
		constructor(init = undefined) {
			if (init === kConstruct$4) return;
			this[kHeadersList$6] = new HeadersList$2();
			this[kGuard$4] = "none";
			if (init !== undefined) {
				init = webidl$10.converters.HeadersInit(init);
				fill$4(this, init);
			}
		}
		append(name, value) {
			webidl$10.brandCheck(this, Headers$6);
			webidl$10.argumentLengthCheck(arguments, 2, { header: "Headers.append" });
			name = webidl$10.converters.ByteString(name);
			value = webidl$10.converters.ByteString(value);
			return appendHeader(this, name, value);
		}
		delete(name) {
			webidl$10.brandCheck(this, Headers$6);
			webidl$10.argumentLengthCheck(arguments, 1, { header: "Headers.delete" });
			name = webidl$10.converters.ByteString(name);
			if (!isValidHeaderName$1(name)) throw webidl$10.errors.invalidArgument({
				prefix: "Headers.delete",
				value: name,
				type: "header name"
			});
			if (this[kGuard$4] === "immutable") throw new TypeError("immutable");
else if (this[kGuard$4] === "request-no-cors") {}
			if (!this[kHeadersList$6].contains(name)) return;
			this[kHeadersList$6].delete(name);
		}
		get(name) {
			webidl$10.brandCheck(this, Headers$6);
			webidl$10.argumentLengthCheck(arguments, 1, { header: "Headers.get" });
			name = webidl$10.converters.ByteString(name);
			if (!isValidHeaderName$1(name)) throw webidl$10.errors.invalidArgument({
				prefix: "Headers.get",
				value: name,
				type: "header name"
			});
			return this[kHeadersList$6].get(name);
		}
		has(name) {
			webidl$10.brandCheck(this, Headers$6);
			webidl$10.argumentLengthCheck(arguments, 1, { header: "Headers.has" });
			name = webidl$10.converters.ByteString(name);
			if (!isValidHeaderName$1(name)) throw webidl$10.errors.invalidArgument({
				prefix: "Headers.has",
				value: name,
				type: "header name"
			});
			return this[kHeadersList$6].contains(name);
		}
		set(name, value) {
			webidl$10.brandCheck(this, Headers$6);
			webidl$10.argumentLengthCheck(arguments, 2, { header: "Headers.set" });
			name = webidl$10.converters.ByteString(name);
			value = webidl$10.converters.ByteString(value);
			value = headerValueNormalize(value);
			if (!isValidHeaderName$1(name)) throw webidl$10.errors.invalidArgument({
				prefix: "Headers.set",
				value: name,
				type: "header name"
			});
else if (!isValidHeaderValue(value)) throw webidl$10.errors.invalidArgument({
				prefix: "Headers.set",
				value,
				type: "header value"
			});
			if (this[kGuard$4] === "immutable") throw new TypeError("immutable");
else if (this[kGuard$4] === "request-no-cors") {}
			this[kHeadersList$6].set(name, value);
		}
		getSetCookie() {
			webidl$10.brandCheck(this, Headers$6);
			const list$3 = this[kHeadersList$6].cookies;
			if (list$3) return [...list$3];
			return [];
		}
		get [kHeadersSortedMap]() {
			if (this[kHeadersList$6][kHeadersSortedMap]) return this[kHeadersList$6][kHeadersSortedMap];
			const headers = [];
			const names = [...this[kHeadersList$6]].sort((a, b) => a[0] < b[0] ? -1 : 1);
			const cookies = this[kHeadersList$6].cookies;
			for (let i$2 = 0; i$2 < names.length; ++i$2) {
				const [name, value] = names[i$2];
				if (name === "set-cookie") for (let j = 0; j < cookies.length; ++j) headers.push([name, cookies[j]]);
else {
					assert$10(value !== null);
					headers.push([name, value]);
				}
			}
			this[kHeadersList$6][kHeadersSortedMap] = headers;
			return headers;
		}
		keys() {
			webidl$10.brandCheck(this, Headers$6);
			if (this[kGuard$4] === "immutable") {
				const value = this[kHeadersSortedMap];
				return makeIterator(() => value, "Headers", "key");
			}
			return makeIterator(() => [...this[kHeadersSortedMap].values()], "Headers", "key");
		}
		values() {
			webidl$10.brandCheck(this, Headers$6);
			if (this[kGuard$4] === "immutable") {
				const value = this[kHeadersSortedMap];
				return makeIterator(() => value, "Headers", "value");
			}
			return makeIterator(() => [...this[kHeadersSortedMap].values()], "Headers", "value");
		}
		entries() {
			webidl$10.brandCheck(this, Headers$6);
			if (this[kGuard$4] === "immutable") {
				const value = this[kHeadersSortedMap];
				return makeIterator(() => value, "Headers", "key+value");
			}
			return makeIterator(() => [...this[kHeadersSortedMap].values()], "Headers", "key+value");
		}
		/**
		* @param {(value: string, key: string, self: Headers) => void} callbackFn
		* @param {unknown} thisArg
		*/
		forEach(callbackFn, thisArg = globalThis) {
			webidl$10.brandCheck(this, Headers$6);
			webidl$10.argumentLengthCheck(arguments, 1, { header: "Headers.forEach" });
			if (typeof callbackFn !== "function") throw new TypeError("Failed to execute 'forEach' on 'Headers': parameter 1 is not of type 'Function'.");
			for (const [key, value] of this) callbackFn.apply(thisArg, [
				value,
				key,
				this
			]);
		}
		[Symbol.for("nodejs.util.inspect.custom")]() {
			webidl$10.brandCheck(this, Headers$6);
			return this[kHeadersList$6];
		}
	};
	Headers$6.prototype[Symbol.iterator] = Headers$6.prototype.entries;
	Object.defineProperties(Headers$6.prototype, {
		append: kEnumerableProperty$7,
		delete: kEnumerableProperty$7,
		get: kEnumerableProperty$7,
		has: kEnumerableProperty$7,
		set: kEnumerableProperty$7,
		getSetCookie: kEnumerableProperty$7,
		keys: kEnumerableProperty$7,
		values: kEnumerableProperty$7,
		entries: kEnumerableProperty$7,
		forEach: kEnumerableProperty$7,
		[Symbol.iterator]: { enumerable: false },
		[Symbol.toStringTag]: {
			value: "Headers",
			configurable: true
		}
	});
	webidl$10.converters.HeadersInit = function(V) {
		if (webidl$10.util.Type(V) === "Object") {
			if (V[Symbol.iterator]) return webidl$10.converters["sequence<sequence<ByteString>>"](V);
			return webidl$10.converters["record<ByteString, ByteString>"](V);
		}
		throw webidl$10.errors.conversionFailed({
			prefix: "Headers constructor",
			argument: "Argument 1",
			types: ["sequence<sequence<ByteString>>", "record<ByteString, ByteString>"]
		});
	};
	module.exports = {
		fill: fill$4,
		Headers: Headers$6,
		HeadersList: HeadersList$2
	};
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/response.js
var require_response = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/response.js"(exports, module) {
	const { Headers: Headers$5, HeadersList: HeadersList$1, fill: fill$3 } = require_headers();
	const { extractBody: extractBody$1, cloneBody: cloneBody$1, mixinBody: mixinBody$1 } = require_body();
	const util$6 = require_util$6();
	const { kEnumerableProperty: kEnumerableProperty$6 } = util$6;
	const { isValidReasonPhrase, isCancelled: isCancelled$1, isAborted: isAborted$1, isBlobLike: isBlobLike$2, serializeJavascriptValueToJSONString, isErrorLike: isErrorLike$1, isomorphicEncode: isomorphicEncode$1 } = require_util$5();
	const { redirectStatusSet: redirectStatusSet$1, nullBodyStatus: nullBodyStatus$1, DOMException: DOMException$4 } = require_constants$7();
	const { kState: kState$6, kHeaders: kHeaders$3, kGuard: kGuard$3, kRealm: kRealm$3 } = require_symbols$3();
	const { webidl: webidl$9 } = require_webidl();
	const { FormData } = require_formdata();
	const { getGlobalOrigin: getGlobalOrigin$2 } = require_global$1();
	const { URLSerializer: URLSerializer$3 } = require_dataURL();
	const { kHeadersList: kHeadersList$5, kConstruct: kConstruct$3 } = require_symbols$4();
	const assert$9 = require("assert");
	const { types: types$2 } = require("util");
	const ReadableStream$1 = globalThis.ReadableStream || require("stream/web").ReadableStream;
	const textEncoder = new TextEncoder("utf-8");
	var Response$2 = class Response$2 {
		static error() {
			const relevantRealm = { settingsObject: {} };
			const responseObject = new Response$2();
			responseObject[kState$6] = makeNetworkError$1();
			responseObject[kRealm$3] = relevantRealm;
			responseObject[kHeaders$3][kHeadersList$5] = responseObject[kState$6].headersList;
			responseObject[kHeaders$3][kGuard$3] = "immutable";
			responseObject[kHeaders$3][kRealm$3] = relevantRealm;
			return responseObject;
		}
		static json(data, init = {}) {
			webidl$9.argumentLengthCheck(arguments, 1, { header: "Response.json" });
			if (init !== null) init = webidl$9.converters.ResponseInit(init);
			const bytes = textEncoder.encode(serializeJavascriptValueToJSONString(data));
			const body = extractBody$1(bytes);
			const relevantRealm = { settingsObject: {} };
			const responseObject = new Response$2();
			responseObject[kRealm$3] = relevantRealm;
			responseObject[kHeaders$3][kGuard$3] = "response";
			responseObject[kHeaders$3][kRealm$3] = relevantRealm;
			initializeResponse(responseObject, init, {
				body: body[0],
				type: "application/json"
			});
			return responseObject;
		}
		static redirect(url, status = 302) {
			const relevantRealm = { settingsObject: {} };
			webidl$9.argumentLengthCheck(arguments, 1, { header: "Response.redirect" });
			url = webidl$9.converters.USVString(url);
			status = webidl$9.converters["unsigned short"](status);
			let parsedURL;
			try {
				parsedURL = new URL(url, getGlobalOrigin$2());
			} catch (err) {
				throw Object.assign(new TypeError("Failed to parse URL from " + url), { cause: err });
			}
			if (!redirectStatusSet$1.has(status)) throw new RangeError("Invalid status code " + status);
			const responseObject = new Response$2();
			responseObject[kRealm$3] = relevantRealm;
			responseObject[kHeaders$3][kGuard$3] = "immutable";
			responseObject[kHeaders$3][kRealm$3] = relevantRealm;
			responseObject[kState$6].status = status;
			const value = isomorphicEncode$1(URLSerializer$3(parsedURL));
			responseObject[kState$6].headersList.append("location", value);
			return responseObject;
		}
		constructor(body = null, init = {}) {
			if (body !== null) body = webidl$9.converters.BodyInit(body);
			init = webidl$9.converters.ResponseInit(init);
			this[kRealm$3] = { settingsObject: {} };
			this[kState$6] = makeResponse$1({});
			this[kHeaders$3] = new Headers$5(kConstruct$3);
			this[kHeaders$3][kGuard$3] = "response";
			this[kHeaders$3][kHeadersList$5] = this[kState$6].headersList;
			this[kHeaders$3][kRealm$3] = this[kRealm$3];
			let bodyWithType = null;
			if (body != null) {
				const [extractedBody, type] = extractBody$1(body);
				bodyWithType = {
					body: extractedBody,
					type
				};
			}
			initializeResponse(this, init, bodyWithType);
		}
		get type() {
			webidl$9.brandCheck(this, Response$2);
			return this[kState$6].type;
		}
		get url() {
			webidl$9.brandCheck(this, Response$2);
			const urlList = this[kState$6].urlList;
			const url = urlList[urlList.length - 1] ?? null;
			if (url === null) return "";
			return URLSerializer$3(url, true);
		}
		get redirected() {
			webidl$9.brandCheck(this, Response$2);
			return this[kState$6].urlList.length > 1;
		}
		get status() {
			webidl$9.brandCheck(this, Response$2);
			return this[kState$6].status;
		}
		get ok() {
			webidl$9.brandCheck(this, Response$2);
			return this[kState$6].status >= 200 && this[kState$6].status <= 299;
		}
		get statusText() {
			webidl$9.brandCheck(this, Response$2);
			return this[kState$6].statusText;
		}
		get headers() {
			webidl$9.brandCheck(this, Response$2);
			return this[kHeaders$3];
		}
		get body() {
			webidl$9.brandCheck(this, Response$2);
			return this[kState$6].body ? this[kState$6].body.stream : null;
		}
		get bodyUsed() {
			webidl$9.brandCheck(this, Response$2);
			return !!this[kState$6].body && util$6.isDisturbed(this[kState$6].body.stream);
		}
		clone() {
			webidl$9.brandCheck(this, Response$2);
			if (this.bodyUsed || this.body && this.body.locked) throw webidl$9.errors.exception({
				header: "Response.clone",
				message: "Body has already been consumed."
			});
			const clonedResponse = cloneResponse$1(this[kState$6]);
			const clonedResponseObject = new Response$2();
			clonedResponseObject[kState$6] = clonedResponse;
			clonedResponseObject[kRealm$3] = this[kRealm$3];
			clonedResponseObject[kHeaders$3][kHeadersList$5] = clonedResponse.headersList;
			clonedResponseObject[kHeaders$3][kGuard$3] = this[kHeaders$3][kGuard$3];
			clonedResponseObject[kHeaders$3][kRealm$3] = this[kHeaders$3][kRealm$3];
			return clonedResponseObject;
		}
	};
	mixinBody$1(Response$2);
	Object.defineProperties(Response$2.prototype, {
		type: kEnumerableProperty$6,
		url: kEnumerableProperty$6,
		status: kEnumerableProperty$6,
		ok: kEnumerableProperty$6,
		redirected: kEnumerableProperty$6,
		statusText: kEnumerableProperty$6,
		headers: kEnumerableProperty$6,
		clone: kEnumerableProperty$6,
		body: kEnumerableProperty$6,
		bodyUsed: kEnumerableProperty$6,
		[Symbol.toStringTag]: {
			value: "Response",
			configurable: true
		}
	});
	Object.defineProperties(Response$2, {
		json: kEnumerableProperty$6,
		redirect: kEnumerableProperty$6,
		error: kEnumerableProperty$6
	});
	function cloneResponse$1(response) {
		if (response.internalResponse) return filterResponse$1(cloneResponse$1(response.internalResponse), response.type);
		const newResponse = makeResponse$1({
			...response,
			body: null
		});
		if (response.body != null) newResponse.body = cloneBody$1(response.body);
		return newResponse;
	}
	function makeResponse$1(init) {
		return {
			aborted: false,
			rangeRequested: false,
			timingAllowPassed: false,
			requestIncludesCredentials: false,
			type: "default",
			status: 200,
			timingInfo: null,
			cacheState: "",
			statusText: "",
			...init,
			headersList: init.headersList ? new HeadersList$1(init.headersList) : new HeadersList$1(),
			urlList: init.urlList ? [...init.urlList] : []
		};
	}
	function makeNetworkError$1(reason) {
		const isError = isErrorLike$1(reason);
		return makeResponse$1({
			type: "error",
			status: 0,
			error: isError ? reason : new Error(reason ? String(reason) : reason),
			aborted: reason && reason.name === "AbortError"
		});
	}
	function makeFilteredResponse(response, state) {
		state = {
			internalResponse: response,
			...state
		};
		return new Proxy(response, {
			get(target, p) {
				return p in state ? state[p] : target[p];
			},
			set(target, p, value) {
				assert$9(!(p in state));
				target[p] = value;
				return true;
			}
		});
	}
	function filterResponse$1(response, type) {
		if (type === "basic") return makeFilteredResponse(response, {
			type: "basic",
			headersList: response.headersList
		});
else if (type === "cors") return makeFilteredResponse(response, {
			type: "cors",
			headersList: response.headersList
		});
else if (type === "opaque") return makeFilteredResponse(response, {
			type: "opaque",
			urlList: Object.freeze([]),
			status: 0,
			statusText: "",
			body: null
		});
else if (type === "opaqueredirect") return makeFilteredResponse(response, {
			type: "opaqueredirect",
			status: 0,
			statusText: "",
			headersList: [],
			body: null
		});
else assert$9(false);
	}
	function makeAppropriateNetworkError$1(fetchParams, err = null) {
		assert$9(isCancelled$1(fetchParams));
		return isAborted$1(fetchParams) ? makeNetworkError$1(Object.assign(new DOMException$4("The operation was aborted.", "AbortError"), { cause: err })) : makeNetworkError$1(Object.assign(new DOMException$4("Request was cancelled."), { cause: err }));
	}
	function initializeResponse(response, init, body) {
		if (init.status !== null && (init.status < 200 || init.status > 599)) throw new RangeError("init[\"status\"] must be in the range of 200 to 599, inclusive.");
		if ("statusText" in init && init.statusText != null) {
			if (!isValidReasonPhrase(String(init.statusText))) throw new TypeError("Invalid statusText");
		}
		if ("status" in init && init.status != null) response[kState$6].status = init.status;
		if ("statusText" in init && init.statusText != null) response[kState$6].statusText = init.statusText;
		if ("headers" in init && init.headers != null) fill$3(response[kHeaders$3], init.headers);
		if (body) {
			if (nullBodyStatus$1.includes(response.status)) throw webidl$9.errors.exception({
				header: "Response constructor",
				message: "Invalid response status code " + response.status
			});
			response[kState$6].body = body.body;
			if (body.type != null && !response[kState$6].headersList.contains("Content-Type")) response[kState$6].headersList.append("content-type", body.type);
		}
	}
	webidl$9.converters.ReadableStream = webidl$9.interfaceConverter(ReadableStream$1);
	webidl$9.converters.FormData = webidl$9.interfaceConverter(FormData);
	webidl$9.converters.URLSearchParams = webidl$9.interfaceConverter(URLSearchParams);
	webidl$9.converters.XMLHttpRequestBodyInit = function(V) {
		if (typeof V === "string") return webidl$9.converters.USVString(V);
		if (isBlobLike$2(V)) return webidl$9.converters.Blob(V, { strict: false });
		if (types$2.isArrayBuffer(V) || types$2.isTypedArray(V) || types$2.isDataView(V)) return webidl$9.converters.BufferSource(V);
		if (util$6.isFormDataLike(V)) return webidl$9.converters.FormData(V, { strict: false });
		if (V instanceof URLSearchParams) return webidl$9.converters.URLSearchParams(V);
		return webidl$9.converters.DOMString(V);
	};
	webidl$9.converters.BodyInit = function(V) {
		if (V instanceof ReadableStream$1) return webidl$9.converters.ReadableStream(V);
		if (V?.[Symbol.asyncIterator]) return V;
		return webidl$9.converters.XMLHttpRequestBodyInit(V);
	};
	webidl$9.converters.ResponseInit = webidl$9.dictionaryConverter([
		{
			key: "status",
			converter: webidl$9.converters["unsigned short"],
			defaultValue: 200
		},
		{
			key: "statusText",
			converter: webidl$9.converters.ByteString,
			defaultValue: ""
		},
		{
			key: "headers",
			converter: webidl$9.converters.HeadersInit
		}
	]);
	module.exports = {
		makeNetworkError: makeNetworkError$1,
		makeResponse: makeResponse$1,
		makeAppropriateNetworkError: makeAppropriateNetworkError$1,
		filterResponse: filterResponse$1,
		Response: Response$2,
		cloneResponse: cloneResponse$1
	};
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/request.js
var require_request = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/request.js"(exports, module) {
	const { extractBody, mixinBody, cloneBody } = require_body();
	const { Headers: Headers$4, fill: fillHeaders, HeadersList } = require_headers();
	const { FinalizationRegistry } = require_dispatcher_weakref()();
	const util$5 = require_util$6();
	const { isValidHTTPToken, sameOrigin: sameOrigin$1, normalizeMethod, makePolicyContainer: makePolicyContainer$1, normalizeMethodRecord } = require_util$5();
	const { forbiddenMethodsSet, corsSafeListedMethodsSet, referrerPolicy, requestRedirect, requestMode, requestCredentials, requestCache, requestDuplex } = require_constants$7();
	const { kEnumerableProperty: kEnumerableProperty$5 } = util$5;
	const { kHeaders: kHeaders$2, kSignal, kState: kState$5, kGuard: kGuard$2, kRealm: kRealm$2 } = require_symbols$3();
	const { webidl: webidl$8 } = require_webidl();
	const { getGlobalOrigin: getGlobalOrigin$1 } = require_global$1();
	const { URLSerializer: URLSerializer$2 } = require_dataURL();
	const { kHeadersList: kHeadersList$4, kConstruct: kConstruct$2 } = require_symbols$4();
	const assert$8 = require("assert");
	const { getMaxListeners, setMaxListeners, getEventListeners, defaultMaxListeners } = require("events");
	let TransformStream$1 = globalThis.TransformStream;
	const kAbortController = Symbol("abortController");
	const requestFinalizer = new FinalizationRegistry(({ signal, abort: abort$1 }) => {
		signal.removeEventListener("abort", abort$1);
	});
	var Request$2 = class Request$2 {
		constructor(input, init = {}) {
			if (input === kConstruct$2) return;
			webidl$8.argumentLengthCheck(arguments, 1, { header: "Request constructor" });
			input = webidl$8.converters.RequestInfo(input);
			init = webidl$8.converters.RequestInit(init);
			this[kRealm$2] = { settingsObject: {
				baseUrl: getGlobalOrigin$1(),
				get origin() {
					return this.baseUrl?.origin;
				},
				policyContainer: makePolicyContainer$1()
			} };
			let request$2 = null;
			let fallbackMode = null;
			const baseUrl$1 = this[kRealm$2].settingsObject.baseUrl;
			let signal = null;
			if (typeof input === "string") {
				let parsedURL;
				try {
					parsedURL = new URL(input, baseUrl$1);
				} catch (err) {
					throw new TypeError("Failed to parse URL from " + input, { cause: err });
				}
				if (parsedURL.username || parsedURL.password) throw new TypeError("Request cannot be constructed from a URL that includes credentials: " + input);
				request$2 = makeRequest$2({ urlList: [parsedURL] });
				fallbackMode = "cors";
			} else {
				assert$8(input instanceof Request$2);
				request$2 = input[kState$5];
				signal = input[kSignal];
			}
			const origin = this[kRealm$2].settingsObject.origin;
			let window$1 = "client";
			if (request$2.window?.constructor?.name === "EnvironmentSettingsObject" && sameOrigin$1(request$2.window, origin)) window$1 = request$2.window;
			if (init.window != null) throw new TypeError(`'window' option '${window$1}' must be null`);
			if ("window" in init) window$1 = "no-window";
			request$2 = makeRequest$2({
				method: request$2.method,
				headersList: request$2.headersList,
				unsafeRequest: request$2.unsafeRequest,
				client: this[kRealm$2].settingsObject,
				window: window$1,
				priority: request$2.priority,
				origin: request$2.origin,
				referrer: request$2.referrer,
				referrerPolicy: request$2.referrerPolicy,
				mode: request$2.mode,
				credentials: request$2.credentials,
				cache: request$2.cache,
				redirect: request$2.redirect,
				integrity: request$2.integrity,
				keepalive: request$2.keepalive,
				reloadNavigation: request$2.reloadNavigation,
				historyNavigation: request$2.historyNavigation,
				urlList: [...request$2.urlList]
			});
			const initHasKey = Object.keys(init).length !== 0;
			if (initHasKey) {
				if (request$2.mode === "navigate") request$2.mode = "same-origin";
				request$2.reloadNavigation = false;
				request$2.historyNavigation = false;
				request$2.origin = "client";
				request$2.referrer = "client";
				request$2.referrerPolicy = "";
				request$2.url = request$2.urlList[request$2.urlList.length - 1];
				request$2.urlList = [request$2.url];
			}
			if (init.referrer !== undefined) {
				const referrer = init.referrer;
				if (referrer === "") request$2.referrer = "no-referrer";
else {
					let parsedReferrer;
					try {
						parsedReferrer = new URL(referrer, baseUrl$1);
					} catch (err) {
						throw new TypeError(`Referrer "${referrer}" is not a valid URL.`, { cause: err });
					}
					if (parsedReferrer.protocol === "about:" && parsedReferrer.hostname === "client" || origin && !sameOrigin$1(parsedReferrer, this[kRealm$2].settingsObject.baseUrl)) request$2.referrer = "client";
else request$2.referrer = parsedReferrer;
				}
			}
			if (init.referrerPolicy !== undefined) request$2.referrerPolicy = init.referrerPolicy;
			let mode;
			if (init.mode !== undefined) mode = init.mode;
else mode = fallbackMode;
			if (mode === "navigate") throw webidl$8.errors.exception({
				header: "Request constructor",
				message: "invalid request mode navigate."
			});
			if (mode != null) request$2.mode = mode;
			if (init.credentials !== undefined) request$2.credentials = init.credentials;
			if (init.cache !== undefined) request$2.cache = init.cache;
			if (request$2.cache === "only-if-cached" && request$2.mode !== "same-origin") throw new TypeError("'only-if-cached' can be set only with 'same-origin' mode");
			if (init.redirect !== undefined) request$2.redirect = init.redirect;
			if (init.integrity != null) request$2.integrity = String(init.integrity);
			if (init.keepalive !== undefined) request$2.keepalive = Boolean(init.keepalive);
			if (init.method !== undefined) {
				let method = init.method;
				if (!isValidHTTPToken(method)) throw new TypeError(`'${method}' is not a valid HTTP method.`);
				if (forbiddenMethodsSet.has(method.toUpperCase())) throw new TypeError(`'${method}' HTTP method is unsupported.`);
				method = normalizeMethodRecord[method] ?? normalizeMethod(method);
				request$2.method = method;
			}
			if (init.signal !== undefined) signal = init.signal;
			this[kState$5] = request$2;
			const ac = new AbortController();
			this[kSignal] = ac.signal;
			this[kSignal][kRealm$2] = this[kRealm$2];
			if (signal != null) {
				if (!signal || typeof signal.aborted !== "boolean" || typeof signal.addEventListener !== "function") throw new TypeError("Failed to construct 'Request': member signal is not of type AbortSignal.");
				if (signal.aborted) ac.abort(signal.reason);
else {
					this[kAbortController] = ac;
					const acRef = new WeakRef(ac);
					const abort$1 = function() {
						const ac$1 = acRef.deref();
						if (ac$1 !== undefined) ac$1.abort(this.reason);
					};
					try {
						if (typeof getMaxListeners === "function" && getMaxListeners(signal) === defaultMaxListeners) setMaxListeners(100, signal);
else if (getEventListeners(signal, "abort").length >= defaultMaxListeners) setMaxListeners(100, signal);
					} catch {}
					util$5.addAbortListener(signal, abort$1);
					requestFinalizer.register(ac, {
						signal,
						abort: abort$1
					});
				}
			}
			this[kHeaders$2] = new Headers$4(kConstruct$2);
			this[kHeaders$2][kHeadersList$4] = request$2.headersList;
			this[kHeaders$2][kGuard$2] = "request";
			this[kHeaders$2][kRealm$2] = this[kRealm$2];
			if (mode === "no-cors") {
				if (!corsSafeListedMethodsSet.has(request$2.method)) throw new TypeError(`'${request$2.method} is unsupported in no-cors mode.`);
				this[kHeaders$2][kGuard$2] = "request-no-cors";
			}
			if (initHasKey) {
				/** @type {HeadersList} */
				const headersList = this[kHeaders$2][kHeadersList$4];
				const headers = init.headers !== undefined ? init.headers : new HeadersList(headersList);
				headersList.clear();
				if (headers instanceof HeadersList) {
					for (const [key, val] of headers) headersList.append(key, val);
					headersList.cookies = headers.cookies;
				} else fillHeaders(this[kHeaders$2], headers);
			}
			const inputBody = input instanceof Request$2 ? input[kState$5].body : null;
			if ((init.body != null || inputBody != null) && (request$2.method === "GET" || request$2.method === "HEAD")) throw new TypeError("Request with GET/HEAD method cannot have body.");
			let initBody = null;
			if (init.body != null) {
				const [extractedBody, contentType] = extractBody(init.body, request$2.keepalive);
				initBody = extractedBody;
				if (contentType && !this[kHeaders$2][kHeadersList$4].contains("content-type")) this[kHeaders$2].append("content-type", contentType);
			}
			const inputOrInitBody = initBody ?? inputBody;
			if (inputOrInitBody != null && inputOrInitBody.source == null) {
				if (initBody != null && init.duplex == null) throw new TypeError("RequestInit: duplex option is required when sending a body.");
				if (request$2.mode !== "same-origin" && request$2.mode !== "cors") throw new TypeError("If request is made from ReadableStream, mode should be \"same-origin\" or \"cors\"");
				request$2.useCORSPreflightFlag = true;
			}
			let finalBody = inputOrInitBody;
			if (initBody == null && inputBody != null) {
				if (util$5.isDisturbed(inputBody.stream) || inputBody.stream.locked) throw new TypeError("Cannot construct a Request with a Request object that has already been used.");
				if (!TransformStream$1) TransformStream$1 = require("stream/web").TransformStream;
				const identityTransform = new TransformStream$1();
				inputBody.stream.pipeThrough(identityTransform);
				finalBody = {
					source: inputBody.source,
					length: inputBody.length,
					stream: identityTransform.readable
				};
			}
			this[kState$5].body = finalBody;
		}
		get method() {
			webidl$8.brandCheck(this, Request$2);
			return this[kState$5].method;
		}
		get url() {
			webidl$8.brandCheck(this, Request$2);
			return URLSerializer$2(this[kState$5].url);
		}
		get headers() {
			webidl$8.brandCheck(this, Request$2);
			return this[kHeaders$2];
		}
		get destination() {
			webidl$8.brandCheck(this, Request$2);
			return this[kState$5].destination;
		}
		get referrer() {
			webidl$8.brandCheck(this, Request$2);
			if (this[kState$5].referrer === "no-referrer") return "";
			if (this[kState$5].referrer === "client") return "about:client";
			return this[kState$5].referrer.toString();
		}
		get referrerPolicy() {
			webidl$8.brandCheck(this, Request$2);
			return this[kState$5].referrerPolicy;
		}
		get mode() {
			webidl$8.brandCheck(this, Request$2);
			return this[kState$5].mode;
		}
		get credentials() {
			return this[kState$5].credentials;
		}
		get cache() {
			webidl$8.brandCheck(this, Request$2);
			return this[kState$5].cache;
		}
		get redirect() {
			webidl$8.brandCheck(this, Request$2);
			return this[kState$5].redirect;
		}
		get integrity() {
			webidl$8.brandCheck(this, Request$2);
			return this[kState$5].integrity;
		}
		get keepalive() {
			webidl$8.brandCheck(this, Request$2);
			return this[kState$5].keepalive;
		}
		get isReloadNavigation() {
			webidl$8.brandCheck(this, Request$2);
			return this[kState$5].reloadNavigation;
		}
		get isHistoryNavigation() {
			webidl$8.brandCheck(this, Request$2);
			return this[kState$5].historyNavigation;
		}
		get signal() {
			webidl$8.brandCheck(this, Request$2);
			return this[kSignal];
		}
		get body() {
			webidl$8.brandCheck(this, Request$2);
			return this[kState$5].body ? this[kState$5].body.stream : null;
		}
		get bodyUsed() {
			webidl$8.brandCheck(this, Request$2);
			return !!this[kState$5].body && util$5.isDisturbed(this[kState$5].body.stream);
		}
		get duplex() {
			webidl$8.brandCheck(this, Request$2);
			return "half";
		}
		clone() {
			webidl$8.brandCheck(this, Request$2);
			if (this.bodyUsed || this.body?.locked) throw new TypeError("unusable");
			const clonedRequest = cloneRequest(this[kState$5]);
			const clonedRequestObject = new Request$2(kConstruct$2);
			clonedRequestObject[kState$5] = clonedRequest;
			clonedRequestObject[kRealm$2] = this[kRealm$2];
			clonedRequestObject[kHeaders$2] = new Headers$4(kConstruct$2);
			clonedRequestObject[kHeaders$2][kHeadersList$4] = clonedRequest.headersList;
			clonedRequestObject[kHeaders$2][kGuard$2] = this[kHeaders$2][kGuard$2];
			clonedRequestObject[kHeaders$2][kRealm$2] = this[kHeaders$2][kRealm$2];
			const ac = new AbortController();
			if (this.signal.aborted) ac.abort(this.signal.reason);
else util$5.addAbortListener(this.signal, () => {
				ac.abort(this.signal.reason);
			});
			clonedRequestObject[kSignal] = ac.signal;
			return clonedRequestObject;
		}
	};
	mixinBody(Request$2);
	function makeRequest$2(init) {
		const request$2 = {
			method: "GET",
			localURLsOnly: false,
			unsafeRequest: false,
			body: null,
			client: null,
			reservedClient: null,
			replacesClientId: "",
			window: "client",
			keepalive: false,
			serviceWorkers: "all",
			initiator: "",
			destination: "",
			priority: null,
			origin: "client",
			policyContainer: "client",
			referrer: "client",
			referrerPolicy: "",
			mode: "no-cors",
			useCORSPreflightFlag: false,
			credentials: "same-origin",
			useCredentials: false,
			cache: "default",
			redirect: "follow",
			integrity: "",
			cryptoGraphicsNonceMetadata: "",
			parserMetadata: "",
			reloadNavigation: false,
			historyNavigation: false,
			userActivation: false,
			taintedOrigin: false,
			redirectCount: 0,
			responseTainting: "basic",
			preventNoCacheCacheControlHeaderModification: false,
			done: false,
			timingAllowFailed: false,
			...init,
			headersList: init.headersList ? new HeadersList(init.headersList) : new HeadersList()
		};
		request$2.url = request$2.urlList[0];
		return request$2;
	}
	function cloneRequest(request$2) {
		const newRequest = makeRequest$2({
			...request$2,
			body: null
		});
		if (request$2.body != null) newRequest.body = cloneBody(request$2.body);
		return newRequest;
	}
	Object.defineProperties(Request$2.prototype, {
		method: kEnumerableProperty$5,
		url: kEnumerableProperty$5,
		headers: kEnumerableProperty$5,
		redirect: kEnumerableProperty$5,
		clone: kEnumerableProperty$5,
		signal: kEnumerableProperty$5,
		duplex: kEnumerableProperty$5,
		destination: kEnumerableProperty$5,
		body: kEnumerableProperty$5,
		bodyUsed: kEnumerableProperty$5,
		isHistoryNavigation: kEnumerableProperty$5,
		isReloadNavigation: kEnumerableProperty$5,
		keepalive: kEnumerableProperty$5,
		integrity: kEnumerableProperty$5,
		cache: kEnumerableProperty$5,
		credentials: kEnumerableProperty$5,
		attribute: kEnumerableProperty$5,
		referrerPolicy: kEnumerableProperty$5,
		referrer: kEnumerableProperty$5,
		mode: kEnumerableProperty$5,
		[Symbol.toStringTag]: {
			value: "Request",
			configurable: true
		}
	});
	webidl$8.converters.Request = webidl$8.interfaceConverter(Request$2);
	webidl$8.converters.RequestInfo = function(V) {
		if (typeof V === "string") return webidl$8.converters.USVString(V);
		if (V instanceof Request$2) return webidl$8.converters.Request(V);
		return webidl$8.converters.USVString(V);
	};
	webidl$8.converters.AbortSignal = webidl$8.interfaceConverter(AbortSignal);
	webidl$8.converters.RequestInit = webidl$8.dictionaryConverter([
		{
			key: "method",
			converter: webidl$8.converters.ByteString
		},
		{
			key: "headers",
			converter: webidl$8.converters.HeadersInit
		},
		{
			key: "body",
			converter: webidl$8.nullableConverter(webidl$8.converters.BodyInit)
		},
		{
			key: "referrer",
			converter: webidl$8.converters.USVString
		},
		{
			key: "referrerPolicy",
			converter: webidl$8.converters.DOMString,
			allowedValues: referrerPolicy
		},
		{
			key: "mode",
			converter: webidl$8.converters.DOMString,
			allowedValues: requestMode
		},
		{
			key: "credentials",
			converter: webidl$8.converters.DOMString,
			allowedValues: requestCredentials
		},
		{
			key: "cache",
			converter: webidl$8.converters.DOMString,
			allowedValues: requestCache
		},
		{
			key: "redirect",
			converter: webidl$8.converters.DOMString,
			allowedValues: requestRedirect
		},
		{
			key: "integrity",
			converter: webidl$8.converters.DOMString
		},
		{
			key: "keepalive",
			converter: webidl$8.converters.boolean
		},
		{
			key: "signal",
			converter: webidl$8.nullableConverter((signal) => webidl$8.converters.AbortSignal(signal, { strict: false }))
		},
		{
			key: "window",
			converter: webidl$8.converters.any
		},
		{
			key: "duplex",
			converter: webidl$8.converters.DOMString,
			allowedValues: requestDuplex
		}
	]);
	module.exports = {
		Request: Request$2,
		makeRequest: makeRequest$2
	};
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/index.js
var require_fetch = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/index.js"(exports, module) {
	const { Response: Response$1, makeNetworkError, makeAppropriateNetworkError, filterResponse, makeResponse } = require_response();
	const { Headers: Headers$3 } = require_headers();
	const { Request: Request$1, makeRequest: makeRequest$1 } = require_request();
	const zlib = require("zlib");
	const { bytesMatch, makePolicyContainer, clonePolicyContainer, requestBadPort, TAOCheck, appendRequestOriginHeader, responseLocationURL, requestCurrentURL, setRequestReferrerPolicyOnRedirect, tryUpgradeRequestToAPotentiallyTrustworthyURL, createOpaqueTimingInfo, appendFetchMetadata, corsCheck, crossOriginResourcePolicyCheck, determineRequestsReferrer, coarsenedSharedCurrentTime, createDeferredPromise: createDeferredPromise$1, isBlobLike: isBlobLike$1, sameOrigin, isCancelled, isAborted, isErrorLike, fullyReadBody, readableStreamClose, isomorphicEncode, urlIsLocal, urlIsHttpHttpsScheme: urlIsHttpHttpsScheme$1, urlHasHttpsScheme } = require_util$5();
	const { kState: kState$4, kHeaders: kHeaders$1, kGuard: kGuard$1, kRealm: kRealm$1 } = require_symbols$3();
	const assert$7 = require("assert");
	const { safelyExtractBody } = require_body();
	const { redirectStatusSet, nullBodyStatus, safeMethodsSet, requestBodyHeader, subresourceSet, DOMException: DOMException$3 } = require_constants$7();
	const { kHeadersList: kHeadersList$3 } = require_symbols$4();
	const EE = require("events");
	const { Readable, pipeline } = require("stream");
	const { addAbortListener, isErrored, isReadable, nodeMajor, nodeMinor } = require_util$6();
	const { dataURLProcessor, serializeAMimeType: serializeAMimeType$1 } = require_dataURL();
	const { TransformStream } = require("stream/web");
	const { getGlobalDispatcher: getGlobalDispatcher$4 } = require_global();
	const { webidl: webidl$7 } = require_webidl();
	const { STATUS_CODES } = require("http");
	const GET_OR_HEAD = ["GET", "HEAD"];
	/** @type {import('buffer').resolveObjectURL} */
	let resolveObjectURL;
	let ReadableStream = globalThis.ReadableStream;
	var Fetch = class extends EE {
		constructor(dispatcher) {
			super();
			this.dispatcher = dispatcher;
			this.connection = null;
			this.dump = false;
			this.state = "ongoing";
			this.setMaxListeners(21);
		}
		terminate(reason) {
			if (this.state !== "ongoing") return;
			this.state = "terminated";
			this.connection?.destroy(reason);
			this.emit("terminated", reason);
		}
		abort(error$2) {
			if (this.state !== "ongoing") return;
			this.state = "aborted";
			if (!error$2) error$2 = new DOMException$3("The operation was aborted.", "AbortError");
			this.serializedAbortReason = error$2;
			this.connection?.destroy(error$2);
			this.emit("terminated", error$2);
		}
	};
	function fetch(input, init = {}) {
		webidl$7.argumentLengthCheck(arguments, 1, { header: "globalThis.fetch" });
		const p = createDeferredPromise$1();
		let requestObject;
		try {
			requestObject = new Request$1(input, init);
		} catch (e) {
			p.reject(e);
			return p.promise;
		}
		const request$2 = requestObject[kState$4];
		if (requestObject.signal.aborted) {
			abortFetch(p, request$2, null, requestObject.signal.reason);
			return p.promise;
		}
		const globalObject = request$2.client.globalObject;
		if (globalObject?.constructor?.name === "ServiceWorkerGlobalScope") request$2.serviceWorkers = "none";
		let responseObject = null;
		const relevantRealm = null;
		let locallyAborted = false;
		let controller = null;
		addAbortListener(requestObject.signal, () => {
			locallyAborted = true;
			assert$7(controller != null);
			controller.abort(requestObject.signal.reason);
			abortFetch(p, request$2, responseObject, requestObject.signal.reason);
		});
		const handleFetchDone = (response) => finalizeAndReportTiming(response, "fetch");
		const processResponse = (response) => {
			if (locallyAborted) return Promise.resolve();
			if (response.aborted) {
				abortFetch(p, request$2, responseObject, controller.serializedAbortReason);
				return Promise.resolve();
			}
			if (response.type === "error") {
				p.reject(Object.assign(new TypeError("fetch failed"), { cause: response.error }));
				return Promise.resolve();
			}
			responseObject = new Response$1();
			responseObject[kState$4] = response;
			responseObject[kRealm$1] = relevantRealm;
			responseObject[kHeaders$1][kHeadersList$3] = response.headersList;
			responseObject[kHeaders$1][kGuard$1] = "immutable";
			responseObject[kHeaders$1][kRealm$1] = relevantRealm;
			p.resolve(responseObject);
		};
		controller = fetching$2({
			request: request$2,
			processResponseEndOfBody: handleFetchDone,
			processResponse,
			dispatcher: init.dispatcher ?? getGlobalDispatcher$4()
		});
		return p.promise;
	}
	function finalizeAndReportTiming(response, initiatorType = "other") {
		if (response.type === "error" && response.aborted) return;
		if (!response.urlList?.length) return;
		const originalURL = response.urlList[0];
		let timingInfo = response.timingInfo;
		let cacheState = response.cacheState;
		if (!urlIsHttpHttpsScheme$1(originalURL)) return;
		if (timingInfo === null) return;
		if (!response.timingAllowPassed) {
			timingInfo = createOpaqueTimingInfo({ startTime: timingInfo.startTime });
			cacheState = "";
		}
		timingInfo.endTime = coarsenedSharedCurrentTime();
		response.timingInfo = timingInfo;
		markResourceTiming(timingInfo, originalURL, initiatorType, globalThis, cacheState);
	}
	function markResourceTiming(timingInfo, originalURL, initiatorType, globalThis$1, cacheState) {
		if (nodeMajor > 18 || nodeMajor === 18 && nodeMinor >= 2) performance.markResourceTiming(timingInfo, originalURL.href, initiatorType, globalThis$1, cacheState);
	}
	function abortFetch(p, request$2, responseObject, error$2) {
		if (!error$2) error$2 = new DOMException$3("The operation was aborted.", "AbortError");
		p.reject(error$2);
		if (request$2.body != null && isReadable(request$2.body?.stream)) request$2.body.stream.cancel(error$2).catch((err) => {
			if (err.code === "ERR_INVALID_STATE") return;
			throw err;
		});
		if (responseObject == null) return;
		const response = responseObject[kState$4];
		if (response.body != null && isReadable(response.body?.stream)) response.body.stream.cancel(error$2).catch((err) => {
			if (err.code === "ERR_INVALID_STATE") return;
			throw err;
		});
	}
	function fetching$2({ request: request$2, processRequestBodyChunkLength, processRequestEndOfBody, processResponse, processResponseEndOfBody, processResponseConsumeBody, useParallelQueue = false, dispatcher }) {
		let taskDestination = null;
		let crossOriginIsolatedCapability = false;
		if (request$2.client != null) {
			taskDestination = request$2.client.globalObject;
			crossOriginIsolatedCapability = request$2.client.crossOriginIsolatedCapability;
		}
		const currenTime = coarsenedSharedCurrentTime(crossOriginIsolatedCapability);
		const timingInfo = createOpaqueTimingInfo({ startTime: currenTime });
		const fetchParams = {
			controller: new Fetch(dispatcher),
			request: request$2,
			timingInfo,
			processRequestBodyChunkLength,
			processRequestEndOfBody,
			processResponse,
			processResponseConsumeBody,
			processResponseEndOfBody,
			taskDestination,
			crossOriginIsolatedCapability
		};
		assert$7(!request$2.body || request$2.body.stream);
		if (request$2.window === "client") request$2.window = request$2.client?.globalObject?.constructor?.name === "Window" ? request$2.client : "no-window";
		if (request$2.origin === "client") request$2.origin = request$2.client?.origin;
		if (request$2.policyContainer === "client") if (request$2.client != null) request$2.policyContainer = clonePolicyContainer(request$2.client.policyContainer);
else request$2.policyContainer = makePolicyContainer();
		if (!request$2.headersList.contains("accept")) {
			const value = "*/*";
			request$2.headersList.append("accept", value);
		}
		if (!request$2.headersList.contains("accept-language")) request$2.headersList.append("accept-language", "*");
		if (request$2.priority === null) {}
		if (subresourceSet.has(request$2.destination)) {}
		mainFetch(fetchParams).catch((err) => {
			fetchParams.controller.terminate(err);
		});
		return fetchParams.controller;
	}
	async function mainFetch(fetchParams, recursive = false) {
		const request$2 = fetchParams.request;
		let response = null;
		if (request$2.localURLsOnly && !urlIsLocal(requestCurrentURL(request$2))) response = makeNetworkError("local URLs only");
		tryUpgradeRequestToAPotentiallyTrustworthyURL(request$2);
		if (requestBadPort(request$2) === "blocked") response = makeNetworkError("bad port");
		if (request$2.referrerPolicy === "") request$2.referrerPolicy = request$2.policyContainer.referrerPolicy;
		if (request$2.referrer !== "no-referrer") request$2.referrer = determineRequestsReferrer(request$2);
		if (response === null) response = await (async () => {
			const currentURL = requestCurrentURL(request$2);
			if (sameOrigin(currentURL, request$2.url) && request$2.responseTainting === "basic" || currentURL.protocol === "data:" || (request$2.mode === "navigate" || request$2.mode === "websocket")) {
				request$2.responseTainting = "basic";
				return await schemeFetch(fetchParams);
			}
			if (request$2.mode === "same-origin") return makeNetworkError("request mode cannot be \"same-origin\"");
			if (request$2.mode === "no-cors") {
				if (request$2.redirect !== "follow") return makeNetworkError("redirect mode cannot be \"follow\" for \"no-cors\" request");
				request$2.responseTainting = "opaque";
				return await schemeFetch(fetchParams);
			}
			if (!urlIsHttpHttpsScheme$1(requestCurrentURL(request$2))) return makeNetworkError("URL scheme must be a HTTP(S) scheme");
			request$2.responseTainting = "cors";
			return await httpFetch(fetchParams);
		})();
		if (recursive) return response;
		if (response.status !== 0 && !response.internalResponse) {
			if (request$2.responseTainting === "cors") {}
			if (request$2.responseTainting === "basic") response = filterResponse(response, "basic");
else if (request$2.responseTainting === "cors") response = filterResponse(response, "cors");
else if (request$2.responseTainting === "opaque") response = filterResponse(response, "opaque");
else assert$7(false);
		}
		let internalResponse = response.status === 0 ? response : response.internalResponse;
		if (internalResponse.urlList.length === 0) internalResponse.urlList.push(...request$2.urlList);
		if (!request$2.timingAllowFailed) response.timingAllowPassed = true;
		if (response.type === "opaque" && internalResponse.status === 206 && internalResponse.rangeRequested && !request$2.headers.contains("range")) response = internalResponse = makeNetworkError();
		if (response.status !== 0 && (request$2.method === "HEAD" || request$2.method === "CONNECT" || nullBodyStatus.includes(internalResponse.status))) {
			internalResponse.body = null;
			fetchParams.controller.dump = true;
		}
		if (request$2.integrity) {
			const processBodyError = (reason) => fetchFinale(fetchParams, makeNetworkError(reason));
			if (request$2.responseTainting === "opaque" || response.body == null) {
				processBodyError(response.error);
				return;
			}
			const processBody = (bytes) => {
				if (!bytesMatch(bytes, request$2.integrity)) {
					processBodyError("integrity mismatch");
					return;
				}
				response.body = safelyExtractBody(bytes)[0];
				fetchFinale(fetchParams, response);
			};
			await fullyReadBody(response.body, processBody, processBodyError);
		} else fetchFinale(fetchParams, response);
	}
	function schemeFetch(fetchParams) {
		if (isCancelled(fetchParams) && fetchParams.request.redirectCount === 0) return Promise.resolve(makeAppropriateNetworkError(fetchParams));
		const { request: request$2 } = fetchParams;
		const { protocol: scheme } = requestCurrentURL(request$2);
		switch (scheme) {
			case "about:": return Promise.resolve(makeNetworkError("about scheme is not supported"));
			case "blob:": {
				if (!resolveObjectURL) resolveObjectURL = require("buffer").resolveObjectURL;
				const blobURLEntry = requestCurrentURL(request$2);
				if (blobURLEntry.search.length !== 0) return Promise.resolve(makeNetworkError("NetworkError when attempting to fetch resource."));
				const blobURLEntryObject = resolveObjectURL(blobURLEntry.toString());
				if (request$2.method !== "GET" || !isBlobLike$1(blobURLEntryObject)) return Promise.resolve(makeNetworkError("invalid method"));
				const bodyWithType = safelyExtractBody(blobURLEntryObject);
				const body = bodyWithType[0];
				const length = isomorphicEncode(`${body.length}`);
				const type = bodyWithType[1] ?? "";
				const response = makeResponse({
					statusText: "OK",
					headersList: [["content-length", {
						name: "Content-Length",
						value: length
					}], ["content-type", {
						name: "Content-Type",
						value: type
					}]]
				});
				response.body = body;
				return Promise.resolve(response);
			}
			case "data:": {
				const currentURL = requestCurrentURL(request$2);
				const dataURLStruct = dataURLProcessor(currentURL);
				if (dataURLStruct === "failure") return Promise.resolve(makeNetworkError("failed to fetch the data URL"));
				const mimeType = serializeAMimeType$1(dataURLStruct.mimeType);
				return Promise.resolve(makeResponse({
					statusText: "OK",
					headersList: [["content-type", {
						name: "Content-Type",
						value: mimeType
					}]],
					body: safelyExtractBody(dataURLStruct.body)[0]
				}));
			}
			case "file:": return Promise.resolve(makeNetworkError("not implemented... yet..."));
			case "http:":
			case "https:": return httpFetch(fetchParams).catch((err) => makeNetworkError(err));
			default: return Promise.resolve(makeNetworkError("unknown scheme"));
		}
	}
	function finalizeResponse(fetchParams, response) {
		fetchParams.request.done = true;
		if (fetchParams.processResponseDone != null) queueMicrotask(() => fetchParams.processResponseDone(response));
	}
	function fetchFinale(fetchParams, response) {
		if (response.type === "error") {
			response.urlList = [fetchParams.request.urlList[0]];
			response.timingInfo = createOpaqueTimingInfo({ startTime: fetchParams.timingInfo.startTime });
		}
		const processResponseEndOfBody = () => {
			fetchParams.request.done = true;
			if (fetchParams.processResponseEndOfBody != null) queueMicrotask(() => fetchParams.processResponseEndOfBody(response));
		};
		if (fetchParams.processResponse != null) queueMicrotask(() => fetchParams.processResponse(response));
		if (response.body == null) processResponseEndOfBody();
else {
			const identityTransformAlgorithm = (chunk, controller) => {
				controller.enqueue(chunk);
			};
			const transformStream = new TransformStream({
				start() {},
				transform: identityTransformAlgorithm,
				flush: processResponseEndOfBody
			}, { size() {
				return 1;
			} }, { size() {
				return 1;
			} });
			response.body = { stream: response.body.stream.pipeThrough(transformStream) };
		}
		if (fetchParams.processResponseConsumeBody != null) {
			const processBody = (nullOrBytes) => fetchParams.processResponseConsumeBody(response, nullOrBytes);
			const processBodyError = (failure) => fetchParams.processResponseConsumeBody(response, failure);
			if (response.body == null) queueMicrotask(() => processBody(null));
else return fullyReadBody(response.body, processBody, processBodyError);
			return Promise.resolve();
		}
	}
	async function httpFetch(fetchParams) {
		const request$2 = fetchParams.request;
		let response = null;
		let actualResponse = null;
		const timingInfo = fetchParams.timingInfo;
		if (request$2.serviceWorkers === "all") {}
		if (response === null) {
			if (request$2.redirect === "follow") request$2.serviceWorkers = "none";
			actualResponse = response = await httpNetworkOrCacheFetch(fetchParams);
			if (request$2.responseTainting === "cors" && corsCheck(request$2, response) === "failure") return makeNetworkError("cors failure");
			if (TAOCheck(request$2, response) === "failure") request$2.timingAllowFailed = true;
		}
		if ((request$2.responseTainting === "opaque" || response.type === "opaque") && crossOriginResourcePolicyCheck(request$2.origin, request$2.client, request$2.destination, actualResponse) === "blocked") return makeNetworkError("blocked");
		if (redirectStatusSet.has(actualResponse.status)) {
			if (request$2.redirect !== "manual") fetchParams.controller.connection.destroy();
			if (request$2.redirect === "error") response = makeNetworkError("unexpected redirect");
else if (request$2.redirect === "manual") response = actualResponse;
else if (request$2.redirect === "follow") response = await httpRedirectFetch(fetchParams, response);
else assert$7(false);
		}
		response.timingInfo = timingInfo;
		return response;
	}
	function httpRedirectFetch(fetchParams, response) {
		const request$2 = fetchParams.request;
		const actualResponse = response.internalResponse ? response.internalResponse : response;
		let locationURL;
		try {
			locationURL = responseLocationURL(actualResponse, requestCurrentURL(request$2).hash);
			if (locationURL == null) return response;
		} catch (err) {
			return Promise.resolve(makeNetworkError(err));
		}
		if (!urlIsHttpHttpsScheme$1(locationURL)) return Promise.resolve(makeNetworkError("URL scheme must be a HTTP(S) scheme"));
		if (request$2.redirectCount === 20) return Promise.resolve(makeNetworkError("redirect count exceeded"));
		request$2.redirectCount += 1;
		if (request$2.mode === "cors" && (locationURL.username || locationURL.password) && !sameOrigin(request$2, locationURL)) return Promise.resolve(makeNetworkError("cross origin not allowed for request mode \"cors\""));
		if (request$2.responseTainting === "cors" && (locationURL.username || locationURL.password)) return Promise.resolve(makeNetworkError("URL cannot contain credentials for request mode \"cors\""));
		if (actualResponse.status !== 303 && request$2.body != null && request$2.body.source == null) return Promise.resolve(makeNetworkError());
		if ([301, 302].includes(actualResponse.status) && request$2.method === "POST" || actualResponse.status === 303 && !GET_OR_HEAD.includes(request$2.method)) {
			request$2.method = "GET";
			request$2.body = null;
			for (const headerName of requestBodyHeader) request$2.headersList.delete(headerName);
		}
		if (!sameOrigin(requestCurrentURL(request$2), locationURL)) {
			request$2.headersList.delete("authorization");
			request$2.headersList.delete("proxy-authorization", true);
			request$2.headersList.delete("cookie");
			request$2.headersList.delete("host");
		}
		if (request$2.body != null) {
			assert$7(request$2.body.source != null);
			request$2.body = safelyExtractBody(request$2.body.source)[0];
		}
		const timingInfo = fetchParams.timingInfo;
		timingInfo.redirectEndTime = timingInfo.postRedirectStartTime = coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability);
		if (timingInfo.redirectStartTime === 0) timingInfo.redirectStartTime = timingInfo.startTime;
		request$2.urlList.push(locationURL);
		setRequestReferrerPolicyOnRedirect(request$2, actualResponse);
		return mainFetch(fetchParams, true);
	}
	async function httpNetworkOrCacheFetch(fetchParams, isAuthenticationFetch = false, isNewConnectionFetch = false) {
		const request$2 = fetchParams.request;
		let httpFetchParams = null;
		let httpRequest = null;
		let response = null;
		const httpCache = null;
		const revalidatingFlag = false;
		if (request$2.window === "no-window" && request$2.redirect === "error") {
			httpFetchParams = fetchParams;
			httpRequest = request$2;
		} else {
			httpRequest = makeRequest$1(request$2);
			httpFetchParams = { ...fetchParams };
			httpFetchParams.request = httpRequest;
		}
		const includeCredentials = request$2.credentials === "include" || request$2.credentials === "same-origin" && request$2.responseTainting === "basic";
		const contentLength = httpRequest.body ? httpRequest.body.length : null;
		let contentLengthHeaderValue = null;
		if (httpRequest.body == null && ["POST", "PUT"].includes(httpRequest.method)) contentLengthHeaderValue = "0";
		if (contentLength != null) contentLengthHeaderValue = isomorphicEncode(`${contentLength}`);
		if (contentLengthHeaderValue != null) httpRequest.headersList.append("content-length", contentLengthHeaderValue);
		if (contentLength != null && httpRequest.keepalive) {}
		if (httpRequest.referrer instanceof URL) httpRequest.headersList.append("referer", isomorphicEncode(httpRequest.referrer.href));
		appendRequestOriginHeader(httpRequest);
		appendFetchMetadata(httpRequest);
		if (!httpRequest.headersList.contains("user-agent")) httpRequest.headersList.append("user-agent", typeof esbuildDetection === "undefined" ? "undici" : "node");
		if (httpRequest.cache === "default" && (httpRequest.headersList.contains("if-modified-since") || httpRequest.headersList.contains("if-none-match") || httpRequest.headersList.contains("if-unmodified-since") || httpRequest.headersList.contains("if-match") || httpRequest.headersList.contains("if-range"))) httpRequest.cache = "no-store";
		if (httpRequest.cache === "no-cache" && !httpRequest.preventNoCacheCacheControlHeaderModification && !httpRequest.headersList.contains("cache-control")) httpRequest.headersList.append("cache-control", "max-age=0");
		if (httpRequest.cache === "no-store" || httpRequest.cache === "reload") {
			if (!httpRequest.headersList.contains("pragma")) httpRequest.headersList.append("pragma", "no-cache");
			if (!httpRequest.headersList.contains("cache-control")) httpRequest.headersList.append("cache-control", "no-cache");
		}
		if (httpRequest.headersList.contains("range")) httpRequest.headersList.append("accept-encoding", "identity");
		if (!httpRequest.headersList.contains("accept-encoding")) if (urlHasHttpsScheme(requestCurrentURL(httpRequest))) httpRequest.headersList.append("accept-encoding", "br, gzip, deflate");
else httpRequest.headersList.append("accept-encoding", "gzip, deflate");
		httpRequest.headersList.delete("host");
		if (includeCredentials) {}
		if (httpCache == null) httpRequest.cache = "no-store";
		if (httpRequest.mode !== "no-store" && httpRequest.mode !== "reload") {}
		if (response == null) {
			if (httpRequest.mode === "only-if-cached") return makeNetworkError("only if cached");
			const forwardResponse = await httpNetworkFetch(httpFetchParams, includeCredentials, isNewConnectionFetch);
			if (!safeMethodsSet.has(httpRequest.method) && forwardResponse.status >= 200 && forwardResponse.status <= 399) {}
			if (revalidatingFlag && forwardResponse.status === 304) {}
			if (response == null) response = forwardResponse;
		}
		response.urlList = [...httpRequest.urlList];
		if (httpRequest.headersList.contains("range")) response.rangeRequested = true;
		response.requestIncludesCredentials = includeCredentials;
		if (response.status === 407) {
			if (request$2.window === "no-window") return makeNetworkError();
			if (isCancelled(fetchParams)) return makeAppropriateNetworkError(fetchParams);
			return makeNetworkError("proxy authentication required");
		}
		if (response.status === 421 && !isNewConnectionFetch && (request$2.body == null || request$2.body.source != null)) {
			if (isCancelled(fetchParams)) return makeAppropriateNetworkError(fetchParams);
			fetchParams.controller.connection.destroy();
			response = await httpNetworkOrCacheFetch(fetchParams, isAuthenticationFetch, true);
		}
		if (isAuthenticationFetch) {}
		return response;
	}
	async function httpNetworkFetch(fetchParams, includeCredentials = false, forceNewConnection = false) {
		assert$7(!fetchParams.controller.connection || fetchParams.controller.connection.destroyed);
		fetchParams.controller.connection = {
			abort: null,
			destroyed: false,
			destroy(err) {
				if (!this.destroyed) {
					this.destroyed = true;
					this.abort?.(err ?? new DOMException$3("The operation was aborted.", "AbortError"));
				}
			}
		};
		const request$2 = fetchParams.request;
		let response = null;
		const timingInfo = fetchParams.timingInfo;
		const httpCache = null;
		if (httpCache == null) request$2.cache = "no-store";
		const newConnection = forceNewConnection ? "yes" : "no";
		if (request$2.mode === "websocket") {} else {}
		let requestBody = null;
		if (request$2.body == null && fetchParams.processRequestEndOfBody) queueMicrotask(() => fetchParams.processRequestEndOfBody());
else if (request$2.body != null) {
			const processBodyChunk = async function* (bytes) {
				if (isCancelled(fetchParams)) return;
				yield bytes;
				fetchParams.processRequestBodyChunkLength?.(bytes.byteLength);
			};
			const processEndOfBody = () => {
				if (isCancelled(fetchParams)) return;
				if (fetchParams.processRequestEndOfBody) fetchParams.processRequestEndOfBody();
			};
			const processBodyError = (e) => {
				if (isCancelled(fetchParams)) return;
				if (e.name === "AbortError") fetchParams.controller.abort();
else fetchParams.controller.terminate(e);
			};
			requestBody = async function* () {
				try {
					for await (const bytes of request$2.body.stream) yield* processBodyChunk(bytes);
					processEndOfBody();
				} catch (err) {
					processBodyError(err);
				}
			}();
		}
		try {
			const { body, status, statusText, headersList, socket } = await dispatch({ body: requestBody });
			if (socket) response = makeResponse({
				status,
				statusText,
				headersList,
				socket
			});
else {
				const iterator$1 = body[Symbol.asyncIterator]();
				fetchParams.controller.next = () => iterator$1.next();
				response = makeResponse({
					status,
					statusText,
					headersList
				});
			}
		} catch (err) {
			if (err.name === "AbortError") {
				fetchParams.controller.connection.destroy();
				return makeAppropriateNetworkError(fetchParams, err);
			}
			return makeNetworkError(err);
		}
		const pullAlgorithm = () => {
			fetchParams.controller.resume();
		};
		const cancelAlgorithm = (reason) => {
			fetchParams.controller.abort(reason);
		};
		if (!ReadableStream) ReadableStream = require("stream/web").ReadableStream;
		const stream$3 = new ReadableStream({
			async start(controller) {
				fetchParams.controller.controller = controller;
			},
			async pull(controller) {
				await pullAlgorithm(controller);
			},
			async cancel(reason) {
				await cancelAlgorithm(reason);
			}
		}, {
			highWaterMark: 0,
			size() {
				return 1;
			}
		});
		response.body = { stream: stream$3 };
		fetchParams.controller.on("terminated", onAborted);
		fetchParams.controller.resume = async () => {
			while (true) {
				let bytes;
				let isFailure;
				try {
					const { done, value } = await fetchParams.controller.next();
					if (isAborted(fetchParams)) break;
					bytes = done ? undefined : value;
				} catch (err) {
					if (fetchParams.controller.ended && !timingInfo.encodedBodySize) bytes = undefined;
else {
						bytes = err;
						isFailure = true;
					}
				}
				if (bytes === undefined) {
					readableStreamClose(fetchParams.controller.controller);
					finalizeResponse(fetchParams, response);
					return;
				}
				timingInfo.decodedBodySize += bytes?.byteLength ?? 0;
				if (isFailure) {
					fetchParams.controller.terminate(bytes);
					return;
				}
				fetchParams.controller.controller.enqueue(new Uint8Array(bytes));
				if (isErrored(stream$3)) {
					fetchParams.controller.terminate();
					return;
				}
				if (!fetchParams.controller.controller.desiredSize) return;
			}
		};
		function onAborted(reason) {
			if (isAborted(fetchParams)) {
				response.aborted = true;
				if (isReadable(stream$3)) fetchParams.controller.controller.error(fetchParams.controller.serializedAbortReason);
			} else if (isReadable(stream$3)) fetchParams.controller.controller.error(new TypeError("terminated", { cause: isErrorLike(reason) ? reason : undefined }));
			fetchParams.controller.connection.destroy();
		}
		return response;
		async function dispatch({ body }) {
			const url = requestCurrentURL(request$2);
			/** @type {import('../..').Agent} */
			const agent = fetchParams.controller.dispatcher;
			return new Promise((resolve$1, reject) => agent.dispatch({
				path: url.pathname + url.search,
				origin: url.origin,
				method: request$2.method,
				body: fetchParams.controller.dispatcher.isMockActive ? request$2.body && (request$2.body.source || request$2.body.stream) : body,
				headers: request$2.headersList.entries,
				maxRedirections: 0,
				upgrade: request$2.mode === "websocket" ? "websocket" : undefined
			}, {
				body: null,
				abort: null,
				onConnect(abort$1) {
					const { connection } = fetchParams.controller;
					if (connection.destroyed) abort$1(new DOMException$3("The operation was aborted.", "AbortError"));
else {
						fetchParams.controller.on("terminated", abort$1);
						this.abort = connection.abort = abort$1;
					}
				},
				onHeaders(status, headersList, resume$1, statusText) {
					if (status < 200) return;
					let codings = [];
					let location = "";
					const headers = new Headers$3();
					if (Array.isArray(headersList)) for (let n = 0; n < headersList.length; n += 2) {
						const key = headersList[n + 0].toString("latin1");
						const val = headersList[n + 1].toString("latin1");
						if (key.toLowerCase() === "content-encoding") codings = val.toLowerCase().split(",").map((x) => x.trim());
else if (key.toLowerCase() === "location") location = val;
						headers[kHeadersList$3].append(key, val);
					}
else {
						const keys = Object.keys(headersList);
						for (const key of keys) {
							const val = headersList[key];
							if (key.toLowerCase() === "content-encoding") codings = val.toLowerCase().split(",").map((x) => x.trim()).reverse();
else if (key.toLowerCase() === "location") location = val;
							headers[kHeadersList$3].append(key, val);
						}
					}
					this.body = new Readable({ read: resume$1 });
					const decoders$1 = [];
					const willFollow = request$2.redirect === "follow" && location && redirectStatusSet.has(status);
					if (request$2.method !== "HEAD" && request$2.method !== "CONNECT" && !nullBodyStatus.includes(status) && !willFollow) for (const coding of codings) if (coding === "x-gzip" || coding === "gzip") decoders$1.push(zlib.createGunzip({
						flush: zlib.constants.Z_SYNC_FLUSH,
						finishFlush: zlib.constants.Z_SYNC_FLUSH
					}));
else if (coding === "deflate") decoders$1.push(zlib.createInflate());
else if (coding === "br") decoders$1.push(zlib.createBrotliDecompress());
else {
						decoders$1.length = 0;
						break;
					}
					resolve$1({
						status,
						statusText,
						headersList: headers[kHeadersList$3],
						body: decoders$1.length ? pipeline(this.body, ...decoders$1, () => {}) : this.body.on("error", () => {})
					});
					return true;
				},
				onData(chunk) {
					if (fetchParams.controller.dump) return;
					const bytes = chunk;
					timingInfo.encodedBodySize += bytes.byteLength;
					return this.body.push(bytes);
				},
				onComplete() {
					if (this.abort) fetchParams.controller.off("terminated", this.abort);
					fetchParams.controller.ended = true;
					this.body.push(null);
				},
				onError(error$2) {
					if (this.abort) fetchParams.controller.off("terminated", this.abort);
					this.body?.destroy(error$2);
					fetchParams.controller.terminate(error$2);
					reject(error$2);
				},
				onUpgrade(status, headersList, socket) {
					if (status !== 101) return;
					const headers = new Headers$3();
					for (let n = 0; n < headersList.length; n += 2) {
						const key = headersList[n + 0].toString("latin1");
						const val = headersList[n + 1].toString("latin1");
						headers[kHeadersList$3].append(key, val);
					}
					resolve$1({
						status,
						statusText: STATUS_CODES[status],
						headersList: headers[kHeadersList$3],
						socket
					});
					return true;
				}
			}));
		}
	}
	module.exports = {
		fetch,
		Fetch,
		fetching: fetching$2,
		finalizeAndReportTiming
	};
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fileapi/symbols.js
var require_symbols$2 = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fileapi/symbols.js"(exports, module) {
	module.exports = {
		kState: Symbol("FileReader state"),
		kResult: Symbol("FileReader result"),
		kError: Symbol("FileReader error"),
		kLastProgressEventFired: Symbol("FileReader last progress event fired timestamp"),
		kEvents: Symbol("FileReader events"),
		kAborted: Symbol("FileReader aborted")
	};
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fileapi/progressevent.js
var require_progressevent = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fileapi/progressevent.js"(exports, module) {
	const { webidl: webidl$6 } = require_webidl();
	const kState$3 = Symbol("ProgressEvent state");
	var ProgressEvent$1 = class ProgressEvent$1 extends Event {
		constructor(type, eventInitDict = {}) {
			type = webidl$6.converters.DOMString(type);
			eventInitDict = webidl$6.converters.ProgressEventInit(eventInitDict ?? {});
			super(type, eventInitDict);
			this[kState$3] = {
				lengthComputable: eventInitDict.lengthComputable,
				loaded: eventInitDict.loaded,
				total: eventInitDict.total
			};
		}
		get lengthComputable() {
			webidl$6.brandCheck(this, ProgressEvent$1);
			return this[kState$3].lengthComputable;
		}
		get loaded() {
			webidl$6.brandCheck(this, ProgressEvent$1);
			return this[kState$3].loaded;
		}
		get total() {
			webidl$6.brandCheck(this, ProgressEvent$1);
			return this[kState$3].total;
		}
	};
	webidl$6.converters.ProgressEventInit = webidl$6.dictionaryConverter([
		{
			key: "lengthComputable",
			converter: webidl$6.converters.boolean,
			defaultValue: false
		},
		{
			key: "loaded",
			converter: webidl$6.converters["unsigned long long"],
			defaultValue: 0
		},
		{
			key: "total",
			converter: webidl$6.converters["unsigned long long"],
			defaultValue: 0
		},
		{
			key: "bubbles",
			converter: webidl$6.converters.boolean,
			defaultValue: false
		},
		{
			key: "cancelable",
			converter: webidl$6.converters.boolean,
			defaultValue: false
		},
		{
			key: "composed",
			converter: webidl$6.converters.boolean,
			defaultValue: false
		}
	]);
	module.exports = { ProgressEvent: ProgressEvent$1 };
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fileapi/encoding.js
var require_encoding = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fileapi/encoding.js"(exports, module) {
	/**
	* @see https://encoding.spec.whatwg.org/#concept-encoding-get
	* @param {string|undefined} label
	*/
	function getEncoding$1(label) {
		if (!label) return "failure";
		switch (label.trim().toLowerCase()) {
			case "unicode-1-1-utf-8":
			case "unicode11utf8":
			case "unicode20utf8":
			case "utf-8":
			case "utf8":
			case "x-unicode20utf8": return "UTF-8";
			case "866":
			case "cp866":
			case "csibm866":
			case "ibm866": return "IBM866";
			case "csisolatin2":
			case "iso-8859-2":
			case "iso-ir-101":
			case "iso8859-2":
			case "iso88592":
			case "iso_8859-2":
			case "iso_8859-2:1987":
			case "l2":
			case "latin2": return "ISO-8859-2";
			case "csisolatin3":
			case "iso-8859-3":
			case "iso-ir-109":
			case "iso8859-3":
			case "iso88593":
			case "iso_8859-3":
			case "iso_8859-3:1988":
			case "l3":
			case "latin3": return "ISO-8859-3";
			case "csisolatin4":
			case "iso-8859-4":
			case "iso-ir-110":
			case "iso8859-4":
			case "iso88594":
			case "iso_8859-4":
			case "iso_8859-4:1988":
			case "l4":
			case "latin4": return "ISO-8859-4";
			case "csisolatincyrillic":
			case "cyrillic":
			case "iso-8859-5":
			case "iso-ir-144":
			case "iso8859-5":
			case "iso88595":
			case "iso_8859-5":
			case "iso_8859-5:1988": return "ISO-8859-5";
			case "arabic":
			case "asmo-708":
			case "csiso88596e":
			case "csiso88596i":
			case "csisolatinarabic":
			case "ecma-114":
			case "iso-8859-6":
			case "iso-8859-6-e":
			case "iso-8859-6-i":
			case "iso-ir-127":
			case "iso8859-6":
			case "iso88596":
			case "iso_8859-6":
			case "iso_8859-6:1987": return "ISO-8859-6";
			case "csisolatingreek":
			case "ecma-118":
			case "elot_928":
			case "greek":
			case "greek8":
			case "iso-8859-7":
			case "iso-ir-126":
			case "iso8859-7":
			case "iso88597":
			case "iso_8859-7":
			case "iso_8859-7:1987":
			case "sun_eu_greek": return "ISO-8859-7";
			case "csiso88598e":
			case "csisolatinhebrew":
			case "hebrew":
			case "iso-8859-8":
			case "iso-8859-8-e":
			case "iso-ir-138":
			case "iso8859-8":
			case "iso88598":
			case "iso_8859-8":
			case "iso_8859-8:1988":
			case "visual": return "ISO-8859-8";
			case "csiso88598i":
			case "iso-8859-8-i":
			case "logical": return "ISO-8859-8-I";
			case "csisolatin6":
			case "iso-8859-10":
			case "iso-ir-157":
			case "iso8859-10":
			case "iso885910":
			case "l6":
			case "latin6": return "ISO-8859-10";
			case "iso-8859-13":
			case "iso8859-13":
			case "iso885913": return "ISO-8859-13";
			case "iso-8859-14":
			case "iso8859-14":
			case "iso885914": return "ISO-8859-14";
			case "csisolatin9":
			case "iso-8859-15":
			case "iso8859-15":
			case "iso885915":
			case "iso_8859-15":
			case "l9": return "ISO-8859-15";
			case "iso-8859-16": return "ISO-8859-16";
			case "cskoi8r":
			case "koi":
			case "koi8":
			case "koi8-r":
			case "koi8_r": return "KOI8-R";
			case "koi8-ru":
			case "koi8-u": return "KOI8-U";
			case "csmacintosh":
			case "mac":
			case "macintosh":
			case "x-mac-roman": return "macintosh";
			case "iso-8859-11":
			case "iso8859-11":
			case "iso885911":
			case "tis-620":
			case "windows-874": return "windows-874";
			case "cp1250":
			case "windows-1250":
			case "x-cp1250": return "windows-1250";
			case "cp1251":
			case "windows-1251":
			case "x-cp1251": return "windows-1251";
			case "ansi_x3.4-1968":
			case "ascii":
			case "cp1252":
			case "cp819":
			case "csisolatin1":
			case "ibm819":
			case "iso-8859-1":
			case "iso-ir-100":
			case "iso8859-1":
			case "iso88591":
			case "iso_8859-1":
			case "iso_8859-1:1987":
			case "l1":
			case "latin1":
			case "us-ascii":
			case "windows-1252":
			case "x-cp1252": return "windows-1252";
			case "cp1253":
			case "windows-1253":
			case "x-cp1253": return "windows-1253";
			case "cp1254":
			case "csisolatin5":
			case "iso-8859-9":
			case "iso-ir-148":
			case "iso8859-9":
			case "iso88599":
			case "iso_8859-9":
			case "iso_8859-9:1989":
			case "l5":
			case "latin5":
			case "windows-1254":
			case "x-cp1254": return "windows-1254";
			case "cp1255":
			case "windows-1255":
			case "x-cp1255": return "windows-1255";
			case "cp1256":
			case "windows-1256":
			case "x-cp1256": return "windows-1256";
			case "cp1257":
			case "windows-1257":
			case "x-cp1257": return "windows-1257";
			case "cp1258":
			case "windows-1258":
			case "x-cp1258": return "windows-1258";
			case "x-mac-cyrillic":
			case "x-mac-ukrainian": return "x-mac-cyrillic";
			case "chinese":
			case "csgb2312":
			case "csiso58gb231280":
			case "gb2312":
			case "gb_2312":
			case "gb_2312-80":
			case "gbk":
			case "iso-ir-58":
			case "x-gbk": return "GBK";
			case "gb18030": return "gb18030";
			case "big5":
			case "big5-hkscs":
			case "cn-big5":
			case "csbig5":
			case "x-x-big5": return "Big5";
			case "cseucpkdfmtjapanese":
			case "euc-jp":
			case "x-euc-jp": return "EUC-JP";
			case "csiso2022jp":
			case "iso-2022-jp": return "ISO-2022-JP";
			case "csshiftjis":
			case "ms932":
			case "ms_kanji":
			case "shift-jis":
			case "shift_jis":
			case "sjis":
			case "windows-31j":
			case "x-sjis": return "Shift_JIS";
			case "cseuckr":
			case "csksc56011987":
			case "euc-kr":
			case "iso-ir-149":
			case "korean":
			case "ks_c_5601-1987":
			case "ks_c_5601-1989":
			case "ksc5601":
			case "ksc_5601":
			case "windows-949": return "EUC-KR";
			case "csiso2022kr":
			case "hz-gb-2312":
			case "iso-2022-cn":
			case "iso-2022-cn-ext":
			case "iso-2022-kr":
			case "replacement": return "replacement";
			case "unicodefffe":
			case "utf-16be": return "UTF-16BE";
			case "csunicode":
			case "iso-10646-ucs-2":
			case "ucs-2":
			case "unicode":
			case "unicodefeff":
			case "utf-16":
			case "utf-16le": return "UTF-16LE";
			case "x-user-defined": return "x-user-defined";
			default: return "failure";
		}
	}
	module.exports = { getEncoding: getEncoding$1 };
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fileapi/util.js
var require_util$3 = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fileapi/util.js"(exports, module) {
	const { kState: kState$2, kError: kError$1, kResult: kResult$1, kAborted: kAborted$1, kLastProgressEventFired } = require_symbols$2();
	const { ProgressEvent } = require_progressevent();
	const { getEncoding } = require_encoding();
	const { DOMException: DOMException$2 } = require_constants$7();
	const { serializeAMimeType, parseMIMEType } = require_dataURL();
	const { types: types$1 } = require("util");
	const { StringDecoder } = require("string_decoder");
	const { btoa } = require("buffer");
	/** @type {PropertyDescriptor} */
	const staticPropertyDescriptors$3 = {
		enumerable: true,
		writable: false,
		configurable: false
	};
	/**
	* @see https://w3c.github.io/FileAPI/#readOperation
	* @param {import('./filereader').FileReader} fr
	* @param {import('buffer').Blob} blob
	* @param {string} type
	* @param {string?} encodingName
	*/
	function readOperation$1(fr, blob, type, encodingName) {
		if (fr[kState$2] === "loading") throw new DOMException$2("Invalid state", "InvalidStateError");
		fr[kState$2] = "loading";
		fr[kResult$1] = null;
		fr[kError$1] = null;
		/** @type {import('stream/web').ReadableStream} */
		const stream$3 = blob.stream();
		const reader = stream$3.getReader();
		/** @type {Uint8Array[]} */
		const bytes = [];
		let chunkPromise = reader.read();
		let isFirstChunk = true;
		(async () => {
			while (!fr[kAborted$1]) try {
				const { done, value } = await chunkPromise;
				if (isFirstChunk && !fr[kAborted$1]) queueMicrotask(() => {
					fireAProgressEvent$1("loadstart", fr);
				});
				isFirstChunk = false;
				if (!done && types$1.isUint8Array(value)) {
					bytes.push(value);
					if ((fr[kLastProgressEventFired] === undefined || Date.now() - fr[kLastProgressEventFired] >= 50) && !fr[kAborted$1]) {
						fr[kLastProgressEventFired] = Date.now();
						queueMicrotask(() => {
							fireAProgressEvent$1("progress", fr);
						});
					}
					chunkPromise = reader.read();
				} else if (done) {
					queueMicrotask(() => {
						fr[kState$2] = "done";
						try {
							const result = packageData(bytes, type, blob.type, encodingName);
							if (fr[kAborted$1]) return;
							fr[kResult$1] = result;
							fireAProgressEvent$1("load", fr);
						} catch (error$2) {
							fr[kError$1] = error$2;
							fireAProgressEvent$1("error", fr);
						}
						if (fr[kState$2] !== "loading") fireAProgressEvent$1("loadend", fr);
					});
					break;
				}
			} catch (error$2) {
				if (fr[kAborted$1]) return;
				queueMicrotask(() => {
					fr[kState$2] = "done";
					fr[kError$1] = error$2;
					fireAProgressEvent$1("error", fr);
					if (fr[kState$2] !== "loading") fireAProgressEvent$1("loadend", fr);
				});
				break;
			}
		})();
	}
	/**
	* @see https://w3c.github.io/FileAPI/#fire-a-progress-event
	* @see https://dom.spec.whatwg.org/#concept-event-fire
	* @param {string} e The name of the event
	* @param {import('./filereader').FileReader} reader
	*/
	function fireAProgressEvent$1(e, reader) {
		const event = new ProgressEvent(e, {
			bubbles: false,
			cancelable: false
		});
		reader.dispatchEvent(event);
	}
	/**
	* @see https://w3c.github.io/FileAPI/#blob-package-data
	* @param {Uint8Array[]} bytes
	* @param {string} type
	* @param {string?} mimeType
	* @param {string?} encodingName
	*/
	function packageData(bytes, type, mimeType, encodingName) {
		switch (type) {
			case "DataURL": {
				let dataURL = "data:";
				const parsed = parseMIMEType(mimeType || "application/octet-stream");
				if (parsed !== "failure") dataURL += serializeAMimeType(parsed);
				dataURL += ";base64,";
				const decoder = new StringDecoder("latin1");
				for (const chunk of bytes) dataURL += btoa(decoder.write(chunk));
				dataURL += btoa(decoder.end());
				return dataURL;
			}
			case "Text": {
				let encoding = "failure";
				if (encodingName) encoding = getEncoding(encodingName);
				if (encoding === "failure" && mimeType) {
					const type$1 = parseMIMEType(mimeType);
					if (type$1 !== "failure") encoding = getEncoding(type$1.parameters.get("charset"));
				}
				if (encoding === "failure") encoding = "UTF-8";
				return decode$1(bytes, encoding);
			}
			case "ArrayBuffer": {
				const sequence = combineByteSequences(bytes);
				return sequence.buffer;
			}
			case "BinaryString": {
				let binaryString = "";
				const decoder = new StringDecoder("latin1");
				for (const chunk of bytes) binaryString += decoder.write(chunk);
				binaryString += decoder.end();
				return binaryString;
			}
		}
	}
	/**
	* @see https://encoding.spec.whatwg.org/#decode
	* @param {Uint8Array[]} ioQueue
	* @param {string} encoding
	*/
	function decode$1(ioQueue, encoding) {
		const bytes = combineByteSequences(ioQueue);
		const BOMEncoding = BOMSniffing(bytes);
		let slice$1 = 0;
		if (BOMEncoding !== null) {
			encoding = BOMEncoding;
			slice$1 = BOMEncoding === "UTF-8" ? 3 : 2;
		}
		const sliced = bytes.slice(slice$1);
		return new TextDecoder(encoding).decode(sliced);
	}
	/**
	* @see https://encoding.spec.whatwg.org/#bom-sniff
	* @param {Uint8Array} ioQueue
	*/
	function BOMSniffing(ioQueue) {
		const [a, b, c] = ioQueue;
		if (a === 239 && b === 187 && c === 191) return "UTF-8";
else if (a === 254 && b === 255) return "UTF-16BE";
else if (a === 255 && b === 254) return "UTF-16LE";
		return null;
	}
	/**
	* @param {Uint8Array[]} sequences
	*/
	function combineByteSequences(sequences) {
		const size = sequences.reduce((a, b) => {
			return a + b.byteLength;
		}, 0);
		let offset = 0;
		return sequences.reduce((a, b) => {
			a.set(b, offset);
			offset += b.byteLength;
			return a;
		}, new Uint8Array(size));
	}
	module.exports = {
		staticPropertyDescriptors: staticPropertyDescriptors$3,
		readOperation: readOperation$1,
		fireAProgressEvent: fireAProgressEvent$1
	};
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fileapi/filereader.js
var require_filereader = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fileapi/filereader.js"(exports, module) {
	const { staticPropertyDescriptors: staticPropertyDescriptors$2, readOperation, fireAProgressEvent } = require_util$3();
	const { kState: kState$1, kError, kResult, kEvents, kAborted } = require_symbols$2();
	const { webidl: webidl$5 } = require_webidl();
	const { kEnumerableProperty: kEnumerableProperty$4 } = require_util$6();
	var FileReader = class FileReader extends EventTarget {
		constructor() {
			super();
			this[kState$1] = "empty";
			this[kResult] = null;
			this[kError] = null;
			this[kEvents] = {
				loadend: null,
				error: null,
				abort: null,
				load: null,
				progress: null,
				loadstart: null
			};
		}
		/**
		* @see https://w3c.github.io/FileAPI/#dfn-readAsArrayBuffer
		* @param {import('buffer').Blob} blob
		*/
		readAsArrayBuffer(blob) {
			webidl$5.brandCheck(this, FileReader);
			webidl$5.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsArrayBuffer" });
			blob = webidl$5.converters.Blob(blob, { strict: false });
			readOperation(this, blob, "ArrayBuffer");
		}
		/**
		* @see https://w3c.github.io/FileAPI/#readAsBinaryString
		* @param {import('buffer').Blob} blob
		*/
		readAsBinaryString(blob) {
			webidl$5.brandCheck(this, FileReader);
			webidl$5.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsBinaryString" });
			blob = webidl$5.converters.Blob(blob, { strict: false });
			readOperation(this, blob, "BinaryString");
		}
		/**
		* @see https://w3c.github.io/FileAPI/#readAsDataText
		* @param {import('buffer').Blob} blob
		* @param {string?} encoding
		*/
		readAsText(blob, encoding = undefined) {
			webidl$5.brandCheck(this, FileReader);
			webidl$5.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsText" });
			blob = webidl$5.converters.Blob(blob, { strict: false });
			if (encoding !== undefined) encoding = webidl$5.converters.DOMString(encoding);
			readOperation(this, blob, "Text", encoding);
		}
		/**
		* @see https://w3c.github.io/FileAPI/#dfn-readAsDataURL
		* @param {import('buffer').Blob} blob
		*/
		readAsDataURL(blob) {
			webidl$5.brandCheck(this, FileReader);
			webidl$5.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsDataURL" });
			blob = webidl$5.converters.Blob(blob, { strict: false });
			readOperation(this, blob, "DataURL");
		}
		/**
		* @see https://w3c.github.io/FileAPI/#dfn-abort
		*/
		abort() {
			if (this[kState$1] === "empty" || this[kState$1] === "done") {
				this[kResult] = null;
				return;
			}
			if (this[kState$1] === "loading") {
				this[kState$1] = "done";
				this[kResult] = null;
			}
			this[kAborted] = true;
			fireAProgressEvent("abort", this);
			if (this[kState$1] !== "loading") fireAProgressEvent("loadend", this);
		}
		/**
		* @see https://w3c.github.io/FileAPI/#dom-filereader-readystate
		*/
		get readyState() {
			webidl$5.brandCheck(this, FileReader);
			switch (this[kState$1]) {
				case "empty": return this.EMPTY;
				case "loading": return this.LOADING;
				case "done": return this.DONE;
			}
		}
		/**
		* @see https://w3c.github.io/FileAPI/#dom-filereader-result
		*/
		get result() {
			webidl$5.brandCheck(this, FileReader);
			return this[kResult];
		}
		/**
		* @see https://w3c.github.io/FileAPI/#dom-filereader-error
		*/
		get error() {
			webidl$5.brandCheck(this, FileReader);
			return this[kError];
		}
		get onloadend() {
			webidl$5.brandCheck(this, FileReader);
			return this[kEvents].loadend;
		}
		set onloadend(fn) {
			webidl$5.brandCheck(this, FileReader);
			if (this[kEvents].loadend) this.removeEventListener("loadend", this[kEvents].loadend);
			if (typeof fn === "function") {
				this[kEvents].loadend = fn;
				this.addEventListener("loadend", fn);
			} else this[kEvents].loadend = null;
		}
		get onerror() {
			webidl$5.brandCheck(this, FileReader);
			return this[kEvents].error;
		}
		set onerror(fn) {
			webidl$5.brandCheck(this, FileReader);
			if (this[kEvents].error) this.removeEventListener("error", this[kEvents].error);
			if (typeof fn === "function") {
				this[kEvents].error = fn;
				this.addEventListener("error", fn);
			} else this[kEvents].error = null;
		}
		get onloadstart() {
			webidl$5.brandCheck(this, FileReader);
			return this[kEvents].loadstart;
		}
		set onloadstart(fn) {
			webidl$5.brandCheck(this, FileReader);
			if (this[kEvents].loadstart) this.removeEventListener("loadstart", this[kEvents].loadstart);
			if (typeof fn === "function") {
				this[kEvents].loadstart = fn;
				this.addEventListener("loadstart", fn);
			} else this[kEvents].loadstart = null;
		}
		get onprogress() {
			webidl$5.brandCheck(this, FileReader);
			return this[kEvents].progress;
		}
		set onprogress(fn) {
			webidl$5.brandCheck(this, FileReader);
			if (this[kEvents].progress) this.removeEventListener("progress", this[kEvents].progress);
			if (typeof fn === "function") {
				this[kEvents].progress = fn;
				this.addEventListener("progress", fn);
			} else this[kEvents].progress = null;
		}
		get onload() {
			webidl$5.brandCheck(this, FileReader);
			return this[kEvents].load;
		}
		set onload(fn) {
			webidl$5.brandCheck(this, FileReader);
			if (this[kEvents].load) this.removeEventListener("load", this[kEvents].load);
			if (typeof fn === "function") {
				this[kEvents].load = fn;
				this.addEventListener("load", fn);
			} else this[kEvents].load = null;
		}
		get onabort() {
			webidl$5.brandCheck(this, FileReader);
			return this[kEvents].abort;
		}
		set onabort(fn) {
			webidl$5.brandCheck(this, FileReader);
			if (this[kEvents].abort) this.removeEventListener("abort", this[kEvents].abort);
			if (typeof fn === "function") {
				this[kEvents].abort = fn;
				this.addEventListener("abort", fn);
			} else this[kEvents].abort = null;
		}
	};
	FileReader.EMPTY = FileReader.prototype.EMPTY = 0;
	FileReader.LOADING = FileReader.prototype.LOADING = 1;
	FileReader.DONE = FileReader.prototype.DONE = 2;
	Object.defineProperties(FileReader.prototype, {
		EMPTY: staticPropertyDescriptors$2,
		LOADING: staticPropertyDescriptors$2,
		DONE: staticPropertyDescriptors$2,
		readAsArrayBuffer: kEnumerableProperty$4,
		readAsBinaryString: kEnumerableProperty$4,
		readAsText: kEnumerableProperty$4,
		readAsDataURL: kEnumerableProperty$4,
		abort: kEnumerableProperty$4,
		readyState: kEnumerableProperty$4,
		result: kEnumerableProperty$4,
		error: kEnumerableProperty$4,
		onloadstart: kEnumerableProperty$4,
		onprogress: kEnumerableProperty$4,
		onload: kEnumerableProperty$4,
		onabort: kEnumerableProperty$4,
		onerror: kEnumerableProperty$4,
		onloadend: kEnumerableProperty$4,
		[Symbol.toStringTag]: {
			value: "FileReader",
			writable: false,
			enumerable: false,
			configurable: true
		}
	});
	Object.defineProperties(FileReader, {
		EMPTY: staticPropertyDescriptors$2,
		LOADING: staticPropertyDescriptors$2,
		DONE: staticPropertyDescriptors$2
	});
	module.exports = { FileReader };
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/cache/symbols.js
var require_symbols$1 = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/cache/symbols.js"(exports, module) {
	module.exports = { kConstruct: require_symbols$4().kConstruct };
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/cache/util.js
var require_util$2 = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/cache/util.js"(exports, module) {
	const assert$6 = require("assert");
	const { URLSerializer: URLSerializer$1 } = require_dataURL();
	const { isValidHeaderName } = require_util$5();
	/**
	* @see https://url.spec.whatwg.org/#concept-url-equals
	* @param {URL} A
	* @param {URL} B
	* @param {boolean | undefined} excludeFragment
	* @returns {boolean}
	*/
	function urlEquals$1(A, B, excludeFragment = false) {
		const serializedA = URLSerializer$1(A, excludeFragment);
		const serializedB = URLSerializer$1(B, excludeFragment);
		return serializedA === serializedB;
	}
	/**
	* @see https://github.com/chromium/chromium/blob/694d20d134cb553d8d89e5500b9148012b1ba299/content/browser/cache_storage/cache_storage_cache.cc#L260-L262
	* @param {string} header
	*/
	function fieldValues(header) {
		assert$6(header !== null);
		const values = [];
		for (let value of header.split(",")) {
			value = value.trim();
			if (!value.length) continue;
else if (!isValidHeaderName(value)) continue;
			values.push(value);
		}
		return values;
	}
	module.exports = {
		urlEquals: urlEquals$1,
		fieldValues
	};
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/cache/cache.js
var require_cache = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/cache/cache.js"(exports, module) {
	const { kConstruct: kConstruct$1 } = require_symbols$1();
	const { urlEquals, fieldValues: getFieldValues } = require_util$2();
	const { kEnumerableProperty: kEnumerableProperty$3, isDisturbed } = require_util$6();
	const { kHeadersList: kHeadersList$2 } = require_symbols$4();
	const { webidl: webidl$4 } = require_webidl();
	const { Response, cloneResponse } = require_response();
	const { Request } = require_request();
	const { kState, kHeaders, kGuard, kRealm } = require_symbols$3();
	const { fetching: fetching$1 } = require_fetch();
	const { urlIsHttpHttpsScheme, createDeferredPromise, readAllBytes } = require_util$5();
	const assert$5 = require("assert");
	const { getGlobalDispatcher: getGlobalDispatcher$3 } = require_global();
	var Cache$1 = class Cache$1 {
		/**
		* @see https://w3c.github.io/ServiceWorker/#dfn-relevant-request-response-list
		* @type {requestResponseList}
		*/
		#relevantRequestResponseList;
		constructor() {
			if (arguments[0] !== kConstruct$1) webidl$4.illegalConstructor();
			this.#relevantRequestResponseList = arguments[1];
		}
		async match(request$2, options = {}) {
			webidl$4.brandCheck(this, Cache$1);
			webidl$4.argumentLengthCheck(arguments, 1, { header: "Cache.match" });
			request$2 = webidl$4.converters.RequestInfo(request$2);
			options = webidl$4.converters.CacheQueryOptions(options);
			const p = await this.matchAll(request$2, options);
			if (p.length === 0) return;
			return p[0];
		}
		async matchAll(request$2 = undefined, options = {}) {
			webidl$4.brandCheck(this, Cache$1);
			if (request$2 !== undefined) request$2 = webidl$4.converters.RequestInfo(request$2);
			options = webidl$4.converters.CacheQueryOptions(options);
			let r = null;
			if (request$2 !== undefined) {
				if (request$2 instanceof Request) {
					r = request$2[kState];
					if (r.method !== "GET" && !options.ignoreMethod) return [];
				} else if (typeof request$2 === "string") r = new Request(request$2)[kState];
			}
			const responses = [];
			if (request$2 === undefined) for (const requestResponse of this.#relevantRequestResponseList) responses.push(requestResponse[1]);
else {
				const requestResponses = this.#queryCache(r, options);
				for (const requestResponse of requestResponses) responses.push(requestResponse[1]);
			}
			const responseList = [];
			for (const response of responses) {
				const responseObject = new Response(response.body?.source ?? null);
				const body = responseObject[kState].body;
				responseObject[kState] = response;
				responseObject[kState].body = body;
				responseObject[kHeaders][kHeadersList$2] = response.headersList;
				responseObject[kHeaders][kGuard] = "immutable";
				responseList.push(responseObject);
			}
			return Object.freeze(responseList);
		}
		async add(request$2) {
			webidl$4.brandCheck(this, Cache$1);
			webidl$4.argumentLengthCheck(arguments, 1, { header: "Cache.add" });
			request$2 = webidl$4.converters.RequestInfo(request$2);
			const requests = [request$2];
			const responseArrayPromise = this.addAll(requests);
			return await responseArrayPromise;
		}
		async addAll(requests) {
			webidl$4.brandCheck(this, Cache$1);
			webidl$4.argumentLengthCheck(arguments, 1, { header: "Cache.addAll" });
			requests = webidl$4.converters["sequence<RequestInfo>"](requests);
			const responsePromises = [];
			const requestList = [];
			for (const request$2 of requests) {
				if (typeof request$2 === "string") continue;
				const r = request$2[kState];
				if (!urlIsHttpHttpsScheme(r.url) || r.method !== "GET") throw webidl$4.errors.exception({
					header: "Cache.addAll",
					message: "Expected http/s scheme when method is not GET."
				});
			}
			/** @type {ReturnType<typeof fetching>[]} */
			const fetchControllers = [];
			for (const request$2 of requests) {
				const r = new Request(request$2)[kState];
				if (!urlIsHttpHttpsScheme(r.url)) throw webidl$4.errors.exception({
					header: "Cache.addAll",
					message: "Expected http/s scheme."
				});
				r.initiator = "fetch";
				r.destination = "subresource";
				requestList.push(r);
				const responsePromise = createDeferredPromise();
				fetchControllers.push(fetching$1({
					request: r,
					dispatcher: getGlobalDispatcher$3(),
					processResponse(response) {
						if (response.type === "error" || response.status === 206 || response.status < 200 || response.status > 299) responsePromise.reject(webidl$4.errors.exception({
							header: "Cache.addAll",
							message: "Received an invalid status code or the request failed."
						}));
else if (response.headersList.contains("vary")) {
							const fieldValues$1 = getFieldValues(response.headersList.get("vary"));
							for (const fieldValue of fieldValues$1) if (fieldValue === "*") {
								responsePromise.reject(webidl$4.errors.exception({
									header: "Cache.addAll",
									message: "invalid vary field value"
								}));
								for (const controller of fetchControllers) controller.abort();
								return;
							}
						}
					},
					processResponseEndOfBody(response) {
						if (response.aborted) {
							responsePromise.reject(new DOMException("aborted", "AbortError"));
							return;
						}
						responsePromise.resolve(response);
					}
				}));
				responsePromises.push(responsePromise.promise);
			}
			const p = Promise.all(responsePromises);
			const responses = await p;
			const operations = [];
			let index$1 = 0;
			for (const response of responses) {
				/** @type {CacheBatchOperation} */
				const operation = {
					type: "put",
					request: requestList[index$1],
					response
				};
				operations.push(operation);
				index$1++;
			}
			const cacheJobPromise = createDeferredPromise();
			let errorData = null;
			try {
				this.#batchCacheOperations(operations);
			} catch (e) {
				errorData = e;
			}
			queueMicrotask(() => {
				if (errorData === null) cacheJobPromise.resolve(undefined);
else cacheJobPromise.reject(errorData);
			});
			return cacheJobPromise.promise;
		}
		async put(request$2, response) {
			webidl$4.brandCheck(this, Cache$1);
			webidl$4.argumentLengthCheck(arguments, 2, { header: "Cache.put" });
			request$2 = webidl$4.converters.RequestInfo(request$2);
			response = webidl$4.converters.Response(response);
			let innerRequest = null;
			if (request$2 instanceof Request) innerRequest = request$2[kState];
else innerRequest = new Request(request$2)[kState];
			if (!urlIsHttpHttpsScheme(innerRequest.url) || innerRequest.method !== "GET") throw webidl$4.errors.exception({
				header: "Cache.put",
				message: "Expected an http/s scheme when method is not GET"
			});
			const innerResponse = response[kState];
			if (innerResponse.status === 206) throw webidl$4.errors.exception({
				header: "Cache.put",
				message: "Got 206 status"
			});
			if (innerResponse.headersList.contains("vary")) {
				const fieldValues$1 = getFieldValues(innerResponse.headersList.get("vary"));
				for (const fieldValue of fieldValues$1) if (fieldValue === "*") throw webidl$4.errors.exception({
					header: "Cache.put",
					message: "Got * vary field value"
				});
			}
			if (innerResponse.body && (isDisturbed(innerResponse.body.stream) || innerResponse.body.stream.locked)) throw webidl$4.errors.exception({
				header: "Cache.put",
				message: "Response body is locked or disturbed"
			});
			const clonedResponse = cloneResponse(innerResponse);
			const bodyReadPromise = createDeferredPromise();
			if (innerResponse.body != null) {
				const stream$3 = innerResponse.body.stream;
				const reader = stream$3.getReader();
				readAllBytes(reader).then(bodyReadPromise.resolve, bodyReadPromise.reject);
			} else bodyReadPromise.resolve(undefined);
			/** @type {CacheBatchOperation[]} */
			const operations = [];
			/** @type {CacheBatchOperation} */
			const operation = {
				type: "put",
				request: innerRequest,
				response: clonedResponse
			};
			operations.push(operation);
			const bytes = await bodyReadPromise.promise;
			if (clonedResponse.body != null) clonedResponse.body.source = bytes;
			const cacheJobPromise = createDeferredPromise();
			let errorData = null;
			try {
				this.#batchCacheOperations(operations);
			} catch (e) {
				errorData = e;
			}
			queueMicrotask(() => {
				if (errorData === null) cacheJobPromise.resolve();
else cacheJobPromise.reject(errorData);
			});
			return cacheJobPromise.promise;
		}
		async delete(request$2, options = {}) {
			webidl$4.brandCheck(this, Cache$1);
			webidl$4.argumentLengthCheck(arguments, 1, { header: "Cache.delete" });
			request$2 = webidl$4.converters.RequestInfo(request$2);
			options = webidl$4.converters.CacheQueryOptions(options);
			/**
			* @type {Request}
			*/
			let r = null;
			if (request$2 instanceof Request) {
				r = request$2[kState];
				if (r.method !== "GET" && !options.ignoreMethod) return false;
			} else {
				assert$5(typeof request$2 === "string");
				r = new Request(request$2)[kState];
			}
			/** @type {CacheBatchOperation[]} */
			const operations = [];
			/** @type {CacheBatchOperation} */
			const operation = {
				type: "delete",
				request: r,
				options
			};
			operations.push(operation);
			const cacheJobPromise = createDeferredPromise();
			let errorData = null;
			let requestResponses;
			try {
				requestResponses = this.#batchCacheOperations(operations);
			} catch (e) {
				errorData = e;
			}
			queueMicrotask(() => {
				if (errorData === null) cacheJobPromise.resolve(!!requestResponses?.length);
else cacheJobPromise.reject(errorData);
			});
			return cacheJobPromise.promise;
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#dom-cache-keys
		* @param {any} request
		* @param {import('../../types/cache').CacheQueryOptions} options
		* @returns {readonly Request[]}
		*/
		async keys(request$2 = undefined, options = {}) {
			webidl$4.brandCheck(this, Cache$1);
			if (request$2 !== undefined) request$2 = webidl$4.converters.RequestInfo(request$2);
			options = webidl$4.converters.CacheQueryOptions(options);
			let r = null;
			if (request$2 !== undefined) {
				if (request$2 instanceof Request) {
					r = request$2[kState];
					if (r.method !== "GET" && !options.ignoreMethod) return [];
				} else if (typeof request$2 === "string") r = new Request(request$2)[kState];
			}
			const promise$1 = createDeferredPromise();
			const requests = [];
			if (request$2 === undefined) for (const requestResponse of this.#relevantRequestResponseList) requests.push(requestResponse[0]);
else {
				const requestResponses = this.#queryCache(r, options);
				for (const requestResponse of requestResponses) requests.push(requestResponse[0]);
			}
			queueMicrotask(() => {
				const requestList = [];
				for (const request$3 of requests) {
					const requestObject = new Request("https://a");
					requestObject[kState] = request$3;
					requestObject[kHeaders][kHeadersList$2] = request$3.headersList;
					requestObject[kHeaders][kGuard] = "immutable";
					requestObject[kRealm] = request$3.client;
					requestList.push(requestObject);
				}
				promise$1.resolve(Object.freeze(requestList));
			});
			return promise$1.promise;
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#batch-cache-operations-algorithm
		* @param {CacheBatchOperation[]} operations
		* @returns {requestResponseList}
		*/
		#batchCacheOperations(operations) {
			const cache$1 = this.#relevantRequestResponseList;
			const backupCache = [...cache$1];
			const addedItems = [];
			const resultList = [];
			try {
				for (const operation of operations) {
					if (operation.type !== "delete" && operation.type !== "put") throw webidl$4.errors.exception({
						header: "Cache.#batchCacheOperations",
						message: "operation type does not match \"delete\" or \"put\""
					});
					if (operation.type === "delete" && operation.response != null) throw webidl$4.errors.exception({
						header: "Cache.#batchCacheOperations",
						message: "delete operation should not have an associated response"
					});
					if (this.#queryCache(operation.request, operation.options, addedItems).length) throw new DOMException("???", "InvalidStateError");
					let requestResponses;
					if (operation.type === "delete") {
						requestResponses = this.#queryCache(operation.request, operation.options);
						if (requestResponses.length === 0) return [];
						for (const requestResponse of requestResponses) {
							const idx = cache$1.indexOf(requestResponse);
							assert$5(idx !== -1);
							cache$1.splice(idx, 1);
						}
					} else if (operation.type === "put") {
						if (operation.response == null) throw webidl$4.errors.exception({
							header: "Cache.#batchCacheOperations",
							message: "put operation should have an associated response"
						});
						const r = operation.request;
						if (!urlIsHttpHttpsScheme(r.url)) throw webidl$4.errors.exception({
							header: "Cache.#batchCacheOperations",
							message: "expected http or https scheme"
						});
						if (r.method !== "GET") throw webidl$4.errors.exception({
							header: "Cache.#batchCacheOperations",
							message: "not get method"
						});
						if (operation.options != null) throw webidl$4.errors.exception({
							header: "Cache.#batchCacheOperations",
							message: "options must not be defined"
						});
						requestResponses = this.#queryCache(operation.request);
						for (const requestResponse of requestResponses) {
							const idx = cache$1.indexOf(requestResponse);
							assert$5(idx !== -1);
							cache$1.splice(idx, 1);
						}
						cache$1.push([operation.request, operation.response]);
						addedItems.push([operation.request, operation.response]);
					}
					resultList.push([operation.request, operation.response]);
				}
				return resultList;
			} catch (e) {
				this.#relevantRequestResponseList.length = 0;
				this.#relevantRequestResponseList = backupCache;
				throw e;
			}
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#query-cache
		* @param {any} requestQuery
		* @param {import('../../types/cache').CacheQueryOptions} options
		* @param {requestResponseList} targetStorage
		* @returns {requestResponseList}
		*/
		#queryCache(requestQuery, options, targetStorage) {
			/** @type {requestResponseList} */
			const resultList = [];
			const storage = targetStorage ?? this.#relevantRequestResponseList;
			for (const requestResponse of storage) {
				const [cachedRequest, cachedResponse] = requestResponse;
				if (this.#requestMatchesCachedItem(requestQuery, cachedRequest, cachedResponse, options)) resultList.push(requestResponse);
			}
			return resultList;
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#request-matches-cached-item-algorithm
		* @param {any} requestQuery
		* @param {any} request
		* @param {any | null} response
		* @param {import('../../types/cache').CacheQueryOptions | undefined} options
		* @returns {boolean}
		*/
		#requestMatchesCachedItem(requestQuery, request$2, response = null, options) {
			const queryURL = new URL(requestQuery.url);
			const cachedURL = new URL(request$2.url);
			if (options?.ignoreSearch) {
				cachedURL.search = "";
				queryURL.search = "";
			}
			if (!urlEquals(queryURL, cachedURL, true)) return false;
			if (response == null || options?.ignoreVary || !response.headersList.contains("vary")) return true;
			const fieldValues$1 = getFieldValues(response.headersList.get("vary"));
			for (const fieldValue of fieldValues$1) {
				if (fieldValue === "*") return false;
				const requestValue = request$2.headersList.get(fieldValue);
				const queryValue = requestQuery.headersList.get(fieldValue);
				if (requestValue !== queryValue) return false;
			}
			return true;
		}
	};
	Object.defineProperties(Cache$1.prototype, {
		[Symbol.toStringTag]: {
			value: "Cache",
			configurable: true
		},
		match: kEnumerableProperty$3,
		matchAll: kEnumerableProperty$3,
		add: kEnumerableProperty$3,
		addAll: kEnumerableProperty$3,
		put: kEnumerableProperty$3,
		delete: kEnumerableProperty$3,
		keys: kEnumerableProperty$3
	});
	const cacheQueryOptionConverters = [
		{
			key: "ignoreSearch",
			converter: webidl$4.converters.boolean,
			defaultValue: false
		},
		{
			key: "ignoreMethod",
			converter: webidl$4.converters.boolean,
			defaultValue: false
		},
		{
			key: "ignoreVary",
			converter: webidl$4.converters.boolean,
			defaultValue: false
		}
	];
	webidl$4.converters.CacheQueryOptions = webidl$4.dictionaryConverter(cacheQueryOptionConverters);
	webidl$4.converters.MultiCacheQueryOptions = webidl$4.dictionaryConverter([...cacheQueryOptionConverters, {
		key: "cacheName",
		converter: webidl$4.converters.DOMString
	}]);
	webidl$4.converters.Response = webidl$4.interfaceConverter(Response);
	webidl$4.converters["sequence<RequestInfo>"] = webidl$4.sequenceConverter(webidl$4.converters.RequestInfo);
	module.exports = { Cache: Cache$1 };
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/cache/cachestorage.js
var require_cachestorage = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/cache/cachestorage.js"(exports, module) {
	const { kConstruct } = require_symbols$1();
	const { Cache } = require_cache();
	const { webidl: webidl$3 } = require_webidl();
	const { kEnumerableProperty: kEnumerableProperty$2 } = require_util$6();
	var CacheStorage = class CacheStorage {
		/**
		* @see https://w3c.github.io/ServiceWorker/#dfn-relevant-name-to-cache-map
		* @type {Map<string, import('./cache').requestResponseList}
		*/
		#caches = new Map();
		constructor() {
			if (arguments[0] !== kConstruct) webidl$3.illegalConstructor();
		}
		async match(request$2, options = {}) {
			webidl$3.brandCheck(this, CacheStorage);
			webidl$3.argumentLengthCheck(arguments, 1, { header: "CacheStorage.match" });
			request$2 = webidl$3.converters.RequestInfo(request$2);
			options = webidl$3.converters.MultiCacheQueryOptions(options);
			if (options.cacheName != null) {
				if (this.#caches.has(options.cacheName)) {
					const cacheList = this.#caches.get(options.cacheName);
					const cache$1 = new Cache(kConstruct, cacheList);
					return await cache$1.match(request$2, options);
				}
			} else for (const cacheList of this.#caches.values()) {
				const cache$1 = new Cache(kConstruct, cacheList);
				const response = await cache$1.match(request$2, options);
				if (response !== undefined) return response;
			}
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#cache-storage-has
		* @param {string} cacheName
		* @returns {Promise<boolean>}
		*/
		async has(cacheName) {
			webidl$3.brandCheck(this, CacheStorage);
			webidl$3.argumentLengthCheck(arguments, 1, { header: "CacheStorage.has" });
			cacheName = webidl$3.converters.DOMString(cacheName);
			return this.#caches.has(cacheName);
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#dom-cachestorage-open
		* @param {string} cacheName
		* @returns {Promise<Cache>}
		*/
		async open(cacheName) {
			webidl$3.brandCheck(this, CacheStorage);
			webidl$3.argumentLengthCheck(arguments, 1, { header: "CacheStorage.open" });
			cacheName = webidl$3.converters.DOMString(cacheName);
			if (this.#caches.has(cacheName)) {
				const cache$2 = this.#caches.get(cacheName);
				return new Cache(kConstruct, cache$2);
			}
			const cache$1 = [];
			this.#caches.set(cacheName, cache$1);
			return new Cache(kConstruct, cache$1);
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#cache-storage-delete
		* @param {string} cacheName
		* @returns {Promise<boolean>}
		*/
		async delete(cacheName) {
			webidl$3.brandCheck(this, CacheStorage);
			webidl$3.argumentLengthCheck(arguments, 1, { header: "CacheStorage.delete" });
			cacheName = webidl$3.converters.DOMString(cacheName);
			return this.#caches.delete(cacheName);
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#cache-storage-keys
		* @returns {string[]}
		*/
		async keys() {
			webidl$3.brandCheck(this, CacheStorage);
			const keys = this.#caches.keys();
			return [...keys];
		}
	};
	Object.defineProperties(CacheStorage.prototype, {
		[Symbol.toStringTag]: {
			value: "CacheStorage",
			configurable: true
		},
		match: kEnumerableProperty$2,
		has: kEnumerableProperty$2,
		open: kEnumerableProperty$2,
		delete: kEnumerableProperty$2,
		keys: kEnumerableProperty$2
	});
	module.exports = { CacheStorage };
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/cookies/constants.js
var require_constants$5 = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/cookies/constants.js"(exports, module) {
	const maxAttributeValueSize$1 = 1024;
	const maxNameValuePairSize$1 = 4096;
	module.exports = {
		maxAttributeValueSize: maxAttributeValueSize$1,
		maxNameValuePairSize: maxNameValuePairSize$1
	};
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/cookies/util.js
var require_util$1 = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/cookies/util.js"(exports, module) {
	const assert$4 = require("assert");
	const { kHeadersList: kHeadersList$1 } = require_symbols$4();
	function isCTLExcludingHtab$1(value) {
		if (value.length === 0) return false;
		for (const char of value) {
			const code$1 = char.charCodeAt(0);
			if (code$1 >= 0 || code$1 <= 8 || (code$1 >= 10 || code$1 <= 31) || code$1 === 127) return false;
		}
	}
	/**
	CHAR           = <any US-ASCII character (octets 0 - 127)>
	token          = 1*<any CHAR except CTLs or separators>
	separators     = "(" | ")" | "<" | ">" | "@"
	| "," | ";" | ":" | "\" | <">
	| "/" | "[" | "]" | "?" | "="
	| "{" | "}" | SP | HT
	* @param {string} name
	*/
	function validateCookieName(name) {
		for (const char of name) {
			const code$1 = char.charCodeAt(0);
			if (code$1 <= 32 || code$1 > 127 || char === "(" || char === ")" || char === ">" || char === "<" || char === "@" || char === "," || char === ";" || char === ":" || char === "\\" || char === "\"" || char === "/" || char === "[" || char === "]" || char === "?" || char === "=" || char === "{" || char === "}") throw new Error("Invalid cookie name");
		}
	}
	/**
	cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )
	cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E
	; US-ASCII characters excluding CTLs,
	; whitespace DQUOTE, comma, semicolon,
	; and backslash
	* @param {string} value
	*/
	function validateCookieValue(value) {
		for (const char of value) {
			const code$1 = char.charCodeAt(0);
			if (code$1 < 33 || code$1 === 34 || code$1 === 44 || code$1 === 59 || code$1 === 92 || code$1 > 126) throw new Error("Invalid header value");
		}
	}
	/**
	* path-value        = <any CHAR except CTLs or ";">
	* @param {string} path
	*/
	function validateCookiePath(path$72) {
		for (const char of path$72) {
			const code$1 = char.charCodeAt(0);
			if (code$1 < 33 || char === ";") throw new Error("Invalid cookie path");
		}
	}
	/**
	* I have no idea why these values aren't allowed to be honest,
	* but Deno tests these. - Khafra
	* @param {string} domain
	*/
	function validateCookieDomain(domain) {
		if (domain.startsWith("-") || domain.endsWith(".") || domain.endsWith("-")) throw new Error("Invalid cookie domain");
	}
	/**
	* @see https://www.rfc-editor.org/rfc/rfc7231#section-7.1.1.1
	* @param {number|Date} date
	IMF-fixdate  = day-name "," SP date1 SP time-of-day SP GMT
	; fixed length/zone/capitalization subset of the format
	; see Section 3.3 of [RFC5322]
	
	day-name     = %x4D.6F.6E ; "Mon", case-sensitive
	/ %x54.75.65 ; "Tue", case-sensitive
	/ %x57.65.64 ; "Wed", case-sensitive
	/ %x54.68.75 ; "Thu", case-sensitive
	/ %x46.72.69 ; "Fri", case-sensitive
	/ %x53.61.74 ; "Sat", case-sensitive
	/ %x53.75.6E ; "Sun", case-sensitive
	date1        = day SP month SP year
	; e.g., 02 Jun 1982
	
	day          = 2DIGIT
	month        = %x4A.61.6E ; "Jan", case-sensitive
	/ %x46.65.62 ; "Feb", case-sensitive
	/ %x4D.61.72 ; "Mar", case-sensitive
	/ %x41.70.72 ; "Apr", case-sensitive
	/ %x4D.61.79 ; "May", case-sensitive
	/ %x4A.75.6E ; "Jun", case-sensitive
	/ %x4A.75.6C ; "Jul", case-sensitive
	/ %x41.75.67 ; "Aug", case-sensitive
	/ %x53.65.70 ; "Sep", case-sensitive
	/ %x4F.63.74 ; "Oct", case-sensitive
	/ %x4E.6F.76 ; "Nov", case-sensitive
	/ %x44.65.63 ; "Dec", case-sensitive
	year         = 4DIGIT
	
	GMT          = %x47.4D.54 ; "GMT", case-sensitive
	
	time-of-day  = hour ":" minute ":" second
	; 00:00:00 - 23:59:60 (leap second)
	
	hour         = 2DIGIT
	minute       = 2DIGIT
	second       = 2DIGIT
	*/
	function toIMFDate(date) {
		if (typeof date === "number") date = new Date(date);
		const days = [
			"Sun",
			"Mon",
			"Tue",
			"Wed",
			"Thu",
			"Fri",
			"Sat"
		];
		const months = [
			"Jan",
			"Feb",
			"Mar",
			"Apr",
			"May",
			"Jun",
			"Jul",
			"Aug",
			"Sep",
			"Oct",
			"Nov",
			"Dec"
		];
		const dayName = days[date.getUTCDay()];
		const day = date.getUTCDate().toString().padStart(2, "0");
		const month = months[date.getUTCMonth()];
		const year = date.getUTCFullYear();
		const hour = date.getUTCHours().toString().padStart(2, "0");
		const minute = date.getUTCMinutes().toString().padStart(2, "0");
		const second = date.getUTCSeconds().toString().padStart(2, "0");
		return `${dayName}, ${day} ${month} ${year} ${hour}:${minute}:${second} GMT`;
	}
	/**
	max-age-av        = "Max-Age=" non-zero-digit *DIGIT
	; In practice, both expires-av and max-age-av
	; are limited to dates representable by the
	; user agent.
	* @param {number} maxAge
	*/
	function validateCookieMaxAge(maxAge) {
		if (maxAge < 0) throw new Error("Invalid cookie max-age");
	}
	/**
	* @see https://www.rfc-editor.org/rfc/rfc6265#section-4.1.1
	* @param {import('./index').Cookie} cookie
	*/
	function stringify$7(cookie) {
		if (cookie.name.length === 0) return null;
		validateCookieName(cookie.name);
		validateCookieValue(cookie.value);
		const out = [`${cookie.name}=${cookie.value}`];
		if (cookie.name.startsWith("__Secure-")) cookie.secure = true;
		if (cookie.name.startsWith("__Host-")) {
			cookie.secure = true;
			cookie.domain = null;
			cookie.path = "/";
		}
		if (cookie.secure) out.push("Secure");
		if (cookie.httpOnly) out.push("HttpOnly");
		if (typeof cookie.maxAge === "number") {
			validateCookieMaxAge(cookie.maxAge);
			out.push(`Max-Age=${cookie.maxAge}`);
		}
		if (cookie.domain) {
			validateCookieDomain(cookie.domain);
			out.push(`Domain=${cookie.domain}`);
		}
		if (cookie.path) {
			validateCookiePath(cookie.path);
			out.push(`Path=${cookie.path}`);
		}
		if (cookie.expires && cookie.expires.toString() !== "Invalid Date") out.push(`Expires=${toIMFDate(cookie.expires)}`);
		if (cookie.sameSite) out.push(`SameSite=${cookie.sameSite}`);
		for (const part of cookie.unparsed) {
			if (!part.includes("=")) throw new Error("Invalid unparsed");
			const [key, ...value] = part.split("=");
			out.push(`${key.trim()}=${value.join("=")}`);
		}
		return out.join("; ");
	}
	let kHeadersListNode;
	function getHeadersList$1(headers) {
		if (headers[kHeadersList$1]) return headers[kHeadersList$1];
		if (!kHeadersListNode) {
			kHeadersListNode = Object.getOwnPropertySymbols(headers).find((symbol) => symbol.description === "headers list");
			assert$4(kHeadersListNode, "Headers cannot be parsed");
		}
		const headersList = headers[kHeadersListNode];
		assert$4(headersList);
		return headersList;
	}
	module.exports = {
		isCTLExcludingHtab: isCTLExcludingHtab$1,
		stringify: stringify$7,
		getHeadersList: getHeadersList$1
	};
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/cookies/parse.js
var require_parse$5 = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/cookies/parse.js"(exports, module) {
	const { maxNameValuePairSize, maxAttributeValueSize } = require_constants$5();
	const { isCTLExcludingHtab } = require_util$1();
	const { collectASequenceOfCodePointsFast } = require_dataURL();
	const assert$3 = require("assert");
	/**
	* @description Parses the field-value attributes of a set-cookie header string.
	* @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4
	* @param {string} header
	* @returns if the header is invalid, null will be returned
	*/
	function parseSetCookie$1(header) {
		if (isCTLExcludingHtab(header)) return null;
		let nameValuePair = "";
		let unparsedAttributes = "";
		let name = "";
		let value = "";
		if (header.includes(";")) {
			const position$1 = { position: 0 };
			nameValuePair = collectASequenceOfCodePointsFast(";", header, position$1);
			unparsedAttributes = header.slice(position$1.position);
		} else nameValuePair = header;
		if (!nameValuePair.includes("=")) value = nameValuePair;
else {
			const position$1 = { position: 0 };
			name = collectASequenceOfCodePointsFast("=", nameValuePair, position$1);
			value = nameValuePair.slice(position$1.position + 1);
		}
		name = name.trim();
		value = value.trim();
		if (name.length + value.length > maxNameValuePairSize) return null;
		return {
			name,
			value,
			...parseUnparsedAttributes(unparsedAttributes)
		};
	}
	/**
	* Parses the remaining attributes of a set-cookie header
	* @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4
	* @param {string} unparsedAttributes
	* @param {[Object.<string, unknown>]={}} cookieAttributeList
	*/
	function parseUnparsedAttributes(unparsedAttributes, cookieAttributeList = {}) {
		if (unparsedAttributes.length === 0) return cookieAttributeList;
		assert$3(unparsedAttributes[0] === ";");
		unparsedAttributes = unparsedAttributes.slice(1);
		let cookieAv = "";
		if (unparsedAttributes.includes(";")) {
			cookieAv = collectASequenceOfCodePointsFast(";", unparsedAttributes, { position: 0 });
			unparsedAttributes = unparsedAttributes.slice(cookieAv.length);
		} else {
			cookieAv = unparsedAttributes;
			unparsedAttributes = "";
		}
		let attributeName = "";
		let attributeValue = "";
		if (cookieAv.includes("=")) {
			const position$1 = { position: 0 };
			attributeName = collectASequenceOfCodePointsFast("=", cookieAv, position$1);
			attributeValue = cookieAv.slice(position$1.position + 1);
		} else attributeName = cookieAv;
		attributeName = attributeName.trim();
		attributeValue = attributeValue.trim();
		if (attributeValue.length > maxAttributeValueSize) return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
		const attributeNameLowercase = attributeName.toLowerCase();
		if (attributeNameLowercase === "expires") {
			const expiryTime = new Date(attributeValue);
			cookieAttributeList.expires = expiryTime;
		} else if (attributeNameLowercase === "max-age") {
			const charCode = attributeValue.charCodeAt(0);
			if ((charCode < 48 || charCode > 57) && attributeValue[0] !== "-") return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
			if (!/^\d+$/.test(attributeValue)) return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
			const deltaSeconds = Number(attributeValue);
			cookieAttributeList.maxAge = deltaSeconds;
		} else if (attributeNameLowercase === "domain") {
			let cookieDomain = attributeValue;
			if (cookieDomain[0] === ".") cookieDomain = cookieDomain.slice(1);
			cookieDomain = cookieDomain.toLowerCase();
			cookieAttributeList.domain = cookieDomain;
		} else if (attributeNameLowercase === "path") {
			let cookiePath = "";
			if (attributeValue.length === 0 || attributeValue[0] !== "/") cookiePath = "/";
else cookiePath = attributeValue;
			cookieAttributeList.path = cookiePath;
		} else if (attributeNameLowercase === "secure") cookieAttributeList.secure = true;
else if (attributeNameLowercase === "httponly") cookieAttributeList.httpOnly = true;
else if (attributeNameLowercase === "samesite") {
			let enforcement = "Default";
			const attributeValueLowercase = attributeValue.toLowerCase();
			if (attributeValueLowercase.includes("none")) enforcement = "None";
			if (attributeValueLowercase.includes("strict")) enforcement = "Strict";
			if (attributeValueLowercase.includes("lax")) enforcement = "Lax";
			cookieAttributeList.sameSite = enforcement;
		} else {
			cookieAttributeList.unparsed ??= [];
			cookieAttributeList.unparsed.push(`${attributeName}=${attributeValue}`);
		}
		return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
	}
	module.exports = {
		parseSetCookie: parseSetCookie$1,
		parseUnparsedAttributes
	};
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/cookies/index.js
var require_cookies = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/cookies/index.js"(exports, module) {
	const { parseSetCookie } = require_parse$5();
	const { stringify: stringify$6, getHeadersList } = require_util$1();
	const { webidl: webidl$2 } = require_webidl();
	const { Headers: Headers$2 } = require_headers();
	/**
	* @typedef {Object} Cookie
	* @property {string} name
	* @property {string} value
	* @property {Date|number|undefined} expires
	* @property {number|undefined} maxAge
	* @property {string|undefined} domain
	* @property {string|undefined} path
	* @property {boolean|undefined} secure
	* @property {boolean|undefined} httpOnly
	* @property {'Strict'|'Lax'|'None'} sameSite
	* @property {string[]} unparsed
	*/
	/**
	* @param {Headers} headers
	* @returns {Record<string, string>}
	*/
	function getCookies(headers) {
		webidl$2.argumentLengthCheck(arguments, 1, { header: "getCookies" });
		webidl$2.brandCheck(headers, Headers$2, { strict: false });
		const cookie = headers.get("cookie");
		const out = {};
		if (!cookie) return out;
		for (const piece of cookie.split(";")) {
			const [name, ...value] = piece.split("=");
			out[name.trim()] = value.join("=");
		}
		return out;
	}
	/**
	* @param {Headers} headers
	* @param {string} name
	* @param {{ path?: string, domain?: string }|undefined} attributes
	* @returns {void}
	*/
	function deleteCookie(headers, name, attributes) {
		webidl$2.argumentLengthCheck(arguments, 2, { header: "deleteCookie" });
		webidl$2.brandCheck(headers, Headers$2, { strict: false });
		name = webidl$2.converters.DOMString(name);
		attributes = webidl$2.converters.DeleteCookieAttributes(attributes);
		setCookie(headers, {
			name,
			value: "",
			expires: new Date(0),
			...attributes
		});
	}
	/**
	* @param {Headers} headers
	* @returns {Cookie[]}
	*/
	function getSetCookies(headers) {
		webidl$2.argumentLengthCheck(arguments, 1, { header: "getSetCookies" });
		webidl$2.brandCheck(headers, Headers$2, { strict: false });
		const cookies = getHeadersList(headers).cookies;
		if (!cookies) return [];
		return cookies.map((pair) => parseSetCookie(Array.isArray(pair) ? pair[1] : pair));
	}
	/**
	* @param {Headers} headers
	* @param {Cookie} cookie
	* @returns {void}
	*/
	function setCookie(headers, cookie) {
		webidl$2.argumentLengthCheck(arguments, 2, { header: "setCookie" });
		webidl$2.brandCheck(headers, Headers$2, { strict: false });
		cookie = webidl$2.converters.Cookie(cookie);
		const str = stringify$6(cookie);
		if (str) headers.append("Set-Cookie", stringify$6(cookie));
	}
	webidl$2.converters.DeleteCookieAttributes = webidl$2.dictionaryConverter([{
		converter: webidl$2.nullableConverter(webidl$2.converters.DOMString),
		key: "path",
		defaultValue: null
	}, {
		converter: webidl$2.nullableConverter(webidl$2.converters.DOMString),
		key: "domain",
		defaultValue: null
	}]);
	webidl$2.converters.Cookie = webidl$2.dictionaryConverter([
		{
			converter: webidl$2.converters.DOMString,
			key: "name"
		},
		{
			converter: webidl$2.converters.DOMString,
			key: "value"
		},
		{
			converter: webidl$2.nullableConverter((value) => {
				if (typeof value === "number") return webidl$2.converters["unsigned long long"](value);
				return new Date(value);
			}),
			key: "expires",
			defaultValue: null
		},
		{
			converter: webidl$2.nullableConverter(webidl$2.converters["long long"]),
			key: "maxAge",
			defaultValue: null
		},
		{
			converter: webidl$2.nullableConverter(webidl$2.converters.DOMString),
			key: "domain",
			defaultValue: null
		},
		{
			converter: webidl$2.nullableConverter(webidl$2.converters.DOMString),
			key: "path",
			defaultValue: null
		},
		{
			converter: webidl$2.nullableConverter(webidl$2.converters.boolean),
			key: "secure",
			defaultValue: null
		},
		{
			converter: webidl$2.nullableConverter(webidl$2.converters.boolean),
			key: "httpOnly",
			defaultValue: null
		},
		{
			converter: webidl$2.converters.USVString,
			key: "sameSite",
			allowedValues: [
				"Strict",
				"Lax",
				"None"
			]
		},
		{
			converter: webidl$2.sequenceConverter(webidl$2.converters.DOMString),
			key: "unparsed",
			defaultValue: []
		}
	]);
	module.exports = {
		getCookies,
		deleteCookie,
		getSetCookies,
		setCookie
	};
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/websocket/constants.js
var require_constants$4 = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/websocket/constants.js"(exports, module) {
	const uid$1 = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
	/** @type {PropertyDescriptor} */
	const staticPropertyDescriptors$1 = {
		enumerable: true,
		writable: false,
		configurable: false
	};
	const states$4 = {
		CONNECTING: 0,
		OPEN: 1,
		CLOSING: 2,
		CLOSED: 3
	};
	const opcodes$3 = {
		CONTINUATION: 0,
		TEXT: 1,
		BINARY: 2,
		CLOSE: 8,
		PING: 9,
		PONG: 10
	};
	const maxUnsigned16Bit$1 = 65535;
	const parserStates$1 = {
		INFO: 0,
		PAYLOADLENGTH_16: 2,
		PAYLOADLENGTH_64: 3,
		READ_DATA: 4
	};
	const emptyBuffer$2 = Buffer.allocUnsafe(0);
	module.exports = {
		uid: uid$1,
		staticPropertyDescriptors: staticPropertyDescriptors$1,
		states: states$4,
		opcodes: opcodes$3,
		maxUnsigned16Bit: maxUnsigned16Bit$1,
		parserStates: parserStates$1,
		emptyBuffer: emptyBuffer$2
	};
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/websocket/symbols.js
var require_symbols = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/websocket/symbols.js"(exports, module) {
	module.exports = {
		kWebSocketURL: Symbol("url"),
		kReadyState: Symbol("ready state"),
		kController: Symbol("controller"),
		kResponse: Symbol("response"),
		kBinaryType: Symbol("binary type"),
		kSentClose: Symbol("sent close"),
		kReceivedClose: Symbol("received close"),
		kByteParser: Symbol("byte parser")
	};
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/websocket/events.js
var require_events = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/websocket/events.js"(exports, module) {
	const { webidl: webidl$1 } = require_webidl();
	const { kEnumerableProperty: kEnumerableProperty$1 } = require_util$6();
	const { MessagePort } = require("worker_threads");
	var MessageEvent$1 = class MessageEvent$1 extends Event {
		#eventInit;
		constructor(type, eventInitDict = {}) {
			webidl$1.argumentLengthCheck(arguments, 1, { header: "MessageEvent constructor" });
			type = webidl$1.converters.DOMString(type);
			eventInitDict = webidl$1.converters.MessageEventInit(eventInitDict);
			super(type, eventInitDict);
			this.#eventInit = eventInitDict;
		}
		get data() {
			webidl$1.brandCheck(this, MessageEvent$1);
			return this.#eventInit.data;
		}
		get origin() {
			webidl$1.brandCheck(this, MessageEvent$1);
			return this.#eventInit.origin;
		}
		get lastEventId() {
			webidl$1.brandCheck(this, MessageEvent$1);
			return this.#eventInit.lastEventId;
		}
		get source() {
			webidl$1.brandCheck(this, MessageEvent$1);
			return this.#eventInit.source;
		}
		get ports() {
			webidl$1.brandCheck(this, MessageEvent$1);
			if (!Object.isFrozen(this.#eventInit.ports)) Object.freeze(this.#eventInit.ports);
			return this.#eventInit.ports;
		}
		initMessageEvent(type, bubbles = false, cancelable = false, data = null, origin = "", lastEventId = "", source = null, ports = []) {
			webidl$1.brandCheck(this, MessageEvent$1);
			webidl$1.argumentLengthCheck(arguments, 1, { header: "MessageEvent.initMessageEvent" });
			return new MessageEvent$1(type, {
				bubbles,
				cancelable,
				data,
				origin,
				lastEventId,
				source,
				ports
			});
		}
	};
	var CloseEvent$1 = class CloseEvent$1 extends Event {
		#eventInit;
		constructor(type, eventInitDict = {}) {
			webidl$1.argumentLengthCheck(arguments, 1, { header: "CloseEvent constructor" });
			type = webidl$1.converters.DOMString(type);
			eventInitDict = webidl$1.converters.CloseEventInit(eventInitDict);
			super(type, eventInitDict);
			this.#eventInit = eventInitDict;
		}
		get wasClean() {
			webidl$1.brandCheck(this, CloseEvent$1);
			return this.#eventInit.wasClean;
		}
		get code() {
			webidl$1.brandCheck(this, CloseEvent$1);
			return this.#eventInit.code;
		}
		get reason() {
			webidl$1.brandCheck(this, CloseEvent$1);
			return this.#eventInit.reason;
		}
	};
	var ErrorEvent$1 = class ErrorEvent$1 extends Event {
		#eventInit;
		constructor(type, eventInitDict) {
			webidl$1.argumentLengthCheck(arguments, 1, { header: "ErrorEvent constructor" });
			super(type, eventInitDict);
			type = webidl$1.converters.DOMString(type);
			eventInitDict = webidl$1.converters.ErrorEventInit(eventInitDict ?? {});
			this.#eventInit = eventInitDict;
		}
		get message() {
			webidl$1.brandCheck(this, ErrorEvent$1);
			return this.#eventInit.message;
		}
		get filename() {
			webidl$1.brandCheck(this, ErrorEvent$1);
			return this.#eventInit.filename;
		}
		get lineno() {
			webidl$1.brandCheck(this, ErrorEvent$1);
			return this.#eventInit.lineno;
		}
		get colno() {
			webidl$1.brandCheck(this, ErrorEvent$1);
			return this.#eventInit.colno;
		}
		get error() {
			webidl$1.brandCheck(this, ErrorEvent$1);
			return this.#eventInit.error;
		}
	};
	Object.defineProperties(MessageEvent$1.prototype, {
		[Symbol.toStringTag]: {
			value: "MessageEvent",
			configurable: true
		},
		data: kEnumerableProperty$1,
		origin: kEnumerableProperty$1,
		lastEventId: kEnumerableProperty$1,
		source: kEnumerableProperty$1,
		ports: kEnumerableProperty$1,
		initMessageEvent: kEnumerableProperty$1
	});
	Object.defineProperties(CloseEvent$1.prototype, {
		[Symbol.toStringTag]: {
			value: "CloseEvent",
			configurable: true
		},
		reason: kEnumerableProperty$1,
		code: kEnumerableProperty$1,
		wasClean: kEnumerableProperty$1
	});
	Object.defineProperties(ErrorEvent$1.prototype, {
		[Symbol.toStringTag]: {
			value: "ErrorEvent",
			configurable: true
		},
		message: kEnumerableProperty$1,
		filename: kEnumerableProperty$1,
		lineno: kEnumerableProperty$1,
		colno: kEnumerableProperty$1,
		error: kEnumerableProperty$1
	});
	webidl$1.converters.MessagePort = webidl$1.interfaceConverter(MessagePort);
	webidl$1.converters["sequence<MessagePort>"] = webidl$1.sequenceConverter(webidl$1.converters.MessagePort);
	const eventInit = [
		{
			key: "bubbles",
			converter: webidl$1.converters.boolean,
			defaultValue: false
		},
		{
			key: "cancelable",
			converter: webidl$1.converters.boolean,
			defaultValue: false
		},
		{
			key: "composed",
			converter: webidl$1.converters.boolean,
			defaultValue: false
		}
	];
	webidl$1.converters.MessageEventInit = webidl$1.dictionaryConverter([
		...eventInit,
		{
			key: "data",
			converter: webidl$1.converters.any,
			defaultValue: null
		},
		{
			key: "origin",
			converter: webidl$1.converters.USVString,
			defaultValue: ""
		},
		{
			key: "lastEventId",
			converter: webidl$1.converters.DOMString,
			defaultValue: ""
		},
		{
			key: "source",
			converter: webidl$1.nullableConverter(webidl$1.converters.MessagePort),
			defaultValue: null
		},
		{
			key: "ports",
			converter: webidl$1.converters["sequence<MessagePort>"],
			get defaultValue() {
				return [];
			}
		}
	]);
	webidl$1.converters.CloseEventInit = webidl$1.dictionaryConverter([
		...eventInit,
		{
			key: "wasClean",
			converter: webidl$1.converters.boolean,
			defaultValue: false
		},
		{
			key: "code",
			converter: webidl$1.converters["unsigned short"],
			defaultValue: 0
		},
		{
			key: "reason",
			converter: webidl$1.converters.USVString,
			defaultValue: ""
		}
	]);
	webidl$1.converters.ErrorEventInit = webidl$1.dictionaryConverter([
		...eventInit,
		{
			key: "message",
			converter: webidl$1.converters.DOMString,
			defaultValue: ""
		},
		{
			key: "filename",
			converter: webidl$1.converters.USVString,
			defaultValue: ""
		},
		{
			key: "lineno",
			converter: webidl$1.converters["unsigned long"],
			defaultValue: 0
		},
		{
			key: "colno",
			converter: webidl$1.converters["unsigned long"],
			defaultValue: 0
		},
		{
			key: "error",
			converter: webidl$1.converters.any
		}
	]);
	module.exports = {
		MessageEvent: MessageEvent$1,
		CloseEvent: CloseEvent$1,
		ErrorEvent: ErrorEvent$1
	};
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/websocket/util.js
var require_util = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/websocket/util.js"(exports, module) {
	const { kReadyState: kReadyState$3, kController: kController$1, kResponse: kResponse$2, kBinaryType: kBinaryType$1, kWebSocketURL: kWebSocketURL$1 } = require_symbols();
	const { states: states$3, opcodes: opcodes$2 } = require_constants$4();
	const { MessageEvent, ErrorEvent } = require_events();
	/**
	* @param {import('./websocket').WebSocket} ws
	*/
	function isEstablished$1(ws) {
		return ws[kReadyState$3] === states$3.OPEN;
	}
	/**
	* @param {import('./websocket').WebSocket} ws
	*/
	function isClosing$1(ws) {
		return ws[kReadyState$3] === states$3.CLOSING;
	}
	/**
	* @param {import('./websocket').WebSocket} ws
	*/
	function isClosed(ws) {
		return ws[kReadyState$3] === states$3.CLOSED;
	}
	/**
	* @see https://dom.spec.whatwg.org/#concept-event-fire
	* @param {string} e
	* @param {EventTarget} target
	* @param {EventInit | undefined} eventInitDict
	*/
	function fireEvent$2(e, target, eventConstructor = Event, eventInitDict) {
		const event = new eventConstructor(e, eventInitDict);
		target.dispatchEvent(event);
	}
	/**
	* @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
	* @param {import('./websocket').WebSocket} ws
	* @param {number} type Opcode
	* @param {Buffer} data application data
	*/
	function websocketMessageReceived$1(ws, type, data) {
		if (ws[kReadyState$3] !== states$3.OPEN) return;
		let dataForEvent;
		if (type === opcodes$2.TEXT) try {
			dataForEvent = new TextDecoder("utf-8", { fatal: true }).decode(data);
		} catch {
			failWebsocketConnection$3(ws, "Received invalid UTF-8 in text frame.");
			return;
		}
else if (type === opcodes$2.BINARY) if (ws[kBinaryType$1] === "blob") dataForEvent = new Blob([data]);
else dataForEvent = new Uint8Array(data).buffer;
		fireEvent$2("message", ws, MessageEvent, {
			origin: ws[kWebSocketURL$1].origin,
			data: dataForEvent
		});
	}
	/**
	* @see https://datatracker.ietf.org/doc/html/rfc6455
	* @see https://datatracker.ietf.org/doc/html/rfc2616
	* @see https://bugs.chromium.org/p/chromium/issues/detail?id=398407
	* @param {string} protocol
	*/
	function isValidSubprotocol$1(protocol) {
		if (protocol.length === 0) return false;
		for (const char of protocol) {
			const code$1 = char.charCodeAt(0);
			if (code$1 < 33 || code$1 > 126 || char === "(" || char === ")" || char === "<" || char === ">" || char === "@" || char === "," || char === ";" || char === ":" || char === "\\" || char === "\"" || char === "/" || char === "[" || char === "]" || char === "?" || char === "=" || char === "{" || char === "}" || code$1 === 32 || code$1 === 9) return false;
		}
		return true;
	}
	/**
	* @see https://datatracker.ietf.org/doc/html/rfc6455#section-7-4
	* @param {number} code
	*/
	function isValidStatusCode$1(code$1) {
		if (code$1 >= 1e3 && code$1 < 1015) return code$1 !== 1004 && code$1 !== 1005 && code$1 !== 1006;
		return code$1 >= 3e3 && code$1 <= 4999;
	}
	/**
	* @param {import('./websocket').WebSocket} ws
	* @param {string|undefined} reason
	*/
	function failWebsocketConnection$3(ws, reason) {
		const { [kController$1]: controller, [kResponse$2]: response } = ws;
		controller.abort();
		if (response?.socket && !response.socket.destroyed) response.socket.destroy();
		if (reason) fireEvent$2("error", ws, ErrorEvent, { error: new Error(reason) });
	}
	module.exports = {
		isEstablished: isEstablished$1,
		isClosing: isClosing$1,
		isClosed,
		fireEvent: fireEvent$2,
		isValidSubprotocol: isValidSubprotocol$1,
		isValidStatusCode: isValidStatusCode$1,
		failWebsocketConnection: failWebsocketConnection$3,
		websocketMessageReceived: websocketMessageReceived$1
	};
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/websocket/connection.js
var require_connection = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/websocket/connection.js"(exports, module) {
	const diagnosticsChannel$1 = require("diagnostics_channel");
	const { uid, states: states$2 } = require_constants$4();
	const { kReadyState: kReadyState$2, kSentClose: kSentClose$2, kByteParser: kByteParser$1, kReceivedClose: kReceivedClose$1 } = require_symbols();
	const { fireEvent: fireEvent$1, failWebsocketConnection: failWebsocketConnection$2 } = require_util();
	const { CloseEvent } = require_events();
	const { makeRequest } = require_request();
	const { fetching } = require_fetch();
	const { Headers: Headers$1 } = require_headers();
	const { getGlobalDispatcher: getGlobalDispatcher$2 } = require_global();
	const { kHeadersList } = require_symbols$4();
	const channels$1 = {};
	channels$1.open = diagnosticsChannel$1.channel("undici:websocket:open");
	channels$1.close = diagnosticsChannel$1.channel("undici:websocket:close");
	channels$1.socketError = diagnosticsChannel$1.channel("undici:websocket:socket_error");
	/** @type {import('crypto')} */
	let crypto$1;
	try {
		crypto$1 = require("crypto");
	} catch {}
	/**
	* @see https://websockets.spec.whatwg.org/#concept-websocket-establish
	* @param {URL} url
	* @param {string|string[]} protocols
	* @param {import('./websocket').WebSocket} ws
	* @param {(response: any) => void} onEstablish
	* @param {Partial<import('../../types/websocket').WebSocketInit>} options
	*/
	function establishWebSocketConnection$1(url, protocols, ws, onEstablish, options) {
		const requestURL = url;
		requestURL.protocol = url.protocol === "ws:" ? "http:" : "https:";
		const request$2 = makeRequest({
			urlList: [requestURL],
			serviceWorkers: "none",
			referrer: "no-referrer",
			mode: "websocket",
			credentials: "include",
			cache: "no-store",
			redirect: "error"
		});
		if (options.headers) {
			const headersList = new Headers$1(options.headers)[kHeadersList];
			request$2.headersList = headersList;
		}
		const keyValue = crypto$1.randomBytes(16).toString("base64");
		request$2.headersList.append("sec-websocket-key", keyValue);
		request$2.headersList.append("sec-websocket-version", "13");
		for (const protocol of protocols) request$2.headersList.append("sec-websocket-protocol", protocol);
		const permessageDeflate = "";
		const controller = fetching({
			request: request$2,
			useParallelQueue: true,
			dispatcher: options.dispatcher ?? getGlobalDispatcher$2(),
			processResponse(response) {
				if (response.type === "error" || response.status !== 101) {
					failWebsocketConnection$2(ws, "Received network error or non-101 status code.");
					return;
				}
				if (protocols.length !== 0 && !response.headersList.get("Sec-WebSocket-Protocol")) {
					failWebsocketConnection$2(ws, "Server did not respond with sent protocols.");
					return;
				}
				if (response.headersList.get("Upgrade")?.toLowerCase() !== "websocket") {
					failWebsocketConnection$2(ws, "Server did not set Upgrade header to \"websocket\".");
					return;
				}
				if (response.headersList.get("Connection")?.toLowerCase() !== "upgrade") {
					failWebsocketConnection$2(ws, "Server did not set Connection header to \"upgrade\".");
					return;
				}
				const secWSAccept = response.headersList.get("Sec-WebSocket-Accept");
				const digest = crypto$1.createHash("sha1").update(keyValue + uid).digest("base64");
				if (secWSAccept !== digest) {
					failWebsocketConnection$2(ws, "Incorrect hash received in Sec-WebSocket-Accept header.");
					return;
				}
				const secExtension = response.headersList.get("Sec-WebSocket-Extensions");
				if (secExtension !== null && secExtension !== permessageDeflate) {
					failWebsocketConnection$2(ws, "Received different permessage-deflate than the one set.");
					return;
				}
				const secProtocol = response.headersList.get("Sec-WebSocket-Protocol");
				if (secProtocol !== null && secProtocol !== request$2.headersList.get("Sec-WebSocket-Protocol")) {
					failWebsocketConnection$2(ws, "Protocol was not set in the opening handshake.");
					return;
				}
				response.socket.on("data", onSocketData);
				response.socket.on("close", onSocketClose);
				response.socket.on("error", onSocketError);
				if (channels$1.open.hasSubscribers) channels$1.open.publish({
					address: response.socket.address(),
					protocol: secProtocol,
					extensions: secExtension
				});
				onEstablish(response);
			}
		});
		return controller;
	}
	/**
	* @param {Buffer} chunk
	*/
	function onSocketData(chunk) {
		if (!this.ws[kByteParser$1].write(chunk)) this.pause();
	}
	/**
	* @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
	* @see https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.4
	*/
	function onSocketClose() {
		const { ws } = this;
		const wasClean = ws[kSentClose$2] && ws[kReceivedClose$1];
		let code$1 = 1005;
		let reason = "";
		const result = ws[kByteParser$1].closingInfo;
		if (result) {
			code$1 = result.code ?? 1005;
			reason = result.reason;
		} else if (!ws[kSentClose$2]) code$1 = 1006;
		ws[kReadyState$2] = states$2.CLOSED;
		fireEvent$1("close", ws, CloseEvent, {
			wasClean,
			code: code$1,
			reason
		});
		if (channels$1.close.hasSubscribers) channels$1.close.publish({
			websocket: ws,
			code: code$1,
			reason
		});
	}
	function onSocketError(error$2) {
		const { ws } = this;
		ws[kReadyState$2] = states$2.CLOSING;
		if (channels$1.socketError.hasSubscribers) channels$1.socketError.publish(error$2);
		this.destroy();
	}
	module.exports = { establishWebSocketConnection: establishWebSocketConnection$1 };
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/websocket/frame.js
var require_frame = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/websocket/frame.js"(exports, module) {
	const { maxUnsigned16Bit } = require_constants$4();
	/** @type {import('crypto')} */
	let crypto;
	try {
		crypto = require("crypto");
	} catch {}
	var WebsocketFrameSend$2 = class {
		/**
		* @param {Buffer|undefined} data
		*/
		constructor(data) {
			this.frameData = data;
			this.maskKey = crypto.randomBytes(4);
		}
		createFrame(opcode) {
			const bodyLength$1 = this.frameData?.byteLength ?? 0;
			/** @type {number} */
			let payloadLength = bodyLength$1;
			let offset = 6;
			if (bodyLength$1 > maxUnsigned16Bit) {
				offset += 8;
				payloadLength = 127;
			} else if (bodyLength$1 > 125) {
				offset += 2;
				payloadLength = 126;
			}
			const buffer$1 = Buffer.allocUnsafe(bodyLength$1 + offset);
			buffer$1[0] = buffer$1[1] = 0;
			buffer$1[0] |= 128;
			buffer$1[0] = (buffer$1[0] & 240) + opcode;
			/*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> */
			buffer$1[offset - 4] = this.maskKey[0];
			buffer$1[offset - 3] = this.maskKey[1];
			buffer$1[offset - 2] = this.maskKey[2];
			buffer$1[offset - 1] = this.maskKey[3];
			buffer$1[1] = payloadLength;
			if (payloadLength === 126) buffer$1.writeUInt16BE(bodyLength$1, 2);
else if (payloadLength === 127) {
				buffer$1[2] = buffer$1[3] = 0;
				buffer$1.writeUIntBE(bodyLength$1, 4, 6);
			}
			buffer$1[1] |= 128;
			for (let i$2 = 0; i$2 < bodyLength$1; i$2++) buffer$1[offset + i$2] = this.frameData[i$2] ^ this.maskKey[i$2 % 4];
			return buffer$1;
		}
	};
	module.exports = { WebsocketFrameSend: WebsocketFrameSend$2 };
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/websocket/receiver.js
var require_receiver = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/websocket/receiver.js"(exports, module) {
	const { Writable } = require("stream");
	const diagnosticsChannel = require("diagnostics_channel");
	const { parserStates, opcodes: opcodes$1, states: states$1, emptyBuffer: emptyBuffer$1 } = require_constants$4();
	const { kReadyState: kReadyState$1, kSentClose: kSentClose$1, kResponse: kResponse$1, kReceivedClose } = require_symbols();
	const { isValidStatusCode, failWebsocketConnection: failWebsocketConnection$1, websocketMessageReceived } = require_util();
	const { WebsocketFrameSend: WebsocketFrameSend$1 } = require_frame();
	const channels = {};
	channels.ping = diagnosticsChannel.channel("undici:websocket:ping");
	channels.pong = diagnosticsChannel.channel("undici:websocket:pong");
	var ByteParser$1 = class extends Writable {
		#buffers = [];
		#byteOffset = 0;
		#state = parserStates.INFO;
		#info = {};
		#fragments = [];
		constructor(ws) {
			super();
			this.ws = ws;
		}
		/**
		* @param {Buffer} chunk
		* @param {() => void} callback
		*/
		_write(chunk, _, callback) {
			this.#buffers.push(chunk);
			this.#byteOffset += chunk.length;
			this.run(callback);
		}
		/**
		* Runs whenever a new chunk is received.
		* Callback is called whenever there are no more chunks buffering,
		* or not enough bytes are buffered to parse.
		*/
		run(callback) {
			while (true) {
				if (this.#state === parserStates.INFO) {
					if (this.#byteOffset < 2) return callback();
					const buffer$1 = this.consume(2);
					this.#info.fin = (buffer$1[0] & 128) !== 0;
					this.#info.opcode = buffer$1[0] & 15;
					this.#info.originalOpcode ??= this.#info.opcode;
					this.#info.fragmented = !this.#info.fin && this.#info.opcode !== opcodes$1.CONTINUATION;
					if (this.#info.fragmented && this.#info.opcode !== opcodes$1.BINARY && this.#info.opcode !== opcodes$1.TEXT) {
						failWebsocketConnection$1(this.ws, "Invalid frame type was fragmented.");
						return;
					}
					const payloadLength = buffer$1[1] & 127;
					if (payloadLength <= 125) {
						this.#info.payloadLength = payloadLength;
						this.#state = parserStates.READ_DATA;
					} else if (payloadLength === 126) this.#state = parserStates.PAYLOADLENGTH_16;
else if (payloadLength === 127) this.#state = parserStates.PAYLOADLENGTH_64;
					if (this.#info.fragmented && payloadLength > 125) {
						failWebsocketConnection$1(this.ws, "Fragmented frame exceeded 125 bytes.");
						return;
					} else if ((this.#info.opcode === opcodes$1.PING || this.#info.opcode === opcodes$1.PONG || this.#info.opcode === opcodes$1.CLOSE) && payloadLength > 125) {
						failWebsocketConnection$1(this.ws, "Payload length for control frame exceeded 125 bytes.");
						return;
					} else if (this.#info.opcode === opcodes$1.CLOSE) {
						if (payloadLength === 1) {
							failWebsocketConnection$1(this.ws, "Received close frame with a 1-byte body.");
							return;
						}
						const body = this.consume(payloadLength);
						this.#info.closeInfo = this.parseCloseBody(false, body);
						if (!this.ws[kSentClose$1]) {
							const body$1 = Buffer.allocUnsafe(2);
							body$1.writeUInt16BE(this.#info.closeInfo.code, 0);
							const closeFrame = new WebsocketFrameSend$1(body$1);
							this.ws[kResponse$1].socket.write(closeFrame.createFrame(opcodes$1.CLOSE), (err) => {
								if (!err) this.ws[kSentClose$1] = true;
							});
						}
						this.ws[kReadyState$1] = states$1.CLOSING;
						this.ws[kReceivedClose] = true;
						this.end();
						return;
					} else if (this.#info.opcode === opcodes$1.PING) {
						const body = this.consume(payloadLength);
						if (!this.ws[kReceivedClose]) {
							const frame = new WebsocketFrameSend$1(body);
							this.ws[kResponse$1].socket.write(frame.createFrame(opcodes$1.PONG));
							if (channels.ping.hasSubscribers) channels.ping.publish({ payload: body });
						}
						this.#state = parserStates.INFO;
						if (this.#byteOffset > 0) continue;
else {
							callback();
							return;
						}
					} else if (this.#info.opcode === opcodes$1.PONG) {
						const body = this.consume(payloadLength);
						if (channels.pong.hasSubscribers) channels.pong.publish({ payload: body });
						if (this.#byteOffset > 0) continue;
else {
							callback();
							return;
						}
					}
				} else if (this.#state === parserStates.PAYLOADLENGTH_16) {
					if (this.#byteOffset < 2) return callback();
					const buffer$1 = this.consume(2);
					this.#info.payloadLength = buffer$1.readUInt16BE(0);
					this.#state = parserStates.READ_DATA;
				} else if (this.#state === parserStates.PAYLOADLENGTH_64) {
					if (this.#byteOffset < 8) return callback();
					const buffer$1 = this.consume(8);
					const upper = buffer$1.readUInt32BE(0);
					if (upper > 2147483647) {
						failWebsocketConnection$1(this.ws, "Received payload length > 2^31 bytes.");
						return;
					}
					const lower = buffer$1.readUInt32BE(4);
					this.#info.payloadLength = (upper << 8) + lower;
					this.#state = parserStates.READ_DATA;
				} else if (this.#state === parserStates.READ_DATA) {
					if (this.#byteOffset < this.#info.payloadLength) return callback();
else if (this.#byteOffset >= this.#info.payloadLength) {
						const body = this.consume(this.#info.payloadLength);
						this.#fragments.push(body);
						if (!this.#info.fragmented || this.#info.fin && this.#info.opcode === opcodes$1.CONTINUATION) {
							const fullMessage = Buffer.concat(this.#fragments);
							websocketMessageReceived(this.ws, this.#info.originalOpcode, fullMessage);
							this.#info = {};
							this.#fragments.length = 0;
						}
						this.#state = parserStates.INFO;
					}
				}
				if (this.#byteOffset > 0) continue;
else {
					callback();
					break;
				}
			}
		}
		/**
		* Take n bytes from the buffered Buffers
		* @param {number} n
		* @returns {Buffer|null}
		*/
		consume(n) {
			if (n > this.#byteOffset) return null;
else if (n === 0) return emptyBuffer$1;
			if (this.#buffers[0].length === n) {
				this.#byteOffset -= this.#buffers[0].length;
				return this.#buffers.shift();
			}
			const buffer$1 = Buffer.allocUnsafe(n);
			let offset = 0;
			while (offset !== n) {
				const next = this.#buffers[0];
				const { length } = next;
				if (length + offset === n) {
					buffer$1.set(this.#buffers.shift(), offset);
					break;
				} else if (length + offset > n) {
					buffer$1.set(next.subarray(0, n - offset), offset);
					this.#buffers[0] = next.subarray(n - offset);
					break;
				} else {
					buffer$1.set(this.#buffers.shift(), offset);
					offset += next.length;
				}
			}
			this.#byteOffset -= n;
			return buffer$1;
		}
		parseCloseBody(onlyCode, data) {
			/** @type {number|undefined} */
			let code$1;
			if (data.length >= 2) code$1 = data.readUInt16BE(0);
			if (onlyCode) {
				if (!isValidStatusCode(code$1)) return null;
				return { code: code$1 };
			}
			/** @type {Buffer} */
			let reason = data.subarray(2);
			if (reason[0] === 239 && reason[1] === 187 && reason[2] === 191) reason = reason.subarray(3);
			if (code$1 !== undefined && !isValidStatusCode(code$1)) return null;
			try {
				reason = new TextDecoder("utf-8", { fatal: true }).decode(reason);
			} catch {
				return null;
			}
			return {
				code: code$1,
				reason
			};
		}
		get closingInfo() {
			return this.#info.closeInfo;
		}
	};
	module.exports = { ByteParser: ByteParser$1 };
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/websocket/websocket.js
var require_websocket = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/websocket/websocket.js"(exports, module) {
	const { webidl } = require_webidl();
	const { DOMException: DOMException$1 } = require_constants$7();
	const { URLSerializer } = require_dataURL();
	const { getGlobalOrigin } = require_global$1();
	const { staticPropertyDescriptors, states, opcodes, emptyBuffer } = require_constants$4();
	const { kWebSocketURL, kReadyState, kController, kBinaryType, kResponse, kSentClose, kByteParser } = require_symbols();
	const { isEstablished, isClosing, isValidSubprotocol, failWebsocketConnection, fireEvent } = require_util();
	const { establishWebSocketConnection } = require_connection();
	const { WebsocketFrameSend } = require_frame();
	const { ByteParser } = require_receiver();
	const { kEnumerableProperty, isBlobLike } = require_util$6();
	const { getGlobalDispatcher: getGlobalDispatcher$1 } = require_global();
	const { types } = require("util");
	let experimentalWarned = false;
	var WebSocket = class WebSocket extends EventTarget {
		#events = {
			open: null,
			error: null,
			close: null,
			message: null
		};
		#bufferedAmount = 0;
		#protocol = "";
		#extensions = "";
		/**
		* @param {string} url
		* @param {string|string[]} protocols
		*/
		constructor(url, protocols = []) {
			super();
			webidl.argumentLengthCheck(arguments, 1, { header: "WebSocket constructor" });
			if (!experimentalWarned) {
				experimentalWarned = true;
				process.emitWarning("WebSockets are experimental, expect them to change at any time.", { code: "UNDICI-WS" });
			}
			const options = webidl.converters["DOMString or sequence<DOMString> or WebSocketInit"](protocols);
			url = webidl.converters.USVString(url);
			protocols = options.protocols;
			const baseURL = getGlobalOrigin();
			let urlRecord;
			try {
				urlRecord = new URL(url, baseURL);
			} catch (e) {
				throw new DOMException$1(e, "SyntaxError");
			}
			if (urlRecord.protocol === "http:") urlRecord.protocol = "ws:";
else if (urlRecord.protocol === "https:") urlRecord.protocol = "wss:";
			if (urlRecord.protocol !== "ws:" && urlRecord.protocol !== "wss:") throw new DOMException$1(`Expected a ws: or wss: protocol, got ${urlRecord.protocol}`, "SyntaxError");
			if (urlRecord.hash || urlRecord.href.endsWith("#")) throw new DOMException$1("Got fragment", "SyntaxError");
			if (typeof protocols === "string") protocols = [protocols];
			if (protocols.length !== new Set(protocols.map((p) => p.toLowerCase())).size) throw new DOMException$1("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
			if (protocols.length > 0 && !protocols.every((p) => isValidSubprotocol(p))) throw new DOMException$1("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
			this[kWebSocketURL] = new URL(urlRecord.href);
			this[kController] = establishWebSocketConnection(urlRecord, protocols, this, (response) => this.#onConnectionEstablished(response), options);
			this[kReadyState] = WebSocket.CONNECTING;
			this[kBinaryType] = "blob";
		}
		/**
		* @see https://websockets.spec.whatwg.org/#dom-websocket-close
		* @param {number|undefined} code
		* @param {string|undefined} reason
		*/
		close(code$1 = undefined, reason = undefined) {
			webidl.brandCheck(this, WebSocket);
			if (code$1 !== undefined) code$1 = webidl.converters["unsigned short"](code$1, { clamp: true });
			if (reason !== undefined) reason = webidl.converters.USVString(reason);
			if (code$1 !== undefined) {
				if (code$1 !== 1e3 && (code$1 < 3e3 || code$1 > 4999)) throw new DOMException$1("invalid code", "InvalidAccessError");
			}
			let reasonByteLength = 0;
			if (reason !== undefined) {
				reasonByteLength = Buffer.byteLength(reason);
				if (reasonByteLength > 123) throw new DOMException$1(`Reason must be less than 123 bytes; received ${reasonByteLength}`, "SyntaxError");
			}
			if (this[kReadyState] === WebSocket.CLOSING || this[kReadyState] === WebSocket.CLOSED) {} else if (!isEstablished(this)) {
				failWebsocketConnection(this, "Connection was closed before it was established.");
				this[kReadyState] = WebSocket.CLOSING;
			} else if (!isClosing(this)) {
				const frame = new WebsocketFrameSend();
				if (code$1 !== undefined && reason === undefined) {
					frame.frameData = Buffer.allocUnsafe(2);
					frame.frameData.writeUInt16BE(code$1, 0);
				} else if (code$1 !== undefined && reason !== undefined) {
					frame.frameData = Buffer.allocUnsafe(2 + reasonByteLength);
					frame.frameData.writeUInt16BE(code$1, 0);
					frame.frameData.write(reason, 2, "utf-8");
				} else frame.frameData = emptyBuffer;
				/** @type {import('stream').Duplex} */
				const socket = this[kResponse].socket;
				socket.write(frame.createFrame(opcodes.CLOSE), (err) => {
					if (!err) this[kSentClose] = true;
				});
				this[kReadyState] = states.CLOSING;
			} else this[kReadyState] = WebSocket.CLOSING;
		}
		/**
		* @see https://websockets.spec.whatwg.org/#dom-websocket-send
		* @param {NodeJS.TypedArray|ArrayBuffer|Blob|string} data
		*/
		send(data) {
			webidl.brandCheck(this, WebSocket);
			webidl.argumentLengthCheck(arguments, 1, { header: "WebSocket.send" });
			data = webidl.converters.WebSocketSendData(data);
			if (this[kReadyState] === WebSocket.CONNECTING) throw new DOMException$1("Sent before connected.", "InvalidStateError");
			if (!isEstablished(this) || isClosing(this)) return;
			/** @type {import('stream').Duplex} */
			const socket = this[kResponse].socket;
			if (typeof data === "string") {
				const value = Buffer.from(data);
				const frame = new WebsocketFrameSend(value);
				const buffer$1 = frame.createFrame(opcodes.TEXT);
				this.#bufferedAmount += value.byteLength;
				socket.write(buffer$1, () => {
					this.#bufferedAmount -= value.byteLength;
				});
			} else if (types.isArrayBuffer(data)) {
				const value = Buffer.from(data);
				const frame = new WebsocketFrameSend(value);
				const buffer$1 = frame.createFrame(opcodes.BINARY);
				this.#bufferedAmount += value.byteLength;
				socket.write(buffer$1, () => {
					this.#bufferedAmount -= value.byteLength;
				});
			} else if (ArrayBuffer.isView(data)) {
				const ab = Buffer.from(data, data.byteOffset, data.byteLength);
				const frame = new WebsocketFrameSend(ab);
				const buffer$1 = frame.createFrame(opcodes.BINARY);
				this.#bufferedAmount += ab.byteLength;
				socket.write(buffer$1, () => {
					this.#bufferedAmount -= ab.byteLength;
				});
			} else if (isBlobLike(data)) {
				const frame = new WebsocketFrameSend();
				data.arrayBuffer().then((ab) => {
					const value = Buffer.from(ab);
					frame.frameData = value;
					const buffer$1 = frame.createFrame(opcodes.BINARY);
					this.#bufferedAmount += value.byteLength;
					socket.write(buffer$1, () => {
						this.#bufferedAmount -= value.byteLength;
					});
				});
			}
		}
		get readyState() {
			webidl.brandCheck(this, WebSocket);
			return this[kReadyState];
		}
		get bufferedAmount() {
			webidl.brandCheck(this, WebSocket);
			return this.#bufferedAmount;
		}
		get url() {
			webidl.brandCheck(this, WebSocket);
			return URLSerializer(this[kWebSocketURL]);
		}
		get extensions() {
			webidl.brandCheck(this, WebSocket);
			return this.#extensions;
		}
		get protocol() {
			webidl.brandCheck(this, WebSocket);
			return this.#protocol;
		}
		get onopen() {
			webidl.brandCheck(this, WebSocket);
			return this.#events.open;
		}
		set onopen(fn) {
			webidl.brandCheck(this, WebSocket);
			if (this.#events.open) this.removeEventListener("open", this.#events.open);
			if (typeof fn === "function") {
				this.#events.open = fn;
				this.addEventListener("open", fn);
			} else this.#events.open = null;
		}
		get onerror() {
			webidl.brandCheck(this, WebSocket);
			return this.#events.error;
		}
		set onerror(fn) {
			webidl.brandCheck(this, WebSocket);
			if (this.#events.error) this.removeEventListener("error", this.#events.error);
			if (typeof fn === "function") {
				this.#events.error = fn;
				this.addEventListener("error", fn);
			} else this.#events.error = null;
		}
		get onclose() {
			webidl.brandCheck(this, WebSocket);
			return this.#events.close;
		}
		set onclose(fn) {
			webidl.brandCheck(this, WebSocket);
			if (this.#events.close) this.removeEventListener("close", this.#events.close);
			if (typeof fn === "function") {
				this.#events.close = fn;
				this.addEventListener("close", fn);
			} else this.#events.close = null;
		}
		get onmessage() {
			webidl.brandCheck(this, WebSocket);
			return this.#events.message;
		}
		set onmessage(fn) {
			webidl.brandCheck(this, WebSocket);
			if (this.#events.message) this.removeEventListener("message", this.#events.message);
			if (typeof fn === "function") {
				this.#events.message = fn;
				this.addEventListener("message", fn);
			} else this.#events.message = null;
		}
		get binaryType() {
			webidl.brandCheck(this, WebSocket);
			return this[kBinaryType];
		}
		set binaryType(type) {
			webidl.brandCheck(this, WebSocket);
			if (type !== "blob" && type !== "arraybuffer") this[kBinaryType] = "blob";
else this[kBinaryType] = type;
		}
		/**
		* @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
		*/
		#onConnectionEstablished(response) {
			this[kResponse] = response;
			const parser = new ByteParser(this);
			parser.on("drain", function onParserDrain() {
				this.ws[kResponse].socket.resume();
			});
			response.socket.ws = this;
			this[kByteParser] = parser;
			this[kReadyState] = states.OPEN;
			const extensions = response.headersList.get("sec-websocket-extensions");
			if (extensions !== null) this.#extensions = extensions;
			const protocol = response.headersList.get("sec-websocket-protocol");
			if (protocol !== null) this.#protocol = protocol;
			fireEvent("open", this);
		}
	};
	WebSocket.CONNECTING = WebSocket.prototype.CONNECTING = states.CONNECTING;
	WebSocket.OPEN = WebSocket.prototype.OPEN = states.OPEN;
	WebSocket.CLOSING = WebSocket.prototype.CLOSING = states.CLOSING;
	WebSocket.CLOSED = WebSocket.prototype.CLOSED = states.CLOSED;
	Object.defineProperties(WebSocket.prototype, {
		CONNECTING: staticPropertyDescriptors,
		OPEN: staticPropertyDescriptors,
		CLOSING: staticPropertyDescriptors,
		CLOSED: staticPropertyDescriptors,
		url: kEnumerableProperty,
		readyState: kEnumerableProperty,
		bufferedAmount: kEnumerableProperty,
		onopen: kEnumerableProperty,
		onerror: kEnumerableProperty,
		onclose: kEnumerableProperty,
		close: kEnumerableProperty,
		onmessage: kEnumerableProperty,
		binaryType: kEnumerableProperty,
		send: kEnumerableProperty,
		extensions: kEnumerableProperty,
		protocol: kEnumerableProperty,
		[Symbol.toStringTag]: {
			value: "WebSocket",
			writable: false,
			enumerable: false,
			configurable: true
		}
	});
	Object.defineProperties(WebSocket, {
		CONNECTING: staticPropertyDescriptors,
		OPEN: staticPropertyDescriptors,
		CLOSING: staticPropertyDescriptors,
		CLOSED: staticPropertyDescriptors
	});
	webidl.converters["sequence<DOMString>"] = webidl.sequenceConverter(webidl.converters.DOMString);
	webidl.converters["DOMString or sequence<DOMString>"] = function(V) {
		if (webidl.util.Type(V) === "Object" && Symbol.iterator in V) return webidl.converters["sequence<DOMString>"](V);
		return webidl.converters.DOMString(V);
	};
	webidl.converters.WebSocketInit = webidl.dictionaryConverter([
		{
			key: "protocols",
			converter: webidl.converters["DOMString or sequence<DOMString>"],
			get defaultValue() {
				return [];
			}
		},
		{
			key: "dispatcher",
			converter: (V) => V,
			get defaultValue() {
				return getGlobalDispatcher$1();
			}
		},
		{
			key: "headers",
			converter: webidl.nullableConverter(webidl.converters.HeadersInit)
		}
	]);
	webidl.converters["DOMString or sequence<DOMString> or WebSocketInit"] = function(V) {
		if (webidl.util.Type(V) === "Object" && !(Symbol.iterator in V)) return webidl.converters.WebSocketInit(V);
		return { protocols: webidl.converters["DOMString or sequence<DOMString>"](V) };
	};
	webidl.converters.WebSocketSendData = function(V) {
		if (webidl.util.Type(V) === "Object") {
			if (isBlobLike(V)) return webidl.converters.Blob(V, { strict: false });
			if (ArrayBuffer.isView(V) || types.isAnyArrayBuffer(V)) return webidl.converters.BufferSource(V);
		}
		return webidl.converters.USVString(V);
	};
	module.exports = { WebSocket };
} });

//#endregion
//#region ../node_modules/.pnpm/undici@5.28.4/node_modules/undici/index.js
var require_undici = __commonJS({ "../node_modules/.pnpm/undici@5.28.4/node_modules/undici/index.js"(exports, module) {
	const Client = require_client();
	const Dispatcher = require_dispatcher();
	const errors$1 = require_errors();
	const Pool = require_pool();
	const BalancedPool = require_balanced_pool();
	const Agent = require_agent();
	const util$4 = require_util$6();
	const { InvalidArgumentError } = errors$1;
	const api$2 = require_api();
	const buildConnector = require_connect();
	const MockClient = require_mock_client();
	const MockAgent = require_mock_agent();
	const MockPool = require_mock_pool();
	const mockErrors = require_mock_errors();
	const ProxyAgent = require_proxy_agent();
	const RetryHandler = require_RetryHandler();
	const { getGlobalDispatcher, setGlobalDispatcher } = require_global();
	const DecoratorHandler = require_DecoratorHandler();
	const RedirectHandler = require_RedirectHandler();
	const createRedirectInterceptor = require_redirectInterceptor();
	let hasCrypto;
	try {
		require("crypto");
		hasCrypto = true;
	} catch {
		hasCrypto = false;
	}
	Object.assign(Dispatcher.prototype, api$2);
	module.exports.Dispatcher = Dispatcher;
	module.exports.Client = Client;
	module.exports.Pool = Pool;
	module.exports.BalancedPool = BalancedPool;
	module.exports.Agent = Agent;
	module.exports.ProxyAgent = ProxyAgent;
	module.exports.RetryHandler = RetryHandler;
	module.exports.DecoratorHandler = DecoratorHandler;
	module.exports.RedirectHandler = RedirectHandler;
	module.exports.createRedirectInterceptor = createRedirectInterceptor;
	module.exports.buildConnector = buildConnector;
	module.exports.errors = errors$1;
	function makeDispatcher(fn) {
		return (url, opts, handler$1) => {
			if (typeof opts === "function") {
				handler$1 = opts;
				opts = null;
			}
			if (!url || typeof url !== "string" && typeof url !== "object" && !(url instanceof URL)) throw new InvalidArgumentError("invalid url");
			if (opts != null && typeof opts !== "object") throw new InvalidArgumentError("invalid opts");
			if (opts && opts.path != null) {
				if (typeof opts.path !== "string") throw new InvalidArgumentError("invalid opts.path");
				let path$72 = opts.path;
				if (!opts.path.startsWith("/")) path$72 = `/${path$72}`;
				url = new URL(util$4.parseOrigin(url).origin + path$72);
			} else {
				if (!opts) opts = typeof url === "object" ? url : {};
				url = util$4.parseURL(url);
			}
			const { agent, dispatcher = getGlobalDispatcher() } = opts;
			if (agent) throw new InvalidArgumentError("unsupported opts.agent. Did you mean opts.client?");
			return fn.call(dispatcher, {
				...opts,
				origin: url.origin,
				path: url.search ? `${url.pathname}${url.search}` : url.pathname,
				method: opts.method || (opts.body ? "PUT" : "GET")
			}, handler$1);
		};
	}
	module.exports.setGlobalDispatcher = setGlobalDispatcher;
	module.exports.getGlobalDispatcher = getGlobalDispatcher;
	if (util$4.nodeMajor > 16 || util$4.nodeMajor === 16 && util$4.nodeMinor >= 8) {
		let fetchImpl = null;
		module.exports.fetch = async function fetch$1(resource) {
			if (!fetchImpl) fetchImpl = require_fetch().fetch;
			try {
				return await fetchImpl(...arguments);
			} catch (err) {
				if (typeof err === "object") Error.captureStackTrace(err, this);
				throw err;
			}
		};
		module.exports.Headers = require_headers().Headers;
		module.exports.Response = require_response().Response;
		module.exports.Request = require_request().Request;
		module.exports.FormData = require_formdata().FormData;
		module.exports.File = require_file$2().File;
		module.exports.FileReader = require_filereader().FileReader;
		const { setGlobalOrigin: setGlobalOrigin$1, getGlobalOrigin: getGlobalOrigin$5 } = require_global$1();
		module.exports.setGlobalOrigin = setGlobalOrigin$1;
		module.exports.getGlobalOrigin = getGlobalOrigin$5;
		const { CacheStorage: CacheStorage$1 } = require_cachestorage();
		const { kConstruct: kConstruct$5 } = require_symbols$1();
		module.exports.caches = new CacheStorage$1(kConstruct$5);
	}
	if (util$4.nodeMajor >= 16) {
		const { deleteCookie: deleteCookie$1, getCookies: getCookies$1, getSetCookies: getSetCookies$1, setCookie: setCookie$1 } = require_cookies();
		module.exports.deleteCookie = deleteCookie$1;
		module.exports.getCookies = getCookies$1;
		module.exports.getSetCookies = getSetCookies$1;
		module.exports.setCookie = setCookie$1;
		const { parseMIMEType: parseMIMEType$4, serializeAMimeType: serializeAMimeType$5 } = require_dataURL();
		module.exports.parseMIMEType = parseMIMEType$4;
		module.exports.serializeAMimeType = serializeAMimeType$5;
	}
	if (util$4.nodeMajor >= 18 && hasCrypto) {
		const { WebSocket: WebSocket$1 } = require_websocket();
		module.exports.WebSocket = WebSocket$1;
	}
	module.exports.request = makeDispatcher(api$2.request);
	module.exports.stream = makeDispatcher(api$2.stream);
	module.exports.pipeline = makeDispatcher(api$2.pipeline);
	module.exports.connect = makeDispatcher(api$2.connect);
	module.exports.upgrade = makeDispatcher(api$2.upgrade);
	module.exports.MockClient = MockClient;
	module.exports.MockPool = MockPool;
	module.exports.MockAgent = MockAgent;
	module.exports.mockErrors = mockErrors;
} });

//#endregion
//#region ../node_modules/.pnpm/@actions+http-client@2.2.3/node_modules/@actions/http-client/lib/index.js
var require_lib$2 = __commonJS({ "../node_modules/.pnpm/@actions+http-client@2.2.3/node_modules/@actions/http-client/lib/index.js"(exports) {
	var __createBinding$10 = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
		if (k2 === undefined) k2 = k;
		var desc = Object.getOwnPropertyDescriptor(m, k);
		if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
			enumerable: true,
			get: function() {
				return m[k];
			}
		};
		Object.defineProperty(o, k2, desc);
	} : function(o, m, k, k2) {
		if (k2 === undefined) k2 = k;
		o[k2] = m[k];
	});
	var __setModuleDefault$10 = this && this.__setModuleDefault || (Object.create ? function(o, v) {
		Object.defineProperty(o, "default", {
			enumerable: true,
			value: v
		});
	} : function(o, v) {
		o["default"] = v;
	});
	var __importStar$10 = this && this.__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$10(result, mod, k);
		}
		__setModuleDefault$10(result, mod);
		return result;
	};
	var __awaiter$10 = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P ? value : new P(function(resolve$1) {
				resolve$1(value);
			});
		}
		return new (P || (P = Promise))(function(resolve$1, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve$1(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.HttpClient = exports.isHttps = exports.HttpClientResponse = exports.HttpClientError = exports.getProxyUrl = exports.MediaTypes = exports.Headers = exports.HttpCodes = void 0;
	const http = __importStar$10(require("http"));
	const https = __importStar$10(require("https"));
	const pm = __importStar$10(require_proxy());
	const tunnel = __importStar$10(require_tunnel());
	const undici_1$1 = require_undici();
	var HttpCodes;
	(function(HttpCodes$1) {
		HttpCodes$1[HttpCodes$1["OK"] = 200] = "OK";
		HttpCodes$1[HttpCodes$1["MultipleChoices"] = 300] = "MultipleChoices";
		HttpCodes$1[HttpCodes$1["MovedPermanently"] = 301] = "MovedPermanently";
		HttpCodes$1[HttpCodes$1["ResourceMoved"] = 302] = "ResourceMoved";
		HttpCodes$1[HttpCodes$1["SeeOther"] = 303] = "SeeOther";
		HttpCodes$1[HttpCodes$1["NotModified"] = 304] = "NotModified";
		HttpCodes$1[HttpCodes$1["UseProxy"] = 305] = "UseProxy";
		HttpCodes$1[HttpCodes$1["SwitchProxy"] = 306] = "SwitchProxy";
		HttpCodes$1[HttpCodes$1["TemporaryRedirect"] = 307] = "TemporaryRedirect";
		HttpCodes$1[HttpCodes$1["PermanentRedirect"] = 308] = "PermanentRedirect";
		HttpCodes$1[HttpCodes$1["BadRequest"] = 400] = "BadRequest";
		HttpCodes$1[HttpCodes$1["Unauthorized"] = 401] = "Unauthorized";
		HttpCodes$1[HttpCodes$1["PaymentRequired"] = 402] = "PaymentRequired";
		HttpCodes$1[HttpCodes$1["Forbidden"] = 403] = "Forbidden";
		HttpCodes$1[HttpCodes$1["NotFound"] = 404] = "NotFound";
		HttpCodes$1[HttpCodes$1["MethodNotAllowed"] = 405] = "MethodNotAllowed";
		HttpCodes$1[HttpCodes$1["NotAcceptable"] = 406] = "NotAcceptable";
		HttpCodes$1[HttpCodes$1["ProxyAuthenticationRequired"] = 407] = "ProxyAuthenticationRequired";
		HttpCodes$1[HttpCodes$1["RequestTimeout"] = 408] = "RequestTimeout";
		HttpCodes$1[HttpCodes$1["Conflict"] = 409] = "Conflict";
		HttpCodes$1[HttpCodes$1["Gone"] = 410] = "Gone";
		HttpCodes$1[HttpCodes$1["TooManyRequests"] = 429] = "TooManyRequests";
		HttpCodes$1[HttpCodes$1["InternalServerError"] = 500] = "InternalServerError";
		HttpCodes$1[HttpCodes$1["NotImplemented"] = 501] = "NotImplemented";
		HttpCodes$1[HttpCodes$1["BadGateway"] = 502] = "BadGateway";
		HttpCodes$1[HttpCodes$1["ServiceUnavailable"] = 503] = "ServiceUnavailable";
		HttpCodes$1[HttpCodes$1["GatewayTimeout"] = 504] = "GatewayTimeout";
	})(HttpCodes || (exports.HttpCodes = HttpCodes = {}));
	var Headers;
	(function(Headers$7) {
		Headers$7["Accept"] = "accept";
		Headers$7["ContentType"] = "content-type";
	})(Headers || (exports.Headers = Headers = {}));
	var MediaTypes;
	(function(MediaTypes$1) {
		MediaTypes$1["ApplicationJson"] = "application/json";
	})(MediaTypes || (exports.MediaTypes = MediaTypes = {}));
	/**
	* Returns the proxy URL, depending upon the supplied url and proxy environment variables.
	* @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
	*/
	function getProxyUrl(serverUrl) {
		const proxyUrl = pm.getProxyUrl(new URL(serverUrl));
		return proxyUrl ? proxyUrl.href : "";
	}
	exports.getProxyUrl = getProxyUrl;
	const HttpRedirectCodes = [
		HttpCodes.MovedPermanently,
		HttpCodes.ResourceMoved,
		HttpCodes.SeeOther,
		HttpCodes.TemporaryRedirect,
		HttpCodes.PermanentRedirect
	];
	const HttpResponseRetryCodes = [
		HttpCodes.BadGateway,
		HttpCodes.ServiceUnavailable,
		HttpCodes.GatewayTimeout
	];
	const RetryableHttpVerbs = [
		"OPTIONS",
		"GET",
		"DELETE",
		"HEAD"
	];
	const ExponentialBackoffCeiling = 10;
	const ExponentialBackoffTimeSlice = 5;
	var HttpClientError = class HttpClientError extends Error {
		constructor(message, statusCode) {
			super(message);
			this.name = "HttpClientError";
			this.statusCode = statusCode;
			Object.setPrototypeOf(this, HttpClientError.prototype);
		}
	};
	exports.HttpClientError = HttpClientError;
	var HttpClientResponse = class {
		constructor(message) {
			this.message = message;
		}
		readBody() {
			return __awaiter$10(this, void 0, void 0, function* () {
				return new Promise((resolve$1) => __awaiter$10(this, void 0, void 0, function* () {
					let output = Buffer.alloc(0);
					this.message.on("data", (chunk) => {
						output = Buffer.concat([output, chunk]);
					});
					this.message.on("end", () => {
						resolve$1(output.toString());
					});
				}));
			});
		}
		readBodyBuffer() {
			return __awaiter$10(this, void 0, void 0, function* () {
				return new Promise((resolve$1) => __awaiter$10(this, void 0, void 0, function* () {
					const chunks = [];
					this.message.on("data", (chunk) => {
						chunks.push(chunk);
					});
					this.message.on("end", () => {
						resolve$1(Buffer.concat(chunks));
					});
				}));
			});
		}
	};
	exports.HttpClientResponse = HttpClientResponse;
	function isHttps(requestUrl) {
		const parsedUrl = new URL(requestUrl);
		return parsedUrl.protocol === "https:";
	}
	exports.isHttps = isHttps;
	var HttpClient = class {
		constructor(userAgent$1, handlers, requestOptions) {
			this._ignoreSslError = false;
			this._allowRedirects = true;
			this._allowRedirectDowngrade = false;
			this._maxRedirects = 50;
			this._allowRetries = false;
			this._maxRetries = 1;
			this._keepAlive = false;
			this._disposed = false;
			this.userAgent = userAgent$1;
			this.handlers = handlers || [];
			this.requestOptions = requestOptions;
			if (requestOptions) {
				if (requestOptions.ignoreSslError != null) this._ignoreSslError = requestOptions.ignoreSslError;
				this._socketTimeout = requestOptions.socketTimeout;
				if (requestOptions.allowRedirects != null) this._allowRedirects = requestOptions.allowRedirects;
				if (requestOptions.allowRedirectDowngrade != null) this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;
				if (requestOptions.maxRedirects != null) this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);
				if (requestOptions.keepAlive != null) this._keepAlive = requestOptions.keepAlive;
				if (requestOptions.allowRetries != null) this._allowRetries = requestOptions.allowRetries;
				if (requestOptions.maxRetries != null) this._maxRetries = requestOptions.maxRetries;
			}
		}
		options(requestUrl, additionalHeaders) {
			return __awaiter$10(this, void 0, void 0, function* () {
				return this.request("OPTIONS", requestUrl, null, additionalHeaders || {});
			});
		}
		get(requestUrl, additionalHeaders) {
			return __awaiter$10(this, void 0, void 0, function* () {
				return this.request("GET", requestUrl, null, additionalHeaders || {});
			});
		}
		del(requestUrl, additionalHeaders) {
			return __awaiter$10(this, void 0, void 0, function* () {
				return this.request("DELETE", requestUrl, null, additionalHeaders || {});
			});
		}
		post(requestUrl, data, additionalHeaders) {
			return __awaiter$10(this, void 0, void 0, function* () {
				return this.request("POST", requestUrl, data, additionalHeaders || {});
			});
		}
		patch(requestUrl, data, additionalHeaders) {
			return __awaiter$10(this, void 0, void 0, function* () {
				return this.request("PATCH", requestUrl, data, additionalHeaders || {});
			});
		}
		put(requestUrl, data, additionalHeaders) {
			return __awaiter$10(this, void 0, void 0, function* () {
				return this.request("PUT", requestUrl, data, additionalHeaders || {});
			});
		}
		head(requestUrl, additionalHeaders) {
			return __awaiter$10(this, void 0, void 0, function* () {
				return this.request("HEAD", requestUrl, null, additionalHeaders || {});
			});
		}
		sendStream(verb, requestUrl, stream$3, additionalHeaders) {
			return __awaiter$10(this, void 0, void 0, function* () {
				return this.request(verb, requestUrl, stream$3, additionalHeaders);
			});
		}
		/**
		* Gets a typed object from an endpoint
		* Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise
		*/
		getJson(requestUrl, additionalHeaders = {}) {
			return __awaiter$10(this, void 0, void 0, function* () {
				additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
				const res = yield this.get(requestUrl, additionalHeaders);
				return this._processResponse(res, this.requestOptions);
			});
		}
		postJson(requestUrl, obj, additionalHeaders = {}) {
			return __awaiter$10(this, void 0, void 0, function* () {
				const data = JSON.stringify(obj, null, 2);
				additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
				additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
				const res = yield this.post(requestUrl, data, additionalHeaders);
				return this._processResponse(res, this.requestOptions);
			});
		}
		putJson(requestUrl, obj, additionalHeaders = {}) {
			return __awaiter$10(this, void 0, void 0, function* () {
				const data = JSON.stringify(obj, null, 2);
				additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
				additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
				const res = yield this.put(requestUrl, data, additionalHeaders);
				return this._processResponse(res, this.requestOptions);
			});
		}
		patchJson(requestUrl, obj, additionalHeaders = {}) {
			return __awaiter$10(this, void 0, void 0, function* () {
				const data = JSON.stringify(obj, null, 2);
				additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
				additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
				const res = yield this.patch(requestUrl, data, additionalHeaders);
				return this._processResponse(res, this.requestOptions);
			});
		}
		/**
		* Makes a raw http request.
		* All other methods such as get, post, patch, and request ultimately call this.
		* Prefer get, del, post and patch
		*/
		request(verb, requestUrl, data, headers) {
			return __awaiter$10(this, void 0, void 0, function* () {
				if (this._disposed) throw new Error("Client has already been disposed.");
				const parsedUrl = new URL(requestUrl);
				let info$2 = this._prepareRequest(verb, parsedUrl, headers);
				const maxTries = this._allowRetries && RetryableHttpVerbs.includes(verb) ? this._maxRetries + 1 : 1;
				let numTries = 0;
				let response;
				do {
					response = yield this.requestRaw(info$2, data);
					if (response && response.message && response.message.statusCode === HttpCodes.Unauthorized) {
						let authenticationHandler;
						for (const handler$1 of this.handlers) if (handler$1.canHandleAuthentication(response)) {
							authenticationHandler = handler$1;
							break;
						}
						if (authenticationHandler) return authenticationHandler.handleAuthentication(this, info$2, data);
else return response;
					}
					let redirectsRemaining = this._maxRedirects;
					while (response.message.statusCode && HttpRedirectCodes.includes(response.message.statusCode) && this._allowRedirects && redirectsRemaining > 0) {
						const redirectUrl = response.message.headers["location"];
						if (!redirectUrl) break;
						const parsedRedirectUrl = new URL(redirectUrl);
						if (parsedUrl.protocol === "https:" && parsedUrl.protocol !== parsedRedirectUrl.protocol && !this._allowRedirectDowngrade) throw new Error("Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.");
						yield response.readBody();
						if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {
							for (const header in headers) if (header.toLowerCase() === "authorization") delete headers[header];
						}
						info$2 = this._prepareRequest(verb, parsedRedirectUrl, headers);
						response = yield this.requestRaw(info$2, data);
						redirectsRemaining--;
					}
					if (!response.message.statusCode || !HttpResponseRetryCodes.includes(response.message.statusCode)) return response;
					numTries += 1;
					if (numTries < maxTries) {
						yield response.readBody();
						yield this._performExponentialBackoff(numTries);
					}
				} while (numTries < maxTries);
				return response;
			});
		}
		/**
		* Needs to be called if keepAlive is set to true in request options.
		*/
		dispose() {
			if (this._agent) this._agent.destroy();
			this._disposed = true;
		}
		/**
		* Raw request.
		* @param info
		* @param data
		*/
		requestRaw(info$2, data) {
			return __awaiter$10(this, void 0, void 0, function* () {
				return new Promise((resolve$1, reject) => {
					function callbackForResult(err, res) {
						if (err) reject(err);
else if (!res) reject(new Error("Unknown error"));
else resolve$1(res);
					}
					this.requestRawWithCallback(info$2, data, callbackForResult);
				});
			});
		}
		/**
		* Raw request with callback.
		* @param info
		* @param data
		* @param onResult
		*/
		requestRawWithCallback(info$2, data, onResult) {
			if (typeof data === "string") {
				if (!info$2.options.headers) info$2.options.headers = {};
				info$2.options.headers["Content-Length"] = Buffer.byteLength(data, "utf8");
			}
			let callbackCalled = false;
			function handleResult(err, res) {
				if (!callbackCalled) {
					callbackCalled = true;
					onResult(err, res);
				}
			}
			const req = info$2.httpModule.request(info$2.options, (msg) => {
				const res = new HttpClientResponse(msg);
				handleResult(undefined, res);
			});
			let socket;
			req.on("socket", (sock) => {
				socket = sock;
			});
			req.setTimeout(this._socketTimeout || 18e4, () => {
				if (socket) socket.end();
				handleResult(new Error(`Request timeout: ${info$2.options.path}`));
			});
			req.on("error", function(err) {
				handleResult(err);
			});
			if (data && typeof data === "string") req.write(data, "utf8");
			if (data && typeof data !== "string") {
				data.on("close", function() {
					req.end();
				});
				data.pipe(req);
			} else req.end();
		}
		/**
		* Gets an http agent. This function is useful when you need an http agent that handles
		* routing through a proxy server - depending upon the url and proxy environment variables.
		* @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
		*/
		getAgent(serverUrl) {
			const parsedUrl = new URL(serverUrl);
			return this._getAgent(parsedUrl);
		}
		getAgentDispatcher(serverUrl) {
			const parsedUrl = new URL(serverUrl);
			const proxyUrl = pm.getProxyUrl(parsedUrl);
			const useProxy = proxyUrl && proxyUrl.hostname;
			if (!useProxy) return;
			return this._getProxyAgentDispatcher(parsedUrl, proxyUrl);
		}
		_prepareRequest(method, requestUrl, headers) {
			const info$2 = {};
			info$2.parsedUrl = requestUrl;
			const usingSsl = info$2.parsedUrl.protocol === "https:";
			info$2.httpModule = usingSsl ? https : http;
			const defaultPort = usingSsl ? 443 : 80;
			info$2.options = {};
			info$2.options.host = info$2.parsedUrl.hostname;
			info$2.options.port = info$2.parsedUrl.port ? parseInt(info$2.parsedUrl.port) : defaultPort;
			info$2.options.path = (info$2.parsedUrl.pathname || "") + (info$2.parsedUrl.search || "");
			info$2.options.method = method;
			info$2.options.headers = this._mergeHeaders(headers);
			if (this.userAgent != null) info$2.options.headers["user-agent"] = this.userAgent;
			info$2.options.agent = this._getAgent(info$2.parsedUrl);
			if (this.handlers) for (const handler$1 of this.handlers) handler$1.prepareRequest(info$2.options);
			return info$2;
		}
		_mergeHeaders(headers) {
			if (this.requestOptions && this.requestOptions.headers) return Object.assign({}, lowercaseKeys$1(this.requestOptions.headers), lowercaseKeys$1(headers || {}));
			return lowercaseKeys$1(headers || {});
		}
		_getExistingOrDefaultHeader(additionalHeaders, header, _default) {
			let clientHeader;
			if (this.requestOptions && this.requestOptions.headers) clientHeader = lowercaseKeys$1(this.requestOptions.headers)[header];
			return additionalHeaders[header] || clientHeader || _default;
		}
		_getAgent(parsedUrl) {
			let agent;
			const proxyUrl = pm.getProxyUrl(parsedUrl);
			const useProxy = proxyUrl && proxyUrl.hostname;
			if (this._keepAlive && useProxy) agent = this._proxyAgent;
			if (!useProxy) agent = this._agent;
			if (agent) return agent;
			const usingSsl = parsedUrl.protocol === "https:";
			let maxSockets = 100;
			if (this.requestOptions) maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;
			if (proxyUrl && proxyUrl.hostname) {
				const agentOptions = {
					maxSockets,
					keepAlive: this._keepAlive,
					proxy: Object.assign(Object.assign({}, (proxyUrl.username || proxyUrl.password) && { proxyAuth: `${proxyUrl.username}:${proxyUrl.password}` }), {
						host: proxyUrl.hostname,
						port: proxyUrl.port
					})
				};
				let tunnelAgent;
				const overHttps = proxyUrl.protocol === "https:";
				if (usingSsl) tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;
else tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;
				agent = tunnelAgent(agentOptions);
				this._proxyAgent = agent;
			}
			if (!agent) {
				const options = {
					keepAlive: this._keepAlive,
					maxSockets
				};
				agent = usingSsl ? new https.Agent(options) : new http.Agent(options);
				this._agent = agent;
			}
			if (usingSsl && this._ignoreSslError) agent.options = Object.assign(agent.options || {}, { rejectUnauthorized: false });
			return agent;
		}
		_getProxyAgentDispatcher(parsedUrl, proxyUrl) {
			let proxyAgent;
			if (this._keepAlive) proxyAgent = this._proxyAgentDispatcher;
			if (proxyAgent) return proxyAgent;
			const usingSsl = parsedUrl.protocol === "https:";
			proxyAgent = new undici_1$1.ProxyAgent(Object.assign({
				uri: proxyUrl.href,
				pipelining: !this._keepAlive ? 0 : 1
			}, (proxyUrl.username || proxyUrl.password) && { token: `Basic ${Buffer.from(`${proxyUrl.username}:${proxyUrl.password}`).toString("base64")}` }));
			this._proxyAgentDispatcher = proxyAgent;
			if (usingSsl && this._ignoreSslError) proxyAgent.options = Object.assign(proxyAgent.options.requestTls || {}, { rejectUnauthorized: false });
			return proxyAgent;
		}
		_performExponentialBackoff(retryNumber) {
			return __awaiter$10(this, void 0, void 0, function* () {
				retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);
				const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);
				return new Promise((resolve$1) => setTimeout(() => resolve$1(), ms));
			});
		}
		_processResponse(res, options) {
			return __awaiter$10(this, void 0, void 0, function* () {
				return new Promise((resolve$1, reject) => __awaiter$10(this, void 0, void 0, function* () {
					const statusCode = res.message.statusCode || 0;
					const response = {
						statusCode,
						result: null,
						headers: {}
					};
					if (statusCode === HttpCodes.NotFound) resolve$1(response);
					function dateTimeDeserializer(key, value) {
						if (typeof value === "string") {
							const a = new Date(value);
							if (!isNaN(a.valueOf())) return a;
						}
						return value;
					}
					let obj;
					let contents;
					try {
						contents = yield res.readBody();
						if (contents && contents.length > 0) {
							if (options && options.deserializeDates) obj = JSON.parse(contents, dateTimeDeserializer);
else obj = JSON.parse(contents);
							response.result = obj;
						}
						response.headers = res.message.headers;
					} catch (err) {}
					if (statusCode > 299) {
						let msg;
						if (obj && obj.message) msg = obj.message;
else if (contents && contents.length > 0) msg = contents;
else msg = `Failed request: (${statusCode})`;
						const err = new HttpClientError(msg, statusCode);
						err.result = response.result;
						reject(err);
					} else resolve$1(response);
				}));
			});
		}
	};
	exports.HttpClient = HttpClient;
	const lowercaseKeys$1 = (obj) => Object.keys(obj).reduce((c, k) => (c[k.toLowerCase()] = obj[k], c), {});
} });

//#endregion
//#region ../node_modules/.pnpm/@actions+http-client@2.2.3/node_modules/@actions/http-client/lib/auth.js
var require_auth = __commonJS({ "../node_modules/.pnpm/@actions+http-client@2.2.3/node_modules/@actions/http-client/lib/auth.js"(exports) {
	var __awaiter$9 = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P ? value : new P(function(resolve$1) {
				resolve$1(value);
			});
		}
		return new (P || (P = Promise))(function(resolve$1, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve$1(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.PersonalAccessTokenCredentialHandler = exports.BearerCredentialHandler = exports.BasicCredentialHandler = void 0;
	var BasicCredentialHandler = class {
		constructor(username, password) {
			this.username = username;
			this.password = password;
		}
		prepareRequest(options) {
			if (!options.headers) throw Error("The request has no headers");
			options.headers["Authorization"] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString("base64")}`;
		}
		canHandleAuthentication() {
			return false;
		}
		handleAuthentication() {
			return __awaiter$9(this, void 0, void 0, function* () {
				throw new Error("not implemented");
			});
		}
	};
	exports.BasicCredentialHandler = BasicCredentialHandler;
	var BearerCredentialHandler = class {
		constructor(token) {
			this.token = token;
		}
		prepareRequest(options) {
			if (!options.headers) throw Error("The request has no headers");
			options.headers["Authorization"] = `Bearer ${this.token}`;
		}
		canHandleAuthentication() {
			return false;
		}
		handleAuthentication() {
			return __awaiter$9(this, void 0, void 0, function* () {
				throw new Error("not implemented");
			});
		}
	};
	exports.BearerCredentialHandler = BearerCredentialHandler;
	var PersonalAccessTokenCredentialHandler = class {
		constructor(token) {
			this.token = token;
		}
		prepareRequest(options) {
			if (!options.headers) throw Error("The request has no headers");
			options.headers["Authorization"] = `Basic ${Buffer.from(`PAT:${this.token}`).toString("base64")}`;
		}
		canHandleAuthentication() {
			return false;
		}
		handleAuthentication() {
			return __awaiter$9(this, void 0, void 0, function* () {
				throw new Error("not implemented");
			});
		}
	};
	exports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;
} });

//#endregion
//#region ../node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/oidc-utils.js
var require_oidc_utils = __commonJS({ "../node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/oidc-utils.js"(exports) {
	var __awaiter$8 = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P ? value : new P(function(resolve$1) {
				resolve$1(value);
			});
		}
		return new (P || (P = Promise))(function(resolve$1, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve$1(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.OidcClient = void 0;
	const http_client_1 = require_lib$2();
	const auth_1 = require_auth();
	const core_1$1 = require_core$2();
	var OidcClient = class OidcClient {
		static createHttpClient(allowRetry = true, maxRetry = 10) {
			const requestOptions = {
				allowRetries: allowRetry,
				maxRetries: maxRetry
			};
			return new http_client_1.HttpClient("actions/oidc-client", [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())], requestOptions);
		}
		static getRequestToken() {
			const token = process.env["ACTIONS_ID_TOKEN_REQUEST_TOKEN"];
			if (!token) throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable");
			return token;
		}
		static getIDTokenUrl() {
			const runtimeUrl = process.env["ACTIONS_ID_TOKEN_REQUEST_URL"];
			if (!runtimeUrl) throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable");
			return runtimeUrl;
		}
		static getCall(id_token_url) {
			var _a$2;
			return __awaiter$8(this, void 0, void 0, function* () {
				const httpclient = OidcClient.createHttpClient();
				const res = yield httpclient.getJson(id_token_url).catch((error$2) => {
					throw new Error(`Failed to get ID Token. \n 
        Error Code : ${error$2.statusCode}\n 
        Error Message: ${error$2.message}`);
				});
				const id_token = (_a$2 = res.result) === null || _a$2 === void 0 ? void 0 : _a$2.value;
				if (!id_token) throw new Error("Response json body do not have ID Token field");
				return id_token;
			});
		}
		static getIDToken(audience) {
			return __awaiter$8(this, void 0, void 0, function* () {
				try {
					let id_token_url = OidcClient.getIDTokenUrl();
					if (audience) {
						const encodedAudience = encodeURIComponent(audience);
						id_token_url = `${id_token_url}&audience=${encodedAudience}`;
					}
					(0, core_1$1.debug)(`ID token url is ${id_token_url}`);
					const id_token = yield OidcClient.getCall(id_token_url);
					(0, core_1$1.setSecret)(id_token);
					return id_token;
				} catch (error$2) {
					throw new Error(`Error message: ${error$2.message}`);
				}
			});
		}
	};
	exports.OidcClient = OidcClient;
} });

//#endregion
//#region ../node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/summary.js
var require_summary = __commonJS({ "../node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/summary.js"(exports) {
	var __awaiter$7 = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P ? value : new P(function(resolve$1) {
				resolve$1(value);
			});
		}
		return new (P || (P = Promise))(function(resolve$1, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve$1(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.summary = exports.markdownSummary = exports.SUMMARY_DOCS_URL = exports.SUMMARY_ENV_VAR = void 0;
	const os_1$2 = require("os");
	const fs_1$1 = require("fs");
	const { access, appendFile, writeFile: writeFile$2 } = fs_1$1.promises;
	exports.SUMMARY_ENV_VAR = "GITHUB_STEP_SUMMARY";
	exports.SUMMARY_DOCS_URL = "https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary";
	var Summary = class {
		constructor() {
			this._buffer = "";
		}
		/**
		* Finds the summary file path from the environment, rejects if env var is not found or file does not exist
		* Also checks r/w permissions.
		*
		* @returns step summary file path
		*/
		filePath() {
			return __awaiter$7(this, void 0, void 0, function* () {
				if (this._filePath) return this._filePath;
				const pathFromEnv = process.env[exports.SUMMARY_ENV_VAR];
				if (!pathFromEnv) throw new Error(`Unable to find environment variable for $${exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);
				try {
					yield access(pathFromEnv, fs_1$1.constants.R_OK | fs_1$1.constants.W_OK);
				} catch (_a$2) {
					throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);
				}
				this._filePath = pathFromEnv;
				return this._filePath;
			});
		}
		/**
		* Wraps content in an HTML tag, adding any HTML attributes
		*
		* @param {string} tag HTML tag to wrap
		* @param {string | null} content content within the tag
		* @param {[attribute: string]: string} attrs key-value list of HTML attributes to add
		*
		* @returns {string} content wrapped in HTML element
		*/
		wrap(tag$2, content$2, attrs = {}) {
			const htmlAttrs = Object.entries(attrs).map(([key, value]) => ` ${key}="${value}"`).join("");
			if (!content$2) return `<${tag$2}${htmlAttrs}>`;
			return `<${tag$2}${htmlAttrs}>${content$2}</${tag$2}>`;
		}
		/**
		* Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.
		*
		* @param {SummaryWriteOptions} [options] (optional) options for write operation
		*
		* @returns {Promise<Summary>} summary instance
		*/
		write(options) {
			return __awaiter$7(this, void 0, void 0, function* () {
				const overwrite = !!(options === null || options === void 0 ? void 0 : options.overwrite);
				const filePath = yield this.filePath();
				const writeFunc = overwrite ? writeFile$2 : appendFile;
				yield writeFunc(filePath, this._buffer, { encoding: "utf8" });
				return this.emptyBuffer();
			});
		}
		/**
		* Clears the summary buffer and wipes the summary file
		*
		* @returns {Summary} summary instance
		*/
		clear() {
			return __awaiter$7(this, void 0, void 0, function* () {
				return this.emptyBuffer().write({ overwrite: true });
			});
		}
		/**
		* Returns the current summary buffer as a string
		*
		* @returns {string} string of summary buffer
		*/
		stringify() {
			return this._buffer;
		}
		/**
		* If the summary buffer is empty
		*
		* @returns {boolen} true if the buffer is empty
		*/
		isEmptyBuffer() {
			return this._buffer.length === 0;
		}
		/**
		* Resets the summary buffer without writing to summary file
		*
		* @returns {Summary} summary instance
		*/
		emptyBuffer() {
			this._buffer = "";
			return this;
		}
		/**
		* Adds raw text to the summary buffer
		*
		* @param {string} text content to add
		* @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)
		*
		* @returns {Summary} summary instance
		*/
		addRaw(text$3, addEOL = false) {
			this._buffer += text$3;
			return addEOL ? this.addEOL() : this;
		}
		/**
		* Adds the operating system-specific end-of-line marker to the buffer
		*
		* @returns {Summary} summary instance
		*/
		addEOL() {
			return this.addRaw(os_1$2.EOL);
		}
		/**
		* Adds an HTML codeblock to the summary buffer
		*
		* @param {string} code content to render within fenced code block
		* @param {string} lang (optional) language to syntax highlight code
		*
		* @returns {Summary} summary instance
		*/
		addCodeBlock(code$1, lang) {
			const attrs = Object.assign({}, lang && { lang });
			const element = this.wrap("pre", this.wrap("code", code$1), attrs);
			return this.addRaw(element).addEOL();
		}
		/**
		* Adds an HTML list to the summary buffer
		*
		* @param {string[]} items list of items to render
		* @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)
		*
		* @returns {Summary} summary instance
		*/
		addList(items, ordered = false) {
			const tag$2 = ordered ? "ol" : "ul";
			const listItems = items.map((item) => this.wrap("li", item)).join("");
			const element = this.wrap(tag$2, listItems);
			return this.addRaw(element).addEOL();
		}
		/**
		* Adds an HTML table to the summary buffer
		*
		* @param {SummaryTableCell[]} rows table rows
		*
		* @returns {Summary} summary instance
		*/
		addTable(rows) {
			const tableBody = rows.map((row) => {
				const cells = row.map((cell) => {
					if (typeof cell === "string") return this.wrap("td", cell);
					const { header, data, colspan, rowspan } = cell;
					const tag$2 = header ? "th" : "td";
					const attrs = Object.assign(Object.assign({}, colspan && { colspan }), rowspan && { rowspan });
					return this.wrap(tag$2, data, attrs);
				}).join("");
				return this.wrap("tr", cells);
			}).join("");
			const element = this.wrap("table", tableBody);
			return this.addRaw(element).addEOL();
		}
		/**
		* Adds a collapsable HTML details element to the summary buffer
		*
		* @param {string} label text for the closed state
		* @param {string} content collapsable content
		*
		* @returns {Summary} summary instance
		*/
		addDetails(label, content$2) {
			const element = this.wrap("details", this.wrap("summary", label) + content$2);
			return this.addRaw(element).addEOL();
		}
		/**
		* Adds an HTML image tag to the summary buffer
		*
		* @param {string} src path to the image you to embed
		* @param {string} alt text description of the image
		* @param {SummaryImageOptions} options (optional) addition image attributes
		*
		* @returns {Summary} summary instance
		*/
		addImage(src$1, alt, options) {
			const { width, height } = options || {};
			const attrs = Object.assign(Object.assign({}, width && { width }), height && { height });
			const element = this.wrap("img", null, Object.assign({
				src: src$1,
				alt
			}, attrs));
			return this.addRaw(element).addEOL();
		}
		/**
		* Adds an HTML section heading element
		*
		* @param {string} text heading text
		* @param {number | string} [level=1] (optional) the heading level, default: 1
		*
		* @returns {Summary} summary instance
		*/
		addHeading(text$3, level) {
			const tag$2 = `h${level}`;
			const allowedTag = [
				"h1",
				"h2",
				"h3",
				"h4",
				"h5",
				"h6"
			].includes(tag$2) ? tag$2 : "h1";
			const element = this.wrap(allowedTag, text$3);
			return this.addRaw(element).addEOL();
		}
		/**
		* Adds an HTML thematic break (<hr>) to the summary buffer
		*
		* @returns {Summary} summary instance
		*/
		addSeparator() {
			const element = this.wrap("hr", null);
			return this.addRaw(element).addEOL();
		}
		/**
		* Adds an HTML line break (<br>) to the summary buffer
		*
		* @returns {Summary} summary instance
		*/
		addBreak() {
			const element = this.wrap("br", null);
			return this.addRaw(element).addEOL();
		}
		/**
		* Adds an HTML blockquote to the summary buffer
		*
		* @param {string} text quote text
		* @param {string} cite (optional) citation url
		*
		* @returns {Summary} summary instance
		*/
		addQuote(text$3, cite) {
			const attrs = Object.assign({}, cite && { cite });
			const element = this.wrap("blockquote", text$3, attrs);
			return this.addRaw(element).addEOL();
		}
		/**
		* Adds an HTML anchor tag to the summary buffer
		*
		* @param {string} text link text/content
		* @param {string} href hyperlink
		*
		* @returns {Summary} summary instance
		*/
		addLink(text$3, href) {
			const element = this.wrap("a", text$3, { href });
			return this.addRaw(element).addEOL();
		}
	};
	const _summary = new Summary();
	/**
	* @deprecated use `core.summary`
	*/
	exports.markdownSummary = _summary;
	exports.summary = _summary;
} });

//#endregion
//#region ../node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/path-utils.js
var require_path_utils = __commonJS({ "../node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/path-utils.js"(exports) {
	var __createBinding$9 = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
		if (k2 === undefined) k2 = k;
		var desc = Object.getOwnPropertyDescriptor(m, k);
		if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
			enumerable: true,
			get: function() {
				return m[k];
			}
		};
		Object.defineProperty(o, k2, desc);
	} : function(o, m, k, k2) {
		if (k2 === undefined) k2 = k;
		o[k2] = m[k];
	});
	var __setModuleDefault$9 = this && this.__setModuleDefault || (Object.create ? function(o, v) {
		Object.defineProperty(o, "default", {
			enumerable: true,
			value: v
		});
	} : function(o, v) {
		o["default"] = v;
	});
	var __importStar$9 = this && this.__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$9(result, mod, k);
		}
		__setModuleDefault$9(result, mod);
		return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = void 0;
	const path$71 = __importStar$9(require("path"));
	/**
	* toPosixPath converts the given path to the posix form. On Windows, \\ will be
	* replaced with /.
	*
	* @param pth. Path to transform.
	* @return string Posix path.
	*/
	function toPosixPath(pth) {
		return pth.replace(/[\\]/g, "/");
	}
	exports.toPosixPath = toPosixPath;
	/**
	* toWin32Path converts the given path to the win32 form. On Linux, / will be
	* replaced with \\.
	*
	* @param pth. Path to transform.
	* @return string Win32 path.
	*/
	function toWin32Path(pth) {
		return pth.replace(/[/]/g, "\\");
	}
	exports.toWin32Path = toWin32Path;
	/**
	* toPlatformPath converts the given path to a platform-specific path. It does
	* this by replacing instances of / and \ with the platform-specific path
	* separator.
	*
	* @param pth The path to platformize.
	* @return string The platform-specific path.
	*/
	function toPlatformPath(pth) {
		return pth.replace(/[/\\]/g, path$71.sep);
	}
	exports.toPlatformPath = toPlatformPath;
} });

//#endregion
//#region ../node_modules/.pnpm/@actions+io@1.1.3/node_modules/@actions/io/lib/io-util.js
var require_io_util = __commonJS({ "../node_modules/.pnpm/@actions+io@1.1.3/node_modules/@actions/io/lib/io-util.js"(exports) {
	var __createBinding$8 = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
		if (k2 === undefined) k2 = k;
		Object.defineProperty(o, k2, {
			enumerable: true,
			get: function() {
				return m[k];
			}
		});
	} : function(o, m, k, k2) {
		if (k2 === undefined) k2 = k;
		o[k2] = m[k];
	});
	var __setModuleDefault$8 = this && this.__setModuleDefault || (Object.create ? function(o, v) {
		Object.defineProperty(o, "default", {
			enumerable: true,
			value: v
		});
	} : function(o, v) {
		o["default"] = v;
	});
	var __importStar$8 = this && this.__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding$8(result, mod, k);
		}
		__setModuleDefault$8(result, mod);
		return result;
	};
	var __awaiter$6 = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P ? value : new P(function(resolve$1) {
				resolve$1(value);
			});
		}
		return new (P || (P = Promise))(function(resolve$1, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve$1(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	var _a$1;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getCmdPath = exports.tryGetExecutablePath = exports.isRooted = exports.isDirectory = exports.exists = exports.READONLY = exports.UV_FS_O_EXLOCK = exports.IS_WINDOWS = exports.unlink = exports.symlink = exports.stat = exports.rmdir = exports.rm = exports.rename = exports.readlink = exports.readdir = exports.open = exports.mkdir = exports.lstat = exports.copyFile = exports.chmod = void 0;
	const fs$68 = __importStar$8(require("fs"));
	const path$70 = __importStar$8(require("path"));
	_a$1 = fs$68.promises, exports.chmod = _a$1.chmod, exports.copyFile = _a$1.copyFile, exports.lstat = _a$1.lstat, exports.mkdir = _a$1.mkdir, exports.open = _a$1.open, exports.readdir = _a$1.readdir, exports.readlink = _a$1.readlink, exports.rename = _a$1.rename, exports.rm = _a$1.rm, exports.rmdir = _a$1.rmdir, exports.stat = _a$1.stat, exports.symlink = _a$1.symlink, exports.unlink = _a$1.unlink;
	exports.IS_WINDOWS = process.platform === "win32";
	exports.UV_FS_O_EXLOCK = 268435456;
	exports.READONLY = fs$68.constants.O_RDONLY;
	function exists(fsPath) {
		return __awaiter$6(this, void 0, void 0, function* () {
			try {
				yield exports.stat(fsPath);
			} catch (err) {
				if (err.code === "ENOENT") return false;
				throw err;
			}
			return true;
		});
	}
	exports.exists = exists;
	function isDirectory(fsPath, useStat = false) {
		return __awaiter$6(this, void 0, void 0, function* () {
			const stats = useStat ? yield exports.stat(fsPath) : yield exports.lstat(fsPath);
			return stats.isDirectory();
		});
	}
	exports.isDirectory = isDirectory;
	/**
	* On OSX/Linux, true if path starts with '/'. On Windows, true for paths like:
	* \, \hello, \\hello\share, C:, and C:\hello (and corresponding alternate separator cases).
	*/
	function isRooted(p) {
		p = normalizeSeparators(p);
		if (!p) throw new Error("isRooted() parameter \"p\" cannot be empty");
		if (exports.IS_WINDOWS) return p.startsWith("\\") || /^[A-Z]:/i.test(p);
		return p.startsWith("/");
	}
	exports.isRooted = isRooted;
	/**
	* Best effort attempt to determine whether a file exists and is executable.
	* @param filePath    file path to check
	* @param extensions  additional file extensions to try
	* @return if file exists and is executable, returns the file path. otherwise empty string.
	*/
	function tryGetExecutablePath(filePath, extensions) {
		return __awaiter$6(this, void 0, void 0, function* () {
			let stats = undefined;
			try {
				stats = yield exports.stat(filePath);
			} catch (err) {
				if (err.code !== "ENOENT") console.log(`Unexpected error attempting to determine if executable file exists '${filePath}': ${err}`);
			}
			if (stats && stats.isFile()) {
				if (exports.IS_WINDOWS) {
					const upperExt = path$70.extname(filePath).toUpperCase();
					if (extensions.some((validExt) => validExt.toUpperCase() === upperExt)) return filePath;
				} else if (isUnixExecutable(stats)) return filePath;
			}
			const originalFilePath = filePath;
			for (const extension$1 of extensions) {
				filePath = originalFilePath + extension$1;
				stats = undefined;
				try {
					stats = yield exports.stat(filePath);
				} catch (err) {
					if (err.code !== "ENOENT") console.log(`Unexpected error attempting to determine if executable file exists '${filePath}': ${err}`);
				}
				if (stats && stats.isFile()) {
					if (exports.IS_WINDOWS) {
						try {
							const directory = path$70.dirname(filePath);
							const upperName = path$70.basename(filePath).toUpperCase();
							for (const actualName of yield exports.readdir(directory)) if (upperName === actualName.toUpperCase()) {
								filePath = path$70.join(directory, actualName);
								break;
							}
						} catch (err) {
							console.log(`Unexpected error attempting to determine the actual case of the file '${filePath}': ${err}`);
						}
						return filePath;
					} else if (isUnixExecutable(stats)) return filePath;
				}
			}
			return "";
		});
	}
	exports.tryGetExecutablePath = tryGetExecutablePath;
	function normalizeSeparators(p) {
		p = p || "";
		if (exports.IS_WINDOWS) {
			p = p.replace(/\//g, "\\");
			return p.replace(/\\\\+/g, "\\");
		}
		return p.replace(/\/\/+/g, "/");
	}
	function isUnixExecutable(stats) {
		return (stats.mode & 1) > 0 || (stats.mode & 8) > 0 && stats.gid === process.getgid() || (stats.mode & 64) > 0 && stats.uid === process.getuid();
	}
	function getCmdPath() {
		var _a$2;
		return (_a$2 = process.env["COMSPEC"]) !== null && _a$2 !== void 0 ? _a$2 : `cmd.exe`;
	}
	exports.getCmdPath = getCmdPath;
} });

//#endregion
//#region ../node_modules/.pnpm/@actions+io@1.1.3/node_modules/@actions/io/lib/io.js
var require_io = __commonJS({ "../node_modules/.pnpm/@actions+io@1.1.3/node_modules/@actions/io/lib/io.js"(exports) {
	var __createBinding$7 = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
		if (k2 === undefined) k2 = k;
		Object.defineProperty(o, k2, {
			enumerable: true,
			get: function() {
				return m[k];
			}
		});
	} : function(o, m, k, k2) {
		if (k2 === undefined) k2 = k;
		o[k2] = m[k];
	});
	var __setModuleDefault$7 = this && this.__setModuleDefault || (Object.create ? function(o, v) {
		Object.defineProperty(o, "default", {
			enumerable: true,
			value: v
		});
	} : function(o, v) {
		o["default"] = v;
	});
	var __importStar$7 = this && this.__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding$7(result, mod, k);
		}
		__setModuleDefault$7(result, mod);
		return result;
	};
	var __awaiter$5 = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P ? value : new P(function(resolve$1) {
				resolve$1(value);
			});
		}
		return new (P || (P = Promise))(function(resolve$1, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve$1(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.findInPath = exports.which = exports.mkdirP = exports.rmRF = exports.mv = exports.cp = void 0;
	const assert_1 = require("assert");
	const path$69 = __importStar$7(require("path"));
	const ioUtil$1 = __importStar$7(require_io_util());
	/**
	* Copies a file or folder.
	* Based off of shelljs - https://github.com/shelljs/shelljs/blob/9237f66c52e5daa40458f94f9565e18e8132f5a6/src/cp.js
	*
	* @param     source    source path
	* @param     dest      destination path
	* @param     options   optional. See CopyOptions.
	*/
	function cp$1(source, dest, options = {}) {
		return __awaiter$5(this, void 0, void 0, function* () {
			const { force, recursive, copySourceDirectory } = readCopyOptions(options);
			const destStat = (yield ioUtil$1.exists(dest)) ? yield ioUtil$1.stat(dest) : null;
			if (destStat && destStat.isFile() && !force) return;
			const newDest = destStat && destStat.isDirectory() && copySourceDirectory ? path$69.join(dest, path$69.basename(source)) : dest;
			if (!(yield ioUtil$1.exists(source))) throw new Error(`no such file or directory: ${source}`);
			const sourceStat = yield ioUtil$1.stat(source);
			if (sourceStat.isDirectory()) if (!recursive) throw new Error(`Failed to copy. ${source} is a directory, but tried to copy without recursive flag.`);
else yield cpDirRecursive(source, newDest, 0, force);
else {
				if (path$69.relative(source, newDest) === "") throw new Error(`'${newDest}' and '${source}' are the same file`);
				yield copyFile$4(source, newDest, force);
			}
		});
	}
	exports.cp = cp$1;
	/**
	* Moves a path.
	*
	* @param     source    source path
	* @param     dest      destination path
	* @param     options   optional. See MoveOptions.
	*/
	function mv(source, dest, options = {}) {
		return __awaiter$5(this, void 0, void 0, function* () {
			if (yield ioUtil$1.exists(dest)) {
				let destExists = true;
				if (yield ioUtil$1.isDirectory(dest)) {
					dest = path$69.join(dest, path$69.basename(source));
					destExists = yield ioUtil$1.exists(dest);
				}
				if (destExists) if (options.force == null || options.force) yield rmRF(dest);
else throw new Error("Destination already exists");
			}
			yield mkdirP(path$69.dirname(dest));
			yield ioUtil$1.rename(source, dest);
		});
	}
	exports.mv = mv;
	/**
	* Remove a path recursively with force
	*
	* @param inputPath path to remove
	*/
	function rmRF(inputPath) {
		return __awaiter$5(this, void 0, void 0, function* () {
			if (ioUtil$1.IS_WINDOWS) {
				if (/[*"<>|]/.test(inputPath)) throw new Error("File path must not contain `*`, `\"`, `<`, `>` or `|` on Windows");
			}
			try {
				yield ioUtil$1.rm(inputPath, {
					force: true,
					maxRetries: 3,
					recursive: true,
					retryDelay: 300
				});
			} catch (err) {
				throw new Error(`File was unable to be removed ${err}`);
			}
		});
	}
	exports.rmRF = rmRF;
	/**
	* Make a directory.  Creates the full path with folders in between
	* Will throw if it fails
	*
	* @param   fsPath        path to create
	* @returns Promise<void>
	*/
	function mkdirP(fsPath) {
		return __awaiter$5(this, void 0, void 0, function* () {
			assert_1.ok(fsPath, "a path argument must be provided");
			yield ioUtil$1.mkdir(fsPath, { recursive: true });
		});
	}
	exports.mkdirP = mkdirP;
	/**
	* Returns path of a tool had the tool actually been invoked.  Resolves via paths.
	* If you check and the tool does not exist, it will throw.
	*
	* @param     tool              name of the tool
	* @param     check             whether to check if tool exists
	* @returns   Promise<string>   path to tool
	*/
	function which$2(tool, check) {
		return __awaiter$5(this, void 0, void 0, function* () {
			if (!tool) throw new Error("parameter 'tool' is required");
			if (check) {
				const result = yield which$2(tool, false);
				if (!result) if (ioUtil$1.IS_WINDOWS) throw new Error(`Unable to locate executable file: ${tool}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also verify the file has a valid extension for an executable file.`);
else throw new Error(`Unable to locate executable file: ${tool}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.`);
				return result;
			}
			const matches = yield findInPath(tool);
			if (matches && matches.length > 0) return matches[0];
			return "";
		});
	}
	exports.which = which$2;
	/**
	* Returns a list of all occurrences of the given tool on the system path.
	*
	* @returns   Promise<string[]>  the paths of the tool
	*/
	function findInPath(tool) {
		return __awaiter$5(this, void 0, void 0, function* () {
			if (!tool) throw new Error("parameter 'tool' is required");
			const extensions = [];
			if (ioUtil$1.IS_WINDOWS && process.env["PATHEXT"]) {
				for (const extension$1 of process.env["PATHEXT"].split(path$69.delimiter)) if (extension$1) extensions.push(extension$1);
			}
			if (ioUtil$1.isRooted(tool)) {
				const filePath = yield ioUtil$1.tryGetExecutablePath(tool, extensions);
				if (filePath) return [filePath];
				return [];
			}
			if (tool.includes(path$69.sep)) return [];
			const directories = [];
			if (process.env.PATH) {
				for (const p of process.env.PATH.split(path$69.delimiter)) if (p) directories.push(p);
			}
			const matches = [];
			for (const directory of directories) {
				const filePath = yield ioUtil$1.tryGetExecutablePath(path$69.join(directory, tool), extensions);
				if (filePath) matches.push(filePath);
			}
			return matches;
		});
	}
	exports.findInPath = findInPath;
	function readCopyOptions(options) {
		const force = options.force == null ? true : options.force;
		const recursive = Boolean(options.recursive);
		const copySourceDirectory = options.copySourceDirectory == null ? true : Boolean(options.copySourceDirectory);
		return {
			force,
			recursive,
			copySourceDirectory
		};
	}
	function cpDirRecursive(sourceDir, destDir, currentDepth, force) {
		return __awaiter$5(this, void 0, void 0, function* () {
			if (currentDepth >= 255) return;
			currentDepth++;
			yield mkdirP(destDir);
			const files = yield ioUtil$1.readdir(sourceDir);
			for (const fileName of files) {
				const srcFile = `${sourceDir}/${fileName}`;
				const destFile = `${destDir}/${fileName}`;
				const srcFileStat = yield ioUtil$1.lstat(srcFile);
				if (srcFileStat.isDirectory()) yield cpDirRecursive(srcFile, destFile, currentDepth, force);
else yield copyFile$4(srcFile, destFile, force);
			}
			yield ioUtil$1.chmod(destDir, (yield ioUtil$1.stat(sourceDir)).mode);
		});
	}
	function copyFile$4(srcFile, destFile, force) {
		return __awaiter$5(this, void 0, void 0, function* () {
			if ((yield ioUtil$1.lstat(srcFile)).isSymbolicLink()) {
				try {
					yield ioUtil$1.lstat(destFile);
					yield ioUtil$1.unlink(destFile);
				} catch (e) {
					if (e.code === "EPERM") {
						yield ioUtil$1.chmod(destFile, "0666");
						yield ioUtil$1.unlink(destFile);
					}
				}
				const symlinkFull = yield ioUtil$1.readlink(srcFile);
				yield ioUtil$1.symlink(symlinkFull, destFile, ioUtil$1.IS_WINDOWS ? "junction" : null);
			} else if (!(yield ioUtil$1.exists(destFile)) || force) yield ioUtil$1.copyFile(srcFile, destFile);
		});
	}
} });

//#endregion
//#region ../node_modules/.pnpm/@actions+exec@1.1.1/node_modules/@actions/exec/lib/toolrunner.js
var require_toolrunner = __commonJS({ "../node_modules/.pnpm/@actions+exec@1.1.1/node_modules/@actions/exec/lib/toolrunner.js"(exports) {
	var __createBinding$6 = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
		if (k2 === undefined) k2 = k;
		Object.defineProperty(o, k2, {
			enumerable: true,
			get: function() {
				return m[k];
			}
		});
	} : function(o, m, k, k2) {
		if (k2 === undefined) k2 = k;
		o[k2] = m[k];
	});
	var __setModuleDefault$6 = this && this.__setModuleDefault || (Object.create ? function(o, v) {
		Object.defineProperty(o, "default", {
			enumerable: true,
			value: v
		});
	} : function(o, v) {
		o["default"] = v;
	});
	var __importStar$6 = this && this.__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding$6(result, mod, k);
		}
		__setModuleDefault$6(result, mod);
		return result;
	};
	var __awaiter$4 = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P ? value : new P(function(resolve$1) {
				resolve$1(value);
			});
		}
		return new (P || (P = Promise))(function(resolve$1, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve$1(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.argStringToArray = exports.ToolRunner = void 0;
	const os$5 = __importStar$6(require("os"));
	const events = __importStar$6(require("events"));
	const child = __importStar$6(require("child_process"));
	const path$68 = __importStar$6(require("path"));
	const io = __importStar$6(require_io());
	const ioUtil = __importStar$6(require_io_util());
	const timers_1 = require("timers");
	const IS_WINDOWS = process.platform === "win32";
	var ToolRunner = class extends events.EventEmitter {
		constructor(toolPath, args, options) {
			super();
			if (!toolPath) throw new Error("Parameter 'toolPath' cannot be null or empty.");
			this.toolPath = toolPath;
			this.args = args || [];
			this.options = options || {};
		}
		_debug(message) {
			if (this.options.listeners && this.options.listeners.debug) this.options.listeners.debug(message);
		}
		_getCommandString(options, noPrefix) {
			const toolPath = this._getSpawnFileName();
			const args = this._getSpawnArgs(options);
			let cmd = noPrefix ? "" : "[command]";
			if (IS_WINDOWS) if (this._isCmdFile()) {
				cmd += toolPath;
				for (const a of args) cmd += ` ${a}`;
			} else if (options.windowsVerbatimArguments) {
				cmd += `"${toolPath}"`;
				for (const a of args) cmd += ` ${a}`;
			} else {
				cmd += this._windowsQuoteCmdArg(toolPath);
				for (const a of args) cmd += ` ${this._windowsQuoteCmdArg(a)}`;
			}
else {
				cmd += toolPath;
				for (const a of args) cmd += ` ${a}`;
			}
			return cmd;
		}
		_processLineBuffer(data, strBuffer, onLine) {
			try {
				let s = strBuffer + data.toString();
				let n = s.indexOf(os$5.EOL);
				while (n > -1) {
					const line = s.substring(0, n);
					onLine(line);
					s = s.substring(n + os$5.EOL.length);
					n = s.indexOf(os$5.EOL);
				}
				return s;
			} catch (err) {
				this._debug(`error processing line. Failed with error ${err}`);
				return "";
			}
		}
		_getSpawnFileName() {
			if (IS_WINDOWS) {
				if (this._isCmdFile()) return process.env["COMSPEC"] || "cmd.exe";
			}
			return this.toolPath;
		}
		_getSpawnArgs(options) {
			if (IS_WINDOWS) {
				if (this._isCmdFile()) {
					let argline = `/D /S /C "${this._windowsQuoteCmdArg(this.toolPath)}`;
					for (const a of this.args) {
						argline += " ";
						argline += options.windowsVerbatimArguments ? a : this._windowsQuoteCmdArg(a);
					}
					argline += "\"";
					return [argline];
				}
			}
			return this.args;
		}
		_endsWith(str, end) {
			return str.endsWith(end);
		}
		_isCmdFile() {
			const upperToolPath = this.toolPath.toUpperCase();
			return this._endsWith(upperToolPath, ".CMD") || this._endsWith(upperToolPath, ".BAT");
		}
		_windowsQuoteCmdArg(arg) {
			if (!this._isCmdFile()) return this._uvQuoteCmdArg(arg);
			if (!arg) return "\"\"";
			const cmdSpecialChars = [
				" ",
				"	",
				"&",
				"(",
				")",
				"[",
				"]",
				"{",
				"}",
				"^",
				"=",
				";",
				"!",
				"'",
				"+",
				",",
				"`",
				"~",
				"|",
				"<",
				">",
				"\""
			];
			let needsQuotes = false;
			for (const char of arg) if (cmdSpecialChars.some((x) => x === char)) {
				needsQuotes = true;
				break;
			}
			if (!needsQuotes) return arg;
			let reverse = "\"";
			let quoteHit = true;
			for (let i$2 = arg.length; i$2 > 0; i$2--) {
				reverse += arg[i$2 - 1];
				if (quoteHit && arg[i$2 - 1] === "\\") reverse += "\\";
else if (arg[i$2 - 1] === "\"") {
					quoteHit = true;
					reverse += "\"";
				} else quoteHit = false;
			}
			reverse += "\"";
			return reverse.split("").reverse().join("");
		}
		_uvQuoteCmdArg(arg) {
			if (!arg) return "\"\"";
			if (!arg.includes(" ") && !arg.includes("	") && !arg.includes("\"")) return arg;
			if (!arg.includes("\"") && !arg.includes("\\")) return `"${arg}"`;
			let reverse = "\"";
			let quoteHit = true;
			for (let i$2 = arg.length; i$2 > 0; i$2--) {
				reverse += arg[i$2 - 1];
				if (quoteHit && arg[i$2 - 1] === "\\") reverse += "\\";
else if (arg[i$2 - 1] === "\"") {
					quoteHit = true;
					reverse += "\\";
				} else quoteHit = false;
			}
			reverse += "\"";
			return reverse.split("").reverse().join("");
		}
		_cloneExecOptions(options) {
			options = options || {};
			const result = {
				cwd: options.cwd || process.cwd(),
				env: options.env || process.env,
				silent: options.silent || false,
				windowsVerbatimArguments: options.windowsVerbatimArguments || false,
				failOnStdErr: options.failOnStdErr || false,
				ignoreReturnCode: options.ignoreReturnCode || false,
				delay: options.delay || 1e4
			};
			result.outStream = options.outStream || process.stdout;
			result.errStream = options.errStream || process.stderr;
			return result;
		}
		_getSpawnOptions(options, toolPath) {
			options = options || {};
			const result = {};
			result.cwd = options.cwd;
			result.env = options.env;
			result["windowsVerbatimArguments"] = options.windowsVerbatimArguments || this._isCmdFile();
			if (options.windowsVerbatimArguments) result.argv0 = `"${toolPath}"`;
			return result;
		}
		/**
		* Exec a tool.
		* Output will be streamed to the live console.
		* Returns promise with return code
		*
		* @param     tool     path to tool to exec
		* @param     options  optional exec options.  See ExecOptions
		* @returns   number
		*/
		exec() {
			return __awaiter$4(this, void 0, void 0, function* () {
				if (!ioUtil.isRooted(this.toolPath) && (this.toolPath.includes("/") || IS_WINDOWS && this.toolPath.includes("\\"))) this.toolPath = path$68.resolve(process.cwd(), this.options.cwd || process.cwd(), this.toolPath);
				this.toolPath = yield io.which(this.toolPath, true);
				return new Promise((resolve$1, reject) => __awaiter$4(this, void 0, void 0, function* () {
					this._debug(`exec tool: ${this.toolPath}`);
					this._debug("arguments:");
					for (const arg of this.args) this._debug(`   ${arg}`);
					const optionsNonNull = this._cloneExecOptions(this.options);
					if (!optionsNonNull.silent && optionsNonNull.outStream) optionsNonNull.outStream.write(this._getCommandString(optionsNonNull) + os$5.EOL);
					const state = new ExecState(optionsNonNull, this.toolPath);
					state.on("debug", (message) => {
						this._debug(message);
					});
					if (this.options.cwd && !(yield ioUtil.exists(this.options.cwd))) return reject(new Error(`The cwd: ${this.options.cwd} does not exist!`));
					const fileName = this._getSpawnFileName();
					const cp$2 = child.spawn(fileName, this._getSpawnArgs(optionsNonNull), this._getSpawnOptions(this.options, fileName));
					let stdbuffer = "";
					if (cp$2.stdout) cp$2.stdout.on("data", (data) => {
						if (this.options.listeners && this.options.listeners.stdout) this.options.listeners.stdout(data);
						if (!optionsNonNull.silent && optionsNonNull.outStream) optionsNonNull.outStream.write(data);
						stdbuffer = this._processLineBuffer(data, stdbuffer, (line) => {
							if (this.options.listeners && this.options.listeners.stdline) this.options.listeners.stdline(line);
						});
					});
					let errbuffer = "";
					if (cp$2.stderr) cp$2.stderr.on("data", (data) => {
						state.processStderr = true;
						if (this.options.listeners && this.options.listeners.stderr) this.options.listeners.stderr(data);
						if (!optionsNonNull.silent && optionsNonNull.errStream && optionsNonNull.outStream) {
							const s = optionsNonNull.failOnStdErr ? optionsNonNull.errStream : optionsNonNull.outStream;
							s.write(data);
						}
						errbuffer = this._processLineBuffer(data, errbuffer, (line) => {
							if (this.options.listeners && this.options.listeners.errline) this.options.listeners.errline(line);
						});
					});
					cp$2.on("error", (err) => {
						state.processError = err.message;
						state.processExited = true;
						state.processClosed = true;
						state.CheckComplete();
					});
					cp$2.on("exit", (code$1) => {
						state.processExitCode = code$1;
						state.processExited = true;
						this._debug(`Exit code ${code$1} received from tool '${this.toolPath}'`);
						state.CheckComplete();
					});
					cp$2.on("close", (code$1) => {
						state.processExitCode = code$1;
						state.processExited = true;
						state.processClosed = true;
						this._debug(`STDIO streams have closed for tool '${this.toolPath}'`);
						state.CheckComplete();
					});
					state.on("done", (error$2, exitCode) => {
						if (stdbuffer.length > 0) this.emit("stdline", stdbuffer);
						if (errbuffer.length > 0) this.emit("errline", errbuffer);
						cp$2.removeAllListeners();
						if (error$2) reject(error$2);
else resolve$1(exitCode);
					});
					if (this.options.input) {
						if (!cp$2.stdin) throw new Error("child process missing stdin");
						cp$2.stdin.end(this.options.input);
					}
				}));
			});
		}
	};
	exports.ToolRunner = ToolRunner;
	/**
	* Convert an arg string to an array of args. Handles escaping
	*
	* @param    argString   string of arguments
	* @returns  string[]    array of arguments
	*/
	function argStringToArray(argString) {
		const args = [];
		let inQuotes = false;
		let escaped$1 = false;
		let arg = "";
		function append$1(c) {
			if (escaped$1 && c !== "\"") arg += "\\";
			arg += c;
			escaped$1 = false;
		}
		for (let i$2 = 0; i$2 < argString.length; i$2++) {
			const c = argString.charAt(i$2);
			if (c === "\"") {
				if (!escaped$1) inQuotes = !inQuotes;
else append$1(c);
				continue;
			}
			if (c === "\\" && escaped$1) {
				append$1(c);
				continue;
			}
			if (c === "\\" && inQuotes) {
				escaped$1 = true;
				continue;
			}
			if (c === " " && !inQuotes) {
				if (arg.length > 0) {
					args.push(arg);
					arg = "";
				}
				continue;
			}
			append$1(c);
		}
		if (arg.length > 0) args.push(arg.trim());
		return args;
	}
	exports.argStringToArray = argStringToArray;
	var ExecState = class ExecState extends events.EventEmitter {
		constructor(options, toolPath) {
			super();
			this.processClosed = false;
			this.processError = "";
			this.processExitCode = 0;
			this.processExited = false;
			this.processStderr = false;
			this.delay = 1e4;
			this.done = false;
			this.timeout = null;
			if (!toolPath) throw new Error("toolPath must not be empty");
			this.options = options;
			this.toolPath = toolPath;
			if (options.delay) this.delay = options.delay;
		}
		CheckComplete() {
			if (this.done) return;
			if (this.processClosed) this._setResult();
else if (this.processExited) this.timeout = timers_1.setTimeout(ExecState.HandleTimeout, this.delay, this);
		}
		_debug(message) {
			this.emit("debug", message);
		}
		_setResult() {
			let error$2;
			if (this.processExited) {
				if (this.processError) error$2 = new Error(`There was an error when attempting to execute the process '${this.toolPath}'. This may indicate the process failed to start. Error: ${this.processError}`);
else if (this.processExitCode !== 0 && !this.options.ignoreReturnCode) error$2 = new Error(`The process '${this.toolPath}' failed with exit code ${this.processExitCode}`);
else if (this.processStderr && this.options.failOnStdErr) error$2 = new Error(`The process '${this.toolPath}' failed because one or more lines were written to the STDERR stream`);
			}
			if (this.timeout) {
				clearTimeout(this.timeout);
				this.timeout = null;
			}
			this.done = true;
			this.emit("done", error$2, this.processExitCode);
		}
		static HandleTimeout(state) {
			if (state.done) return;
			if (!state.processClosed && state.processExited) {
				const message = `The STDIO streams did not close within ${state.delay / 1e3} seconds of the exit event from process '${state.toolPath}'. This may indicate a child process inherited the STDIO streams and has not yet exited.`;
				state._debug(message);
			}
			state._setResult();
		}
	};
} });

//#endregion
//#region ../node_modules/.pnpm/@actions+exec@1.1.1/node_modules/@actions/exec/lib/exec.js
var require_exec = __commonJS({ "../node_modules/.pnpm/@actions+exec@1.1.1/node_modules/@actions/exec/lib/exec.js"(exports) {
	var __createBinding$5 = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
		if (k2 === undefined) k2 = k;
		Object.defineProperty(o, k2, {
			enumerable: true,
			get: function() {
				return m[k];
			}
		});
	} : function(o, m, k, k2) {
		if (k2 === undefined) k2 = k;
		o[k2] = m[k];
	});
	var __setModuleDefault$5 = this && this.__setModuleDefault || (Object.create ? function(o, v) {
		Object.defineProperty(o, "default", {
			enumerable: true,
			value: v
		});
	} : function(o, v) {
		o["default"] = v;
	});
	var __importStar$5 = this && this.__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding$5(result, mod, k);
		}
		__setModuleDefault$5(result, mod);
		return result;
	};
	var __awaiter$3 = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P ? value : new P(function(resolve$1) {
				resolve$1(value);
			});
		}
		return new (P || (P = Promise))(function(resolve$1, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve$1(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getExecOutput = exports.exec = void 0;
	const string_decoder_1 = require("string_decoder");
	const tr = __importStar$5(require_toolrunner());
	/**
	* Exec a command.
	* Output will be streamed to the live console.
	* Returns promise with return code
	*
	* @param     commandLine        command to execute (can include additional args). Must be correctly escaped.
	* @param     args               optional arguments for tool. Escaping is handled by the lib.
	* @param     options            optional exec options.  See ExecOptions
	* @returns   Promise<number>    exit code
	*/
	function exec$4(commandLine, args, options) {
		return __awaiter$3(this, void 0, void 0, function* () {
			const commandArgs = tr.argStringToArray(commandLine);
			if (commandArgs.length === 0) throw new Error(`Parameter 'commandLine' cannot be null or empty.`);
			const toolPath = commandArgs[0];
			args = commandArgs.slice(1).concat(args || []);
			const runner = new tr.ToolRunner(toolPath, args, options);
			return runner.exec();
		});
	}
	exports.exec = exec$4;
	/**
	* Exec a command and get the output.
	* Output will be streamed to the live console.
	* Returns promise with the exit code and collected stdout and stderr
	*
	* @param     commandLine           command to execute (can include additional args). Must be correctly escaped.
	* @param     args                  optional arguments for tool. Escaping is handled by the lib.
	* @param     options               optional exec options.  See ExecOptions
	* @returns   Promise<ExecOutput>   exit code, stdout, and stderr
	*/
	function getExecOutput$1(commandLine, args, options) {
		var _a$2, _b;
		return __awaiter$3(this, void 0, void 0, function* () {
			let stdout = "";
			let stderr = "";
			const stdoutDecoder = new string_decoder_1.StringDecoder("utf8");
			const stderrDecoder = new string_decoder_1.StringDecoder("utf8");
			const originalStdoutListener = (_a$2 = options === null || options === void 0 ? void 0 : options.listeners) === null || _a$2 === void 0 ? void 0 : _a$2.stdout;
			const originalStdErrListener = (_b = options === null || options === void 0 ? void 0 : options.listeners) === null || _b === void 0 ? void 0 : _b.stderr;
			const stdErrListener = (data) => {
				stderr += stderrDecoder.write(data);
				if (originalStdErrListener) originalStdErrListener(data);
			};
			const stdOutListener = (data) => {
				stdout += stdoutDecoder.write(data);
				if (originalStdoutListener) originalStdoutListener(data);
			};
			const listeners = Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.listeners), {
				stdout: stdOutListener,
				stderr: stdErrListener
			});
			const exitCode = yield exec$4(commandLine, args, Object.assign(Object.assign({}, options), { listeners }));
			stdout += stdoutDecoder.end();
			stderr += stderrDecoder.end();
			return {
				exitCode,
				stdout,
				stderr
			};
		});
	}
	exports.getExecOutput = getExecOutput$1;
} });

//#endregion
//#region ../node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/platform.js
var require_platform = __commonJS({ "../node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/platform.js"(exports) {
	var __createBinding$4 = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
		if (k2 === undefined) k2 = k;
		var desc = Object.getOwnPropertyDescriptor(m, k);
		if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
			enumerable: true,
			get: function() {
				return m[k];
			}
		};
		Object.defineProperty(o, k2, desc);
	} : function(o, m, k, k2) {
		if (k2 === undefined) k2 = k;
		o[k2] = m[k];
	});
	var __setModuleDefault$4 = this && this.__setModuleDefault || (Object.create ? function(o, v) {
		Object.defineProperty(o, "default", {
			enumerable: true,
			value: v
		});
	} : function(o, v) {
		o["default"] = v;
	});
	var __importStar$4 = this && this.__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$4(result, mod, k);
		}
		__setModuleDefault$4(result, mod);
		return result;
	};
	var __awaiter$2 = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P ? value : new P(function(resolve$1) {
				resolve$1(value);
			});
		}
		return new (P || (P = Promise))(function(resolve$1, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve$1(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	var __importDefault = this && this.__importDefault || function(mod) {
		return mod && mod.__esModule ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getDetails = exports.isLinux = exports.isMacOS = exports.isWindows = exports.arch = exports.platform = void 0;
	const os_1$1 = __importDefault(require("os"));
	const exec$3 = __importStar$4(require_exec());
	const getWindowsInfo = () => __awaiter$2(void 0, void 0, void 0, function* () {
		const { stdout: version } = yield exec$3.getExecOutput("powershell -command \"(Get-CimInstance -ClassName Win32_OperatingSystem).Version\"", undefined, { silent: true });
		const { stdout: name } = yield exec$3.getExecOutput("powershell -command \"(Get-CimInstance -ClassName Win32_OperatingSystem).Caption\"", undefined, { silent: true });
		return {
			name: name.trim(),
			version: version.trim()
		};
	});
	const getMacOsInfo = () => __awaiter$2(void 0, void 0, void 0, function* () {
		var _a$2, _b, _c, _d;
		const { stdout } = yield exec$3.getExecOutput("sw_vers", undefined, { silent: true });
		const version = (_b = (_a$2 = stdout.match(/ProductVersion:\s*(.+)/)) === null || _a$2 === void 0 ? void 0 : _a$2[1]) !== null && _b !== void 0 ? _b : "";
		const name = (_d = (_c = stdout.match(/ProductName:\s*(.+)/)) === null || _c === void 0 ? void 0 : _c[1]) !== null && _d !== void 0 ? _d : "";
		return {
			name,
			version
		};
	});
	const getLinuxInfo = () => __awaiter$2(void 0, void 0, void 0, function* () {
		const { stdout } = yield exec$3.getExecOutput("lsb_release", [
			"-i",
			"-r",
			"-s"
		], { silent: true });
		const [name, version] = stdout.trim().split("\n");
		return {
			name,
			version
		};
	});
	exports.platform = os_1$1.default.platform();
	exports.arch = os_1$1.default.arch();
	exports.isWindows = exports.platform === "win32";
	exports.isMacOS = exports.platform === "darwin";
	exports.isLinux = exports.platform === "linux";
	function getDetails() {
		return __awaiter$2(this, void 0, void 0, function* () {
			return Object.assign(Object.assign({}, yield exports.isWindows ? getWindowsInfo() : exports.isMacOS ? getMacOsInfo() : getLinuxInfo()), {
				platform: exports.platform,
				arch: exports.arch,
				isWindows: exports.isWindows,
				isMacOS: exports.isMacOS,
				isLinux: exports.isLinux
			});
		});
	}
	exports.getDetails = getDetails;
} });

//#endregion
//#region ../node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/core.js
var require_core$2 = __commonJS({ "../node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/core.js"(exports) {
	var __createBinding$3 = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
		if (k2 === undefined) k2 = k;
		var desc = Object.getOwnPropertyDescriptor(m, k);
		if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
			enumerable: true,
			get: function() {
				return m[k];
			}
		};
		Object.defineProperty(o, k2, desc);
	} : function(o, m, k, k2) {
		if (k2 === undefined) k2 = k;
		o[k2] = m[k];
	});
	var __setModuleDefault$3 = this && this.__setModuleDefault || (Object.create ? function(o, v) {
		Object.defineProperty(o, "default", {
			enumerable: true,
			value: v
		});
	} : function(o, v) {
		o["default"] = v;
	});
	var __importStar$3 = this && this.__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$3(result, mod, k);
		}
		__setModuleDefault$3(result, mod);
		return result;
	};
	var __awaiter$1 = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P ? value : new P(function(resolve$1) {
				resolve$1(value);
			});
		}
		return new (P || (P = Promise))(function(resolve$1, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve$1(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.platform = exports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = exports.markdownSummary = exports.summary = exports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;
	const command_1 = require_command();
	const file_command_1 = require_file_command();
	const utils_1$1 = require_utils$8();
	const os$4 = __importStar$3(require("os"));
	const path$67 = __importStar$3(require("path"));
	const oidc_utils_1 = require_oidc_utils();
	/**
	* The code to exit an action
	*/
	var ExitCode;
	(function(ExitCode$1) {
		/**
		* A code indicating that the action was successful
		*/
		ExitCode$1[ExitCode$1["Success"] = 0] = "Success";
		/**
		* A code indicating that the action was a failure
		*/
		ExitCode$1[ExitCode$1["Failure"] = 1] = "Failure";
	})(ExitCode || (exports.ExitCode = ExitCode = {}));
	/**
	* Sets env variable for this action and future actions in the job
	* @param name the name of the variable to set
	* @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify
	*/
	function exportVariable(name, val) {
		const convertedVal = (0, utils_1$1.toCommandValue)(val);
		process.env[name] = convertedVal;
		const filePath = process.env["GITHUB_ENV"] || "";
		if (filePath) return (0, file_command_1.issueFileCommand)("ENV", (0, file_command_1.prepareKeyValueMessage)(name, val));
		(0, command_1.issueCommand)("set-env", { name }, convertedVal);
	}
	exports.exportVariable = exportVariable;
	/**
	* Registers a secret which will get masked from logs
	* @param secret value of the secret
	*/
	function setSecret$1(secret) {
		(0, command_1.issueCommand)("add-mask", {}, secret);
	}
	exports.setSecret = setSecret$1;
	/**
	* Prepends inputPath to the PATH (for this action and future actions)
	* @param inputPath
	*/
	function addPath(inputPath) {
		const filePath = process.env["GITHUB_PATH"] || "";
		if (filePath) (0, file_command_1.issueFileCommand)("PATH", inputPath);
else (0, command_1.issueCommand)("add-path", {}, inputPath);
		process.env["PATH"] = `${inputPath}${path$67.delimiter}${process.env["PATH"]}`;
	}
	exports.addPath = addPath;
	/**
	* Gets the value of an input.
	* Unless trimWhitespace is set to false in InputOptions, the value is also trimmed.
	* Returns an empty string if the value is not defined.
	*
	* @param     name     name of the input to get
	* @param     options  optional. See InputOptions.
	* @returns   string
	*/
	function getInput$1(name, options) {
		const val = process.env[`INPUT_${name.replace(/ /g, "_").toUpperCase()}`] || "";
		if (options && options.required && !val) throw new Error(`Input required and not supplied: ${name}`);
		if (options && options.trimWhitespace === false) return val;
		return val.trim();
	}
	exports.getInput = getInput$1;
	/**
	* Gets the values of an multiline input.  Each value is also trimmed.
	*
	* @param     name     name of the input to get
	* @param     options  optional. See InputOptions.
	* @returns   string[]
	*
	*/
	function getMultilineInput(name, options) {
		const inputs$1 = getInput$1(name, options).split("\n").filter((x) => x !== "");
		if (options && options.trimWhitespace === false) return inputs$1;
		return inputs$1.map((input) => input.trim());
	}
	exports.getMultilineInput = getMultilineInput;
	/**
	* Gets the input value of the boolean type in the YAML 1.2 "core schema" specification.
	* Support boolean input list: `true | True | TRUE | false | False | FALSE` .
	* The return value is also in boolean type.
	* ref: https://yaml.org/spec/1.2/spec.html#id2804923
	*
	* @param     name     name of the input to get
	* @param     options  optional. See InputOptions.
	* @returns   boolean
	*/
	function getBooleanInput(name, options) {
		const trueValue = [
			"true",
			"True",
			"TRUE"
		];
		const falseValue = [
			"false",
			"False",
			"FALSE"
		];
		const val = getInput$1(name, options);
		if (trueValue.includes(val)) return true;
		if (falseValue.includes(val)) return false;
		throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${name}\n` + `Support boolean input list: \`true | True | TRUE | false | False | FALSE\``);
	}
	exports.getBooleanInput = getBooleanInput;
	/**
	* Sets the value of an output.
	*
	* @param     name     name of the output to set
	* @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
	*/
	function setOutput(name, value) {
		const filePath = process.env["GITHUB_OUTPUT"] || "";
		if (filePath) return (0, file_command_1.issueFileCommand)("OUTPUT", (0, file_command_1.prepareKeyValueMessage)(name, value));
		process.stdout.write(os$4.EOL);
		(0, command_1.issueCommand)("set-output", { name }, (0, utils_1$1.toCommandValue)(value));
	}
	exports.setOutput = setOutput;
	/**
	* Enables or disables the echoing of commands into stdout for the rest of the step.
	* Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.
	*
	*/
	function setCommandEcho(enabled) {
		(0, command_1.issue)("echo", enabled ? "on" : "off");
	}
	exports.setCommandEcho = setCommandEcho;
	/**
	* Sets the action status to failed.
	* When the action exits it will be with an exit code of 1
	* @param message add error issue message
	*/
	function setFailed$1(message) {
		process.exitCode = ExitCode.Failure;
		error$1(message);
	}
	exports.setFailed = setFailed$1;
	/**
	* Gets whether Actions Step Debug is on or not
	*/
	function isDebug() {
		return process.env["RUNNER_DEBUG"] === "1";
	}
	exports.isDebug = isDebug;
	/**
	* Writes debug message to user log
	* @param message debug message
	*/
	function debug$6(message) {
		(0, command_1.issueCommand)("debug", {}, message);
	}
	exports.debug = debug$6;
	/**
	* Adds an error issue
	* @param message error issue message. Errors will be converted to string via toString()
	* @param properties optional properties to add to the annotation.
	*/
	function error$1(message, properties = {}) {
		(0, command_1.issueCommand)("error", (0, utils_1$1.toCommandProperties)(properties), message instanceof Error ? message.toString() : message);
	}
	exports.error = error$1;
	/**
	* Adds a warning issue
	* @param message warning issue message. Errors will be converted to string via toString()
	* @param properties optional properties to add to the annotation.
	*/
	function warning(message, properties = {}) {
		(0, command_1.issueCommand)("warning", (0, utils_1$1.toCommandProperties)(properties), message instanceof Error ? message.toString() : message);
	}
	exports.warning = warning;
	/**
	* Adds a notice issue
	* @param message notice issue message. Errors will be converted to string via toString()
	* @param properties optional properties to add to the annotation.
	*/
	function notice(message, properties = {}) {
		(0, command_1.issueCommand)("notice", (0, utils_1$1.toCommandProperties)(properties), message instanceof Error ? message.toString() : message);
	}
	exports.notice = notice;
	/**
	* Writes info to log with console.log.
	* @param message info message
	*/
	function info$1(message) {
		process.stdout.write(message + os$4.EOL);
	}
	exports.info = info$1;
	/**
	* Begin an output group.
	*
	* Output until the next `groupEnd` will be foldable in this group
	*
	* @param name The name of the output group
	*/
	function startGroup(name) {
		(0, command_1.issue)("group", name);
	}
	exports.startGroup = startGroup;
	/**
	* End an output group.
	*/
	function endGroup() {
		(0, command_1.issue)("endgroup");
	}
	exports.endGroup = endGroup;
	/**
	* Wrap an asynchronous function call in a group.
	*
	* Returns the same type as the function itself.
	*
	* @param name The name of the group
	* @param fn The function to wrap in the group
	*/
	function group(name, fn) {
		return __awaiter$1(this, void 0, void 0, function* () {
			startGroup(name);
			let result;
			try {
				result = yield fn();
			} finally {
				endGroup();
			}
			return result;
		});
	}
	exports.group = group;
	/**
	* Saves state for current action, the state can only be retrieved by this action's post job execution.
	*
	* @param     name     name of the state to store
	* @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
	*/
	function saveState(name, value) {
		const filePath = process.env["GITHUB_STATE"] || "";
		if (filePath) return (0, file_command_1.issueFileCommand)("STATE", (0, file_command_1.prepareKeyValueMessage)(name, value));
		(0, command_1.issueCommand)("save-state", { name }, (0, utils_1$1.toCommandValue)(value));
	}
	exports.saveState = saveState;
	/**
	* Gets the value of an state set by this action's main execution.
	*
	* @param     name     name of the state to get
	* @returns   string
	*/
	function getState(name) {
		return process.env[`STATE_${name}`] || "";
	}
	exports.getState = getState;
	function getIDToken(aud) {
		return __awaiter$1(this, void 0, void 0, function* () {
			return yield oidc_utils_1.OidcClient.getIDToken(aud);
		});
	}
	exports.getIDToken = getIDToken;
	/**
	* Summary exports
	*/
	var summary_1 = require_summary();
	Object.defineProperty(exports, "summary", {
		enumerable: true,
		get: function() {
			return summary_1.summary;
		}
	});
	/**
	* @deprecated use core.summary
	*/
	var summary_2 = require_summary();
	Object.defineProperty(exports, "markdownSummary", {
		enumerable: true,
		get: function() {
			return summary_2.markdownSummary;
		}
	});
	/**
	* Path exports
	*/
	var path_utils_1 = require_path_utils();
	Object.defineProperty(exports, "toPosixPath", {
		enumerable: true,
		get: function() {
			return path_utils_1.toPosixPath;
		}
	});
	Object.defineProperty(exports, "toWin32Path", {
		enumerable: true,
		get: function() {
			return path_utils_1.toWin32Path;
		}
	});
	Object.defineProperty(exports, "toPlatformPath", {
		enumerable: true,
		get: function() {
			return path_utils_1.toPlatformPath;
		}
	});
	/**
	* Platform utilities exports
	*/
	exports.platform = __importStar$3(require_platform());
} });

//#endregion
//#region ../node_modules/.pnpm/@actions+github@6.0.0/node_modules/@actions/github/lib/context.js
var require_context = __commonJS({ "../node_modules/.pnpm/@actions+github@6.0.0/node_modules/@actions/github/lib/context.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Context = void 0;
	const fs_1 = require("fs");
	const os_1 = require("os");
	var Context$2 = class {
		/**
		* Hydrate the context from the environment
		*/
		constructor() {
			var _a$2, _b, _c;
			this.payload = {};
			if (process.env.GITHUB_EVENT_PATH) if ((0, fs_1.existsSync)(process.env.GITHUB_EVENT_PATH)) this.payload = JSON.parse((0, fs_1.readFileSync)(process.env.GITHUB_EVENT_PATH, { encoding: "utf8" }));
else {
				const path$72 = process.env.GITHUB_EVENT_PATH;
				process.stdout.write(`GITHUB_EVENT_PATH ${path$72} does not exist${os_1.EOL}`);
			}
			this.eventName = process.env.GITHUB_EVENT_NAME;
			this.sha = process.env.GITHUB_SHA;
			this.ref = process.env.GITHUB_REF;
			this.workflow = process.env.GITHUB_WORKFLOW;
			this.action = process.env.GITHUB_ACTION;
			this.actor = process.env.GITHUB_ACTOR;
			this.job = process.env.GITHUB_JOB;
			this.runNumber = parseInt(process.env.GITHUB_RUN_NUMBER, 10);
			this.runId = parseInt(process.env.GITHUB_RUN_ID, 10);
			this.apiUrl = (_a$2 = process.env.GITHUB_API_URL) !== null && _a$2 !== void 0 ? _a$2 : `https://api.github.com`;
			this.serverUrl = (_b = process.env.GITHUB_SERVER_URL) !== null && _b !== void 0 ? _b : `https://github.com`;
			this.graphqlUrl = (_c = process.env.GITHUB_GRAPHQL_URL) !== null && _c !== void 0 ? _c : `https://api.github.com/graphql`;
		}
		get issue() {
			const payload = this.payload;
			return Object.assign(Object.assign({}, this.repo), { number: (payload.issue || payload.pull_request || payload).number });
		}
		get repo() {
			if (process.env.GITHUB_REPOSITORY) {
				const [owner, repo] = process.env.GITHUB_REPOSITORY.split("/");
				return {
					owner,
					repo
				};
			}
			if (this.payload.repository) return {
				owner: this.payload.repository.owner.login,
				repo: this.payload.repository.name
			};
			throw new Error("context.repo requires a GITHUB_REPOSITORY environment variable like 'owner/repo'");
		}
	};
	exports.Context = Context$2;
} });

//#endregion
//#region ../node_modules/.pnpm/@actions+github@6.0.0/node_modules/@actions/github/lib/internal/utils.js
var require_utils$6 = __commonJS({ "../node_modules/.pnpm/@actions+github@6.0.0/node_modules/@actions/github/lib/internal/utils.js"(exports) {
	var __createBinding$2 = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
		if (k2 === undefined) k2 = k;
		var desc = Object.getOwnPropertyDescriptor(m, k);
		if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
			enumerable: true,
			get: function() {
				return m[k];
			}
		};
		Object.defineProperty(o, k2, desc);
	} : function(o, m, k, k2) {
		if (k2 === undefined) k2 = k;
		o[k2] = m[k];
	});
	var __setModuleDefault$2 = this && this.__setModuleDefault || (Object.create ? function(o, v) {
		Object.defineProperty(o, "default", {
			enumerable: true,
			value: v
		});
	} : function(o, v) {
		o["default"] = v;
	});
	var __importStar$2 = this && this.__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$2(result, mod, k);
		}
		__setModuleDefault$2(result, mod);
		return result;
	};
	var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P ? value : new P(function(resolve$1) {
				resolve$1(value);
			});
		}
		return new (P || (P = Promise))(function(resolve$1, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve$1(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getApiBaseUrl = exports.getProxyFetch = exports.getProxyAgentDispatcher = exports.getProxyAgent = exports.getAuthString = void 0;
	const httpClient = __importStar$2(require_lib$2());
	const undici_1 = require_undici();
	function getAuthString(token, options) {
		if (!token && !options.auth) throw new Error("Parameter token or opts.auth is required");
else if (token && options.auth) throw new Error("Parameters token and opts.auth may not both be specified");
		return typeof options.auth === "string" ? options.auth : `token ${token}`;
	}
	exports.getAuthString = getAuthString;
	function getProxyAgent(destinationUrl) {
		const hc = new httpClient.HttpClient();
		return hc.getAgent(destinationUrl);
	}
	exports.getProxyAgent = getProxyAgent;
	function getProxyAgentDispatcher(destinationUrl) {
		const hc = new httpClient.HttpClient();
		return hc.getAgentDispatcher(destinationUrl);
	}
	exports.getProxyAgentDispatcher = getProxyAgentDispatcher;
	function getProxyFetch(destinationUrl) {
		const httpDispatcher = getProxyAgentDispatcher(destinationUrl);
		const proxyFetch = (url, opts) => __awaiter(this, void 0, void 0, function* () {
			return (0, undici_1.fetch)(url, Object.assign(Object.assign({}, opts), { dispatcher: httpDispatcher }));
		});
		return proxyFetch;
	}
	exports.getProxyFetch = getProxyFetch;
	function getApiBaseUrl() {
		return process.env["GITHUB_API_URL"] || "https://api.github.com";
	}
	exports.getApiBaseUrl = getApiBaseUrl;
} });

//#endregion
//#region ../node_modules/.pnpm/universal-user-agent@6.0.1/node_modules/universal-user-agent/dist-node/index.js
var require_dist_node$9 = __commonJS({ "../node_modules/.pnpm/universal-user-agent@6.0.1/node_modules/universal-user-agent/dist-node/index.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	function getUserAgent() {
		if (typeof navigator === "object" && "userAgent" in navigator) return navigator.userAgent;
		if (typeof process === "object" && process.version !== undefined) return `Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`;
		return "<environment undetectable>";
	}
	exports.getUserAgent = getUserAgent;
} });

//#endregion
//#region ../node_modules/.pnpm/before-after-hook@2.2.3/node_modules/before-after-hook/lib/register.js
var require_register = __commonJS({ "../node_modules/.pnpm/before-after-hook@2.2.3/node_modules/before-after-hook/lib/register.js"(exports, module) {
	module.exports = register$1;
	function register$1(state, name, method, options) {
		if (typeof method !== "function") throw new Error("method for before hook must be a function");
		if (!options) options = {};
		if (Array.isArray(name)) return name.reverse().reduce(function(callback, name$1) {
			return register$1.bind(null, state, name$1, callback, options);
		}, method)();
		return Promise.resolve().then(function() {
			if (!state.registry[name]) return method(options);
			return state.registry[name].reduce(function(method$1, registered) {
				return registered.hook.bind(null, method$1, options);
			}, method)();
		});
	}
} });

//#endregion
//#region ../node_modules/.pnpm/before-after-hook@2.2.3/node_modules/before-after-hook/lib/add.js
var require_add = __commonJS({ "../node_modules/.pnpm/before-after-hook@2.2.3/node_modules/before-after-hook/lib/add.js"(exports, module) {
	module.exports = addHook$1;
	function addHook$1(state, kind, name, hook$1) {
		var orig = hook$1;
		if (!state.registry[name]) state.registry[name] = [];
		if (kind === "before") hook$1 = function(method, options) {
			return Promise.resolve().then(orig.bind(null, options)).then(method.bind(null, options));
		};
		if (kind === "after") hook$1 = function(method, options) {
			var result;
			return Promise.resolve().then(method.bind(null, options)).then(function(result_) {
				result = result_;
				return orig(result, options);
			}).then(function() {
				return result;
			});
		};
		if (kind === "error") hook$1 = function(method, options) {
			return Promise.resolve().then(method.bind(null, options)).catch(function(error$2) {
				return orig(error$2, options);
			});
		};
		state.registry[name].push({
			hook: hook$1,
			orig
		});
	}
} });

//#endregion
//#region ../node_modules/.pnpm/before-after-hook@2.2.3/node_modules/before-after-hook/lib/remove.js
var require_remove$2 = __commonJS({ "../node_modules/.pnpm/before-after-hook@2.2.3/node_modules/before-after-hook/lib/remove.js"(exports, module) {
	module.exports = removeHook$1;
	function removeHook$1(state, name, method) {
		if (!state.registry[name]) return;
		var index$1 = state.registry[name].map(function(registered) {
			return registered.orig;
		}).indexOf(method);
		if (index$1 === -1) return;
		state.registry[name].splice(index$1, 1);
	}
} });

//#endregion
//#region ../node_modules/.pnpm/before-after-hook@2.2.3/node_modules/before-after-hook/index.js
var require_before_after_hook = __commonJS({ "../node_modules/.pnpm/before-after-hook@2.2.3/node_modules/before-after-hook/index.js"(exports, module) {
	var register = require_register();
	var addHook = require_add();
	var removeHook = require_remove$2();
	var bind = Function.bind;
	var bindable = bind.bind(bind);
	function bindApi(hook$1, state, name) {
		var removeHookRef = bindable(removeHook, null).apply(null, name ? [state, name] : [state]);
		hook$1.api = { remove: removeHookRef };
		hook$1.remove = removeHookRef;
		[
			"before",
			"error",
			"after",
			"wrap"
		].forEach(function(kind) {
			var args = name ? [
				state,
				kind,
				name
			] : [state, kind];
			hook$1[kind] = hook$1.api[kind] = bindable(addHook, null).apply(null, args);
		});
	}
	function HookSingular() {
		var singularHookName = "h";
		var singularHookState = { registry: {} };
		var singularHook = register.bind(null, singularHookState, singularHookName);
		bindApi(singularHook, singularHookState, singularHookName);
		return singularHook;
	}
	function HookCollection() {
		var state = { registry: {} };
		var hook$1 = register.bind(null, state);
		bindApi(hook$1, state);
		return hook$1;
	}
	var collectionHookDeprecationMessageDisplayed = false;
	function Hook() {
		if (!collectionHookDeprecationMessageDisplayed) {
			console.warn("[before-after-hook]: \"Hook()\" repurposing warning, use \"Hook.Collection()\". Read more: https://git.io/upgrade-before-after-hook-to-1.4");
			collectionHookDeprecationMessageDisplayed = true;
		}
		return HookCollection();
	}
	Hook.Singular = HookSingular.bind();
	Hook.Collection = HookCollection.bind();
	module.exports = Hook;
	module.exports.Hook = Hook;
	module.exports.Singular = Hook.Singular;
	module.exports.Collection = Hook.Collection;
} });

//#endregion
//#region ../node_modules/.pnpm/@octokit+endpoint@9.0.5/node_modules/@octokit/endpoint/dist-node/index.js
var require_dist_node$8 = __commonJS({ "../node_modules/.pnpm/@octokit+endpoint@9.0.5/node_modules/@octokit/endpoint/dist-node/index.js"(exports, module) {
	var __defProp$7 = Object.defineProperty;
	var __getOwnPropDesc$7 = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$7 = Object.getOwnPropertyNames;
	var __hasOwnProp$7 = Object.prototype.hasOwnProperty;
	var __export$7 = (target, all$1) => {
		for (var name in all$1) __defProp$7(target, name, {
			get: all$1[name],
			enumerable: true
		});
	};
	var __copyProps$7 = (to, from, except, desc) => {
		if (from && typeof from === "object" || typeof from === "function") {
			for (let key of __getOwnPropNames$7(from)) if (!__hasOwnProp$7.call(to, key) && key !== except) __defProp$7(to, key, {
				get: () => from[key],
				enumerable: !(desc = __getOwnPropDesc$7(from, key)) || desc.enumerable
			});
		}
		return to;
	};
	var __toCommonJS$7 = (mod) => __copyProps$7(__defProp$7({}, "__esModule", { value: true }), mod);
	var dist_src_exports$7 = {};
	__export$7(dist_src_exports$7, { endpoint: () => endpoint });
	module.exports = __toCommonJS$7(dist_src_exports$7);
	var import_universal_user_agent$3 = require_dist_node$9();
	var VERSION$5 = "9.0.5";
	var userAgent = `octokit-endpoint.js/${VERSION$5} ${(0, import_universal_user_agent$3.getUserAgent)()}`;
	var DEFAULTS = {
		method: "GET",
		baseUrl: "https://api.github.com",
		headers: {
			accept: "application/vnd.github.v3+json",
			"user-agent": userAgent
		},
		mediaType: { format: "" }
	};
	function lowercaseKeys(object) {
		if (!object) return {};
		return Object.keys(object).reduce((newObj, key) => {
			newObj[key.toLowerCase()] = object[key];
			return newObj;
		}, {});
	}
	function isPlainObject$3(value) {
		if (typeof value !== "object" || value === null) return false;
		if (Object.prototype.toString.call(value) !== "[object Object]") return false;
		const proto = Object.getPrototypeOf(value);
		if (proto === null) return true;
		const Ctor = Object.prototype.hasOwnProperty.call(proto, "constructor") && proto.constructor;
		return typeof Ctor === "function" && Ctor instanceof Ctor && Function.prototype.call(Ctor) === Function.prototype.call(value);
	}
	function mergeDeep(defaults$2, options) {
		const result = Object.assign({}, defaults$2);
		Object.keys(options).forEach((key) => {
			if (isPlainObject$3(options[key])) if (!(key in defaults$2)) Object.assign(result, { [key]: options[key] });
else result[key] = mergeDeep(defaults$2[key], options[key]);
else Object.assign(result, { [key]: options[key] });
		});
		return result;
	}
	function removeUndefinedProperties(obj) {
		for (const key in obj) if (obj[key] === void 0) delete obj[key];
		return obj;
	}
	function merge$1(defaults$2, route, options) {
		if (typeof route === "string") {
			let [method, url] = route.split(" ");
			options = Object.assign(url ? {
				method,
				url
			} : { url: method }, options);
		} else options = Object.assign({}, route);
		options.headers = lowercaseKeys(options.headers);
		removeUndefinedProperties(options);
		removeUndefinedProperties(options.headers);
		const mergedOptions = mergeDeep(defaults$2 || {}, options);
		if (options.url === "/graphql") {
			if (defaults$2 && defaults$2.mediaType.previews?.length) mergedOptions.mediaType.previews = defaults$2.mediaType.previews.filter((preview) => !mergedOptions.mediaType.previews.includes(preview)).concat(mergedOptions.mediaType.previews);
			mergedOptions.mediaType.previews = (mergedOptions.mediaType.previews || []).map((preview) => preview.replace(/-preview/, ""));
		}
		return mergedOptions;
	}
	function addQueryParameters(url, parameters) {
		const separator = /\?/.test(url) ? "&" : "?";
		const names = Object.keys(parameters);
		if (names.length === 0) return url;
		return url + separator + names.map((name) => {
			if (name === "q") return "q=" + parameters.q.split("+").map(encodeURIComponent).join("+");
			return `${name}=${encodeURIComponent(parameters[name])}`;
		}).join("&");
	}
	var urlVariableRegex = /\{[^}]+\}/g;
	function removeNonChars(variableName) {
		return variableName.replace(/^\W+|\W+$/g, "").split(/,/);
	}
	function extractUrlVariableNames(url) {
		const matches = url.match(urlVariableRegex);
		if (!matches) return [];
		return matches.map(removeNonChars).reduce((a, b) => a.concat(b), []);
	}
	function omit(object, keysToOmit) {
		const result = { __proto__: null };
		for (const key of Object.keys(object)) if (keysToOmit.indexOf(key) === -1) result[key] = object[key];
		return result;
	}
	function encodeReserved(str) {
		return str.split(/(%[0-9A-Fa-f]{2})/g).map(function(part) {
			if (!/%[0-9A-Fa-f]/.test(part)) part = encodeURI(part).replace(/%5B/g, "[").replace(/%5D/g, "]");
			return part;
		}).join("");
	}
	function encodeUnreserved(str) {
		return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
			return "%" + c.charCodeAt(0).toString(16).toUpperCase();
		});
	}
	function encodeValue(operator, value, key) {
		value = operator === "+" || operator === "#" ? encodeReserved(value) : encodeUnreserved(value);
		if (key) return encodeUnreserved(key) + "=" + value;
else return value;
	}
	function isDefined(value) {
		return value !== void 0 && value !== null;
	}
	function isKeyOperator(operator) {
		return operator === ";" || operator === "&" || operator === "?";
	}
	function getValues(context$1, operator, key, modifier) {
		var value = context$1[key], result = [];
		if (isDefined(value) && value !== "") if (typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
			value = value.toString();
			if (modifier && modifier !== "*") value = value.substring(0, parseInt(modifier, 10));
			result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : ""));
		} else if (modifier === "*") if (Array.isArray(value)) value.filter(isDefined).forEach(function(value2) {
			result.push(encodeValue(operator, value2, isKeyOperator(operator) ? key : ""));
		});
else Object.keys(value).forEach(function(k) {
			if (isDefined(value[k])) result.push(encodeValue(operator, value[k], k));
		});
else {
			const tmp = [];
			if (Array.isArray(value)) value.filter(isDefined).forEach(function(value2) {
				tmp.push(encodeValue(operator, value2));
			});
else Object.keys(value).forEach(function(k) {
				if (isDefined(value[k])) {
					tmp.push(encodeUnreserved(k));
					tmp.push(encodeValue(operator, value[k].toString()));
				}
			});
			if (isKeyOperator(operator)) result.push(encodeUnreserved(key) + "=" + tmp.join(","));
else if (tmp.length !== 0) result.push(tmp.join(","));
		}
else if (operator === ";") {
			if (isDefined(value)) result.push(encodeUnreserved(key));
		} else if (value === "" && (operator === "&" || operator === "?")) result.push(encodeUnreserved(key) + "=");
else if (value === "") result.push("");
		return result;
	}
	function parseUrl(template) {
		return { expand: expand$2.bind(null, template) };
	}
	function expand$2(template, context$1) {
		var operators = [
			"+",
			"#",
			".",
			"/",
			";",
			"?",
			"&"
		];
		template = template.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g, function(_, expression, literal) {
			if (expression) {
				let operator = "";
				const values = [];
				if (operators.indexOf(expression.charAt(0)) !== -1) {
					operator = expression.charAt(0);
					expression = expression.substr(1);
				}
				expression.split(/,/g).forEach(function(variable) {
					var tmp = /([^:\*]*)(?::(\d+)|(\*))?/.exec(variable);
					values.push(getValues(context$1, operator, tmp[1], tmp[2] || tmp[3]));
				});
				if (operator && operator !== "+") {
					var separator = ",";
					if (operator === "?") separator = "&";
else if (operator !== "#") separator = operator;
					return (values.length !== 0 ? operator : "") + values.join(separator);
				} else return values.join(",");
			} else return encodeReserved(literal);
		});
		if (template === "/") return template;
else return template.replace(/\/$/, "");
	}
	function parse$17(options) {
		let method = options.method.toUpperCase();
		let url = (options.url || "/").replace(/:([a-z]\w+)/g, "{$1}");
		let headers = Object.assign({}, options.headers);
		let body;
		let parameters = omit(options, [
			"method",
			"baseUrl",
			"url",
			"headers",
			"request",
			"mediaType"
		]);
		const urlVariableNames = extractUrlVariableNames(url);
		url = parseUrl(url).expand(parameters);
		if (!/^http/.test(url)) url = options.baseUrl + url;
		const omittedParameters = Object.keys(options).filter((option) => urlVariableNames.includes(option)).concat("baseUrl");
		const remainingParameters = omit(parameters, omittedParameters);
		const isBinaryRequest = /application\/octet-stream/i.test(headers.accept);
		if (!isBinaryRequest) {
			if (options.mediaType.format) headers.accept = headers.accept.split(/,/).map((format$1) => format$1.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/, `application/vnd$1$2.${options.mediaType.format}`)).join(",");
			if (url.endsWith("/graphql")) {
				if (options.mediaType.previews?.length) {
					const previewsFromAcceptHeader = headers.accept.match(/[\w-]+(?=-preview)/g) || [];
					headers.accept = previewsFromAcceptHeader.concat(options.mediaType.previews).map((preview) => {
						const format$1 = options.mediaType.format ? `.${options.mediaType.format}` : "+json";
						return `application/vnd.github.${preview}-preview${format$1}`;
					}).join(",");
				}
			}
		}
		if (["GET", "HEAD"].includes(method)) url = addQueryParameters(url, remainingParameters);
else if ("data" in remainingParameters) body = remainingParameters.data;
else if (Object.keys(remainingParameters).length) body = remainingParameters;
		if (!headers["content-type"] && typeof body !== "undefined") headers["content-type"] = "application/json; charset=utf-8";
		if (["PATCH", "PUT"].includes(method) && typeof body === "undefined") body = "";
		return Object.assign({
			method,
			url,
			headers
		}, typeof body !== "undefined" ? { body } : null, options.request ? { request: options.request } : null);
	}
	function endpointWithDefaults(defaults$2, route, options) {
		return parse$17(merge$1(defaults$2, route, options));
	}
	function withDefaults$2(oldDefaults, newDefaults) {
		const DEFAULTS2 = merge$1(oldDefaults, newDefaults);
		const endpoint2 = endpointWithDefaults.bind(null, DEFAULTS2);
		return Object.assign(endpoint2, {
			DEFAULTS: DEFAULTS2,
			defaults: withDefaults$2.bind(null, DEFAULTS2),
			merge: merge$1.bind(null, DEFAULTS2),
			parse: parse$17
		});
	}
	var endpoint = withDefaults$2(null, DEFAULTS);
	0 && (module.exports = { endpoint });
} });

//#endregion
//#region ../node_modules/.pnpm/deprecation@2.3.1/node_modules/deprecation/dist-node/index.js
var require_dist_node$7 = __commonJS({ "../node_modules/.pnpm/deprecation@2.3.1/node_modules/deprecation/dist-node/index.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var Deprecation = class extends Error {
		constructor(message) {
			super(message);
			if (Error.captureStackTrace) Error.captureStackTrace(this, this.constructor);
			this.name = "Deprecation";
		}
	};
	exports.Deprecation = Deprecation;
} });

//#endregion
//#region ../node_modules/.pnpm/wrappy@1.0.2/node_modules/wrappy/wrappy.js
var require_wrappy = __commonJS({ "../node_modules/.pnpm/wrappy@1.0.2/node_modules/wrappy/wrappy.js"(exports, module) {
	module.exports = wrappy$1;
	function wrappy$1(fn, cb) {
		if (fn && cb) return wrappy$1(fn)(cb);
		if (typeof fn !== "function") throw new TypeError("need wrapper function");
		Object.keys(fn).forEach(function(k) {
			wrapper[k] = fn[k];
		});
		return wrapper;
		function wrapper() {
			var args = new Array(arguments.length);
			for (var i$2 = 0; i$2 < args.length; i$2++) args[i$2] = arguments[i$2];
			var ret = fn.apply(this, args);
			var cb$1 = args[args.length - 1];
			if (typeof ret === "function" && ret !== cb$1) Object.keys(cb$1).forEach(function(k) {
				ret[k] = cb$1[k];
			});
			return ret;
		}
	}
} });

//#endregion
//#region ../node_modules/.pnpm/once@1.4.0/node_modules/once/once.js
var require_once = __commonJS({ "../node_modules/.pnpm/once@1.4.0/node_modules/once/once.js"(exports, module) {
	var wrappy = require_wrappy();
	module.exports = wrappy(once);
	module.exports.strict = wrappy(onceStrict);
	once.proto = once(function() {
		Object.defineProperty(Function.prototype, "once", {
			value: function() {
				return once(this);
			},
			configurable: true
		});
		Object.defineProperty(Function.prototype, "onceStrict", {
			value: function() {
				return onceStrict(this);
			},
			configurable: true
		});
	});
	function once(fn) {
		var f = function() {
			if (f.called) return f.value;
			f.called = true;
			return f.value = fn.apply(this, arguments);
		};
		f.called = false;
		return f;
	}
	function onceStrict(fn) {
		var f = function() {
			if (f.called) throw new Error(f.onceError);
			f.called = true;
			return f.value = fn.apply(this, arguments);
		};
		var name = fn.name || "Function wrapped with `once`";
		f.onceError = name + " shouldn't be called more than once";
		f.called = false;
		return f;
	}
} });

//#endregion
//#region ../node_modules/.pnpm/@octokit+request-error@5.1.0/node_modules/@octokit/request-error/dist-node/index.js
var require_dist_node$6 = __commonJS({ "../node_modules/.pnpm/@octokit+request-error@5.1.0/node_modules/@octokit/request-error/dist-node/index.js"(exports, module) {
	var __create = Object.create;
	var __defProp$6 = Object.defineProperty;
	var __getOwnPropDesc$6 = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$6 = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp$6 = Object.prototype.hasOwnProperty;
	var __export$6 = (target, all$1) => {
		for (var name in all$1) __defProp$6(target, name, {
			get: all$1[name],
			enumerable: true
		});
	};
	var __copyProps$6 = (to, from, except, desc) => {
		if (from && typeof from === "object" || typeof from === "function") {
			for (let key of __getOwnPropNames$6(from)) if (!__hasOwnProp$6.call(to, key) && key !== except) __defProp$6(to, key, {
				get: () => from[key],
				enumerable: !(desc = __getOwnPropDesc$6(from, key)) || desc.enumerable
			});
		}
		return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps$6(
		// If the importer is in node compatibility mode or this is not an ESM
		// file that has been converted to a CommonJS file using a Babel-
		// compatible transform (i.e. "__esModule" has not been set), then set
		// "default" to the CommonJS "module.exports" for node compatibility.
		isNodeMode || !mod || !mod.__esModule ? __defProp$6(target, "default", {
			value: mod,
			enumerable: true
		}) : target,
		mod
));
	var __toCommonJS$6 = (mod) => __copyProps$6(__defProp$6({}, "__esModule", { value: true }), mod);
	var dist_src_exports$6 = {};
	__export$6(dist_src_exports$6, { RequestError: () => RequestError });
	module.exports = __toCommonJS$6(dist_src_exports$6);
	var import_deprecation = require_dist_node$7();
	var import_once = __toESM(require_once());
	var logOnceCode = (0, import_once.default)((deprecation) => console.warn(deprecation));
	var logOnceHeaders = (0, import_once.default)((deprecation) => console.warn(deprecation));
	var RequestError = class extends Error {
		constructor(message, statusCode, options) {
			super(message);
			if (Error.captureStackTrace) Error.captureStackTrace(this, this.constructor);
			this.name = "HttpError";
			this.status = statusCode;
			let headers;
			if ("headers" in options && typeof options.headers !== "undefined") headers = options.headers;
			if ("response" in options) {
				this.response = options.response;
				headers = options.response.headers;
			}
			const requestCopy = Object.assign({}, options.request);
			if (options.request.headers.authorization) requestCopy.headers = Object.assign({}, options.request.headers, { authorization: options.request.headers.authorization.replace(/ .*$/, " [REDACTED]") });
			requestCopy.url = requestCopy.url.replace(/\bclient_secret=\w+/g, "client_secret=[REDACTED]").replace(/\baccess_token=\w+/g, "access_token=[REDACTED]");
			this.request = requestCopy;
			Object.defineProperty(this, "code", { get() {
				logOnceCode(new import_deprecation.Deprecation("[@octokit/request-error] `error.code` is deprecated, use `error.status`."));
				return statusCode;
			} });
			Object.defineProperty(this, "headers", { get() {
				logOnceHeaders(new import_deprecation.Deprecation("[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`."));
				return headers || {};
			} });
		}
	};
	0 && (module.exports = { RequestError });
} });

//#endregion
//#region ../node_modules/.pnpm/@octokit+request@8.4.0/node_modules/@octokit/request/dist-node/index.js
var require_dist_node$5 = __commonJS({ "../node_modules/.pnpm/@octokit+request@8.4.0/node_modules/@octokit/request/dist-node/index.js"(exports, module) {
	var __defProp$5 = Object.defineProperty;
	var __getOwnPropDesc$5 = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$5 = Object.getOwnPropertyNames;
	var __hasOwnProp$5 = Object.prototype.hasOwnProperty;
	var __export$5 = (target, all$1) => {
		for (var name in all$1) __defProp$5(target, name, {
			get: all$1[name],
			enumerable: true
		});
	};
	var __copyProps$5 = (to, from, except, desc) => {
		if (from && typeof from === "object" || typeof from === "function") {
			for (let key of __getOwnPropNames$5(from)) if (!__hasOwnProp$5.call(to, key) && key !== except) __defProp$5(to, key, {
				get: () => from[key],
				enumerable: !(desc = __getOwnPropDesc$5(from, key)) || desc.enumerable
			});
		}
		return to;
	};
	var __toCommonJS$5 = (mod) => __copyProps$5(__defProp$5({}, "__esModule", { value: true }), mod);
	var dist_src_exports$5 = {};
	__export$5(dist_src_exports$5, { request: () => request });
	module.exports = __toCommonJS$5(dist_src_exports$5);
	var import_endpoint = require_dist_node$8();
	var import_universal_user_agent$2 = require_dist_node$9();
	var VERSION$4 = "8.4.0";
	function isPlainObject$2(value) {
		if (typeof value !== "object" || value === null) return false;
		if (Object.prototype.toString.call(value) !== "[object Object]") return false;
		const proto = Object.getPrototypeOf(value);
		if (proto === null) return true;
		const Ctor = Object.prototype.hasOwnProperty.call(proto, "constructor") && proto.constructor;
		return typeof Ctor === "function" && Ctor instanceof Ctor && Function.prototype.call(Ctor) === Function.prototype.call(value);
	}
	var import_request_error = require_dist_node$6();
	function getBufferResponse(response) {
		return response.arrayBuffer();
	}
	function fetchWrapper(requestOptions) {
		var _a$2, _b, _c, _d;
		const log$1 = requestOptions.request && requestOptions.request.log ? requestOptions.request.log : console;
		const parseSuccessResponseBody = ((_a$2 = requestOptions.request) == null ? void 0 : _a$2.parseSuccessResponseBody) !== false;
		if (isPlainObject$2(requestOptions.body) || Array.isArray(requestOptions.body)) requestOptions.body = JSON.stringify(requestOptions.body);
		let headers = {};
		let status;
		let url;
		let { fetch: fetch$1 } = globalThis;
		if ((_b = requestOptions.request) == null ? void 0 : _b.fetch) fetch$1 = requestOptions.request.fetch;
		if (!fetch$1) throw new Error("fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing");
		return fetch$1(requestOptions.url, {
			method: requestOptions.method,
			body: requestOptions.body,
			redirect: (_c = requestOptions.request) == null ? void 0 : _c.redirect,
			headers: requestOptions.headers,
			signal: (_d = requestOptions.request) == null ? void 0 : _d.signal,
			...requestOptions.body && { duplex: "half" }
		}).then(async (response) => {
			url = response.url;
			status = response.status;
			for (const keyAndValue of response.headers) headers[keyAndValue[0]] = keyAndValue[1];
			if ("deprecation" in headers) {
				const matches = headers.link && headers.link.match(/<([^>]+)>; rel="deprecation"/);
				const deprecationLink = matches && matches.pop();
				log$1.warn(`[@octokit/request] "${requestOptions.method} ${requestOptions.url}" is deprecated. It is scheduled to be removed on ${headers.sunset}${deprecationLink ? `. See ${deprecationLink}` : ""}`);
			}
			if (status === 204 || status === 205) return;
			if (requestOptions.method === "HEAD") {
				if (status < 400) return;
				throw new import_request_error.RequestError(response.statusText, status, {
					response: {
						url,
						status,
						headers,
						data: void 0
					},
					request: requestOptions
				});
			}
			if (status === 304) throw new import_request_error.RequestError("Not modified", status, {
				response: {
					url,
					status,
					headers,
					data: await getResponseData(response)
				},
				request: requestOptions
			});
			if (status >= 400) {
				const data = await getResponseData(response);
				const error$2 = new import_request_error.RequestError(toErrorMessage(data), status, {
					response: {
						url,
						status,
						headers,
						data
					},
					request: requestOptions
				});
				throw error$2;
			}
			return parseSuccessResponseBody ? await getResponseData(response) : response.body;
		}).then((data) => {
			return {
				status,
				url,
				headers,
				data
			};
		}).catch((error$2) => {
			if (error$2 instanceof import_request_error.RequestError) throw error$2;
else if (error$2.name === "AbortError") throw error$2;
			let message = error$2.message;
			if (error$2.name === "TypeError" && "cause" in error$2) {
				if (error$2.cause instanceof Error) message = error$2.cause.message;
else if (typeof error$2.cause === "string") message = error$2.cause;
			}
			throw new import_request_error.RequestError(message, 500, { request: requestOptions });
		});
	}
	async function getResponseData(response) {
		const contentType = response.headers.get("content-type");
		if (/application\/json/.test(contentType)) return response.json().catch(() => response.text()).catch(() => "");
		if (!contentType || /^text\/|charset=utf-8$/.test(contentType)) return response.text();
		return getBufferResponse(response);
	}
	function toErrorMessage(data) {
		if (typeof data === "string") return data;
		let suffix;
		if ("documentation_url" in data) suffix = ` - ${data.documentation_url}`;
else suffix = "";
		if ("message" in data) {
			if (Array.isArray(data.errors)) return `${data.message}: ${data.errors.map(JSON.stringify).join(", ")}${suffix}`;
			return `${data.message}${suffix}`;
		}
		return `Unknown error: ${JSON.stringify(data)}`;
	}
	function withDefaults$1(oldEndpoint, newDefaults) {
		const endpoint2 = oldEndpoint.defaults(newDefaults);
		const newApi = function(route, parameters) {
			const endpointOptions = endpoint2.merge(route, parameters);
			if (!endpointOptions.request || !endpointOptions.request.hook) return fetchWrapper(endpoint2.parse(endpointOptions));
			const request2 = (route2, parameters2) => {
				return fetchWrapper(endpoint2.parse(endpoint2.merge(route2, parameters2)));
			};
			Object.assign(request2, {
				endpoint: endpoint2,
				defaults: withDefaults$1.bind(null, endpoint2)
			});
			return endpointOptions.request.hook(request2, endpointOptions);
		};
		return Object.assign(newApi, {
			endpoint: endpoint2,
			defaults: withDefaults$1.bind(null, endpoint2)
		});
	}
	var request = withDefaults$1(import_endpoint.endpoint, { headers: { "user-agent": `octokit-request.js/${VERSION$4} ${(0, import_universal_user_agent$2.getUserAgent)()}` } });
	0 && (module.exports = { request });
} });

//#endregion
//#region ../node_modules/.pnpm/@octokit+graphql@7.1.0/node_modules/@octokit/graphql/dist-node/index.js
var require_dist_node$4 = __commonJS({ "../node_modules/.pnpm/@octokit+graphql@7.1.0/node_modules/@octokit/graphql/dist-node/index.js"(exports, module) {
	var __defProp$4 = Object.defineProperty;
	var __getOwnPropDesc$4 = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$4 = Object.getOwnPropertyNames;
	var __hasOwnProp$4 = Object.prototype.hasOwnProperty;
	var __export$4 = (target, all$1) => {
		for (var name in all$1) __defProp$4(target, name, {
			get: all$1[name],
			enumerable: true
		});
	};
	var __copyProps$4 = (to, from, except, desc) => {
		if (from && typeof from === "object" || typeof from === "function") {
			for (let key of __getOwnPropNames$4(from)) if (!__hasOwnProp$4.call(to, key) && key !== except) __defProp$4(to, key, {
				get: () => from[key],
				enumerable: !(desc = __getOwnPropDesc$4(from, key)) || desc.enumerable
			});
		}
		return to;
	};
	var __toCommonJS$4 = (mod) => __copyProps$4(__defProp$4({}, "__esModule", { value: true }), mod);
	var dist_src_exports$4 = {};
	__export$4(dist_src_exports$4, {
		GraphqlResponseError: () => GraphqlResponseError,
		graphql: () => graphql2,
		withCustomRequest: () => withCustomRequest
	});
	module.exports = __toCommonJS$4(dist_src_exports$4);
	var import_request3 = require_dist_node$5();
	var import_universal_user_agent$1 = require_dist_node$9();
	var VERSION$3 = "7.1.0";
	var import_request2 = require_dist_node$5();
	var import_request$1 = require_dist_node$5();
	function _buildMessageForResponseErrors(data) {
		return `Request failed due to following response errors:
` + data.errors.map((e) => ` - ${e.message}`).join("\n");
	}
	var GraphqlResponseError = class extends Error {
		constructor(request2, headers, response) {
			super(_buildMessageForResponseErrors(response));
			this.request = request2;
			this.headers = headers;
			this.response = response;
			this.name = "GraphqlResponseError";
			this.errors = response.errors;
			this.data = response.data;
			if (Error.captureStackTrace) Error.captureStackTrace(this, this.constructor);
		}
	};
	var NON_VARIABLE_OPTIONS = [
		"method",
		"baseUrl",
		"url",
		"headers",
		"request",
		"query",
		"mediaType"
	];
	var FORBIDDEN_VARIABLE_OPTIONS = [
		"query",
		"method",
		"url"
	];
	var GHES_V3_SUFFIX_REGEX = /\/api\/v3\/?$/;
	function graphql(request2, query, options) {
		if (options) {
			if (typeof query === "string" && "query" in options) return Promise.reject(new Error(`[@octokit/graphql] "query" cannot be used as variable name`));
			for (const key in options) {
				if (!FORBIDDEN_VARIABLE_OPTIONS.includes(key)) continue;
				return Promise.reject(new Error(`[@octokit/graphql] "${key}" cannot be used as variable name`));
			}
		}
		const parsedOptions = typeof query === "string" ? Object.assign({ query }, options) : query;
		const requestOptions = Object.keys(parsedOptions).reduce((result, key) => {
			if (NON_VARIABLE_OPTIONS.includes(key)) {
				result[key] = parsedOptions[key];
				return result;
			}
			if (!result.variables) result.variables = {};
			result.variables[key] = parsedOptions[key];
			return result;
		}, {});
		const baseUrl$1 = parsedOptions.baseUrl || request2.endpoint.DEFAULTS.baseUrl;
		if (GHES_V3_SUFFIX_REGEX.test(baseUrl$1)) requestOptions.url = baseUrl$1.replace(GHES_V3_SUFFIX_REGEX, "/api/graphql");
		return request2(requestOptions).then((response) => {
			if (response.data.errors) {
				const headers = {};
				for (const key of Object.keys(response.headers)) headers[key] = response.headers[key];
				throw new GraphqlResponseError(requestOptions, headers, response.data);
			}
			return response.data.data;
		});
	}
	function withDefaults(request2, newDefaults) {
		const newRequest = request2.defaults(newDefaults);
		const newApi = (query, options) => {
			return graphql(newRequest, query, options);
		};
		return Object.assign(newApi, {
			defaults: withDefaults.bind(null, newRequest),
			endpoint: newRequest.endpoint
		});
	}
	var graphql2 = withDefaults(import_request3.request, {
		headers: { "user-agent": `octokit-graphql.js/${VERSION$3} ${(0, import_universal_user_agent$1.getUserAgent)()}` },
		method: "POST",
		url: "/graphql"
	});
	function withCustomRequest(customRequest) {
		return withDefaults(customRequest, {
			method: "POST",
			url: "/graphql"
		});
	}
	0 && (module.exports = {
		GraphqlResponseError,
		graphql,
		withCustomRequest
	});
} });

//#endregion
//#region ../node_modules/.pnpm/@octokit+auth-token@4.0.0/node_modules/@octokit/auth-token/dist-node/index.js
var require_dist_node$3 = __commonJS({ "../node_modules/.pnpm/@octokit+auth-token@4.0.0/node_modules/@octokit/auth-token/dist-node/index.js"(exports, module) {
	var __defProp$3 = Object.defineProperty;
	var __getOwnPropDesc$3 = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$3 = Object.getOwnPropertyNames;
	var __hasOwnProp$3 = Object.prototype.hasOwnProperty;
	var __export$3 = (target, all$1) => {
		for (var name in all$1) __defProp$3(target, name, {
			get: all$1[name],
			enumerable: true
		});
	};
	var __copyProps$3 = (to, from, except, desc) => {
		if (from && typeof from === "object" || typeof from === "function") {
			for (let key of __getOwnPropNames$3(from)) if (!__hasOwnProp$3.call(to, key) && key !== except) __defProp$3(to, key, {
				get: () => from[key],
				enumerable: !(desc = __getOwnPropDesc$3(from, key)) || desc.enumerable
			});
		}
		return to;
	};
	var __toCommonJS$3 = (mod) => __copyProps$3(__defProp$3({}, "__esModule", { value: true }), mod);
	var dist_src_exports$3 = {};
	__export$3(dist_src_exports$3, { createTokenAuth: () => createTokenAuth });
	module.exports = __toCommonJS$3(dist_src_exports$3);
	var REGEX_IS_INSTALLATION_LEGACY = /^v1\./;
	var REGEX_IS_INSTALLATION = /^ghs_/;
	var REGEX_IS_USER_TO_SERVER = /^ghu_/;
	async function auth(token) {
		const isApp = token.split(/\./).length === 3;
		const isInstallation = REGEX_IS_INSTALLATION_LEGACY.test(token) || REGEX_IS_INSTALLATION.test(token);
		const isUserToServer = REGEX_IS_USER_TO_SERVER.test(token);
		const tokenType = isApp ? "app" : isInstallation ? "installation" : isUserToServer ? "user-to-server" : "oauth";
		return {
			type: "token",
			token,
			tokenType
		};
	}
	function withAuthorizationPrefix(token) {
		if (token.split(/\./).length === 3) return `bearer ${token}`;
		return `token ${token}`;
	}
	async function hook(token, request$2, route, parameters) {
		const endpoint$1 = request$2.endpoint.merge(route, parameters);
		endpoint$1.headers.authorization = withAuthorizationPrefix(token);
		return request$2(endpoint$1);
	}
	var createTokenAuth = function createTokenAuth2(token) {
		if (!token) throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");
		if (typeof token !== "string") throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");
		token = token.replace(/^(token|bearer) +/i, "");
		return Object.assign(auth.bind(null, token), { hook: hook.bind(null, token) });
	};
	0 && (module.exports = { createTokenAuth });
} });

//#endregion
//#region ../node_modules/.pnpm/@octokit+core@5.2.0/node_modules/@octokit/core/dist-node/index.js
var require_dist_node$2 = __commonJS({ "../node_modules/.pnpm/@octokit+core@5.2.0/node_modules/@octokit/core/dist-node/index.js"(exports, module) {
	var __defProp$2 = Object.defineProperty;
	var __getOwnPropDesc$2 = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$2 = Object.getOwnPropertyNames;
	var __hasOwnProp$2 = Object.prototype.hasOwnProperty;
	var __export$2 = (target, all$1) => {
		for (var name in all$1) __defProp$2(target, name, {
			get: all$1[name],
			enumerable: true
		});
	};
	var __copyProps$2 = (to, from, except, desc) => {
		if (from && typeof from === "object" || typeof from === "function") {
			for (let key of __getOwnPropNames$2(from)) if (!__hasOwnProp$2.call(to, key) && key !== except) __defProp$2(to, key, {
				get: () => from[key],
				enumerable: !(desc = __getOwnPropDesc$2(from, key)) || desc.enumerable
			});
		}
		return to;
	};
	var __toCommonJS$2 = (mod) => __copyProps$2(__defProp$2({}, "__esModule", { value: true }), mod);
	var dist_src_exports$2 = {};
	__export$2(dist_src_exports$2, { Octokit: () => Octokit });
	module.exports = __toCommonJS$2(dist_src_exports$2);
	var import_universal_user_agent = require_dist_node$9();
	var import_before_after_hook = require_before_after_hook();
	var import_request = require_dist_node$5();
	var import_graphql = require_dist_node$4();
	var import_auth_token = require_dist_node$3();
	var VERSION$2 = "5.2.0";
	var noop$2 = () => {};
	var consoleWarn = console.warn.bind(console);
	var consoleError = console.error.bind(console);
	var userAgentTrail = `octokit-core.js/${VERSION$2} ${(0, import_universal_user_agent.getUserAgent)()}`;
	var Octokit = class {
		static {
			this.VERSION = VERSION$2;
		}
		static defaults(defaults$2) {
			const OctokitWithDefaults = class extends this {
				constructor(...args) {
					const options = args[0] || {};
					if (typeof defaults$2 === "function") {
						super(defaults$2(options));
						return;
					}
					super(Object.assign({}, defaults$2, options, options.userAgent && defaults$2.userAgent ? { userAgent: `${options.userAgent} ${defaults$2.userAgent}` } : null));
				}
			};
			return OctokitWithDefaults;
		}
		static {
			this.plugins = [];
		}
		/**
		* Attach a plugin (or many) to your Octokit instance.
		*
		* @example
		* const API = Octokit.plugin(plugin1, plugin2, plugin3, ...)
		*/
		static plugin(...newPlugins) {
			const currentPlugins = this.plugins;
			const NewOctokit = class extends this {
				static {
					this.plugins = currentPlugins.concat(newPlugins.filter((plugin) => !currentPlugins.includes(plugin)));
				}
			};
			return NewOctokit;
		}
		constructor(options = {}) {
			const hook$1 = new import_before_after_hook.Collection();
			const requestDefaults = {
				baseUrl: import_request.request.endpoint.DEFAULTS.baseUrl,
				headers: {},
				request: Object.assign({}, options.request, { hook: hook$1.bind(null, "request") }),
				mediaType: {
					previews: [],
					format: ""
				}
			};
			requestDefaults.headers["user-agent"] = options.userAgent ? `${options.userAgent} ${userAgentTrail}` : userAgentTrail;
			if (options.baseUrl) requestDefaults.baseUrl = options.baseUrl;
			if (options.previews) requestDefaults.mediaType.previews = options.previews;
			if (options.timeZone) requestDefaults.headers["time-zone"] = options.timeZone;
			this.request = import_request.request.defaults(requestDefaults);
			this.graphql = (0, import_graphql.withCustomRequest)(this.request).defaults(requestDefaults);
			this.log = Object.assign({
				debug: noop$2,
				info: noop$2,
				warn: consoleWarn,
				error: consoleError
			}, options.log);
			this.hook = hook$1;
			if (!options.authStrategy) if (!options.auth) this.auth = async () => ({ type: "unauthenticated" });
else {
				const auth$1 = (0, import_auth_token.createTokenAuth)(options.auth);
				hook$1.wrap("request", auth$1.hook);
				this.auth = auth$1;
			}
else {
				const { authStrategy,...otherOptions } = options;
				const auth$1 = authStrategy(Object.assign({
					request: this.request,
					log: this.log,
					octokit: this,
					octokitOptions: otherOptions
				}, options.auth));
				hook$1.wrap("request", auth$1.hook);
				this.auth = auth$1;
			}
			const classConstructor = this.constructor;
			for (let i$2 = 0; i$2 < classConstructor.plugins.length; ++i$2) Object.assign(this, classConstructor.plugins[i$2](this, options));
		}
	};
	0 && (module.exports = { Octokit });
} });

//#endregion
//#region ../node_modules/.pnpm/@octokit+plugin-rest-endpoint-methods@10.4.1_@octokit+core@5.2.0/node_modules/@octokit/plugin-rest-endpoint-methods/dist-node/index.js
var require_dist_node$1 = __commonJS({ "../node_modules/.pnpm/@octokit+plugin-rest-endpoint-methods@10.4.1_@octokit+core@5.2.0/node_modules/@octokit/plugin-rest-endpoint-methods/dist-node/index.js"(exports, module) {
	var __defProp$1 = Object.defineProperty;
	var __getOwnPropDesc$1 = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$1 = Object.getOwnPropertyNames;
	var __hasOwnProp$1 = Object.prototype.hasOwnProperty;
	var __export$1 = (target, all$1) => {
		for (var name in all$1) __defProp$1(target, name, {
			get: all$1[name],
			enumerable: true
		});
	};
	var __copyProps$1 = (to, from, except, desc) => {
		if (from && typeof from === "object" || typeof from === "function") {
			for (let key of __getOwnPropNames$1(from)) if (!__hasOwnProp$1.call(to, key) && key !== except) __defProp$1(to, key, {
				get: () => from[key],
				enumerable: !(desc = __getOwnPropDesc$1(from, key)) || desc.enumerable
			});
		}
		return to;
	};
	var __toCommonJS$1 = (mod) => __copyProps$1(__defProp$1({}, "__esModule", { value: true }), mod);
	var dist_src_exports$1 = {};
	__export$1(dist_src_exports$1, {
		legacyRestEndpointMethods: () => legacyRestEndpointMethods,
		restEndpointMethods: () => restEndpointMethods
	});
	module.exports = __toCommonJS$1(dist_src_exports$1);
	var VERSION$1 = "10.4.1";
	var Endpoints = {
		actions: {
			addCustomLabelsToSelfHostedRunnerForOrg: ["POST /orgs/{org}/actions/runners/{runner_id}/labels"],
			addCustomLabelsToSelfHostedRunnerForRepo: ["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],
			addSelectedRepoToOrgSecret: ["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],
			addSelectedRepoToOrgVariable: ["PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],
			approveWorkflowRun: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],
			cancelWorkflowRun: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],
			createEnvironmentVariable: ["POST /repositories/{repository_id}/environments/{environment_name}/variables"],
			createOrUpdateEnvironmentSecret: ["PUT /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],
			createOrUpdateOrgSecret: ["PUT /orgs/{org}/actions/secrets/{secret_name}"],
			createOrUpdateRepoSecret: ["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],
			createOrgVariable: ["POST /orgs/{org}/actions/variables"],
			createRegistrationTokenForOrg: ["POST /orgs/{org}/actions/runners/registration-token"],
			createRegistrationTokenForRepo: ["POST /repos/{owner}/{repo}/actions/runners/registration-token"],
			createRemoveTokenForOrg: ["POST /orgs/{org}/actions/runners/remove-token"],
			createRemoveTokenForRepo: ["POST /repos/{owner}/{repo}/actions/runners/remove-token"],
			createRepoVariable: ["POST /repos/{owner}/{repo}/actions/variables"],
			createWorkflowDispatch: ["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],
			deleteActionsCacheById: ["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],
			deleteActionsCacheByKey: ["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],
			deleteArtifact: ["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],
			deleteEnvironmentSecret: ["DELETE /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],
			deleteEnvironmentVariable: ["DELETE /repositories/{repository_id}/environments/{environment_name}/variables/{name}"],
			deleteOrgSecret: ["DELETE /orgs/{org}/actions/secrets/{secret_name}"],
			deleteOrgVariable: ["DELETE /orgs/{org}/actions/variables/{name}"],
			deleteRepoSecret: ["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],
			deleteRepoVariable: ["DELETE /repos/{owner}/{repo}/actions/variables/{name}"],
			deleteSelfHostedRunnerFromOrg: ["DELETE /orgs/{org}/actions/runners/{runner_id}"],
			deleteSelfHostedRunnerFromRepo: ["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],
			deleteWorkflowRun: ["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],
			deleteWorkflowRunLogs: ["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],
			disableSelectedRepositoryGithubActionsOrganization: ["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],
			disableWorkflow: ["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],
			downloadArtifact: ["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],
			downloadJobLogsForWorkflowRun: ["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],
			downloadWorkflowRunAttemptLogs: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],
			downloadWorkflowRunLogs: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],
			enableSelectedRepositoryGithubActionsOrganization: ["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],
			enableWorkflow: ["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],
			forceCancelWorkflowRun: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel"],
			generateRunnerJitconfigForOrg: ["POST /orgs/{org}/actions/runners/generate-jitconfig"],
			generateRunnerJitconfigForRepo: ["POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"],
			getActionsCacheList: ["GET /repos/{owner}/{repo}/actions/caches"],
			getActionsCacheUsage: ["GET /repos/{owner}/{repo}/actions/cache/usage"],
			getActionsCacheUsageByRepoForOrg: ["GET /orgs/{org}/actions/cache/usage-by-repository"],
			getActionsCacheUsageForOrg: ["GET /orgs/{org}/actions/cache/usage"],
			getAllowedActionsOrganization: ["GET /orgs/{org}/actions/permissions/selected-actions"],
			getAllowedActionsRepository: ["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],
			getArtifact: ["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],
			getCustomOidcSubClaimForRepo: ["GET /repos/{owner}/{repo}/actions/oidc/customization/sub"],
			getEnvironmentPublicKey: ["GET /repositories/{repository_id}/environments/{environment_name}/secrets/public-key"],
			getEnvironmentSecret: ["GET /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],
			getEnvironmentVariable: ["GET /repositories/{repository_id}/environments/{environment_name}/variables/{name}"],
			getGithubActionsDefaultWorkflowPermissionsOrganization: ["GET /orgs/{org}/actions/permissions/workflow"],
			getGithubActionsDefaultWorkflowPermissionsRepository: ["GET /repos/{owner}/{repo}/actions/permissions/workflow"],
			getGithubActionsPermissionsOrganization: ["GET /orgs/{org}/actions/permissions"],
			getGithubActionsPermissionsRepository: ["GET /repos/{owner}/{repo}/actions/permissions"],
			getJobForWorkflowRun: ["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],
			getOrgPublicKey: ["GET /orgs/{org}/actions/secrets/public-key"],
			getOrgSecret: ["GET /orgs/{org}/actions/secrets/{secret_name}"],
			getOrgVariable: ["GET /orgs/{org}/actions/variables/{name}"],
			getPendingDeploymentsForRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],
			getRepoPermissions: [
				"GET /repos/{owner}/{repo}/actions/permissions",
				{},
				{ renamed: ["actions", "getGithubActionsPermissionsRepository"] }
			],
			getRepoPublicKey: ["GET /repos/{owner}/{repo}/actions/secrets/public-key"],
			getRepoSecret: ["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],
			getRepoVariable: ["GET /repos/{owner}/{repo}/actions/variables/{name}"],
			getReviewsForRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],
			getSelfHostedRunnerForOrg: ["GET /orgs/{org}/actions/runners/{runner_id}"],
			getSelfHostedRunnerForRepo: ["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],
			getWorkflow: ["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],
			getWorkflowAccessToRepository: ["GET /repos/{owner}/{repo}/actions/permissions/access"],
			getWorkflowRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],
			getWorkflowRunAttempt: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],
			getWorkflowRunUsage: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],
			getWorkflowUsage: ["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],
			listArtifactsForRepo: ["GET /repos/{owner}/{repo}/actions/artifacts"],
			listEnvironmentSecrets: ["GET /repositories/{repository_id}/environments/{environment_name}/secrets"],
			listEnvironmentVariables: ["GET /repositories/{repository_id}/environments/{environment_name}/variables"],
			listJobsForWorkflowRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],
			listJobsForWorkflowRunAttempt: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],
			listLabelsForSelfHostedRunnerForOrg: ["GET /orgs/{org}/actions/runners/{runner_id}/labels"],
			listLabelsForSelfHostedRunnerForRepo: ["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],
			listOrgSecrets: ["GET /orgs/{org}/actions/secrets"],
			listOrgVariables: ["GET /orgs/{org}/actions/variables"],
			listRepoOrganizationSecrets: ["GET /repos/{owner}/{repo}/actions/organization-secrets"],
			listRepoOrganizationVariables: ["GET /repos/{owner}/{repo}/actions/organization-variables"],
			listRepoSecrets: ["GET /repos/{owner}/{repo}/actions/secrets"],
			listRepoVariables: ["GET /repos/{owner}/{repo}/actions/variables"],
			listRepoWorkflows: ["GET /repos/{owner}/{repo}/actions/workflows"],
			listRunnerApplicationsForOrg: ["GET /orgs/{org}/actions/runners/downloads"],
			listRunnerApplicationsForRepo: ["GET /repos/{owner}/{repo}/actions/runners/downloads"],
			listSelectedReposForOrgSecret: ["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],
			listSelectedReposForOrgVariable: ["GET /orgs/{org}/actions/variables/{name}/repositories"],
			listSelectedRepositoriesEnabledGithubActionsOrganization: ["GET /orgs/{org}/actions/permissions/repositories"],
			listSelfHostedRunnersForOrg: ["GET /orgs/{org}/actions/runners"],
			listSelfHostedRunnersForRepo: ["GET /repos/{owner}/{repo}/actions/runners"],
			listWorkflowRunArtifacts: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],
			listWorkflowRuns: ["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],
			listWorkflowRunsForRepo: ["GET /repos/{owner}/{repo}/actions/runs"],
			reRunJobForWorkflowRun: ["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],
			reRunWorkflow: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],
			reRunWorkflowFailedJobs: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],
			removeAllCustomLabelsFromSelfHostedRunnerForOrg: ["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],
			removeAllCustomLabelsFromSelfHostedRunnerForRepo: ["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],
			removeCustomLabelFromSelfHostedRunnerForOrg: ["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],
			removeCustomLabelFromSelfHostedRunnerForRepo: ["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],
			removeSelectedRepoFromOrgSecret: ["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],
			removeSelectedRepoFromOrgVariable: ["DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],
			reviewCustomGatesForRun: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"],
			reviewPendingDeploymentsForRun: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],
			setAllowedActionsOrganization: ["PUT /orgs/{org}/actions/permissions/selected-actions"],
			setAllowedActionsRepository: ["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],
			setCustomLabelsForSelfHostedRunnerForOrg: ["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],
			setCustomLabelsForSelfHostedRunnerForRepo: ["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],
			setCustomOidcSubClaimForRepo: ["PUT /repos/{owner}/{repo}/actions/oidc/customization/sub"],
			setGithubActionsDefaultWorkflowPermissionsOrganization: ["PUT /orgs/{org}/actions/permissions/workflow"],
			setGithubActionsDefaultWorkflowPermissionsRepository: ["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],
			setGithubActionsPermissionsOrganization: ["PUT /orgs/{org}/actions/permissions"],
			setGithubActionsPermissionsRepository: ["PUT /repos/{owner}/{repo}/actions/permissions"],
			setSelectedReposForOrgSecret: ["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],
			setSelectedReposForOrgVariable: ["PUT /orgs/{org}/actions/variables/{name}/repositories"],
			setSelectedRepositoriesEnabledGithubActionsOrganization: ["PUT /orgs/{org}/actions/permissions/repositories"],
			setWorkflowAccessToRepository: ["PUT /repos/{owner}/{repo}/actions/permissions/access"],
			updateEnvironmentVariable: ["PATCH /repositories/{repository_id}/environments/{environment_name}/variables/{name}"],
			updateOrgVariable: ["PATCH /orgs/{org}/actions/variables/{name}"],
			updateRepoVariable: ["PATCH /repos/{owner}/{repo}/actions/variables/{name}"]
		},
		activity: {
			checkRepoIsStarredByAuthenticatedUser: ["GET /user/starred/{owner}/{repo}"],
			deleteRepoSubscription: ["DELETE /repos/{owner}/{repo}/subscription"],
			deleteThreadSubscription: ["DELETE /notifications/threads/{thread_id}/subscription"],
			getFeeds: ["GET /feeds"],
			getRepoSubscription: ["GET /repos/{owner}/{repo}/subscription"],
			getThread: ["GET /notifications/threads/{thread_id}"],
			getThreadSubscriptionForAuthenticatedUser: ["GET /notifications/threads/{thread_id}/subscription"],
			listEventsForAuthenticatedUser: ["GET /users/{username}/events"],
			listNotificationsForAuthenticatedUser: ["GET /notifications"],
			listOrgEventsForAuthenticatedUser: ["GET /users/{username}/events/orgs/{org}"],
			listPublicEvents: ["GET /events"],
			listPublicEventsForRepoNetwork: ["GET /networks/{owner}/{repo}/events"],
			listPublicEventsForUser: ["GET /users/{username}/events/public"],
			listPublicOrgEvents: ["GET /orgs/{org}/events"],
			listReceivedEventsForUser: ["GET /users/{username}/received_events"],
			listReceivedPublicEventsForUser: ["GET /users/{username}/received_events/public"],
			listRepoEvents: ["GET /repos/{owner}/{repo}/events"],
			listRepoNotificationsForAuthenticatedUser: ["GET /repos/{owner}/{repo}/notifications"],
			listReposStarredByAuthenticatedUser: ["GET /user/starred"],
			listReposStarredByUser: ["GET /users/{username}/starred"],
			listReposWatchedByUser: ["GET /users/{username}/subscriptions"],
			listStargazersForRepo: ["GET /repos/{owner}/{repo}/stargazers"],
			listWatchedReposForAuthenticatedUser: ["GET /user/subscriptions"],
			listWatchersForRepo: ["GET /repos/{owner}/{repo}/subscribers"],
			markNotificationsAsRead: ["PUT /notifications"],
			markRepoNotificationsAsRead: ["PUT /repos/{owner}/{repo}/notifications"],
			markThreadAsDone: ["DELETE /notifications/threads/{thread_id}"],
			markThreadAsRead: ["PATCH /notifications/threads/{thread_id}"],
			setRepoSubscription: ["PUT /repos/{owner}/{repo}/subscription"],
			setThreadSubscription: ["PUT /notifications/threads/{thread_id}/subscription"],
			starRepoForAuthenticatedUser: ["PUT /user/starred/{owner}/{repo}"],
			unstarRepoForAuthenticatedUser: ["DELETE /user/starred/{owner}/{repo}"]
		},
		apps: {
			addRepoToInstallation: [
				"PUT /user/installations/{installation_id}/repositories/{repository_id}",
				{},
				{ renamed: ["apps", "addRepoToInstallationForAuthenticatedUser"] }
			],
			addRepoToInstallationForAuthenticatedUser: ["PUT /user/installations/{installation_id}/repositories/{repository_id}"],
			checkToken: ["POST /applications/{client_id}/token"],
			createFromManifest: ["POST /app-manifests/{code}/conversions"],
			createInstallationAccessToken: ["POST /app/installations/{installation_id}/access_tokens"],
			deleteAuthorization: ["DELETE /applications/{client_id}/grant"],
			deleteInstallation: ["DELETE /app/installations/{installation_id}"],
			deleteToken: ["DELETE /applications/{client_id}/token"],
			getAuthenticated: ["GET /app"],
			getBySlug: ["GET /apps/{app_slug}"],
			getInstallation: ["GET /app/installations/{installation_id}"],
			getOrgInstallation: ["GET /orgs/{org}/installation"],
			getRepoInstallation: ["GET /repos/{owner}/{repo}/installation"],
			getSubscriptionPlanForAccount: ["GET /marketplace_listing/accounts/{account_id}"],
			getSubscriptionPlanForAccountStubbed: ["GET /marketplace_listing/stubbed/accounts/{account_id}"],
			getUserInstallation: ["GET /users/{username}/installation"],
			getWebhookConfigForApp: ["GET /app/hook/config"],
			getWebhookDelivery: ["GET /app/hook/deliveries/{delivery_id}"],
			listAccountsForPlan: ["GET /marketplace_listing/plans/{plan_id}/accounts"],
			listAccountsForPlanStubbed: ["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],
			listInstallationReposForAuthenticatedUser: ["GET /user/installations/{installation_id}/repositories"],
			listInstallationRequestsForAuthenticatedApp: ["GET /app/installation-requests"],
			listInstallations: ["GET /app/installations"],
			listInstallationsForAuthenticatedUser: ["GET /user/installations"],
			listPlans: ["GET /marketplace_listing/plans"],
			listPlansStubbed: ["GET /marketplace_listing/stubbed/plans"],
			listReposAccessibleToInstallation: ["GET /installation/repositories"],
			listSubscriptionsForAuthenticatedUser: ["GET /user/marketplace_purchases"],
			listSubscriptionsForAuthenticatedUserStubbed: ["GET /user/marketplace_purchases/stubbed"],
			listWebhookDeliveries: ["GET /app/hook/deliveries"],
			redeliverWebhookDelivery: ["POST /app/hook/deliveries/{delivery_id}/attempts"],
			removeRepoFromInstallation: [
				"DELETE /user/installations/{installation_id}/repositories/{repository_id}",
				{},
				{ renamed: ["apps", "removeRepoFromInstallationForAuthenticatedUser"] }
			],
			removeRepoFromInstallationForAuthenticatedUser: ["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],
			resetToken: ["PATCH /applications/{client_id}/token"],
			revokeInstallationAccessToken: ["DELETE /installation/token"],
			scopeToken: ["POST /applications/{client_id}/token/scoped"],
			suspendInstallation: ["PUT /app/installations/{installation_id}/suspended"],
			unsuspendInstallation: ["DELETE /app/installations/{installation_id}/suspended"],
			updateWebhookConfigForApp: ["PATCH /app/hook/config"]
		},
		billing: {
			getGithubActionsBillingOrg: ["GET /orgs/{org}/settings/billing/actions"],
			getGithubActionsBillingUser: ["GET /users/{username}/settings/billing/actions"],
			getGithubPackagesBillingOrg: ["GET /orgs/{org}/settings/billing/packages"],
			getGithubPackagesBillingUser: ["GET /users/{username}/settings/billing/packages"],
			getSharedStorageBillingOrg: ["GET /orgs/{org}/settings/billing/shared-storage"],
			getSharedStorageBillingUser: ["GET /users/{username}/settings/billing/shared-storage"]
		},
		checks: {
			create: ["POST /repos/{owner}/{repo}/check-runs"],
			createSuite: ["POST /repos/{owner}/{repo}/check-suites"],
			get: ["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],
			getSuite: ["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],
			listAnnotations: ["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],
			listForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],
			listForSuite: ["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],
			listSuitesForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],
			rerequestRun: ["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],
			rerequestSuite: ["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],
			setSuitesPreferences: ["PATCH /repos/{owner}/{repo}/check-suites/preferences"],
			update: ["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]
		},
		codeScanning: {
			deleteAnalysis: ["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],
			getAlert: [
				"GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",
				{},
				{ renamedParameters: { alert_id: "alert_number" } }
			],
			getAnalysis: ["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],
			getCodeqlDatabase: ["GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],
			getDefaultSetup: ["GET /repos/{owner}/{repo}/code-scanning/default-setup"],
			getSarif: ["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],
			listAlertInstances: ["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],
			listAlertsForOrg: ["GET /orgs/{org}/code-scanning/alerts"],
			listAlertsForRepo: ["GET /repos/{owner}/{repo}/code-scanning/alerts"],
			listAlertsInstances: [
				"GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
				{},
				{ renamed: ["codeScanning", "listAlertInstances"] }
			],
			listCodeqlDatabases: ["GET /repos/{owner}/{repo}/code-scanning/codeql/databases"],
			listRecentAnalyses: ["GET /repos/{owner}/{repo}/code-scanning/analyses"],
			updateAlert: ["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],
			updateDefaultSetup: ["PATCH /repos/{owner}/{repo}/code-scanning/default-setup"],
			uploadSarif: ["POST /repos/{owner}/{repo}/code-scanning/sarifs"]
		},
		codesOfConduct: {
			getAllCodesOfConduct: ["GET /codes_of_conduct"],
			getConductCode: ["GET /codes_of_conduct/{key}"]
		},
		codespaces: {
			addRepositoryForSecretForAuthenticatedUser: ["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],
			addSelectedRepoToOrgSecret: ["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],
			checkPermissionsForDevcontainer: ["GET /repos/{owner}/{repo}/codespaces/permissions_check"],
			codespaceMachinesForAuthenticatedUser: ["GET /user/codespaces/{codespace_name}/machines"],
			createForAuthenticatedUser: ["POST /user/codespaces"],
			createOrUpdateOrgSecret: ["PUT /orgs/{org}/codespaces/secrets/{secret_name}"],
			createOrUpdateRepoSecret: ["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],
			createOrUpdateSecretForAuthenticatedUser: ["PUT /user/codespaces/secrets/{secret_name}"],
			createWithPrForAuthenticatedUser: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],
			createWithRepoForAuthenticatedUser: ["POST /repos/{owner}/{repo}/codespaces"],
			deleteForAuthenticatedUser: ["DELETE /user/codespaces/{codespace_name}"],
			deleteFromOrganization: ["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],
			deleteOrgSecret: ["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],
			deleteRepoSecret: ["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],
			deleteSecretForAuthenticatedUser: ["DELETE /user/codespaces/secrets/{secret_name}"],
			exportForAuthenticatedUser: ["POST /user/codespaces/{codespace_name}/exports"],
			getCodespacesForUserInOrg: ["GET /orgs/{org}/members/{username}/codespaces"],
			getExportDetailsForAuthenticatedUser: ["GET /user/codespaces/{codespace_name}/exports/{export_id}"],
			getForAuthenticatedUser: ["GET /user/codespaces/{codespace_name}"],
			getOrgPublicKey: ["GET /orgs/{org}/codespaces/secrets/public-key"],
			getOrgSecret: ["GET /orgs/{org}/codespaces/secrets/{secret_name}"],
			getPublicKeyForAuthenticatedUser: ["GET /user/codespaces/secrets/public-key"],
			getRepoPublicKey: ["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],
			getRepoSecret: ["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],
			getSecretForAuthenticatedUser: ["GET /user/codespaces/secrets/{secret_name}"],
			listDevcontainersInRepositoryForAuthenticatedUser: ["GET /repos/{owner}/{repo}/codespaces/devcontainers"],
			listForAuthenticatedUser: ["GET /user/codespaces"],
			listInOrganization: [
				"GET /orgs/{org}/codespaces",
				{},
				{ renamedParameters: { org_id: "org" } }
			],
			listInRepositoryForAuthenticatedUser: ["GET /repos/{owner}/{repo}/codespaces"],
			listOrgSecrets: ["GET /orgs/{org}/codespaces/secrets"],
			listRepoSecrets: ["GET /repos/{owner}/{repo}/codespaces/secrets"],
			listRepositoriesForSecretForAuthenticatedUser: ["GET /user/codespaces/secrets/{secret_name}/repositories"],
			listSecretsForAuthenticatedUser: ["GET /user/codespaces/secrets"],
			listSelectedReposForOrgSecret: ["GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],
			preFlightWithRepoForAuthenticatedUser: ["GET /repos/{owner}/{repo}/codespaces/new"],
			publishForAuthenticatedUser: ["POST /user/codespaces/{codespace_name}/publish"],
			removeRepositoryForSecretForAuthenticatedUser: ["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],
			removeSelectedRepoFromOrgSecret: ["DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],
			repoMachinesForAuthenticatedUser: ["GET /repos/{owner}/{repo}/codespaces/machines"],
			setRepositoriesForSecretForAuthenticatedUser: ["PUT /user/codespaces/secrets/{secret_name}/repositories"],
			setSelectedReposForOrgSecret: ["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],
			startForAuthenticatedUser: ["POST /user/codespaces/{codespace_name}/start"],
			stopForAuthenticatedUser: ["POST /user/codespaces/{codespace_name}/stop"],
			stopInOrganization: ["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],
			updateForAuthenticatedUser: ["PATCH /user/codespaces/{codespace_name}"]
		},
		copilot: {
			addCopilotSeatsForTeams: ["POST /orgs/{org}/copilot/billing/selected_teams"],
			addCopilotSeatsForUsers: ["POST /orgs/{org}/copilot/billing/selected_users"],
			cancelCopilotSeatAssignmentForTeams: ["DELETE /orgs/{org}/copilot/billing/selected_teams"],
			cancelCopilotSeatAssignmentForUsers: ["DELETE /orgs/{org}/copilot/billing/selected_users"],
			getCopilotOrganizationDetails: ["GET /orgs/{org}/copilot/billing"],
			getCopilotSeatDetailsForUser: ["GET /orgs/{org}/members/{username}/copilot"],
			listCopilotSeats: ["GET /orgs/{org}/copilot/billing/seats"]
		},
		dependabot: {
			addSelectedRepoToOrgSecret: ["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],
			createOrUpdateOrgSecret: ["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],
			createOrUpdateRepoSecret: ["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],
			deleteOrgSecret: ["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],
			deleteRepoSecret: ["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],
			getAlert: ["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],
			getOrgPublicKey: ["GET /orgs/{org}/dependabot/secrets/public-key"],
			getOrgSecret: ["GET /orgs/{org}/dependabot/secrets/{secret_name}"],
			getRepoPublicKey: ["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],
			getRepoSecret: ["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],
			listAlertsForEnterprise: ["GET /enterprises/{enterprise}/dependabot/alerts"],
			listAlertsForOrg: ["GET /orgs/{org}/dependabot/alerts"],
			listAlertsForRepo: ["GET /repos/{owner}/{repo}/dependabot/alerts"],
			listOrgSecrets: ["GET /orgs/{org}/dependabot/secrets"],
			listRepoSecrets: ["GET /repos/{owner}/{repo}/dependabot/secrets"],
			listSelectedReposForOrgSecret: ["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],
			removeSelectedRepoFromOrgSecret: ["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],
			setSelectedReposForOrgSecret: ["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],
			updateAlert: ["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]
		},
		dependencyGraph: {
			createRepositorySnapshot: ["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],
			diffRange: ["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"],
			exportSbom: ["GET /repos/{owner}/{repo}/dependency-graph/sbom"]
		},
		emojis: { get: ["GET /emojis"] },
		gists: {
			checkIsStarred: ["GET /gists/{gist_id}/star"],
			create: ["POST /gists"],
			createComment: ["POST /gists/{gist_id}/comments"],
			delete: ["DELETE /gists/{gist_id}"],
			deleteComment: ["DELETE /gists/{gist_id}/comments/{comment_id}"],
			fork: ["POST /gists/{gist_id}/forks"],
			get: ["GET /gists/{gist_id}"],
			getComment: ["GET /gists/{gist_id}/comments/{comment_id}"],
			getRevision: ["GET /gists/{gist_id}/{sha}"],
			list: ["GET /gists"],
			listComments: ["GET /gists/{gist_id}/comments"],
			listCommits: ["GET /gists/{gist_id}/commits"],
			listForUser: ["GET /users/{username}/gists"],
			listForks: ["GET /gists/{gist_id}/forks"],
			listPublic: ["GET /gists/public"],
			listStarred: ["GET /gists/starred"],
			star: ["PUT /gists/{gist_id}/star"],
			unstar: ["DELETE /gists/{gist_id}/star"],
			update: ["PATCH /gists/{gist_id}"],
			updateComment: ["PATCH /gists/{gist_id}/comments/{comment_id}"]
		},
		git: {
			createBlob: ["POST /repos/{owner}/{repo}/git/blobs"],
			createCommit: ["POST /repos/{owner}/{repo}/git/commits"],
			createRef: ["POST /repos/{owner}/{repo}/git/refs"],
			createTag: ["POST /repos/{owner}/{repo}/git/tags"],
			createTree: ["POST /repos/{owner}/{repo}/git/trees"],
			deleteRef: ["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],
			getBlob: ["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],
			getCommit: ["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],
			getRef: ["GET /repos/{owner}/{repo}/git/ref/{ref}"],
			getTag: ["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],
			getTree: ["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],
			listMatchingRefs: ["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],
			updateRef: ["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]
		},
		gitignore: {
			getAllTemplates: ["GET /gitignore/templates"],
			getTemplate: ["GET /gitignore/templates/{name}"]
		},
		interactions: {
			getRestrictionsForAuthenticatedUser: ["GET /user/interaction-limits"],
			getRestrictionsForOrg: ["GET /orgs/{org}/interaction-limits"],
			getRestrictionsForRepo: ["GET /repos/{owner}/{repo}/interaction-limits"],
			getRestrictionsForYourPublicRepos: [
				"GET /user/interaction-limits",
				{},
				{ renamed: ["interactions", "getRestrictionsForAuthenticatedUser"] }
			],
			removeRestrictionsForAuthenticatedUser: ["DELETE /user/interaction-limits"],
			removeRestrictionsForOrg: ["DELETE /orgs/{org}/interaction-limits"],
			removeRestrictionsForRepo: ["DELETE /repos/{owner}/{repo}/interaction-limits"],
			removeRestrictionsForYourPublicRepos: [
				"DELETE /user/interaction-limits",
				{},
				{ renamed: ["interactions", "removeRestrictionsForAuthenticatedUser"] }
			],
			setRestrictionsForAuthenticatedUser: ["PUT /user/interaction-limits"],
			setRestrictionsForOrg: ["PUT /orgs/{org}/interaction-limits"],
			setRestrictionsForRepo: ["PUT /repos/{owner}/{repo}/interaction-limits"],
			setRestrictionsForYourPublicRepos: [
				"PUT /user/interaction-limits",
				{},
				{ renamed: ["interactions", "setRestrictionsForAuthenticatedUser"] }
			]
		},
		issues: {
			addAssignees: ["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],
			addLabels: ["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],
			checkUserCanBeAssigned: ["GET /repos/{owner}/{repo}/assignees/{assignee}"],
			checkUserCanBeAssignedToIssue: ["GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"],
			create: ["POST /repos/{owner}/{repo}/issues"],
			createComment: ["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],
			createLabel: ["POST /repos/{owner}/{repo}/labels"],
			createMilestone: ["POST /repos/{owner}/{repo}/milestones"],
			deleteComment: ["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],
			deleteLabel: ["DELETE /repos/{owner}/{repo}/labels/{name}"],
			deleteMilestone: ["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],
			get: ["GET /repos/{owner}/{repo}/issues/{issue_number}"],
			getComment: ["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],
			getEvent: ["GET /repos/{owner}/{repo}/issues/events/{event_id}"],
			getLabel: ["GET /repos/{owner}/{repo}/labels/{name}"],
			getMilestone: ["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],
			list: ["GET /issues"],
			listAssignees: ["GET /repos/{owner}/{repo}/assignees"],
			listComments: ["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],
			listCommentsForRepo: ["GET /repos/{owner}/{repo}/issues/comments"],
			listEvents: ["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],
			listEventsForRepo: ["GET /repos/{owner}/{repo}/issues/events"],
			listEventsForTimeline: ["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],
			listForAuthenticatedUser: ["GET /user/issues"],
			listForOrg: ["GET /orgs/{org}/issues"],
			listForRepo: ["GET /repos/{owner}/{repo}/issues"],
			listLabelsForMilestone: ["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],
			listLabelsForRepo: ["GET /repos/{owner}/{repo}/labels"],
			listLabelsOnIssue: ["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],
			listMilestones: ["GET /repos/{owner}/{repo}/milestones"],
			lock: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],
			removeAllLabels: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],
			removeAssignees: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],
			removeLabel: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],
			setLabels: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],
			unlock: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],
			update: ["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],
			updateComment: ["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],
			updateLabel: ["PATCH /repos/{owner}/{repo}/labels/{name}"],
			updateMilestone: ["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]
		},
		licenses: {
			get: ["GET /licenses/{license}"],
			getAllCommonlyUsed: ["GET /licenses"],
			getForRepo: ["GET /repos/{owner}/{repo}/license"]
		},
		markdown: {
			render: ["POST /markdown"],
			renderRaw: ["POST /markdown/raw", { headers: { "content-type": "text/plain; charset=utf-8" } }]
		},
		meta: {
			get: ["GET /meta"],
			getAllVersions: ["GET /versions"],
			getOctocat: ["GET /octocat"],
			getZen: ["GET /zen"],
			root: ["GET /"]
		},
		migrations: {
			cancelImport: [
				"DELETE /repos/{owner}/{repo}/import",
				{},
				{ deprecated: "octokit.rest.migrations.cancelImport() is deprecated, see https://docs.github.com/rest/migrations/source-imports#cancel-an-import" }
			],
			deleteArchiveForAuthenticatedUser: ["DELETE /user/migrations/{migration_id}/archive"],
			deleteArchiveForOrg: ["DELETE /orgs/{org}/migrations/{migration_id}/archive"],
			downloadArchiveForOrg: ["GET /orgs/{org}/migrations/{migration_id}/archive"],
			getArchiveForAuthenticatedUser: ["GET /user/migrations/{migration_id}/archive"],
			getCommitAuthors: [
				"GET /repos/{owner}/{repo}/import/authors",
				{},
				{ deprecated: "octokit.rest.migrations.getCommitAuthors() is deprecated, see https://docs.github.com/rest/migrations/source-imports#get-commit-authors" }
			],
			getImportStatus: [
				"GET /repos/{owner}/{repo}/import",
				{},
				{ deprecated: "octokit.rest.migrations.getImportStatus() is deprecated, see https://docs.github.com/rest/migrations/source-imports#get-an-import-status" }
			],
			getLargeFiles: [
				"GET /repos/{owner}/{repo}/import/large_files",
				{},
				{ deprecated: "octokit.rest.migrations.getLargeFiles() is deprecated, see https://docs.github.com/rest/migrations/source-imports#get-large-files" }
			],
			getStatusForAuthenticatedUser: ["GET /user/migrations/{migration_id}"],
			getStatusForOrg: ["GET /orgs/{org}/migrations/{migration_id}"],
			listForAuthenticatedUser: ["GET /user/migrations"],
			listForOrg: ["GET /orgs/{org}/migrations"],
			listReposForAuthenticatedUser: ["GET /user/migrations/{migration_id}/repositories"],
			listReposForOrg: ["GET /orgs/{org}/migrations/{migration_id}/repositories"],
			listReposForUser: [
				"GET /user/migrations/{migration_id}/repositories",
				{},
				{ renamed: ["migrations", "listReposForAuthenticatedUser"] }
			],
			mapCommitAuthor: [
				"PATCH /repos/{owner}/{repo}/import/authors/{author_id}",
				{},
				{ deprecated: "octokit.rest.migrations.mapCommitAuthor() is deprecated, see https://docs.github.com/rest/migrations/source-imports#map-a-commit-author" }
			],
			setLfsPreference: [
				"PATCH /repos/{owner}/{repo}/import/lfs",
				{},
				{ deprecated: "octokit.rest.migrations.setLfsPreference() is deprecated, see https://docs.github.com/rest/migrations/source-imports#update-git-lfs-preference" }
			],
			startForAuthenticatedUser: ["POST /user/migrations"],
			startForOrg: ["POST /orgs/{org}/migrations"],
			startImport: [
				"PUT /repos/{owner}/{repo}/import",
				{},
				{ deprecated: "octokit.rest.migrations.startImport() is deprecated, see https://docs.github.com/rest/migrations/source-imports#start-an-import" }
			],
			unlockRepoForAuthenticatedUser: ["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],
			unlockRepoForOrg: ["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"],
			updateImport: [
				"PATCH /repos/{owner}/{repo}/import",
				{},
				{ deprecated: "octokit.rest.migrations.updateImport() is deprecated, see https://docs.github.com/rest/migrations/source-imports#update-an-import" }
			]
		},
		oidc: {
			getOidcCustomSubTemplateForOrg: ["GET /orgs/{org}/actions/oidc/customization/sub"],
			updateOidcCustomSubTemplateForOrg: ["PUT /orgs/{org}/actions/oidc/customization/sub"]
		},
		orgs: {
			addSecurityManagerTeam: ["PUT /orgs/{org}/security-managers/teams/{team_slug}"],
			assignTeamToOrgRole: ["PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],
			assignUserToOrgRole: ["PUT /orgs/{org}/organization-roles/users/{username}/{role_id}"],
			blockUser: ["PUT /orgs/{org}/blocks/{username}"],
			cancelInvitation: ["DELETE /orgs/{org}/invitations/{invitation_id}"],
			checkBlockedUser: ["GET /orgs/{org}/blocks/{username}"],
			checkMembershipForUser: ["GET /orgs/{org}/members/{username}"],
			checkPublicMembershipForUser: ["GET /orgs/{org}/public_members/{username}"],
			convertMemberToOutsideCollaborator: ["PUT /orgs/{org}/outside_collaborators/{username}"],
			createCustomOrganizationRole: ["POST /orgs/{org}/organization-roles"],
			createInvitation: ["POST /orgs/{org}/invitations"],
			createOrUpdateCustomProperties: ["PATCH /orgs/{org}/properties/schema"],
			createOrUpdateCustomPropertiesValuesForRepos: ["PATCH /orgs/{org}/properties/values"],
			createOrUpdateCustomProperty: ["PUT /orgs/{org}/properties/schema/{custom_property_name}"],
			createWebhook: ["POST /orgs/{org}/hooks"],
			delete: ["DELETE /orgs/{org}"],
			deleteCustomOrganizationRole: ["DELETE /orgs/{org}/organization-roles/{role_id}"],
			deleteWebhook: ["DELETE /orgs/{org}/hooks/{hook_id}"],
			enableOrDisableSecurityProductOnAllOrgRepos: ["POST /orgs/{org}/{security_product}/{enablement}"],
			get: ["GET /orgs/{org}"],
			getAllCustomProperties: ["GET /orgs/{org}/properties/schema"],
			getCustomProperty: ["GET /orgs/{org}/properties/schema/{custom_property_name}"],
			getMembershipForAuthenticatedUser: ["GET /user/memberships/orgs/{org}"],
			getMembershipForUser: ["GET /orgs/{org}/memberships/{username}"],
			getOrgRole: ["GET /orgs/{org}/organization-roles/{role_id}"],
			getWebhook: ["GET /orgs/{org}/hooks/{hook_id}"],
			getWebhookConfigForOrg: ["GET /orgs/{org}/hooks/{hook_id}/config"],
			getWebhookDelivery: ["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],
			list: ["GET /organizations"],
			listAppInstallations: ["GET /orgs/{org}/installations"],
			listBlockedUsers: ["GET /orgs/{org}/blocks"],
			listCustomPropertiesValuesForRepos: ["GET /orgs/{org}/properties/values"],
			listFailedInvitations: ["GET /orgs/{org}/failed_invitations"],
			listForAuthenticatedUser: ["GET /user/orgs"],
			listForUser: ["GET /users/{username}/orgs"],
			listInvitationTeams: ["GET /orgs/{org}/invitations/{invitation_id}/teams"],
			listMembers: ["GET /orgs/{org}/members"],
			listMembershipsForAuthenticatedUser: ["GET /user/memberships/orgs"],
			listOrgRoleTeams: ["GET /orgs/{org}/organization-roles/{role_id}/teams"],
			listOrgRoleUsers: ["GET /orgs/{org}/organization-roles/{role_id}/users"],
			listOrgRoles: ["GET /orgs/{org}/organization-roles"],
			listOrganizationFineGrainedPermissions: ["GET /orgs/{org}/organization-fine-grained-permissions"],
			listOutsideCollaborators: ["GET /orgs/{org}/outside_collaborators"],
			listPatGrantRepositories: ["GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"],
			listPatGrantRequestRepositories: ["GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"],
			listPatGrantRequests: ["GET /orgs/{org}/personal-access-token-requests"],
			listPatGrants: ["GET /orgs/{org}/personal-access-tokens"],
			listPendingInvitations: ["GET /orgs/{org}/invitations"],
			listPublicMembers: ["GET /orgs/{org}/public_members"],
			listSecurityManagerTeams: ["GET /orgs/{org}/security-managers"],
			listWebhookDeliveries: ["GET /orgs/{org}/hooks/{hook_id}/deliveries"],
			listWebhooks: ["GET /orgs/{org}/hooks"],
			patchCustomOrganizationRole: ["PATCH /orgs/{org}/organization-roles/{role_id}"],
			pingWebhook: ["POST /orgs/{org}/hooks/{hook_id}/pings"],
			redeliverWebhookDelivery: ["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],
			removeCustomProperty: ["DELETE /orgs/{org}/properties/schema/{custom_property_name}"],
			removeMember: ["DELETE /orgs/{org}/members/{username}"],
			removeMembershipForUser: ["DELETE /orgs/{org}/memberships/{username}"],
			removeOutsideCollaborator: ["DELETE /orgs/{org}/outside_collaborators/{username}"],
			removePublicMembershipForAuthenticatedUser: ["DELETE /orgs/{org}/public_members/{username}"],
			removeSecurityManagerTeam: ["DELETE /orgs/{org}/security-managers/teams/{team_slug}"],
			reviewPatGrantRequest: ["POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"],
			reviewPatGrantRequestsInBulk: ["POST /orgs/{org}/personal-access-token-requests"],
			revokeAllOrgRolesTeam: ["DELETE /orgs/{org}/organization-roles/teams/{team_slug}"],
			revokeAllOrgRolesUser: ["DELETE /orgs/{org}/organization-roles/users/{username}"],
			revokeOrgRoleTeam: ["DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],
			revokeOrgRoleUser: ["DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}"],
			setMembershipForUser: ["PUT /orgs/{org}/memberships/{username}"],
			setPublicMembershipForAuthenticatedUser: ["PUT /orgs/{org}/public_members/{username}"],
			unblockUser: ["DELETE /orgs/{org}/blocks/{username}"],
			update: ["PATCH /orgs/{org}"],
			updateMembershipForAuthenticatedUser: ["PATCH /user/memberships/orgs/{org}"],
			updatePatAccess: ["POST /orgs/{org}/personal-access-tokens/{pat_id}"],
			updatePatAccesses: ["POST /orgs/{org}/personal-access-tokens"],
			updateWebhook: ["PATCH /orgs/{org}/hooks/{hook_id}"],
			updateWebhookConfigForOrg: ["PATCH /orgs/{org}/hooks/{hook_id}/config"]
		},
		packages: {
			deletePackageForAuthenticatedUser: ["DELETE /user/packages/{package_type}/{package_name}"],
			deletePackageForOrg: ["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],
			deletePackageForUser: ["DELETE /users/{username}/packages/{package_type}/{package_name}"],
			deletePackageVersionForAuthenticatedUser: ["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],
			deletePackageVersionForOrg: ["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],
			deletePackageVersionForUser: ["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],
			getAllPackageVersionsForAPackageOwnedByAnOrg: [
				"GET /orgs/{org}/packages/{package_type}/{package_name}/versions",
				{},
				{ renamed: ["packages", "getAllPackageVersionsForPackageOwnedByOrg"] }
			],
			getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [
				"GET /user/packages/{package_type}/{package_name}/versions",
				{},
				{ renamed: ["packages", "getAllPackageVersionsForPackageOwnedByAuthenticatedUser"] }
			],
			getAllPackageVersionsForPackageOwnedByAuthenticatedUser: ["GET /user/packages/{package_type}/{package_name}/versions"],
			getAllPackageVersionsForPackageOwnedByOrg: ["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],
			getAllPackageVersionsForPackageOwnedByUser: ["GET /users/{username}/packages/{package_type}/{package_name}/versions"],
			getPackageForAuthenticatedUser: ["GET /user/packages/{package_type}/{package_name}"],
			getPackageForOrganization: ["GET /orgs/{org}/packages/{package_type}/{package_name}"],
			getPackageForUser: ["GET /users/{username}/packages/{package_type}/{package_name}"],
			getPackageVersionForAuthenticatedUser: ["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],
			getPackageVersionForOrganization: ["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],
			getPackageVersionForUser: ["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],
			listDockerMigrationConflictingPackagesForAuthenticatedUser: ["GET /user/docker/conflicts"],
			listDockerMigrationConflictingPackagesForOrganization: ["GET /orgs/{org}/docker/conflicts"],
			listDockerMigrationConflictingPackagesForUser: ["GET /users/{username}/docker/conflicts"],
			listPackagesForAuthenticatedUser: ["GET /user/packages"],
			listPackagesForOrganization: ["GET /orgs/{org}/packages"],
			listPackagesForUser: ["GET /users/{username}/packages"],
			restorePackageForAuthenticatedUser: ["POST /user/packages/{package_type}/{package_name}/restore{?token}"],
			restorePackageForOrg: ["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],
			restorePackageForUser: ["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],
			restorePackageVersionForAuthenticatedUser: ["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],
			restorePackageVersionForOrg: ["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],
			restorePackageVersionForUser: ["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]
		},
		projects: {
			addCollaborator: ["PUT /projects/{project_id}/collaborators/{username}"],
			createCard: ["POST /projects/columns/{column_id}/cards"],
			createColumn: ["POST /projects/{project_id}/columns"],
			createForAuthenticatedUser: ["POST /user/projects"],
			createForOrg: ["POST /orgs/{org}/projects"],
			createForRepo: ["POST /repos/{owner}/{repo}/projects"],
			delete: ["DELETE /projects/{project_id}"],
			deleteCard: ["DELETE /projects/columns/cards/{card_id}"],
			deleteColumn: ["DELETE /projects/columns/{column_id}"],
			get: ["GET /projects/{project_id}"],
			getCard: ["GET /projects/columns/cards/{card_id}"],
			getColumn: ["GET /projects/columns/{column_id}"],
			getPermissionForUser: ["GET /projects/{project_id}/collaborators/{username}/permission"],
			listCards: ["GET /projects/columns/{column_id}/cards"],
			listCollaborators: ["GET /projects/{project_id}/collaborators"],
			listColumns: ["GET /projects/{project_id}/columns"],
			listForOrg: ["GET /orgs/{org}/projects"],
			listForRepo: ["GET /repos/{owner}/{repo}/projects"],
			listForUser: ["GET /users/{username}/projects"],
			moveCard: ["POST /projects/columns/cards/{card_id}/moves"],
			moveColumn: ["POST /projects/columns/{column_id}/moves"],
			removeCollaborator: ["DELETE /projects/{project_id}/collaborators/{username}"],
			update: ["PATCH /projects/{project_id}"],
			updateCard: ["PATCH /projects/columns/cards/{card_id}"],
			updateColumn: ["PATCH /projects/columns/{column_id}"]
		},
		pulls: {
			checkIfMerged: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
			create: ["POST /repos/{owner}/{repo}/pulls"],
			createReplyForReviewComment: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],
			createReview: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
			createReviewComment: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],
			deletePendingReview: ["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],
			deleteReviewComment: ["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],
			dismissReview: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],
			get: ["GET /repos/{owner}/{repo}/pulls/{pull_number}"],
			getReview: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],
			getReviewComment: ["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],
			list: ["GET /repos/{owner}/{repo}/pulls"],
			listCommentsForReview: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],
			listCommits: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],
			listFiles: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],
			listRequestedReviewers: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],
			listReviewComments: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],
			listReviewCommentsForRepo: ["GET /repos/{owner}/{repo}/pulls/comments"],
			listReviews: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
			merge: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
			removeRequestedReviewers: ["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],
			requestReviewers: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],
			submitReview: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],
			update: ["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],
			updateBranch: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],
			updateReview: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],
			updateReviewComment: ["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]
		},
		rateLimit: { get: ["GET /rate_limit"] },
		reactions: {
			createForCommitComment: ["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],
			createForIssue: ["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],
			createForIssueComment: ["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],
			createForPullRequestReviewComment: ["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],
			createForRelease: ["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],
			createForTeamDiscussionCommentInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],
			createForTeamDiscussionInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],
			deleteForCommitComment: ["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],
			deleteForIssue: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],
			deleteForIssueComment: ["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],
			deleteForPullRequestComment: ["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],
			deleteForRelease: ["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],
			deleteForTeamDiscussion: ["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],
			deleteForTeamDiscussionComment: ["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],
			listForCommitComment: ["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],
			listForIssue: ["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],
			listForIssueComment: ["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],
			listForPullRequestReviewComment: ["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],
			listForRelease: ["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],
			listForTeamDiscussionCommentInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],
			listForTeamDiscussionInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]
		},
		repos: {
			acceptInvitation: [
				"PATCH /user/repository_invitations/{invitation_id}",
				{},
				{ renamed: ["repos", "acceptInvitationForAuthenticatedUser"] }
			],
			acceptInvitationForAuthenticatedUser: ["PATCH /user/repository_invitations/{invitation_id}"],
			addAppAccessRestrictions: [
				"POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
				{},
				{ mapToData: "apps" }
			],
			addCollaborator: ["PUT /repos/{owner}/{repo}/collaborators/{username}"],
			addStatusCheckContexts: [
				"POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
				{},
				{ mapToData: "contexts" }
			],
			addTeamAccessRestrictions: [
				"POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
				{},
				{ mapToData: "teams" }
			],
			addUserAccessRestrictions: [
				"POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
				{},
				{ mapToData: "users" }
			],
			cancelPagesDeployment: ["POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel"],
			checkAutomatedSecurityFixes: ["GET /repos/{owner}/{repo}/automated-security-fixes"],
			checkCollaborator: ["GET /repos/{owner}/{repo}/collaborators/{username}"],
			checkVulnerabilityAlerts: ["GET /repos/{owner}/{repo}/vulnerability-alerts"],
			codeownersErrors: ["GET /repos/{owner}/{repo}/codeowners/errors"],
			compareCommits: ["GET /repos/{owner}/{repo}/compare/{base}...{head}"],
			compareCommitsWithBasehead: ["GET /repos/{owner}/{repo}/compare/{basehead}"],
			createAutolink: ["POST /repos/{owner}/{repo}/autolinks"],
			createCommitComment: ["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],
			createCommitSignatureProtection: ["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],
			createCommitStatus: ["POST /repos/{owner}/{repo}/statuses/{sha}"],
			createDeployKey: ["POST /repos/{owner}/{repo}/keys"],
			createDeployment: ["POST /repos/{owner}/{repo}/deployments"],
			createDeploymentBranchPolicy: ["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],
			createDeploymentProtectionRule: ["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],
			createDeploymentStatus: ["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],
			createDispatchEvent: ["POST /repos/{owner}/{repo}/dispatches"],
			createForAuthenticatedUser: ["POST /user/repos"],
			createFork: ["POST /repos/{owner}/{repo}/forks"],
			createInOrg: ["POST /orgs/{org}/repos"],
			createOrUpdateCustomPropertiesValues: ["PATCH /repos/{owner}/{repo}/properties/values"],
			createOrUpdateEnvironment: ["PUT /repos/{owner}/{repo}/environments/{environment_name}"],
			createOrUpdateFileContents: ["PUT /repos/{owner}/{repo}/contents/{path}"],
			createOrgRuleset: ["POST /orgs/{org}/rulesets"],
			createPagesDeployment: ["POST /repos/{owner}/{repo}/pages/deployments"],
			createPagesSite: ["POST /repos/{owner}/{repo}/pages"],
			createRelease: ["POST /repos/{owner}/{repo}/releases"],
			createRepoRuleset: ["POST /repos/{owner}/{repo}/rulesets"],
			createTagProtection: ["POST /repos/{owner}/{repo}/tags/protection"],
			createUsingTemplate: ["POST /repos/{template_owner}/{template_repo}/generate"],
			createWebhook: ["POST /repos/{owner}/{repo}/hooks"],
			declineInvitation: [
				"DELETE /user/repository_invitations/{invitation_id}",
				{},
				{ renamed: ["repos", "declineInvitationForAuthenticatedUser"] }
			],
			declineInvitationForAuthenticatedUser: ["DELETE /user/repository_invitations/{invitation_id}"],
			delete: ["DELETE /repos/{owner}/{repo}"],
			deleteAccessRestrictions: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],
			deleteAdminBranchProtection: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],
			deleteAnEnvironment: ["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],
			deleteAutolink: ["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],
			deleteBranchProtection: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],
			deleteCommitComment: ["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],
			deleteCommitSignatureProtection: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],
			deleteDeployKey: ["DELETE /repos/{owner}/{repo}/keys/{key_id}"],
			deleteDeployment: ["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],
			deleteDeploymentBranchPolicy: ["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],
			deleteFile: ["DELETE /repos/{owner}/{repo}/contents/{path}"],
			deleteInvitation: ["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],
			deleteOrgRuleset: ["DELETE /orgs/{org}/rulesets/{ruleset_id}"],
			deletePagesSite: ["DELETE /repos/{owner}/{repo}/pages"],
			deletePullRequestReviewProtection: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],
			deleteRelease: ["DELETE /repos/{owner}/{repo}/releases/{release_id}"],
			deleteReleaseAsset: ["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],
			deleteRepoRuleset: ["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],
			deleteTagProtection: ["DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}"],
			deleteWebhook: ["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],
			disableAutomatedSecurityFixes: ["DELETE /repos/{owner}/{repo}/automated-security-fixes"],
			disableDeploymentProtectionRule: ["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],
			disablePrivateVulnerabilityReporting: ["DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"],
			disableVulnerabilityAlerts: ["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],
			downloadArchive: [
				"GET /repos/{owner}/{repo}/zipball/{ref}",
				{},
				{ renamed: ["repos", "downloadZipballArchive"] }
			],
			downloadTarballArchive: ["GET /repos/{owner}/{repo}/tarball/{ref}"],
			downloadZipballArchive: ["GET /repos/{owner}/{repo}/zipball/{ref}"],
			enableAutomatedSecurityFixes: ["PUT /repos/{owner}/{repo}/automated-security-fixes"],
			enablePrivateVulnerabilityReporting: ["PUT /repos/{owner}/{repo}/private-vulnerability-reporting"],
			enableVulnerabilityAlerts: ["PUT /repos/{owner}/{repo}/vulnerability-alerts"],
			generateReleaseNotes: ["POST /repos/{owner}/{repo}/releases/generate-notes"],
			get: ["GET /repos/{owner}/{repo}"],
			getAccessRestrictions: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],
			getAdminBranchProtection: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],
			getAllDeploymentProtectionRules: ["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],
			getAllEnvironments: ["GET /repos/{owner}/{repo}/environments"],
			getAllStatusCheckContexts: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],
			getAllTopics: ["GET /repos/{owner}/{repo}/topics"],
			getAppsWithAccessToProtectedBranch: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],
			getAutolink: ["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],
			getBranch: ["GET /repos/{owner}/{repo}/branches/{branch}"],
			getBranchProtection: ["GET /repos/{owner}/{repo}/branches/{branch}/protection"],
			getBranchRules: ["GET /repos/{owner}/{repo}/rules/branches/{branch}"],
			getClones: ["GET /repos/{owner}/{repo}/traffic/clones"],
			getCodeFrequencyStats: ["GET /repos/{owner}/{repo}/stats/code_frequency"],
			getCollaboratorPermissionLevel: ["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],
			getCombinedStatusForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/status"],
			getCommit: ["GET /repos/{owner}/{repo}/commits/{ref}"],
			getCommitActivityStats: ["GET /repos/{owner}/{repo}/stats/commit_activity"],
			getCommitComment: ["GET /repos/{owner}/{repo}/comments/{comment_id}"],
			getCommitSignatureProtection: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],
			getCommunityProfileMetrics: ["GET /repos/{owner}/{repo}/community/profile"],
			getContent: ["GET /repos/{owner}/{repo}/contents/{path}"],
			getContributorsStats: ["GET /repos/{owner}/{repo}/stats/contributors"],
			getCustomDeploymentProtectionRule: ["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],
			getCustomPropertiesValues: ["GET /repos/{owner}/{repo}/properties/values"],
			getDeployKey: ["GET /repos/{owner}/{repo}/keys/{key_id}"],
			getDeployment: ["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],
			getDeploymentBranchPolicy: ["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],
			getDeploymentStatus: ["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],
			getEnvironment: ["GET /repos/{owner}/{repo}/environments/{environment_name}"],
			getLatestPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/latest"],
			getLatestRelease: ["GET /repos/{owner}/{repo}/releases/latest"],
			getOrgRuleSuite: ["GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}"],
			getOrgRuleSuites: ["GET /orgs/{org}/rulesets/rule-suites"],
			getOrgRuleset: ["GET /orgs/{org}/rulesets/{ruleset_id}"],
			getOrgRulesets: ["GET /orgs/{org}/rulesets"],
			getPages: ["GET /repos/{owner}/{repo}/pages"],
			getPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],
			getPagesDeployment: ["GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}"],
			getPagesHealthCheck: ["GET /repos/{owner}/{repo}/pages/health"],
			getParticipationStats: ["GET /repos/{owner}/{repo}/stats/participation"],
			getPullRequestReviewProtection: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],
			getPunchCardStats: ["GET /repos/{owner}/{repo}/stats/punch_card"],
			getReadme: ["GET /repos/{owner}/{repo}/readme"],
			getReadmeInDirectory: ["GET /repos/{owner}/{repo}/readme/{dir}"],
			getRelease: ["GET /repos/{owner}/{repo}/releases/{release_id}"],
			getReleaseAsset: ["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],
			getReleaseByTag: ["GET /repos/{owner}/{repo}/releases/tags/{tag}"],
			getRepoRuleSuite: ["GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}"],
			getRepoRuleSuites: ["GET /repos/{owner}/{repo}/rulesets/rule-suites"],
			getRepoRuleset: ["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],
			getRepoRulesets: ["GET /repos/{owner}/{repo}/rulesets"],
			getStatusChecksProtection: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],
			getTeamsWithAccessToProtectedBranch: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],
			getTopPaths: ["GET /repos/{owner}/{repo}/traffic/popular/paths"],
			getTopReferrers: ["GET /repos/{owner}/{repo}/traffic/popular/referrers"],
			getUsersWithAccessToProtectedBranch: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],
			getViews: ["GET /repos/{owner}/{repo}/traffic/views"],
			getWebhook: ["GET /repos/{owner}/{repo}/hooks/{hook_id}"],
			getWebhookConfigForRepo: ["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],
			getWebhookDelivery: ["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],
			listActivities: ["GET /repos/{owner}/{repo}/activity"],
			listAutolinks: ["GET /repos/{owner}/{repo}/autolinks"],
			listBranches: ["GET /repos/{owner}/{repo}/branches"],
			listBranchesForHeadCommit: ["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],
			listCollaborators: ["GET /repos/{owner}/{repo}/collaborators"],
			listCommentsForCommit: ["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],
			listCommitCommentsForRepo: ["GET /repos/{owner}/{repo}/comments"],
			listCommitStatusesForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],
			listCommits: ["GET /repos/{owner}/{repo}/commits"],
			listContributors: ["GET /repos/{owner}/{repo}/contributors"],
			listCustomDeploymentRuleIntegrations: ["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"],
			listDeployKeys: ["GET /repos/{owner}/{repo}/keys"],
			listDeploymentBranchPolicies: ["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],
			listDeploymentStatuses: ["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],
			listDeployments: ["GET /repos/{owner}/{repo}/deployments"],
			listForAuthenticatedUser: ["GET /user/repos"],
			listForOrg: ["GET /orgs/{org}/repos"],
			listForUser: ["GET /users/{username}/repos"],
			listForks: ["GET /repos/{owner}/{repo}/forks"],
			listInvitations: ["GET /repos/{owner}/{repo}/invitations"],
			listInvitationsForAuthenticatedUser: ["GET /user/repository_invitations"],
			listLanguages: ["GET /repos/{owner}/{repo}/languages"],
			listPagesBuilds: ["GET /repos/{owner}/{repo}/pages/builds"],
			listPublic: ["GET /repositories"],
			listPullRequestsAssociatedWithCommit: ["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],
			listReleaseAssets: ["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],
			listReleases: ["GET /repos/{owner}/{repo}/releases"],
			listTagProtection: ["GET /repos/{owner}/{repo}/tags/protection"],
			listTags: ["GET /repos/{owner}/{repo}/tags"],
			listTeams: ["GET /repos/{owner}/{repo}/teams"],
			listWebhookDeliveries: ["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],
			listWebhooks: ["GET /repos/{owner}/{repo}/hooks"],
			merge: ["POST /repos/{owner}/{repo}/merges"],
			mergeUpstream: ["POST /repos/{owner}/{repo}/merge-upstream"],
			pingWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],
			redeliverWebhookDelivery: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],
			removeAppAccessRestrictions: [
				"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
				{},
				{ mapToData: "apps" }
			],
			removeCollaborator: ["DELETE /repos/{owner}/{repo}/collaborators/{username}"],
			removeStatusCheckContexts: [
				"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
				{},
				{ mapToData: "contexts" }
			],
			removeStatusCheckProtection: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],
			removeTeamAccessRestrictions: [
				"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
				{},
				{ mapToData: "teams" }
			],
			removeUserAccessRestrictions: [
				"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
				{},
				{ mapToData: "users" }
			],
			renameBranch: ["POST /repos/{owner}/{repo}/branches/{branch}/rename"],
			replaceAllTopics: ["PUT /repos/{owner}/{repo}/topics"],
			requestPagesBuild: ["POST /repos/{owner}/{repo}/pages/builds"],
			setAdminBranchProtection: ["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],
			setAppAccessRestrictions: [
				"PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
				{},
				{ mapToData: "apps" }
			],
			setStatusCheckContexts: [
				"PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
				{},
				{ mapToData: "contexts" }
			],
			setTeamAccessRestrictions: [
				"PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
				{},
				{ mapToData: "teams" }
			],
			setUserAccessRestrictions: [
				"PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
				{},
				{ mapToData: "users" }
			],
			testPushWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],
			transfer: ["POST /repos/{owner}/{repo}/transfer"],
			update: ["PATCH /repos/{owner}/{repo}"],
			updateBranchProtection: ["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],
			updateCommitComment: ["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],
			updateDeploymentBranchPolicy: ["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],
			updateInformationAboutPagesSite: ["PUT /repos/{owner}/{repo}/pages"],
			updateInvitation: ["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],
			updateOrgRuleset: ["PUT /orgs/{org}/rulesets/{ruleset_id}"],
			updatePullRequestReviewProtection: ["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],
			updateRelease: ["PATCH /repos/{owner}/{repo}/releases/{release_id}"],
			updateReleaseAsset: ["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],
			updateRepoRuleset: ["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],
			updateStatusCheckPotection: [
				"PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
				{},
				{ renamed: ["repos", "updateStatusCheckProtection"] }
			],
			updateStatusCheckProtection: ["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],
			updateWebhook: ["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],
			updateWebhookConfigForRepo: ["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],
			uploadReleaseAsset: ["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}", { baseUrl: "https://uploads.github.com" }]
		},
		search: {
			code: ["GET /search/code"],
			commits: ["GET /search/commits"],
			issuesAndPullRequests: ["GET /search/issues"],
			labels: ["GET /search/labels"],
			repos: ["GET /search/repositories"],
			topics: ["GET /search/topics"],
			users: ["GET /search/users"]
		},
		secretScanning: {
			getAlert: ["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],
			listAlertsForEnterprise: ["GET /enterprises/{enterprise}/secret-scanning/alerts"],
			listAlertsForOrg: ["GET /orgs/{org}/secret-scanning/alerts"],
			listAlertsForRepo: ["GET /repos/{owner}/{repo}/secret-scanning/alerts"],
			listLocationsForAlert: ["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],
			updateAlert: ["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]
		},
		securityAdvisories: {
			createFork: ["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks"],
			createPrivateVulnerabilityReport: ["POST /repos/{owner}/{repo}/security-advisories/reports"],
			createRepositoryAdvisory: ["POST /repos/{owner}/{repo}/security-advisories"],
			createRepositoryAdvisoryCveRequest: ["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"],
			getGlobalAdvisory: ["GET /advisories/{ghsa_id}"],
			getRepositoryAdvisory: ["GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"],
			listGlobalAdvisories: ["GET /advisories"],
			listOrgRepositoryAdvisories: ["GET /orgs/{org}/security-advisories"],
			listRepositoryAdvisories: ["GET /repos/{owner}/{repo}/security-advisories"],
			updateRepositoryAdvisory: ["PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"]
		},
		teams: {
			addOrUpdateMembershipForUserInOrg: ["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],
			addOrUpdateProjectPermissionsInOrg: ["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],
			addOrUpdateRepoPermissionsInOrg: ["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],
			checkPermissionsForProjectInOrg: ["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],
			checkPermissionsForRepoInOrg: ["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],
			create: ["POST /orgs/{org}/teams"],
			createDiscussionCommentInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],
			createDiscussionInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions"],
			deleteDiscussionCommentInOrg: ["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],
			deleteDiscussionInOrg: ["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],
			deleteInOrg: ["DELETE /orgs/{org}/teams/{team_slug}"],
			getByName: ["GET /orgs/{org}/teams/{team_slug}"],
			getDiscussionCommentInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],
			getDiscussionInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],
			getMembershipForUserInOrg: ["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],
			list: ["GET /orgs/{org}/teams"],
			listChildInOrg: ["GET /orgs/{org}/teams/{team_slug}/teams"],
			listDiscussionCommentsInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],
			listDiscussionsInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions"],
			listForAuthenticatedUser: ["GET /user/teams"],
			listMembersInOrg: ["GET /orgs/{org}/teams/{team_slug}/members"],
			listPendingInvitationsInOrg: ["GET /orgs/{org}/teams/{team_slug}/invitations"],
			listProjectsInOrg: ["GET /orgs/{org}/teams/{team_slug}/projects"],
			listReposInOrg: ["GET /orgs/{org}/teams/{team_slug}/repos"],
			removeMembershipForUserInOrg: ["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],
			removeProjectInOrg: ["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],
			removeRepoInOrg: ["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],
			updateDiscussionCommentInOrg: ["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],
			updateDiscussionInOrg: ["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],
			updateInOrg: ["PATCH /orgs/{org}/teams/{team_slug}"]
		},
		users: {
			addEmailForAuthenticated: [
				"POST /user/emails",
				{},
				{ renamed: ["users", "addEmailForAuthenticatedUser"] }
			],
			addEmailForAuthenticatedUser: ["POST /user/emails"],
			addSocialAccountForAuthenticatedUser: ["POST /user/social_accounts"],
			block: ["PUT /user/blocks/{username}"],
			checkBlocked: ["GET /user/blocks/{username}"],
			checkFollowingForUser: ["GET /users/{username}/following/{target_user}"],
			checkPersonIsFollowedByAuthenticated: ["GET /user/following/{username}"],
			createGpgKeyForAuthenticated: [
				"POST /user/gpg_keys",
				{},
				{ renamed: ["users", "createGpgKeyForAuthenticatedUser"] }
			],
			createGpgKeyForAuthenticatedUser: ["POST /user/gpg_keys"],
			createPublicSshKeyForAuthenticated: [
				"POST /user/keys",
				{},
				{ renamed: ["users", "createPublicSshKeyForAuthenticatedUser"] }
			],
			createPublicSshKeyForAuthenticatedUser: ["POST /user/keys"],
			createSshSigningKeyForAuthenticatedUser: ["POST /user/ssh_signing_keys"],
			deleteEmailForAuthenticated: [
				"DELETE /user/emails",
				{},
				{ renamed: ["users", "deleteEmailForAuthenticatedUser"] }
			],
			deleteEmailForAuthenticatedUser: ["DELETE /user/emails"],
			deleteGpgKeyForAuthenticated: [
				"DELETE /user/gpg_keys/{gpg_key_id}",
				{},
				{ renamed: ["users", "deleteGpgKeyForAuthenticatedUser"] }
			],
			deleteGpgKeyForAuthenticatedUser: ["DELETE /user/gpg_keys/{gpg_key_id}"],
			deletePublicSshKeyForAuthenticated: [
				"DELETE /user/keys/{key_id}",
				{},
				{ renamed: ["users", "deletePublicSshKeyForAuthenticatedUser"] }
			],
			deletePublicSshKeyForAuthenticatedUser: ["DELETE /user/keys/{key_id}"],
			deleteSocialAccountForAuthenticatedUser: ["DELETE /user/social_accounts"],
			deleteSshSigningKeyForAuthenticatedUser: ["DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"],
			follow: ["PUT /user/following/{username}"],
			getAuthenticated: ["GET /user"],
			getByUsername: ["GET /users/{username}"],
			getContextForUser: ["GET /users/{username}/hovercard"],
			getGpgKeyForAuthenticated: [
				"GET /user/gpg_keys/{gpg_key_id}",
				{},
				{ renamed: ["users", "getGpgKeyForAuthenticatedUser"] }
			],
			getGpgKeyForAuthenticatedUser: ["GET /user/gpg_keys/{gpg_key_id}"],
			getPublicSshKeyForAuthenticated: [
				"GET /user/keys/{key_id}",
				{},
				{ renamed: ["users", "getPublicSshKeyForAuthenticatedUser"] }
			],
			getPublicSshKeyForAuthenticatedUser: ["GET /user/keys/{key_id}"],
			getSshSigningKeyForAuthenticatedUser: ["GET /user/ssh_signing_keys/{ssh_signing_key_id}"],
			list: ["GET /users"],
			listBlockedByAuthenticated: [
				"GET /user/blocks",
				{},
				{ renamed: ["users", "listBlockedByAuthenticatedUser"] }
			],
			listBlockedByAuthenticatedUser: ["GET /user/blocks"],
			listEmailsForAuthenticated: [
				"GET /user/emails",
				{},
				{ renamed: ["users", "listEmailsForAuthenticatedUser"] }
			],
			listEmailsForAuthenticatedUser: ["GET /user/emails"],
			listFollowedByAuthenticated: [
				"GET /user/following",
				{},
				{ renamed: ["users", "listFollowedByAuthenticatedUser"] }
			],
			listFollowedByAuthenticatedUser: ["GET /user/following"],
			listFollowersForAuthenticatedUser: ["GET /user/followers"],
			listFollowersForUser: ["GET /users/{username}/followers"],
			listFollowingForUser: ["GET /users/{username}/following"],
			listGpgKeysForAuthenticated: [
				"GET /user/gpg_keys",
				{},
				{ renamed: ["users", "listGpgKeysForAuthenticatedUser"] }
			],
			listGpgKeysForAuthenticatedUser: ["GET /user/gpg_keys"],
			listGpgKeysForUser: ["GET /users/{username}/gpg_keys"],
			listPublicEmailsForAuthenticated: [
				"GET /user/public_emails",
				{},
				{ renamed: ["users", "listPublicEmailsForAuthenticatedUser"] }
			],
			listPublicEmailsForAuthenticatedUser: ["GET /user/public_emails"],
			listPublicKeysForUser: ["GET /users/{username}/keys"],
			listPublicSshKeysForAuthenticated: [
				"GET /user/keys",
				{},
				{ renamed: ["users", "listPublicSshKeysForAuthenticatedUser"] }
			],
			listPublicSshKeysForAuthenticatedUser: ["GET /user/keys"],
			listSocialAccountsForAuthenticatedUser: ["GET /user/social_accounts"],
			listSocialAccountsForUser: ["GET /users/{username}/social_accounts"],
			listSshSigningKeysForAuthenticatedUser: ["GET /user/ssh_signing_keys"],
			listSshSigningKeysForUser: ["GET /users/{username}/ssh_signing_keys"],
			setPrimaryEmailVisibilityForAuthenticated: [
				"PATCH /user/email/visibility",
				{},
				{ renamed: ["users", "setPrimaryEmailVisibilityForAuthenticatedUser"] }
			],
			setPrimaryEmailVisibilityForAuthenticatedUser: ["PATCH /user/email/visibility"],
			unblock: ["DELETE /user/blocks/{username}"],
			unfollow: ["DELETE /user/following/{username}"],
			updateAuthenticated: ["PATCH /user"]
		}
	};
	var endpoints_default = Endpoints;
	var endpointMethodsMap = /* @__PURE__ */ new Map();
	for (const [scope, endpoints] of Object.entries(endpoints_default)) for (const [methodName, endpoint$1] of Object.entries(endpoints)) {
		const [route, defaults$2, decorations] = endpoint$1;
		const [method, url] = route.split(/ /);
		const endpointDefaults = Object.assign({
			method,
			url
		}, defaults$2);
		if (!endpointMethodsMap.has(scope)) endpointMethodsMap.set(
			scope,
			/* @__PURE__ */ new Map()
);
		endpointMethodsMap.get(scope).set(methodName, {
			scope,
			methodName,
			endpointDefaults,
			decorations
		});
	}
	var handler = {
		has({ scope }, methodName) {
			return endpointMethodsMap.get(scope).has(methodName);
		},
		getOwnPropertyDescriptor(target, methodName) {
			return {
				value: this.get(target, methodName),
				configurable: true,
				writable: true,
				enumerable: true
			};
		},
		defineProperty(target, methodName, descriptor) {
			Object.defineProperty(target.cache, methodName, descriptor);
			return true;
		},
		deleteProperty(target, methodName) {
			delete target.cache[methodName];
			return true;
		},
		ownKeys({ scope }) {
			return [...endpointMethodsMap.get(scope).keys()];
		},
		set(target, methodName, value) {
			return target.cache[methodName] = value;
		},
		get({ octokit, scope, cache: cache$1 }, methodName) {
			if (cache$1[methodName]) return cache$1[methodName];
			const method = endpointMethodsMap.get(scope).get(methodName);
			if (!method) return void 0;
			const { endpointDefaults, decorations } = method;
			if (decorations) cache$1[methodName] = decorate(octokit, scope, methodName, endpointDefaults, decorations);
else cache$1[methodName] = octokit.request.defaults(endpointDefaults);
			return cache$1[methodName];
		}
	};
	function endpointsToMethods(octokit) {
		const newMethods = {};
		for (const scope of endpointMethodsMap.keys()) newMethods[scope] = new Proxy({
			octokit,
			scope,
			cache: {}
		}, handler);
		return newMethods;
	}
	function decorate(octokit, scope, methodName, defaults$2, decorations) {
		const requestWithDefaults = octokit.request.defaults(defaults$2);
		function withDecorations(...args) {
			let options = requestWithDefaults.endpoint.merge(...args);
			if (decorations.mapToData) {
				options = Object.assign({}, options, {
					data: options[decorations.mapToData],
					[decorations.mapToData]: void 0
				});
				return requestWithDefaults(options);
			}
			if (decorations.renamed) {
				const [newScope, newMethodName] = decorations.renamed;
				octokit.log.warn(`octokit.${scope}.${methodName}() has been renamed to octokit.${newScope}.${newMethodName}()`);
			}
			if (decorations.deprecated) octokit.log.warn(decorations.deprecated);
			if (decorations.renamedParameters) {
				const options2 = requestWithDefaults.endpoint.merge(...args);
				for (const [name, alias] of Object.entries(decorations.renamedParameters)) if (name in options2) {
					octokit.log.warn(`"${name}" parameter is deprecated for "octokit.${scope}.${methodName}()". Use "${alias}" instead`);
					if (!(alias in options2)) options2[alias] = options2[name];
					delete options2[name];
				}
				return requestWithDefaults(options2);
			}
			return requestWithDefaults(...args);
		}
		return Object.assign(withDecorations, requestWithDefaults);
	}
	function restEndpointMethods(octokit) {
		const api$3 = endpointsToMethods(octokit);
		return { rest: api$3 };
	}
	restEndpointMethods.VERSION = VERSION$1;
	function legacyRestEndpointMethods(octokit) {
		const api$3 = endpointsToMethods(octokit);
		return {
			...api$3,
			rest: api$3
		};
	}
	legacyRestEndpointMethods.VERSION = VERSION$1;
	0 && (module.exports = {
		legacyRestEndpointMethods,
		restEndpointMethods
	});
} });

//#endregion
//#region ../node_modules/.pnpm/@octokit+plugin-paginate-rest@9.2.1_@octokit+core@5.2.0/node_modules/@octokit/plugin-paginate-rest/dist-node/index.js
var require_dist_node = __commonJS({ "../node_modules/.pnpm/@octokit+plugin-paginate-rest@9.2.1_@octokit+core@5.2.0/node_modules/@octokit/plugin-paginate-rest/dist-node/index.js"(exports, module) {
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all$1) => {
		for (var name in all$1) __defProp(target, name, {
			get: all$1[name],
			enumerable: true
		});
	};
	var __copyProps = (to, from, except, desc) => {
		if (from && typeof from === "object" || typeof from === "function") {
			for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
				get: () => from[key],
				enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
			});
		}
		return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var dist_src_exports = {};
	__export(dist_src_exports, {
		composePaginateRest: () => composePaginateRest,
		isPaginatingEndpoint: () => isPaginatingEndpoint,
		paginateRest: () => paginateRest,
		paginatingEndpoints: () => paginatingEndpoints
	});
	module.exports = __toCommonJS(dist_src_exports);
	var VERSION = "9.2.1";
	function normalizePaginatedListResponse(response) {
		if (!response.data) return {
			...response,
			data: []
		};
		const responseNeedsNormalization = "total_count" in response.data && !("url" in response.data);
		if (!responseNeedsNormalization) return response;
		const incompleteResults = response.data.incomplete_results;
		const repositorySelection = response.data.repository_selection;
		const totalCount = response.data.total_count;
		delete response.data.incomplete_results;
		delete response.data.repository_selection;
		delete response.data.total_count;
		const namespaceKey = Object.keys(response.data)[0];
		const data = response.data[namespaceKey];
		response.data = data;
		if (typeof incompleteResults !== "undefined") response.data.incomplete_results = incompleteResults;
		if (typeof repositorySelection !== "undefined") response.data.repository_selection = repositorySelection;
		response.data.total_count = totalCount;
		return response;
	}
	function iterator(octokit, route, parameters) {
		const options = typeof route === "function" ? route.endpoint(parameters) : octokit.request.endpoint(route, parameters);
		const requestMethod = typeof route === "function" ? route : octokit.request;
		const method = options.method;
		const headers = options.headers;
		let url = options.url;
		return { [Symbol.asyncIterator]: () => ({ async next() {
			if (!url) return { done: true };
			try {
				const response = await requestMethod({
					method,
					url,
					headers
				});
				const normalizedResponse = normalizePaginatedListResponse(response);
				url = ((normalizedResponse.headers.link || "").match(/<([^>]+)>;\s*rel="next"/) || [])[1];
				return { value: normalizedResponse };
			} catch (error$2) {
				if (error$2.status !== 409) throw error$2;
				url = "";
				return { value: {
					status: 200,
					headers: {},
					data: []
				} };
			}
		} }) };
	}
	function paginate(octokit, route, parameters, mapFn) {
		if (typeof parameters === "function") {
			mapFn = parameters;
			parameters = void 0;
		}
		return gather(octokit, [], iterator(octokit, route, parameters)[Symbol.asyncIterator](), mapFn);
	}
	function gather(octokit, results, iterator2, mapFn) {
		return iterator2.next().then((result) => {
			if (result.done) return results;
			let earlyExit = false;
			function done() {
				earlyExit = true;
			}
			results = results.concat(mapFn ? mapFn(result.value, done) : result.value.data);
			if (earlyExit) return results;
			return gather(octokit, results, iterator2, mapFn);
		});
	}
	var composePaginateRest = Object.assign(paginate, { iterator });
	var paginatingEndpoints = [
		"GET /advisories",
		"GET /app/hook/deliveries",
		"GET /app/installation-requests",
		"GET /app/installations",
		"GET /assignments/{assignment_id}/accepted_assignments",
		"GET /classrooms",
		"GET /classrooms/{classroom_id}/assignments",
		"GET /enterprises/{enterprise}/dependabot/alerts",
		"GET /enterprises/{enterprise}/secret-scanning/alerts",
		"GET /events",
		"GET /gists",
		"GET /gists/public",
		"GET /gists/starred",
		"GET /gists/{gist_id}/comments",
		"GET /gists/{gist_id}/commits",
		"GET /gists/{gist_id}/forks",
		"GET /installation/repositories",
		"GET /issues",
		"GET /licenses",
		"GET /marketplace_listing/plans",
		"GET /marketplace_listing/plans/{plan_id}/accounts",
		"GET /marketplace_listing/stubbed/plans",
		"GET /marketplace_listing/stubbed/plans/{plan_id}/accounts",
		"GET /networks/{owner}/{repo}/events",
		"GET /notifications",
		"GET /organizations",
		"GET /orgs/{org}/actions/cache/usage-by-repository",
		"GET /orgs/{org}/actions/permissions/repositories",
		"GET /orgs/{org}/actions/runners",
		"GET /orgs/{org}/actions/secrets",
		"GET /orgs/{org}/actions/secrets/{secret_name}/repositories",
		"GET /orgs/{org}/actions/variables",
		"GET /orgs/{org}/actions/variables/{name}/repositories",
		"GET /orgs/{org}/blocks",
		"GET /orgs/{org}/code-scanning/alerts",
		"GET /orgs/{org}/codespaces",
		"GET /orgs/{org}/codespaces/secrets",
		"GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories",
		"GET /orgs/{org}/copilot/billing/seats",
		"GET /orgs/{org}/dependabot/alerts",
		"GET /orgs/{org}/dependabot/secrets",
		"GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories",
		"GET /orgs/{org}/events",
		"GET /orgs/{org}/failed_invitations",
		"GET /orgs/{org}/hooks",
		"GET /orgs/{org}/hooks/{hook_id}/deliveries",
		"GET /orgs/{org}/installations",
		"GET /orgs/{org}/invitations",
		"GET /orgs/{org}/invitations/{invitation_id}/teams",
		"GET /orgs/{org}/issues",
		"GET /orgs/{org}/members",
		"GET /orgs/{org}/members/{username}/codespaces",
		"GET /orgs/{org}/migrations",
		"GET /orgs/{org}/migrations/{migration_id}/repositories",
		"GET /orgs/{org}/organization-roles/{role_id}/teams",
		"GET /orgs/{org}/organization-roles/{role_id}/users",
		"GET /orgs/{org}/outside_collaborators",
		"GET /orgs/{org}/packages",
		"GET /orgs/{org}/packages/{package_type}/{package_name}/versions",
		"GET /orgs/{org}/personal-access-token-requests",
		"GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories",
		"GET /orgs/{org}/personal-access-tokens",
		"GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories",
		"GET /orgs/{org}/projects",
		"GET /orgs/{org}/properties/values",
		"GET /orgs/{org}/public_members",
		"GET /orgs/{org}/repos",
		"GET /orgs/{org}/rulesets",
		"GET /orgs/{org}/rulesets/rule-suites",
		"GET /orgs/{org}/secret-scanning/alerts",
		"GET /orgs/{org}/security-advisories",
		"GET /orgs/{org}/teams",
		"GET /orgs/{org}/teams/{team_slug}/discussions",
		"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
		"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
		"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
		"GET /orgs/{org}/teams/{team_slug}/invitations",
		"GET /orgs/{org}/teams/{team_slug}/members",
		"GET /orgs/{org}/teams/{team_slug}/projects",
		"GET /orgs/{org}/teams/{team_slug}/repos",
		"GET /orgs/{org}/teams/{team_slug}/teams",
		"GET /projects/columns/{column_id}/cards",
		"GET /projects/{project_id}/collaborators",
		"GET /projects/{project_id}/columns",
		"GET /repos/{owner}/{repo}/actions/artifacts",
		"GET /repos/{owner}/{repo}/actions/caches",
		"GET /repos/{owner}/{repo}/actions/organization-secrets",
		"GET /repos/{owner}/{repo}/actions/organization-variables",
		"GET /repos/{owner}/{repo}/actions/runners",
		"GET /repos/{owner}/{repo}/actions/runs",
		"GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts",
		"GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs",
		"GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs",
		"GET /repos/{owner}/{repo}/actions/secrets",
		"GET /repos/{owner}/{repo}/actions/variables",
		"GET /repos/{owner}/{repo}/actions/workflows",
		"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs",
		"GET /repos/{owner}/{repo}/activity",
		"GET /repos/{owner}/{repo}/assignees",
		"GET /repos/{owner}/{repo}/branches",
		"GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations",
		"GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs",
		"GET /repos/{owner}/{repo}/code-scanning/alerts",
		"GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
		"GET /repos/{owner}/{repo}/code-scanning/analyses",
		"GET /repos/{owner}/{repo}/codespaces",
		"GET /repos/{owner}/{repo}/codespaces/devcontainers",
		"GET /repos/{owner}/{repo}/codespaces/secrets",
		"GET /repos/{owner}/{repo}/collaborators",
		"GET /repos/{owner}/{repo}/comments",
		"GET /repos/{owner}/{repo}/comments/{comment_id}/reactions",
		"GET /repos/{owner}/{repo}/commits",
		"GET /repos/{owner}/{repo}/commits/{commit_sha}/comments",
		"GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls",
		"GET /repos/{owner}/{repo}/commits/{ref}/check-runs",
		"GET /repos/{owner}/{repo}/commits/{ref}/check-suites",
		"GET /repos/{owner}/{repo}/commits/{ref}/status",
		"GET /repos/{owner}/{repo}/commits/{ref}/statuses",
		"GET /repos/{owner}/{repo}/contributors",
		"GET /repos/{owner}/{repo}/dependabot/alerts",
		"GET /repos/{owner}/{repo}/dependabot/secrets",
		"GET /repos/{owner}/{repo}/deployments",
		"GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
		"GET /repos/{owner}/{repo}/environments",
		"GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies",
		"GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps",
		"GET /repos/{owner}/{repo}/events",
		"GET /repos/{owner}/{repo}/forks",
		"GET /repos/{owner}/{repo}/hooks",
		"GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries",
		"GET /repos/{owner}/{repo}/invitations",
		"GET /repos/{owner}/{repo}/issues",
		"GET /repos/{owner}/{repo}/issues/comments",
		"GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
		"GET /repos/{owner}/{repo}/issues/events",
		"GET /repos/{owner}/{repo}/issues/{issue_number}/comments",
		"GET /repos/{owner}/{repo}/issues/{issue_number}/events",
		"GET /repos/{owner}/{repo}/issues/{issue_number}/labels",
		"GET /repos/{owner}/{repo}/issues/{issue_number}/reactions",
		"GET /repos/{owner}/{repo}/issues/{issue_number}/timeline",
		"GET /repos/{owner}/{repo}/keys",
		"GET /repos/{owner}/{repo}/labels",
		"GET /repos/{owner}/{repo}/milestones",
		"GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels",
		"GET /repos/{owner}/{repo}/notifications",
		"GET /repos/{owner}/{repo}/pages/builds",
		"GET /repos/{owner}/{repo}/projects",
		"GET /repos/{owner}/{repo}/pulls",
		"GET /repos/{owner}/{repo}/pulls/comments",
		"GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
		"GET /repos/{owner}/{repo}/pulls/{pull_number}/comments",
		"GET /repos/{owner}/{repo}/pulls/{pull_number}/commits",
		"GET /repos/{owner}/{repo}/pulls/{pull_number}/files",
		"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews",
		"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments",
		"GET /repos/{owner}/{repo}/releases",
		"GET /repos/{owner}/{repo}/releases/{release_id}/assets",
		"GET /repos/{owner}/{repo}/releases/{release_id}/reactions",
		"GET /repos/{owner}/{repo}/rules/branches/{branch}",
		"GET /repos/{owner}/{repo}/rulesets",
		"GET /repos/{owner}/{repo}/rulesets/rule-suites",
		"GET /repos/{owner}/{repo}/secret-scanning/alerts",
		"GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations",
		"GET /repos/{owner}/{repo}/security-advisories",
		"GET /repos/{owner}/{repo}/stargazers",
		"GET /repos/{owner}/{repo}/subscribers",
		"GET /repos/{owner}/{repo}/tags",
		"GET /repos/{owner}/{repo}/teams",
		"GET /repos/{owner}/{repo}/topics",
		"GET /repositories",
		"GET /repositories/{repository_id}/environments/{environment_name}/secrets",
		"GET /repositories/{repository_id}/environments/{environment_name}/variables",
		"GET /search/code",
		"GET /search/commits",
		"GET /search/issues",
		"GET /search/labels",
		"GET /search/repositories",
		"GET /search/topics",
		"GET /search/users",
		"GET /teams/{team_id}/discussions",
		"GET /teams/{team_id}/discussions/{discussion_number}/comments",
		"GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
		"GET /teams/{team_id}/discussions/{discussion_number}/reactions",
		"GET /teams/{team_id}/invitations",
		"GET /teams/{team_id}/members",
		"GET /teams/{team_id}/projects",
		"GET /teams/{team_id}/repos",
		"GET /teams/{team_id}/teams",
		"GET /user/blocks",
		"GET /user/codespaces",
		"GET /user/codespaces/secrets",
		"GET /user/emails",
		"GET /user/followers",
		"GET /user/following",
		"GET /user/gpg_keys",
		"GET /user/installations",
		"GET /user/installations/{installation_id}/repositories",
		"GET /user/issues",
		"GET /user/keys",
		"GET /user/marketplace_purchases",
		"GET /user/marketplace_purchases/stubbed",
		"GET /user/memberships/orgs",
		"GET /user/migrations",
		"GET /user/migrations/{migration_id}/repositories",
		"GET /user/orgs",
		"GET /user/packages",
		"GET /user/packages/{package_type}/{package_name}/versions",
		"GET /user/public_emails",
		"GET /user/repos",
		"GET /user/repository_invitations",
		"GET /user/social_accounts",
		"GET /user/ssh_signing_keys",
		"GET /user/starred",
		"GET /user/subscriptions",
		"GET /user/teams",
		"GET /users",
		"GET /users/{username}/events",
		"GET /users/{username}/events/orgs/{org}",
		"GET /users/{username}/events/public",
		"GET /users/{username}/followers",
		"GET /users/{username}/following",
		"GET /users/{username}/gists",
		"GET /users/{username}/gpg_keys",
		"GET /users/{username}/keys",
		"GET /users/{username}/orgs",
		"GET /users/{username}/packages",
		"GET /users/{username}/projects",
		"GET /users/{username}/received_events",
		"GET /users/{username}/received_events/public",
		"GET /users/{username}/repos",
		"GET /users/{username}/social_accounts",
		"GET /users/{username}/ssh_signing_keys",
		"GET /users/{username}/starred",
		"GET /users/{username}/subscriptions"
	];
	function isPaginatingEndpoint(arg) {
		if (typeof arg === "string") return paginatingEndpoints.includes(arg);
else return false;
	}
	function paginateRest(octokit) {
		return { paginate: Object.assign(paginate.bind(null, octokit), { iterator: iterator.bind(null, octokit) }) };
	}
	paginateRest.VERSION = VERSION;
	0 && (module.exports = {
		composePaginateRest,
		isPaginatingEndpoint,
		paginateRest,
		paginatingEndpoints
	});
} });

//#endregion
//#region ../node_modules/.pnpm/@actions+github@6.0.0/node_modules/@actions/github/lib/utils.js
var require_utils$5 = __commonJS({ "../node_modules/.pnpm/@actions+github@6.0.0/node_modules/@actions/github/lib/utils.js"(exports) {
	var __createBinding$1 = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
		if (k2 === undefined) k2 = k;
		var desc = Object.getOwnPropertyDescriptor(m, k);
		if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
			enumerable: true,
			get: function() {
				return m[k];
			}
		};
		Object.defineProperty(o, k2, desc);
	} : function(o, m, k, k2) {
		if (k2 === undefined) k2 = k;
		o[k2] = m[k];
	});
	var __setModuleDefault$1 = this && this.__setModuleDefault || (Object.create ? function(o, v) {
		Object.defineProperty(o, "default", {
			enumerable: true,
			value: v
		});
	} : function(o, v) {
		o["default"] = v;
	});
	var __importStar$1 = this && this.__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$1(result, mod, k);
		}
		__setModuleDefault$1(result, mod);
		return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getOctokitOptions = exports.GitHub = exports.defaults = exports.context = void 0;
	const Context$1 = __importStar$1(require_context());
	const Utils = __importStar$1(require_utils$6());
	const core_1 = require_dist_node$2();
	const plugin_rest_endpoint_methods_1 = require_dist_node$1();
	const plugin_paginate_rest_1 = require_dist_node();
	exports.context = new Context$1.Context();
	const baseUrl = Utils.getApiBaseUrl();
	exports.defaults = {
		baseUrl,
		request: {
			agent: Utils.getProxyAgent(baseUrl),
			fetch: Utils.getProxyFetch(baseUrl)
		}
	};
	exports.GitHub = core_1.Octokit.plugin(plugin_rest_endpoint_methods_1.restEndpointMethods, plugin_paginate_rest_1.paginateRest).defaults(exports.defaults);
	/**
	* Convience function to correctly format Octokit Options to pass into the constructor.
	*
	* @param     token    the repo PAT or GITHUB_TOKEN
	* @param     options  other options to set
	*/
	function getOctokitOptions(token, options) {
		const opts = Object.assign({}, options || {});
		const auth$1 = Utils.getAuthString(token, opts);
		if (auth$1) opts.auth = auth$1;
		return opts;
	}
	exports.getOctokitOptions = getOctokitOptions;
} });

//#endregion
//#region ../node_modules/.pnpm/@actions+github@6.0.0/node_modules/@actions/github/lib/github.js
var require_github = __commonJS({ "../node_modules/.pnpm/@actions+github@6.0.0/node_modules/@actions/github/lib/github.js"(exports) {
	var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
		if (k2 === undefined) k2 = k;
		var desc = Object.getOwnPropertyDescriptor(m, k);
		if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
			enumerable: true,
			get: function() {
				return m[k];
			}
		};
		Object.defineProperty(o, k2, desc);
	} : function(o, m, k, k2) {
		if (k2 === undefined) k2 = k;
		o[k2] = m[k];
	});
	var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
		Object.defineProperty(o, "default", {
			enumerable: true,
			value: v
		});
	} : function(o, v) {
		o["default"] = v;
	});
	var __importStar = this && this.__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
		}
		__setModuleDefault(result, mod);
		return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getOctokit = exports.context = void 0;
	const Context = __importStar(require_context());
	const utils_1 = require_utils$5();
	exports.context = new Context.Context();
	/**
	* Returns a hydrated octokit ready to use for GitHub Actions
	*
	* @param     token    the repo PAT or GITHUB_TOKEN
	* @param     options  other options to set
	*/
	function getOctokit$1(token, options, ...additionalPlugins) {
		const GitHubWithPlugins = utils_1.GitHub.plugin(...additionalPlugins);
		return new GitHubWithPlugins((0, utils_1.getOctokitOptions)(token, options));
	}
	exports.getOctokit = getOctokit$1;
} });

//#endregion
//#region src/generated/github-action.ts
var import_core$5 = __toESM$1(require_core$2());
const getInput = {
	string: import_core$5.getInput,
	boolean: import_core$5.getBooleanInput,
	multiline: import_core$5.getMultilineInput
};
const parseInputs = (options) => {
	return {
		"cwd": getInput[options?.["cwd"]?.type ?? "string"]("cwd", { trimWhitespace: options?.cwd?.trimWhitespace }),
		"commit-message": getInput[options?.["commit-message"]?.type ?? "string"]("commit-message", { trimWhitespace: options?.cwd?.trimWhitespace }),
		"pr-title": getInput[options?.["pr-title"]?.type ?? "string"]("pr-title", { trimWhitespace: options?.cwd?.trimWhitespace }),
		"token": getInput[options?.["token"]?.type ?? "string"]("token", { trimWhitespace: options?.cwd?.trimWhitespace }),
		"setup-git-user": getInput[options?.["setup-git-user"]?.type ?? "string"]("setup-git-user", { trimWhitespace: options?.cwd?.trimWhitespace }),
		"auto-merge": getInput[options?.["auto-merge"]?.type ?? "string"]("auto-merge", { trimWhitespace: options?.cwd?.trimWhitespace }),
		"pre-tag-script": getInput[options?.["pre-tag-script"]?.type ?? "string"]("pre-tag-script", { trimWhitespace: options?.cwd?.trimWhitespace })
	};
};
const dumpOutputs = (outputs) => {
	for (const [name, value] of Object.entries(outputs)) import_core$5.setOutput(name, value);
};

//#endregion
//#region ../node_modules/.pnpm/universalify@0.1.2/node_modules/universalify/index.js
var require_universalify = __commonJS({ "../node_modules/.pnpm/universalify@0.1.2/node_modules/universalify/index.js"(exports) {
	exports.fromCallback = function(fn) {
		return Object.defineProperty(function() {
			if (typeof arguments[arguments.length - 1] === "function") fn.apply(this, arguments);
else return new Promise((resolve$1, reject) => {
				arguments[arguments.length] = (err, res) => {
					if (err) return reject(err);
					resolve$1(res);
				};
				arguments.length++;
				fn.apply(this, arguments);
			});
		}, "name", { value: fn.name });
	};
	exports.fromPromise = function(fn) {
		return Object.defineProperty(function() {
			const cb = arguments[arguments.length - 1];
			if (typeof cb !== "function") return fn.apply(this, arguments);
else fn.apply(this, arguments).then((r) => cb(null, r), cb);
		}, "name", { value: fn.name });
	};
} });

//#endregion
//#region ../node_modules/.pnpm/graceful-fs@4.2.11/node_modules/graceful-fs/polyfills.js
var require_polyfills = __commonJS({ "../node_modules/.pnpm/graceful-fs@4.2.11/node_modules/graceful-fs/polyfills.js"(exports, module) {
	var constants$3 = require("constants");
	var origCwd = process.cwd;
	var cwd = null;
	var platform = process.env.GRACEFUL_FS_PLATFORM || process.platform;
	process.cwd = function() {
		if (!cwd) cwd = origCwd.call(process);
		return cwd;
	};
	try {
		process.cwd();
	} catch (er) {}
	if (typeof process.chdir === "function") {
		var chdir = process.chdir;
		process.chdir = function(d) {
			cwd = null;
			chdir.call(process, d);
		};
		if (Object.setPrototypeOf) Object.setPrototypeOf(process.chdir, chdir);
	}
	module.exports = patch$3;
	function patch$3(fs$70) {
		if (constants$3.hasOwnProperty("O_SYMLINK") && process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) patchLchmod(fs$70);
		if (!fs$70.lutimes) patchLutimes(fs$70);
		fs$70.chown = chownFix(fs$70.chown);
		fs$70.fchown = chownFix(fs$70.fchown);
		fs$70.lchown = chownFix(fs$70.lchown);
		fs$70.chmod = chmodFix(fs$70.chmod);
		fs$70.fchmod = chmodFix(fs$70.fchmod);
		fs$70.lchmod = chmodFix(fs$70.lchmod);
		fs$70.chownSync = chownFixSync(fs$70.chownSync);
		fs$70.fchownSync = chownFixSync(fs$70.fchownSync);
		fs$70.lchownSync = chownFixSync(fs$70.lchownSync);
		fs$70.chmodSync = chmodFixSync(fs$70.chmodSync);
		fs$70.fchmodSync = chmodFixSync(fs$70.fchmodSync);
		fs$70.lchmodSync = chmodFixSync(fs$70.lchmodSync);
		fs$70.stat = statFix(fs$70.stat);
		fs$70.fstat = statFix(fs$70.fstat);
		fs$70.lstat = statFix(fs$70.lstat);
		fs$70.statSync = statFixSync(fs$70.statSync);
		fs$70.fstatSync = statFixSync(fs$70.fstatSync);
		fs$70.lstatSync = statFixSync(fs$70.lstatSync);
		if (fs$70.chmod && !fs$70.lchmod) {
			fs$70.lchmod = function(path$72, mode, cb) {
				if (cb) process.nextTick(cb);
			};
			fs$70.lchmodSync = function() {};
		}
		if (fs$70.chown && !fs$70.lchown) {
			fs$70.lchown = function(path$72, uid$2, gid, cb) {
				if (cb) process.nextTick(cb);
			};
			fs$70.lchownSync = function() {};
		}
		if (platform === "win32") fs$70.rename = typeof fs$70.rename !== "function" ? fs$70.rename : function(fs$rename) {
			function rename$3(from, to, cb) {
				var start = Date.now();
				var backoff = 0;
				fs$rename(from, to, function CB(er) {
					if (er && (er.code === "EACCES" || er.code === "EPERM" || er.code === "EBUSY") && Date.now() - start < 6e4) {
						setTimeout(function() {
							fs$70.stat(to, function(stater, st) {
								if (stater && stater.code === "ENOENT") fs$rename(from, to, CB);
else cb(er);
							});
						}, backoff);
						if (backoff < 100) backoff += 10;
						return;
					}
					if (cb) cb(er);
				});
			}
			if (Object.setPrototypeOf) Object.setPrototypeOf(rename$3, fs$rename);
			return rename$3;
		}(fs$70.rename);
		fs$70.read = typeof fs$70.read !== "function" ? fs$70.read : function(fs$read) {
			function read$4(fd, buffer$1, offset, length, position$1, callback_) {
				var callback;
				if (callback_ && typeof callback_ === "function") {
					var eagCounter = 0;
					callback = function(er, _, __) {
						if (er && er.code === "EAGAIN" && eagCounter < 10) {
							eagCounter++;
							return fs$read.call(fs$70, fd, buffer$1, offset, length, position$1, callback);
						}
						callback_.apply(this, arguments);
					};
				}
				return fs$read.call(fs$70, fd, buffer$1, offset, length, position$1, callback);
			}
			if (Object.setPrototypeOf) Object.setPrototypeOf(read$4, fs$read);
			return read$4;
		}(fs$70.read);
		fs$70.readSync = typeof fs$70.readSync !== "function" ? fs$70.readSync : function(fs$readSync) {
			return function(fd, buffer$1, offset, length, position$1) {
				var eagCounter = 0;
				while (true) try {
					return fs$readSync.call(fs$70, fd, buffer$1, offset, length, position$1);
				} catch (er) {
					if (er.code === "EAGAIN" && eagCounter < 10) {
						eagCounter++;
						continue;
					}
					throw er;
				}
			};
		}(fs$70.readSync);
		function patchLchmod(fs$71) {
			fs$71.lchmod = function(path$72, mode, callback) {
				fs$71.open(path$72, constants$3.O_WRONLY | constants$3.O_SYMLINK, mode, function(err, fd) {
					if (err) {
						if (callback) callback(err);
						return;
					}
					fs$71.fchmod(fd, mode, function(err$1) {
						fs$71.close(fd, function(err2) {
							if (callback) callback(err$1 || err2);
						});
					});
				});
			};
			fs$71.lchmodSync = function(path$72, mode) {
				var fd = fs$71.openSync(path$72, constants$3.O_WRONLY | constants$3.O_SYMLINK, mode);
				var threw = true;
				var ret;
				try {
					ret = fs$71.fchmodSync(fd, mode);
					threw = false;
				} finally {
					if (threw) try {
						fs$71.closeSync(fd);
					} catch (er) {}
else fs$71.closeSync(fd);
				}
				return ret;
			};
		}
		function patchLutimes(fs$71) {
			if (constants$3.hasOwnProperty("O_SYMLINK") && fs$71.futimes) {
				fs$71.lutimes = function(path$72, at, mt, cb) {
					fs$71.open(path$72, constants$3.O_SYMLINK, function(er, fd) {
						if (er) {
							if (cb) cb(er);
							return;
						}
						fs$71.futimes(fd, at, mt, function(er$1) {
							fs$71.close(fd, function(er2) {
								if (cb) cb(er$1 || er2);
							});
						});
					});
				};
				fs$71.lutimesSync = function(path$72, at, mt) {
					var fd = fs$71.openSync(path$72, constants$3.O_SYMLINK);
					var ret;
					var threw = true;
					try {
						ret = fs$71.futimesSync(fd, at, mt);
						threw = false;
					} finally {
						if (threw) try {
							fs$71.closeSync(fd);
						} catch (er) {}
else fs$71.closeSync(fd);
					}
					return ret;
				};
			} else if (fs$71.futimes) {
				fs$71.lutimes = function(_a$2, _b, _c, cb) {
					if (cb) process.nextTick(cb);
				};
				fs$71.lutimesSync = function() {};
			}
		}
		function chmodFix(orig) {
			if (!orig) return orig;
			return function(target, mode, cb) {
				return orig.call(fs$70, target, mode, function(er) {
					if (chownErOk(er)) er = null;
					if (cb) cb.apply(this, arguments);
				});
			};
		}
		function chmodFixSync(orig) {
			if (!orig) return orig;
			return function(target, mode) {
				try {
					return orig.call(fs$70, target, mode);
				} catch (er) {
					if (!chownErOk(er)) throw er;
				}
			};
		}
		function chownFix(orig) {
			if (!orig) return orig;
			return function(target, uid$2, gid, cb) {
				return orig.call(fs$70, target, uid$2, gid, function(er) {
					if (chownErOk(er)) er = null;
					if (cb) cb.apply(this, arguments);
				});
			};
		}
		function chownFixSync(orig) {
			if (!orig) return orig;
			return function(target, uid$2, gid) {
				try {
					return orig.call(fs$70, target, uid$2, gid);
				} catch (er) {
					if (!chownErOk(er)) throw er;
				}
			};
		}
		function statFix(orig) {
			if (!orig) return orig;
			return function(target, options, cb) {
				if (typeof options === "function") {
					cb = options;
					options = null;
				}
				function callback(er, stats) {
					if (stats) {
						if (stats.uid < 0) stats.uid += 4294967296;
						if (stats.gid < 0) stats.gid += 4294967296;
					}
					if (cb) cb.apply(this, arguments);
				}
				return options ? orig.call(fs$70, target, options, callback) : orig.call(fs$70, target, callback);
			};
		}
		function statFixSync(orig) {
			if (!orig) return orig;
			return function(target, options) {
				var stats = options ? orig.call(fs$70, target, options) : orig.call(fs$70, target);
				if (stats) {
					if (stats.uid < 0) stats.uid += 4294967296;
					if (stats.gid < 0) stats.gid += 4294967296;
				}
				return stats;
			};
		}
		function chownErOk(er) {
			if (!er) return true;
			if (er.code === "ENOSYS") return true;
			var nonroot = !process.getuid || process.getuid() !== 0;
			if (nonroot) {
				if (er.code === "EINVAL" || er.code === "EPERM") return true;
			}
			return false;
		}
	}
} });

//#endregion
//#region ../node_modules/.pnpm/graceful-fs@4.2.11/node_modules/graceful-fs/legacy-streams.js
var require_legacy_streams = __commonJS({ "../node_modules/.pnpm/graceful-fs@4.2.11/node_modules/graceful-fs/legacy-streams.js"(exports, module) {
	var Stream$1 = require("stream").Stream;
	module.exports = legacy$1;
	function legacy$1(fs$70) {
		return {
			ReadStream,
			WriteStream
		};
		function ReadStream(path$72, options) {
			if (!(this instanceof ReadStream)) return new ReadStream(path$72, options);
			Stream$1.call(this);
			var self$1 = this;
			this.path = path$72;
			this.fd = null;
			this.readable = true;
			this.paused = false;
			this.flags = "r";
			this.mode = 438;
			this.bufferSize = 65536;
			options = options || {};
			var keys = Object.keys(options);
			for (var index$1 = 0, length = keys.length; index$1 < length; index$1++) {
				var key = keys[index$1];
				this[key] = options[key];
			}
			if (this.encoding) this.setEncoding(this.encoding);
			if (this.start !== undefined) {
				if ("number" !== typeof this.start) throw TypeError("start must be a Number");
				if (this.end === undefined) this.end = Infinity;
else if ("number" !== typeof this.end) throw TypeError("end must be a Number");
				if (this.start > this.end) throw new Error("start must be <= end");
				this.pos = this.start;
			}
			if (this.fd !== null) {
				process.nextTick(function() {
					self$1._read();
				});
				return;
			}
			fs$70.open(this.path, this.flags, this.mode, function(err, fd) {
				if (err) {
					self$1.emit("error", err);
					self$1.readable = false;
					return;
				}
				self$1.fd = fd;
				self$1.emit("open", fd);
				self$1._read();
			});
		}
		function WriteStream(path$72, options) {
			if (!(this instanceof WriteStream)) return new WriteStream(path$72, options);
			Stream$1.call(this);
			this.path = path$72;
			this.fd = null;
			this.writable = true;
			this.flags = "w";
			this.encoding = "binary";
			this.mode = 438;
			this.bytesWritten = 0;
			options = options || {};
			var keys = Object.keys(options);
			for (var index$1 = 0, length = keys.length; index$1 < length; index$1++) {
				var key = keys[index$1];
				this[key] = options[key];
			}
			if (this.start !== undefined) {
				if ("number" !== typeof this.start) throw TypeError("start must be a Number");
				if (this.start < 0) throw new Error("start must be >= zero");
				this.pos = this.start;
			}
			this.busy = false;
			this._queue = [];
			if (this.fd === null) {
				this._open = fs$70.open;
				this._queue.push([
					this._open,
					this.path,
					this.flags,
					this.mode,
					undefined
				]);
				this.flush();
			}
		}
	}
} });

//#endregion
//#region ../node_modules/.pnpm/graceful-fs@4.2.11/node_modules/graceful-fs/clone.js
var require_clone = __commonJS({ "../node_modules/.pnpm/graceful-fs@4.2.11/node_modules/graceful-fs/clone.js"(exports, module) {
	module.exports = clone$1;
	var getPrototypeOf$1 = Object.getPrototypeOf || function(obj) {
		return obj.__proto__;
	};
	function clone$1(obj) {
		if (obj === null || typeof obj !== "object") return obj;
		if (obj instanceof Object) var copy$4 = { __proto__: getPrototypeOf$1(obj) };
else var copy$4 = Object.create(null);
		Object.getOwnPropertyNames(obj).forEach(function(key) {
			Object.defineProperty(copy$4, key, Object.getOwnPropertyDescriptor(obj, key));
		});
		return copy$4;
	}
} });

//#endregion
//#region ../node_modules/.pnpm/graceful-fs@4.2.11/node_modules/graceful-fs/graceful-fs.js
var require_graceful_fs = __commonJS({ "../node_modules/.pnpm/graceful-fs@4.2.11/node_modules/graceful-fs/graceful-fs.js"(exports, module) {
	var fs$67 = require("fs");
	var polyfills = require_polyfills();
	var legacy = require_legacy_streams();
	var clone = require_clone();
	var util$3 = require("util");
	var gracefulQueue;
	var previousSymbol;
	if (typeof Symbol === "function" && typeof Symbol.for === "function") {
		gracefulQueue = Symbol.for("graceful-fs.queue");
		previousSymbol = Symbol.for("graceful-fs.previous");
	} else {
		gracefulQueue = "___graceful-fs.queue";
		previousSymbol = "___graceful-fs.previous";
	}
	function noop$1() {}
	function publishQueue(context$1, queue$1) {
		Object.defineProperty(context$1, gracefulQueue, { get: function() {
			return queue$1;
		} });
	}
	var debug$5 = noop$1;
	if (util$3.debuglog) debug$5 = util$3.debuglog("gfs4");
else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || "")) debug$5 = function() {
		var m = util$3.format.apply(util$3, arguments);
		m = "GFS4: " + m.split(/\n/).join("\nGFS4: ");
		console.error(m);
	};
	if (!fs$67[gracefulQueue]) {
		var queue = global[gracefulQueue] || [];
		publishQueue(fs$67, queue);
		fs$67.close = function(fs$close) {
			function close(fd, cb) {
				return fs$close.call(fs$67, fd, function(err) {
					if (!err) resetQueue();
					if (typeof cb === "function") cb.apply(this, arguments);
				});
			}
			Object.defineProperty(close, previousSymbol, { value: fs$close });
			return close;
		}(fs$67.close);
		fs$67.closeSync = function(fs$closeSync) {
			function closeSync(fd) {
				fs$closeSync.apply(fs$67, arguments);
				resetQueue();
			}
			Object.defineProperty(closeSync, previousSymbol, { value: fs$closeSync });
			return closeSync;
		}(fs$67.closeSync);
		if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || "")) process.on("exit", function() {
			debug$5(fs$67[gracefulQueue]);
			require("assert").equal(fs$67[gracefulQueue].length, 0);
		});
	}
	if (!global[gracefulQueue]) publishQueue(global, fs$67[gracefulQueue]);
	module.exports = patch$2(clone(fs$67));
	if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs$67.__patched) {
		module.exports = patch$2(fs$67);
		fs$67.__patched = true;
	}
	function patch$2(fs$70) {
		polyfills(fs$70);
		fs$70.gracefulify = patch$2;
		fs$70.createReadStream = createReadStream;
		fs$70.createWriteStream = createWriteStream;
		var fs$readFile = fs$70.readFile;
		fs$70.readFile = readFile$3;
		function readFile$3(path$72, options, cb) {
			if (typeof options === "function") cb = options, options = null;
			return go$readFile(path$72, options, cb);
			function go$readFile(path$73, options$1, cb$1, startTime) {
				return fs$readFile(path$73, options$1, function(err) {
					if (err && (err.code === "EMFILE" || err.code === "ENFILE")) enqueue([
						go$readFile,
						[
							path$73,
							options$1,
							cb$1
						],
						err,
						startTime || Date.now(),
						Date.now()
					]);
else if (typeof cb$1 === "function") cb$1.apply(this, arguments);
				});
			}
		}
		var fs$writeFile = fs$70.writeFile;
		fs$70.writeFile = writeFile$3;
		function writeFile$3(path$72, data, options, cb) {
			if (typeof options === "function") cb = options, options = null;
			return go$writeFile(path$72, data, options, cb);
			function go$writeFile(path$73, data$1, options$1, cb$1, startTime) {
				return fs$writeFile(path$73, data$1, options$1, function(err) {
					if (err && (err.code === "EMFILE" || err.code === "ENFILE")) enqueue([
						go$writeFile,
						[
							path$73,
							data$1,
							options$1,
							cb$1
						],
						err,
						startTime || Date.now(),
						Date.now()
					]);
else if (typeof cb$1 === "function") cb$1.apply(this, arguments);
				});
			}
		}
		var fs$appendFile = fs$70.appendFile;
		if (fs$appendFile) fs$70.appendFile = appendFile$1;
		function appendFile$1(path$72, data, options, cb) {
			if (typeof options === "function") cb = options, options = null;
			return go$appendFile(path$72, data, options, cb);
			function go$appendFile(path$73, data$1, options$1, cb$1, startTime) {
				return fs$appendFile(path$73, data$1, options$1, function(err) {
					if (err && (err.code === "EMFILE" || err.code === "ENFILE")) enqueue([
						go$appendFile,
						[
							path$73,
							data$1,
							options$1,
							cb$1
						],
						err,
						startTime || Date.now(),
						Date.now()
					]);
else if (typeof cb$1 === "function") cb$1.apply(this, arguments);
				});
			}
		}
		var fs$copyFile = fs$70.copyFile;
		if (fs$copyFile) fs$70.copyFile = copyFile$5;
		function copyFile$5(src$1, dest, flags, cb) {
			if (typeof flags === "function") {
				cb = flags;
				flags = 0;
			}
			return go$copyFile(src$1, dest, flags, cb);
			function go$copyFile(src$2, dest$1, flags$1, cb$1, startTime) {
				return fs$copyFile(src$2, dest$1, flags$1, function(err) {
					if (err && (err.code === "EMFILE" || err.code === "ENFILE")) enqueue([
						go$copyFile,
						[
							src$2,
							dest$1,
							flags$1,
							cb$1
						],
						err,
						startTime || Date.now(),
						Date.now()
					]);
else if (typeof cb$1 === "function") cb$1.apply(this, arguments);
				});
			}
		}
		var fs$readdir = fs$70.readdir;
		fs$70.readdir = readdir$2;
		var noReaddirOptionVersions = /^v[0-5]\./;
		function readdir$2(path$72, options, cb) {
			if (typeof options === "function") cb = options, options = null;
			var go$readdir = noReaddirOptionVersions.test(process.version) ? function go$readdir$1(path$73, options$1, cb$1, startTime) {
				return fs$readdir(path$73, fs$readdirCallback(path$73, options$1, cb$1, startTime));
			} : function go$readdir$1(path$73, options$1, cb$1, startTime) {
				return fs$readdir(path$73, options$1, fs$readdirCallback(path$73, options$1, cb$1, startTime));
			};
			return go$readdir(path$72, options, cb);
			function fs$readdirCallback(path$73, options$1, cb$1, startTime) {
				return function(err, files) {
					if (err && (err.code === "EMFILE" || err.code === "ENFILE")) enqueue([
						go$readdir,
						[
							path$73,
							options$1,
							cb$1
						],
						err,
						startTime || Date.now(),
						Date.now()
					]);
else {
						if (files && files.sort) files.sort();
						if (typeof cb$1 === "function") cb$1.call(this, err, files);
					}
				};
			}
		}
		if (process.version.substr(0, 4) === "v0.8") {
			var legStreams = legacy(fs$70);
			ReadStream = legStreams.ReadStream;
			WriteStream = legStreams.WriteStream;
		}
		var fs$ReadStream = fs$70.ReadStream;
		if (fs$ReadStream) {
			ReadStream.prototype = Object.create(fs$ReadStream.prototype);
			ReadStream.prototype.open = ReadStream$open;
		}
		var fs$WriteStream = fs$70.WriteStream;
		if (fs$WriteStream) {
			WriteStream.prototype = Object.create(fs$WriteStream.prototype);
			WriteStream.prototype.open = WriteStream$open;
		}
		Object.defineProperty(fs$70, "ReadStream", {
			get: function() {
				return ReadStream;
			},
			set: function(val) {
				ReadStream = val;
			},
			enumerable: true,
			configurable: true
		});
		Object.defineProperty(fs$70, "WriteStream", {
			get: function() {
				return WriteStream;
			},
			set: function(val) {
				WriteStream = val;
			},
			enumerable: true,
			configurable: true
		});
		var FileReadStream = ReadStream;
		Object.defineProperty(fs$70, "FileReadStream", {
			get: function() {
				return FileReadStream;
			},
			set: function(val) {
				FileReadStream = val;
			},
			enumerable: true,
			configurable: true
		});
		var FileWriteStream = WriteStream;
		Object.defineProperty(fs$70, "FileWriteStream", {
			get: function() {
				return FileWriteStream;
			},
			set: function(val) {
				FileWriteStream = val;
			},
			enumerable: true,
			configurable: true
		});
		function ReadStream(path$72, options) {
			if (this instanceof ReadStream) return fs$ReadStream.apply(this, arguments), this;
else return ReadStream.apply(Object.create(ReadStream.prototype), arguments);
		}
		function ReadStream$open() {
			var that = this;
			open(that.path, that.flags, that.mode, function(err, fd) {
				if (err) {
					if (that.autoClose) that.destroy();
					that.emit("error", err);
				} else {
					that.fd = fd;
					that.emit("open", fd);
					that.read();
				}
			});
		}
		function WriteStream(path$72, options) {
			if (this instanceof WriteStream) return fs$WriteStream.apply(this, arguments), this;
else return WriteStream.apply(Object.create(WriteStream.prototype), arguments);
		}
		function WriteStream$open() {
			var that = this;
			open(that.path, that.flags, that.mode, function(err, fd) {
				if (err) {
					that.destroy();
					that.emit("error", err);
				} else {
					that.fd = fd;
					that.emit("open", fd);
				}
			});
		}
		function createReadStream(path$72, options) {
			return new fs$70.ReadStream(path$72, options);
		}
		function createWriteStream(path$72, options) {
			return new fs$70.WriteStream(path$72, options);
		}
		var fs$open = fs$70.open;
		fs$70.open = open;
		function open(path$72, flags, mode, cb) {
			if (typeof mode === "function") cb = mode, mode = null;
			return go$open(path$72, flags, mode, cb);
			function go$open(path$73, flags$1, mode$1, cb$1, startTime) {
				return fs$open(path$73, flags$1, mode$1, function(err, fd) {
					if (err && (err.code === "EMFILE" || err.code === "ENFILE")) enqueue([
						go$open,
						[
							path$73,
							flags$1,
							mode$1,
							cb$1
						],
						err,
						startTime || Date.now(),
						Date.now()
					]);
else if (typeof cb$1 === "function") cb$1.apply(this, arguments);
				});
			}
		}
		return fs$70;
	}
	function enqueue(elem) {
		debug$5("ENQUEUE", elem[0].name, elem[1]);
		fs$67[gracefulQueue].push(elem);
		retry();
	}
	var retryTimer;
	function resetQueue() {
		var now = Date.now();
		for (var i$2 = 0; i$2 < fs$67[gracefulQueue].length; ++i$2) if (fs$67[gracefulQueue][i$2].length > 2) {
			fs$67[gracefulQueue][i$2][3] = now;
			fs$67[gracefulQueue][i$2][4] = now;
		}
		retry();
	}
	function retry() {
		clearTimeout(retryTimer);
		retryTimer = undefined;
		if (fs$67[gracefulQueue].length === 0) return;
		var elem = fs$67[gracefulQueue].shift();
		var fn = elem[0];
		var args = elem[1];
		var err = elem[2];
		var startTime = elem[3];
		var lastTime = elem[4];
		if (startTime === undefined) {
			debug$5("RETRY", fn.name, args);
			fn.apply(null, args);
		} else if (Date.now() - startTime >= 6e4) {
			debug$5("TIMEOUT", fn.name, args);
			var cb = args.pop();
			if (typeof cb === "function") cb.call(null, err);
		} else {
			var sinceAttempt = Date.now() - lastTime;
			var sinceStart = Math.max(lastTime - startTime, 1);
			var desiredDelay = Math.min(sinceStart * 1.2, 100);
			if (sinceAttempt >= desiredDelay) {
				debug$5("RETRY", fn.name, args);
				fn.apply(null, args.concat([startTime]));
			} else fs$67[gracefulQueue].push(elem);
		}
		if (retryTimer === undefined) retryTimer = setTimeout(retry, 0);
	}
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/fs/index.js
var require_fs$5 = __commonJS({ "../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/fs/index.js"(exports) {
	const u$25 = require_universalify().fromCallback;
	const fs$66 = require_graceful_fs();
	const api$1 = [
		"access",
		"appendFile",
		"chmod",
		"chown",
		"close",
		"copyFile",
		"fchmod",
		"fchown",
		"fdatasync",
		"fstat",
		"fsync",
		"ftruncate",
		"futimes",
		"lchown",
		"lchmod",
		"link",
		"lstat",
		"mkdir",
		"mkdtemp",
		"open",
		"readFile",
		"readdir",
		"readlink",
		"realpath",
		"rename",
		"rmdir",
		"stat",
		"symlink",
		"truncate",
		"unlink",
		"utimes",
		"writeFile"
	].filter((key) => {
		return typeof fs$66[key] === "function";
	});
	Object.keys(fs$66).forEach((key) => {
		if (key === "promises") return;
		exports[key] = fs$66[key];
	});
	api$1.forEach((method) => {
		exports[method] = u$25(fs$66[method]);
	});
	exports.exists = function(filename, callback) {
		if (typeof callback === "function") return fs$66.exists(filename, callback);
		return new Promise((resolve$1) => {
			return fs$66.exists(filename, resolve$1);
		});
	};
	exports.read = function(fd, buffer$1, offset, length, position$1, callback) {
		if (typeof callback === "function") return fs$66.read(fd, buffer$1, offset, length, position$1, callback);
		return new Promise((resolve$1, reject) => {
			fs$66.read(fd, buffer$1, offset, length, position$1, (err, bytesRead, buffer$2) => {
				if (err) return reject(err);
				resolve$1({
					bytesRead,
					buffer: buffer$2
				});
			});
		});
	};
	exports.write = function(fd, buffer$1, ...args) {
		if (typeof args[args.length - 1] === "function") return fs$66.write(fd, buffer$1, ...args);
		return new Promise((resolve$1, reject) => {
			fs$66.write(fd, buffer$1, ...args, (err, bytesWritten, buffer$2) => {
				if (err) return reject(err);
				resolve$1({
					bytesWritten,
					buffer: buffer$2
				});
			});
		});
	};
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/mkdirs/win32.js
var require_win32$1 = __commonJS({ "../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/mkdirs/win32.js"(exports, module) {
	const path$66 = require("path");
	function getRootPath$1(p) {
		p = path$66.normalize(path$66.resolve(p)).split(path$66.sep);
		if (p.length > 0) return p[0];
		return null;
	}
	const INVALID_PATH_CHARS$1 = /[<>:"|?*]/;
	function invalidWin32Path$5(p) {
		const rp = getRootPath$1(p);
		p = p.replace(rp, "");
		return INVALID_PATH_CHARS$1.test(p);
	}
	module.exports = {
		getRootPath: getRootPath$1,
		invalidWin32Path: invalidWin32Path$5
	};
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/mkdirs/mkdirs.js
var require_mkdirs$3 = __commonJS({ "../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/mkdirs/mkdirs.js"(exports, module) {
	const fs$65 = require_graceful_fs();
	const path$65 = require("path");
	const invalidWin32Path$4 = require_win32$1().invalidWin32Path;
	const o777$3 = parseInt("0777", 8);
	function mkdirs$5(p, opts, callback, made) {
		if (typeof opts === "function") {
			callback = opts;
			opts = {};
		} else if (!opts || typeof opts !== "object") opts = { mode: opts };
		if (process.platform === "win32" && invalidWin32Path$4(p)) {
			const errInval = new Error(p + " contains invalid WIN32 path characters.");
			errInval.code = "EINVAL";
			return callback(errInval);
		}
		let mode = opts.mode;
		const xfs = opts.fs || fs$65;
		if (mode === undefined) mode = o777$3 & ~process.umask();
		if (!made) made = null;
		callback = callback || function() {};
		p = path$65.resolve(p);
		xfs.mkdir(p, mode, (er) => {
			if (!er) {
				made = made || p;
				return callback(null, made);
			}
			switch (er.code) {
				case "ENOENT":
					if (path$65.dirname(p) === p) return callback(er);
					mkdirs$5(path$65.dirname(p), opts, (er$1, made$1) => {
						if (er$1) callback(er$1, made$1);
else mkdirs$5(p, opts, callback, made$1);
					});
					break;
				default:
					xfs.stat(p, (er2, stat$5) => {
						if (er2 || !stat$5.isDirectory()) callback(er, made);
else callback(null, made);
					});
					break;
			}
		});
	}
	module.exports = mkdirs$5;
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/mkdirs/mkdirs-sync.js
var require_mkdirs_sync$1 = __commonJS({ "../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/mkdirs/mkdirs-sync.js"(exports, module) {
	const fs$64 = require_graceful_fs();
	const path$64 = require("path");
	const invalidWin32Path$3 = require_win32$1().invalidWin32Path;
	const o777$2 = parseInt("0777", 8);
	function mkdirsSync$5(p, opts, made) {
		if (!opts || typeof opts !== "object") opts = { mode: opts };
		let mode = opts.mode;
		const xfs = opts.fs || fs$64;
		if (process.platform === "win32" && invalidWin32Path$3(p)) {
			const errInval = new Error(p + " contains invalid WIN32 path characters.");
			errInval.code = "EINVAL";
			throw errInval;
		}
		if (mode === undefined) mode = o777$2 & ~process.umask();
		if (!made) made = null;
		p = path$64.resolve(p);
		try {
			xfs.mkdirSync(p, mode);
			made = made || p;
		} catch (err0) {
			if (err0.code === "ENOENT") {
				if (path$64.dirname(p) === p) throw err0;
				made = mkdirsSync$5(path$64.dirname(p), opts, made);
				mkdirsSync$5(p, opts, made);
			} else {
				let stat$5;
				try {
					stat$5 = xfs.statSync(p);
				} catch (err1) {
					throw err0;
				}
				if (!stat$5.isDirectory()) throw err0;
			}
		}
		return made;
	}
	module.exports = mkdirsSync$5;
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/mkdirs/index.js
var require_mkdirs$2 = __commonJS({ "../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/mkdirs/index.js"(exports, module) {
	const u$24 = require_universalify().fromCallback;
	const mkdirs$4 = u$24(require_mkdirs$3());
	const mkdirsSync$4 = require_mkdirs_sync$1();
	module.exports = {
		mkdirs: mkdirs$4,
		mkdirsSync: mkdirsSync$4,
		mkdirp: mkdirs$4,
		mkdirpSync: mkdirsSync$4,
		ensureDir: mkdirs$4,
		ensureDirSync: mkdirsSync$4
	};
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/util/utimes.js
var require_utimes$1 = __commonJS({ "../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/util/utimes.js"(exports, module) {
	const fs$63 = require_graceful_fs();
	const os$3 = require("os");
	const path$63 = require("path");
	function hasMillisResSync$1() {
		let tmpfile = path$63.join("millis-test-sync" + Date.now().toString() + Math.random().toString().slice(2));
		tmpfile = path$63.join(os$3.tmpdir(), tmpfile);
		const d = new Date(1435410243862);
		fs$63.writeFileSync(tmpfile, "https://github.com/jprichardson/node-fs-extra/pull/141");
		const fd = fs$63.openSync(tmpfile, "r+");
		fs$63.futimesSync(fd, d, d);
		fs$63.closeSync(fd);
		return fs$63.statSync(tmpfile).mtime > 1435410243e3;
	}
	function hasMillisRes$1(callback) {
		let tmpfile = path$63.join("millis-test" + Date.now().toString() + Math.random().toString().slice(2));
		tmpfile = path$63.join(os$3.tmpdir(), tmpfile);
		const d = new Date(1435410243862);
		fs$63.writeFile(tmpfile, "https://github.com/jprichardson/node-fs-extra/pull/141", (err) => {
			if (err) return callback(err);
			fs$63.open(tmpfile, "r+", (err$1, fd) => {
				if (err$1) return callback(err$1);
				fs$63.futimes(fd, d, d, (err$2) => {
					if (err$2) return callback(err$2);
					fs$63.close(fd, (err$3) => {
						if (err$3) return callback(err$3);
						fs$63.stat(tmpfile, (err$4, stats) => {
							if (err$4) return callback(err$4);
							callback(null, stats.mtime > 1435410243e3);
						});
					});
				});
			});
		});
	}
	function timeRemoveMillis$1(timestamp) {
		if (typeof timestamp === "number") return Math.floor(timestamp / 1e3) * 1e3;
else if (timestamp instanceof Date) return new Date(Math.floor(timestamp.getTime() / 1e3) * 1e3);
else throw new Error("fs-extra: timeRemoveMillis() unknown parameter type");
	}
	function utimesMillis$1(path$72, atime, mtime, callback) {
		fs$63.open(path$72, "r+", (err, fd) => {
			if (err) return callback(err);
			fs$63.futimes(fd, atime, mtime, (futimesErr) => {
				fs$63.close(fd, (closeErr) => {
					if (callback) callback(futimesErr || closeErr);
				});
			});
		});
	}
	function utimesMillisSync$1(path$72, atime, mtime) {
		const fd = fs$63.openSync(path$72, "r+");
		fs$63.futimesSync(fd, atime, mtime);
		return fs$63.closeSync(fd);
	}
	module.exports = {
		hasMillisRes: hasMillisRes$1,
		hasMillisResSync: hasMillisResSync$1,
		timeRemoveMillis: timeRemoveMillis$1,
		utimesMillis: utimesMillis$1,
		utimesMillisSync: utimesMillisSync$1
	};
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/util/buffer.js
var require_buffer$1 = __commonJS({ "../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/util/buffer.js"(exports, module) {
	module.exports = function(size) {
		if (typeof Buffer.allocUnsafe === "function") try {
			return Buffer.allocUnsafe(size);
		} catch (e) {
			return new Buffer(size);
		}
		return new Buffer(size);
	};
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/copy-sync/copy-sync.js
var require_copy_sync$3 = __commonJS({ "../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/copy-sync/copy-sync.js"(exports, module) {
	const fs$62 = require_graceful_fs();
	const path$62 = require("path");
	const mkdirpSync$3 = require_mkdirs$2().mkdirsSync;
	const utimesSync$1 = require_utimes$1().utimesMillisSync;
	const notExist$1 = Symbol("notExist");
	function copySync$3(src$1, dest, opts) {
		if (typeof opts === "function") opts = { filter: opts };
		opts = opts || {};
		opts.clobber = "clobber" in opts ? !!opts.clobber : true;
		opts.overwrite = "overwrite" in opts ? !!opts.overwrite : opts.clobber;
		if (opts.preserveTimestamps && process.arch === "ia32") console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\n
    see https://github.com/jprichardson/node-fs-extra/issues/269`);
		const destStat = checkPaths$2(src$1, dest);
		if (opts.filter && !opts.filter(src$1, dest)) return;
		const destParent = path$62.dirname(dest);
		if (!fs$62.existsSync(destParent)) mkdirpSync$3(destParent);
		return startCopy$3(destStat, src$1, dest, opts);
	}
	function startCopy$3(destStat, src$1, dest, opts) {
		if (opts.filter && !opts.filter(src$1, dest)) return;
		return getStats$4(destStat, src$1, dest, opts);
	}
	function getStats$4(destStat, src$1, dest, opts) {
		const statSync$1 = opts.dereference ? fs$62.statSync : fs$62.lstatSync;
		const srcStat = statSync$1(src$1);
		if (srcStat.isDirectory()) return onDir$3(srcStat, destStat, src$1, dest, opts);
else if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice()) return onFile$3(srcStat, destStat, src$1, dest, opts);
else if (srcStat.isSymbolicLink()) return onLink$3(destStat, src$1, dest, opts);
	}
	function onFile$3(srcStat, destStat, src$1, dest, opts) {
		if (destStat === notExist$1) return copyFile$3(srcStat, src$1, dest, opts);
		return mayCopyFile$3(srcStat, src$1, dest, opts);
	}
	function mayCopyFile$3(srcStat, src$1, dest, opts) {
		if (opts.overwrite) {
			fs$62.unlinkSync(dest);
			return copyFile$3(srcStat, src$1, dest, opts);
		} else if (opts.errorOnExist) throw new Error(`'${dest}' already exists`);
	}
	function copyFile$3(srcStat, src$1, dest, opts) {
		if (typeof fs$62.copyFileSync === "function") {
			fs$62.copyFileSync(src$1, dest);
			fs$62.chmodSync(dest, srcStat.mode);
			if (opts.preserveTimestamps) return utimesSync$1(dest, srcStat.atime, srcStat.mtime);
			return;
		}
		return copyFileFallback$3(srcStat, src$1, dest, opts);
	}
	function copyFileFallback$3(srcStat, src$1, dest, opts) {
		const BUF_LENGTH = 65536;
		const _buff = require_buffer$1()(BUF_LENGTH);
		const fdr = fs$62.openSync(src$1, "r");
		const fdw = fs$62.openSync(dest, "w", srcStat.mode);
		let pos = 0;
		while (pos < srcStat.size) {
			const bytesRead = fs$62.readSync(fdr, _buff, 0, BUF_LENGTH, pos);
			fs$62.writeSync(fdw, _buff, 0, bytesRead);
			pos += bytesRead;
		}
		if (opts.preserveTimestamps) fs$62.futimesSync(fdw, srcStat.atime, srcStat.mtime);
		fs$62.closeSync(fdr);
		fs$62.closeSync(fdw);
	}
	function onDir$3(srcStat, destStat, src$1, dest, opts) {
		if (destStat === notExist$1) return mkDirAndCopy$3(srcStat, src$1, dest, opts);
		if (destStat && !destStat.isDirectory()) throw new Error(`Cannot overwrite non-directory '${dest}' with directory '${src$1}'.`);
		return copyDir$3(src$1, dest, opts);
	}
	function mkDirAndCopy$3(srcStat, src$1, dest, opts) {
		fs$62.mkdirSync(dest);
		copyDir$3(src$1, dest, opts);
		return fs$62.chmodSync(dest, srcStat.mode);
	}
	function copyDir$3(src$1, dest, opts) {
		fs$62.readdirSync(src$1).forEach((item) => copyDirItem$3(item, src$1, dest, opts));
	}
	function copyDirItem$3(item, src$1, dest, opts) {
		const srcItem = path$62.join(src$1, item);
		const destItem = path$62.join(dest, item);
		const destStat = checkPaths$2(srcItem, destItem);
		return startCopy$3(destStat, srcItem, destItem, opts);
	}
	function onLink$3(destStat, src$1, dest, opts) {
		let resolvedSrc = fs$62.readlinkSync(src$1);
		if (opts.dereference) resolvedSrc = path$62.resolve(process.cwd(), resolvedSrc);
		if (destStat === notExist$1) return fs$62.symlinkSync(resolvedSrc, dest);
else {
			let resolvedDest;
			try {
				resolvedDest = fs$62.readlinkSync(dest);
			} catch (err) {
				if (err.code === "EINVAL" || err.code === "UNKNOWN") return fs$62.symlinkSync(resolvedSrc, dest);
				throw err;
			}
			if (opts.dereference) resolvedDest = path$62.resolve(process.cwd(), resolvedDest);
			if (isSrcSubdir$4(resolvedSrc, resolvedDest)) throw new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`);
			if (fs$62.statSync(dest).isDirectory() && isSrcSubdir$4(resolvedDest, resolvedSrc)) throw new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`);
			return copyLink$3(resolvedSrc, dest);
		}
	}
	function copyLink$3(resolvedSrc, dest) {
		fs$62.unlinkSync(dest);
		return fs$62.symlinkSync(resolvedSrc, dest);
	}
	function isSrcSubdir$4(src$1, dest) {
		const srcArray = path$62.resolve(src$1).split(path$62.sep);
		const destArray = path$62.resolve(dest).split(path$62.sep);
		return srcArray.reduce((acc, current, i$2) => acc && destArray[i$2] === current, true);
	}
	function checkStats$1(src$1, dest) {
		const srcStat = fs$62.statSync(src$1);
		let destStat;
		try {
			destStat = fs$62.statSync(dest);
		} catch (err) {
			if (err.code === "ENOENT") return {
				srcStat,
				destStat: notExist$1
			};
			throw err;
		}
		return {
			srcStat,
			destStat
		};
	}
	function checkPaths$2(src$1, dest) {
		const { srcStat, destStat } = checkStats$1(src$1, dest);
		if (destStat.ino && destStat.ino === srcStat.ino) throw new Error("Source and destination must not be the same.");
		if (srcStat.isDirectory() && isSrcSubdir$4(src$1, dest)) throw new Error(`Cannot copy '${src$1}' to a subdirectory of itself, '${dest}'.`);
		return destStat;
	}
	module.exports = copySync$3;
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/copy-sync/index.js
var require_copy_sync$2 = __commonJS({ "../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/copy-sync/index.js"(exports, module) {
	module.exports = { copySync: require_copy_sync$3() };
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/path-exists/index.js
var require_path_exists$2 = __commonJS({ "../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/path-exists/index.js"(exports, module) {
	const u$23 = require_universalify().fromPromise;
	const fs$61 = require_fs$5();
	function pathExists$18(path$72) {
		return fs$61.access(path$72).then(() => true).catch(() => false);
	}
	module.exports = {
		pathExists: u$23(pathExists$18),
		pathExistsSync: fs$61.existsSync
	};
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/copy/copy.js
var require_copy$3 = __commonJS({ "../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/copy/copy.js"(exports, module) {
	const fs$60 = require_graceful_fs();
	const path$61 = require("path");
	const mkdirp$3 = require_mkdirs$2().mkdirs;
	const pathExists$17 = require_path_exists$2().pathExists;
	const utimes$1 = require_utimes$1().utimesMillis;
	const notExist = Symbol("notExist");
	function copy$3(src$1, dest, opts, cb) {
		if (typeof opts === "function" && !cb) {
			cb = opts;
			opts = {};
		} else if (typeof opts === "function") opts = { filter: opts };
		cb = cb || function() {};
		opts = opts || {};
		opts.clobber = "clobber" in opts ? !!opts.clobber : true;
		opts.overwrite = "overwrite" in opts ? !!opts.overwrite : opts.clobber;
		if (opts.preserveTimestamps && process.arch === "ia32") console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\n
    see https://github.com/jprichardson/node-fs-extra/issues/269`);
		checkPaths$1(src$1, dest, (err, destStat) => {
			if (err) return cb(err);
			if (opts.filter) return handleFilter$1(checkParentDir$1, destStat, src$1, dest, opts, cb);
			return checkParentDir$1(destStat, src$1, dest, opts, cb);
		});
	}
	function checkParentDir$1(destStat, src$1, dest, opts, cb) {
		const destParent = path$61.dirname(dest);
		pathExists$17(destParent, (err, dirExists) => {
			if (err) return cb(err);
			if (dirExists) return startCopy$2(destStat, src$1, dest, opts, cb);
			mkdirp$3(destParent, (err$1) => {
				if (err$1) return cb(err$1);
				return startCopy$2(destStat, src$1, dest, opts, cb);
			});
		});
	}
	function handleFilter$1(onInclude, destStat, src$1, dest, opts, cb) {
		Promise.resolve(opts.filter(src$1, dest)).then((include) => {
			if (include) {
				if (destStat) return onInclude(destStat, src$1, dest, opts, cb);
				return onInclude(src$1, dest, opts, cb);
			}
			return cb();
		}, (error$2) => cb(error$2));
	}
	function startCopy$2(destStat, src$1, dest, opts, cb) {
		if (opts.filter) return handleFilter$1(getStats$3, destStat, src$1, dest, opts, cb);
		return getStats$3(destStat, src$1, dest, opts, cb);
	}
	function getStats$3(destStat, src$1, dest, opts, cb) {
		const stat$5 = opts.dereference ? fs$60.stat : fs$60.lstat;
		stat$5(src$1, (err, srcStat) => {
			if (err) return cb(err);
			if (srcStat.isDirectory()) return onDir$2(srcStat, destStat, src$1, dest, opts, cb);
else if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice()) return onFile$2(srcStat, destStat, src$1, dest, opts, cb);
else if (srcStat.isSymbolicLink()) return onLink$2(destStat, src$1, dest, opts, cb);
		});
	}
	function onFile$2(srcStat, destStat, src$1, dest, opts, cb) {
		if (destStat === notExist) return copyFile$2(srcStat, src$1, dest, opts, cb);
		return mayCopyFile$2(srcStat, src$1, dest, opts, cb);
	}
	function mayCopyFile$2(srcStat, src$1, dest, opts, cb) {
		if (opts.overwrite) fs$60.unlink(dest, (err) => {
			if (err) return cb(err);
			return copyFile$2(srcStat, src$1, dest, opts, cb);
		});
else if (opts.errorOnExist) return cb(new Error(`'${dest}' already exists`));
else return cb();
	}
	function copyFile$2(srcStat, src$1, dest, opts, cb) {
		if (typeof fs$60.copyFile === "function") return fs$60.copyFile(src$1, dest, (err) => {
			if (err) return cb(err);
			return setDestModeAndTimestamps$1(srcStat, dest, opts, cb);
		});
		return copyFileFallback$2(srcStat, src$1, dest, opts, cb);
	}
	function copyFileFallback$2(srcStat, src$1, dest, opts, cb) {
		const rs = fs$60.createReadStream(src$1);
		rs.on("error", (err) => cb(err)).once("open", () => {
			const ws = fs$60.createWriteStream(dest, { mode: srcStat.mode });
			ws.on("error", (err) => cb(err)).on("open", () => rs.pipe(ws)).once("close", () => setDestModeAndTimestamps$1(srcStat, dest, opts, cb));
		});
	}
	function setDestModeAndTimestamps$1(srcStat, dest, opts, cb) {
		fs$60.chmod(dest, srcStat.mode, (err) => {
			if (err) return cb(err);
			if (opts.preserveTimestamps) return utimes$1(dest, srcStat.atime, srcStat.mtime, cb);
			return cb();
		});
	}
	function onDir$2(srcStat, destStat, src$1, dest, opts, cb) {
		if (destStat === notExist) return mkDirAndCopy$2(srcStat, src$1, dest, opts, cb);
		if (destStat && !destStat.isDirectory()) return cb(new Error(`Cannot overwrite non-directory '${dest}' with directory '${src$1}'.`));
		return copyDir$2(src$1, dest, opts, cb);
	}
	function mkDirAndCopy$2(srcStat, src$1, dest, opts, cb) {
		fs$60.mkdir(dest, (err) => {
			if (err) return cb(err);
			copyDir$2(src$1, dest, opts, (err$1) => {
				if (err$1) return cb(err$1);
				return fs$60.chmod(dest, srcStat.mode, cb);
			});
		});
	}
	function copyDir$2(src$1, dest, opts, cb) {
		fs$60.readdir(src$1, (err, items) => {
			if (err) return cb(err);
			return copyDirItems$1(items, src$1, dest, opts, cb);
		});
	}
	function copyDirItems$1(items, src$1, dest, opts, cb) {
		const item = items.pop();
		if (!item) return cb();
		return copyDirItem$2(items, item, src$1, dest, opts, cb);
	}
	function copyDirItem$2(items, item, src$1, dest, opts, cb) {
		const srcItem = path$61.join(src$1, item);
		const destItem = path$61.join(dest, item);
		checkPaths$1(srcItem, destItem, (err, destStat) => {
			if (err) return cb(err);
			startCopy$2(destStat, srcItem, destItem, opts, (err$1) => {
				if (err$1) return cb(err$1);
				return copyDirItems$1(items, src$1, dest, opts, cb);
			});
		});
	}
	function onLink$2(destStat, src$1, dest, opts, cb) {
		fs$60.readlink(src$1, (err, resolvedSrc) => {
			if (err) return cb(err);
			if (opts.dereference) resolvedSrc = path$61.resolve(process.cwd(), resolvedSrc);
			if (destStat === notExist) return fs$60.symlink(resolvedSrc, dest, cb);
else fs$60.readlink(dest, (err$1, resolvedDest) => {
				if (err$1) {
					if (err$1.code === "EINVAL" || err$1.code === "UNKNOWN") return fs$60.symlink(resolvedSrc, dest, cb);
					return cb(err$1);
				}
				if (opts.dereference) resolvedDest = path$61.resolve(process.cwd(), resolvedDest);
				if (isSrcSubdir$3(resolvedSrc, resolvedDest)) return cb(new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`));
				if (destStat.isDirectory() && isSrcSubdir$3(resolvedDest, resolvedSrc)) return cb(new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`));
				return copyLink$2(resolvedSrc, dest, cb);
			});
		});
	}
	function copyLink$2(resolvedSrc, dest, cb) {
		fs$60.unlink(dest, (err) => {
			if (err) return cb(err);
			return fs$60.symlink(resolvedSrc, dest, cb);
		});
	}
	function isSrcSubdir$3(src$1, dest) {
		const srcArray = path$61.resolve(src$1).split(path$61.sep);
		const destArray = path$61.resolve(dest).split(path$61.sep);
		return srcArray.reduce((acc, current, i$2) => acc && destArray[i$2] === current, true);
	}
	function checkStats(src$1, dest, cb) {
		fs$60.stat(src$1, (err, srcStat) => {
			if (err) return cb(err);
			fs$60.stat(dest, (err$1, destStat) => {
				if (err$1) {
					if (err$1.code === "ENOENT") return cb(null, {
						srcStat,
						destStat: notExist
					});
					return cb(err$1);
				}
				return cb(null, {
					srcStat,
					destStat
				});
			});
		});
	}
	function checkPaths$1(src$1, dest, cb) {
		checkStats(src$1, dest, (err, stats) => {
			if (err) return cb(err);
			const { srcStat, destStat } = stats;
			if (destStat.ino && destStat.ino === srcStat.ino) return cb(new Error("Source and destination must not be the same."));
			if (srcStat.isDirectory() && isSrcSubdir$3(src$1, dest)) return cb(new Error(`Cannot copy '${src$1}' to a subdirectory of itself, '${dest}'.`));
			return cb(null, destStat);
		});
	}
	module.exports = copy$3;
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/copy/index.js
var require_copy$2 = __commonJS({ "../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/copy/index.js"(exports, module) {
	const u$22 = require_universalify().fromCallback;
	module.exports = { copy: u$22(require_copy$3()) };
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/remove/rimraf.js
var require_rimraf$1 = __commonJS({ "../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/remove/rimraf.js"(exports, module) {
	const fs$59 = require_graceful_fs();
	const path$60 = require("path");
	const assert$2 = require("assert");
	const isWindows$3 = process.platform === "win32";
	function defaults$1(options) {
		const methods = [
			"unlink",
			"chmod",
			"stat",
			"lstat",
			"rmdir",
			"readdir"
		];
		methods.forEach((m) => {
			options[m] = options[m] || fs$59[m];
			m = m + "Sync";
			options[m] = options[m] || fs$59[m];
		});
		options.maxBusyTries = options.maxBusyTries || 3;
	}
	function rimraf$3(p, options, cb) {
		let busyTries = 0;
		if (typeof options === "function") {
			cb = options;
			options = {};
		}
		assert$2(p, "rimraf: missing path");
		assert$2.strictEqual(typeof p, "string", "rimraf: path should be a string");
		assert$2.strictEqual(typeof cb, "function", "rimraf: callback function required");
		assert$2(options, "rimraf: invalid options argument provided");
		assert$2.strictEqual(typeof options, "object", "rimraf: options should be object");
		defaults$1(options);
		rimraf_$1(p, options, function CB(er) {
			if (er) {
				if ((er.code === "EBUSY" || er.code === "ENOTEMPTY" || er.code === "EPERM") && busyTries < options.maxBusyTries) {
					busyTries++;
					const time = busyTries * 100;
					return setTimeout(() => rimraf_$1(p, options, CB), time);
				}
				if (er.code === "ENOENT") er = null;
			}
			cb(er);
		});
	}
	function rimraf_$1(p, options, cb) {
		assert$2(p);
		assert$2(options);
		assert$2(typeof cb === "function");
		options.lstat(p, (er, st) => {
			if (er && er.code === "ENOENT") return cb(null);
			if (er && er.code === "EPERM" && isWindows$3) return fixWinEPERM$1(p, options, er, cb);
			if (st && st.isDirectory()) return rmdir$1(p, options, er, cb);
			options.unlink(p, (er$1) => {
				if (er$1) {
					if (er$1.code === "ENOENT") return cb(null);
					if (er$1.code === "EPERM") return isWindows$3 ? fixWinEPERM$1(p, options, er$1, cb) : rmdir$1(p, options, er$1, cb);
					if (er$1.code === "EISDIR") return rmdir$1(p, options, er$1, cb);
				}
				return cb(er$1);
			});
		});
	}
	function fixWinEPERM$1(p, options, er, cb) {
		assert$2(p);
		assert$2(options);
		assert$2(typeof cb === "function");
		if (er) assert$2(er instanceof Error);
		options.chmod(p, 438, (er2) => {
			if (er2) cb(er2.code === "ENOENT" ? null : er);
else options.stat(p, (er3, stats) => {
				if (er3) cb(er3.code === "ENOENT" ? null : er);
else if (stats.isDirectory()) rmdir$1(p, options, er, cb);
else options.unlink(p, cb);
			});
		});
	}
	function fixWinEPERMSync$1(p, options, er) {
		let stats;
		assert$2(p);
		assert$2(options);
		if (er) assert$2(er instanceof Error);
		try {
			options.chmodSync(p, 438);
		} catch (er2) {
			if (er2.code === "ENOENT") return;
else throw er;
		}
		try {
			stats = options.statSync(p);
		} catch (er3) {
			if (er3.code === "ENOENT") return;
else throw er;
		}
		if (stats.isDirectory()) rmdirSync$1(p, options, er);
else options.unlinkSync(p);
	}
	function rmdir$1(p, options, originalEr, cb) {
		assert$2(p);
		assert$2(options);
		if (originalEr) assert$2(originalEr instanceof Error);
		assert$2(typeof cb === "function");
		options.rmdir(p, (er) => {
			if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")) rmkids$1(p, options, cb);
else if (er && er.code === "ENOTDIR") cb(originalEr);
else cb(er);
		});
	}
	function rmkids$1(p, options, cb) {
		assert$2(p);
		assert$2(options);
		assert$2(typeof cb === "function");
		options.readdir(p, (er, files) => {
			if (er) return cb(er);
			let n = files.length;
			let errState;
			if (n === 0) return options.rmdir(p, cb);
			files.forEach((f) => {
				rimraf$3(path$60.join(p, f), options, (er$1) => {
					if (errState) return;
					if (er$1) return cb(errState = er$1);
					if (--n === 0) options.rmdir(p, cb);
				});
			});
		});
	}
	function rimrafSync$1(p, options) {
		let st;
		options = options || {};
		defaults$1(options);
		assert$2(p, "rimraf: missing path");
		assert$2.strictEqual(typeof p, "string", "rimraf: path should be a string");
		assert$2(options, "rimraf: missing options");
		assert$2.strictEqual(typeof options, "object", "rimraf: options should be object");
		try {
			st = options.lstatSync(p);
		} catch (er) {
			if (er.code === "ENOENT") return;
			if (er.code === "EPERM" && isWindows$3) fixWinEPERMSync$1(p, options, er);
		}
		try {
			if (st && st.isDirectory()) rmdirSync$1(p, options, null);
else options.unlinkSync(p);
		} catch (er) {
			if (er.code === "ENOENT") return;
else if (er.code === "EPERM") return isWindows$3 ? fixWinEPERMSync$1(p, options, er) : rmdirSync$1(p, options, er);
else if (er.code !== "EISDIR") throw er;
			rmdirSync$1(p, options, er);
		}
	}
	function rmdirSync$1(p, options, originalEr) {
		assert$2(p);
		assert$2(options);
		if (originalEr) assert$2(originalEr instanceof Error);
		try {
			options.rmdirSync(p);
		} catch (er) {
			if (er.code === "ENOTDIR") throw originalEr;
else if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM") rmkidsSync$1(p, options);
else if (er.code !== "ENOENT") throw er;
		}
	}
	function rmkidsSync$1(p, options) {
		assert$2(p);
		assert$2(options);
		options.readdirSync(p).forEach((f) => rimrafSync$1(path$60.join(p, f), options));
		if (isWindows$3) {
			const startTime = Date.now();
			do 
				try {
					const ret = options.rmdirSync(p, options);
					return ret;
				} catch (er) {}
			while (Date.now() - startTime < 500);
		} else {
			const ret = options.rmdirSync(p, options);
			return ret;
		}
	}
	module.exports = rimraf$3;
	rimraf$3.sync = rimrafSync$1;
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/remove/index.js
var require_remove$1 = __commonJS({ "../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/remove/index.js"(exports, module) {
	const u$21 = require_universalify().fromCallback;
	const rimraf$2 = require_rimraf$1();
	module.exports = {
		remove: u$21(rimraf$2),
		removeSync: rimraf$2.sync
	};
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/empty/index.js
var require_empty$1 = __commonJS({ "../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/empty/index.js"(exports, module) {
	const u$20 = require_universalify().fromCallback;
	const fs$58 = require("fs");
	const path$59 = require("path");
	const mkdir$11 = require_mkdirs$2();
	const remove$3 = require_remove$1();
	const emptyDir$1 = u$20(function emptyDir$2(dir, callback) {
		callback = callback || function() {};
		fs$58.readdir(dir, (err, items) => {
			if (err) return mkdir$11.mkdirs(dir, callback);
			items = items.map((item) => path$59.join(dir, item));
			deleteItem();
			function deleteItem() {
				const item = items.pop();
				if (!item) return callback();
				remove$3.remove(item, (err$1) => {
					if (err$1) return callback(err$1);
					deleteItem();
				});
			}
		});
	});
	function emptyDirSync$1(dir) {
		let items;
		try {
			items = fs$58.readdirSync(dir);
		} catch (err) {
			return mkdir$11.mkdirsSync(dir);
		}
		items.forEach((item) => {
			item = path$59.join(dir, item);
			remove$3.removeSync(item);
		});
	}
	module.exports = {
		emptyDirSync: emptyDirSync$1,
		emptydirSync: emptyDirSync$1,
		emptyDir: emptyDir$1,
		emptydir: emptyDir$1
	};
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/ensure/file.js
var require_file$1 = __commonJS({ "../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/ensure/file.js"(exports, module) {
	const u$19 = require_universalify().fromCallback;
	const path$58 = require("path");
	const fs$57 = require_graceful_fs();
	const mkdir$10 = require_mkdirs$2();
	const pathExists$16 = require_path_exists$2().pathExists;
	function createFile$1(file$2, callback) {
		function makeFile() {
			fs$57.writeFile(file$2, "", (err) => {
				if (err) return callback(err);
				callback();
			});
		}
		fs$57.stat(file$2, (err, stats) => {
			if (!err && stats.isFile()) return callback();
			const dir = path$58.dirname(file$2);
			pathExists$16(dir, (err$1, dirExists) => {
				if (err$1) return callback(err$1);
				if (dirExists) return makeFile();
				mkdir$10.mkdirs(dir, (err$2) => {
					if (err$2) return callback(err$2);
					makeFile();
				});
			});
		});
	}
	function createFileSync$1(file$2) {
		let stats;
		try {
			stats = fs$57.statSync(file$2);
		} catch (e) {}
		if (stats && stats.isFile()) return;
		const dir = path$58.dirname(file$2);
		if (!fs$57.existsSync(dir)) mkdir$10.mkdirsSync(dir);
		fs$57.writeFileSync(file$2, "");
	}
	module.exports = {
		createFile: u$19(createFile$1),
		createFileSync: createFileSync$1
	};
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/ensure/link.js
var require_link$1 = __commonJS({ "../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/ensure/link.js"(exports, module) {
	const u$18 = require_universalify().fromCallback;
	const path$57 = require("path");
	const fs$56 = require_graceful_fs();
	const mkdir$9 = require_mkdirs$2();
	const pathExists$15 = require_path_exists$2().pathExists;
	function createLink$1(srcpath, dstpath, callback) {
		function makeLink(srcpath$1, dstpath$1) {
			fs$56.link(srcpath$1, dstpath$1, (err) => {
				if (err) return callback(err);
				callback(null);
			});
		}
		pathExists$15(dstpath, (err, destinationExists) => {
			if (err) return callback(err);
			if (destinationExists) return callback(null);
			fs$56.lstat(srcpath, (err$1) => {
				if (err$1) {
					err$1.message = err$1.message.replace("lstat", "ensureLink");
					return callback(err$1);
				}
				const dir = path$57.dirname(dstpath);
				pathExists$15(dir, (err$2, dirExists) => {
					if (err$2) return callback(err$2);
					if (dirExists) return makeLink(srcpath, dstpath);
					mkdir$9.mkdirs(dir, (err$3) => {
						if (err$3) return callback(err$3);
						makeLink(srcpath, dstpath);
					});
				});
			});
		});
	}
	function createLinkSync$1(srcpath, dstpath) {
		const destinationExists = fs$56.existsSync(dstpath);
		if (destinationExists) return undefined;
		try {
			fs$56.lstatSync(srcpath);
		} catch (err) {
			err.message = err.message.replace("lstat", "ensureLink");
			throw err;
		}
		const dir = path$57.dirname(dstpath);
		const dirExists = fs$56.existsSync(dir);
		if (dirExists) return fs$56.linkSync(srcpath, dstpath);
		mkdir$9.mkdirsSync(dir);
		return fs$56.linkSync(srcpath, dstpath);
	}
	module.exports = {
		createLink: u$18(createLink$1),
		createLinkSync: createLinkSync$1
	};
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/ensure/symlink-paths.js
var require_symlink_paths$1 = __commonJS({ "../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/ensure/symlink-paths.js"(exports, module) {
	const path$56 = require("path");
	const fs$55 = require_graceful_fs();
	const pathExists$14 = require_path_exists$2().pathExists;
	/**
	* Function that returns two types of paths, one relative to symlink, and one
	* relative to the current working directory. Checks if path is absolute or
	* relative. If the path is relative, this function checks if the path is
	* relative to symlink or relative to current working directory. This is an
	* initiative to find a smarter `srcpath` to supply when building symlinks.
	* This allows you to determine which path to use out of one of three possible
	* types of source paths. The first is an absolute path. This is detected by
	* `path.isAbsolute()`. When an absolute path is provided, it is checked to
	* see if it exists. If it does it's used, if not an error is returned
	* (callback)/ thrown (sync). The other two options for `srcpath` are a
	* relative url. By default Node's `fs.symlink` works by creating a symlink
	* using `dstpath` and expects the `srcpath` to be relative to the newly
	* created symlink. If you provide a `srcpath` that does not exist on the file
	* system it results in a broken symlink. To minimize this, the function
	* checks to see if the 'relative to symlink' source file exists, and if it
	* does it will use it. If it does not, it checks if there's a file that
	* exists that is relative to the current working directory, if does its used.
	* This preserves the expectations of the original fs.symlink spec and adds
	* the ability to pass in `relative to current working direcotry` paths.
	*/
	function symlinkPaths$3(srcpath, dstpath, callback) {
		if (path$56.isAbsolute(srcpath)) return fs$55.lstat(srcpath, (err) => {
			if (err) {
				err.message = err.message.replace("lstat", "ensureSymlink");
				return callback(err);
			}
			return callback(null, {
				"toCwd": srcpath,
				"toDst": srcpath
			});
		});
else {
			const dstdir = path$56.dirname(dstpath);
			const relativeToDst = path$56.join(dstdir, srcpath);
			return pathExists$14(relativeToDst, (err, exists$1) => {
				if (err) return callback(err);
				if (exists$1) return callback(null, {
					"toCwd": relativeToDst,
					"toDst": srcpath
				});
else return fs$55.lstat(srcpath, (err$1) => {
					if (err$1) {
						err$1.message = err$1.message.replace("lstat", "ensureSymlink");
						return callback(err$1);
					}
					return callback(null, {
						"toCwd": srcpath,
						"toDst": path$56.relative(dstdir, srcpath)
					});
				});
			});
		}
	}
	function symlinkPathsSync$3(srcpath, dstpath) {
		let exists$1;
		if (path$56.isAbsolute(srcpath)) {
			exists$1 = fs$55.existsSync(srcpath);
			if (!exists$1) throw new Error("absolute srcpath does not exist");
			return {
				"toCwd": srcpath,
				"toDst": srcpath
			};
		} else {
			const dstdir = path$56.dirname(dstpath);
			const relativeToDst = path$56.join(dstdir, srcpath);
			exists$1 = fs$55.existsSync(relativeToDst);
			if (exists$1) return {
				"toCwd": relativeToDst,
				"toDst": srcpath
			};
else {
				exists$1 = fs$55.existsSync(srcpath);
				if (!exists$1) throw new Error("relative srcpath does not exist");
				return {
					"toCwd": srcpath,
					"toDst": path$56.relative(dstdir, srcpath)
				};
			}
		}
	}
	module.exports = {
		symlinkPaths: symlinkPaths$3,
		symlinkPathsSync: symlinkPathsSync$3
	};
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/ensure/symlink-type.js
var require_symlink_type$1 = __commonJS({ "../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/ensure/symlink-type.js"(exports, module) {
	const fs$54 = require_graceful_fs();
	function symlinkType$3(srcpath, type, callback) {
		callback = typeof type === "function" ? type : callback;
		type = typeof type === "function" ? false : type;
		if (type) return callback(null, type);
		fs$54.lstat(srcpath, (err, stats) => {
			if (err) return callback(null, "file");
			type = stats && stats.isDirectory() ? "dir" : "file";
			callback(null, type);
		});
	}
	function symlinkTypeSync$3(srcpath, type) {
		let stats;
		if (type) return type;
		try {
			stats = fs$54.lstatSync(srcpath);
		} catch (e) {
			return "file";
		}
		return stats && stats.isDirectory() ? "dir" : "file";
	}
	module.exports = {
		symlinkType: symlinkType$3,
		symlinkTypeSync: symlinkTypeSync$3
	};
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/ensure/symlink.js
var require_symlink$1 = __commonJS({ "../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/ensure/symlink.js"(exports, module) {
	const u$17 = require_universalify().fromCallback;
	const path$55 = require("path");
	const fs$53 = require_graceful_fs();
	const _mkdirs$1 = require_mkdirs$2();
	const mkdirs$3 = _mkdirs$1.mkdirs;
	const mkdirsSync$3 = _mkdirs$1.mkdirsSync;
	const _symlinkPaths$1 = require_symlink_paths$1();
	const symlinkPaths$2 = _symlinkPaths$1.symlinkPaths;
	const symlinkPathsSync$2 = _symlinkPaths$1.symlinkPathsSync;
	const _symlinkType$1 = require_symlink_type$1();
	const symlinkType$2 = _symlinkType$1.symlinkType;
	const symlinkTypeSync$2 = _symlinkType$1.symlinkTypeSync;
	const pathExists$13 = require_path_exists$2().pathExists;
	function createSymlink$1(srcpath, dstpath, type, callback) {
		callback = typeof type === "function" ? type : callback;
		type = typeof type === "function" ? false : type;
		pathExists$13(dstpath, (err, destinationExists) => {
			if (err) return callback(err);
			if (destinationExists) return callback(null);
			symlinkPaths$2(srcpath, dstpath, (err$1, relative) => {
				if (err$1) return callback(err$1);
				srcpath = relative.toDst;
				symlinkType$2(relative.toCwd, type, (err$2, type$1) => {
					if (err$2) return callback(err$2);
					const dir = path$55.dirname(dstpath);
					pathExists$13(dir, (err$3, dirExists) => {
						if (err$3) return callback(err$3);
						if (dirExists) return fs$53.symlink(srcpath, dstpath, type$1, callback);
						mkdirs$3(dir, (err$4) => {
							if (err$4) return callback(err$4);
							fs$53.symlink(srcpath, dstpath, type$1, callback);
						});
					});
				});
			});
		});
	}
	function createSymlinkSync$1(srcpath, dstpath, type) {
		const destinationExists = fs$53.existsSync(dstpath);
		if (destinationExists) return undefined;
		const relative = symlinkPathsSync$2(srcpath, dstpath);
		srcpath = relative.toDst;
		type = symlinkTypeSync$2(relative.toCwd, type);
		const dir = path$55.dirname(dstpath);
		const exists$1 = fs$53.existsSync(dir);
		if (exists$1) return fs$53.symlinkSync(srcpath, dstpath, type);
		mkdirsSync$3(dir);
		return fs$53.symlinkSync(srcpath, dstpath, type);
	}
	module.exports = {
		createSymlink: u$17(createSymlink$1),
		createSymlinkSync: createSymlinkSync$1
	};
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/ensure/index.js
var require_ensure$1 = __commonJS({ "../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/ensure/index.js"(exports, module) {
	const file$1 = require_file$1();
	const link$2 = require_link$1();
	const symlink$1 = require_symlink$1();
	module.exports = {
		createFile: file$1.createFile,
		createFileSync: file$1.createFileSync,
		ensureFile: file$1.createFile,
		ensureFileSync: file$1.createFileSync,
		createLink: link$2.createLink,
		createLinkSync: link$2.createLinkSync,
		ensureLink: link$2.createLink,
		ensureLinkSync: link$2.createLinkSync,
		createSymlink: symlink$1.createSymlink,
		createSymlinkSync: symlink$1.createSymlinkSync,
		ensureSymlink: symlink$1.createSymlink,
		ensureSymlinkSync: symlink$1.createSymlinkSync
	};
} });

//#endregion
//#region ../node_modules/.pnpm/jsonfile@4.0.0/node_modules/jsonfile/index.js
var require_jsonfile$2 = __commonJS({ "../node_modules/.pnpm/jsonfile@4.0.0/node_modules/jsonfile/index.js"(exports, module) {
	var _fs;
	try {
		_fs = require_graceful_fs();
	} catch (_) {
		_fs = require("fs");
	}
	function readFile$2(file$2, options, callback) {
		if (callback == null) {
			callback = options;
			options = {};
		}
		if (typeof options === "string") options = { encoding: options };
		options = options || {};
		var fs$70 = options.fs || _fs;
		var shouldThrow = true;
		if ("throws" in options) shouldThrow = options.throws;
		fs$70.readFile(file$2, options, function(err, data) {
			if (err) return callback(err);
			data = stripBom$1(data);
			var obj;
			try {
				obj = JSON.parse(data, options ? options.reviver : null);
			} catch (err2) {
				if (shouldThrow) {
					err2.message = file$2 + ": " + err2.message;
					return callback(err2);
				} else return callback(null, null);
			}
			callback(null, obj);
		});
	}
	function readFileSync(file$2, options) {
		options = options || {};
		if (typeof options === "string") options = { encoding: options };
		var fs$70 = options.fs || _fs;
		var shouldThrow = true;
		if ("throws" in options) shouldThrow = options.throws;
		try {
			var content$2 = fs$70.readFileSync(file$2, options);
			content$2 = stripBom$1(content$2);
			return JSON.parse(content$2, options.reviver);
		} catch (err) {
			if (shouldThrow) {
				err.message = file$2 + ": " + err.message;
				throw err;
			} else return null;
		}
	}
	function stringify$5(obj, options) {
		var spaces;
		var EOL = "\n";
		if (typeof options === "object" && options !== null) {
			if (options.spaces) spaces = options.spaces;
			if (options.EOL) EOL = options.EOL;
		}
		var str = JSON.stringify(obj, options ? options.replacer : null, spaces);
		return str.replace(/\n/g, EOL) + EOL;
	}
	function writeFile$1(file$2, obj, options, callback) {
		if (callback == null) {
			callback = options;
			options = {};
		}
		options = options || {};
		var fs$70 = options.fs || _fs;
		var str = "";
		try {
			str = stringify$5(obj, options);
		} catch (err) {
			if (callback) callback(err, null);
			return;
		}
		fs$70.writeFile(file$2, str, options, callback);
	}
	function writeFileSync(file$2, obj, options) {
		options = options || {};
		var fs$70 = options.fs || _fs;
		var str = stringify$5(obj, options);
		return fs$70.writeFileSync(file$2, str, options);
	}
	function stripBom$1(content$2) {
		if (Buffer.isBuffer(content$2)) content$2 = content$2.toString("utf8");
		content$2 = content$2.replace(/^\uFEFF/, "");
		return content$2;
	}
	var jsonfile = {
		readFile: readFile$2,
		readFileSync,
		writeFile: writeFile$1,
		writeFileSync
	};
	module.exports = jsonfile;
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/json/jsonfile.js
var require_jsonfile$1 = __commonJS({ "../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/json/jsonfile.js"(exports, module) {
	const u$16 = require_universalify().fromCallback;
	const jsonFile$7 = require_jsonfile$2();
	module.exports = {
		readJson: u$16(jsonFile$7.readFile),
		readJsonSync: jsonFile$7.readFileSync,
		writeJson: u$16(jsonFile$7.writeFile),
		writeJsonSync: jsonFile$7.writeFileSync
	};
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/json/output-json.js
var require_output_json$1 = __commonJS({ "../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/json/output-json.js"(exports, module) {
	const path$54 = require("path");
	const mkdir$8 = require_mkdirs$2();
	const pathExists$12 = require_path_exists$2().pathExists;
	const jsonFile$6 = require_jsonfile$1();
	function outputJson$1(file$2, data, options, callback) {
		if (typeof options === "function") {
			callback = options;
			options = {};
		}
		const dir = path$54.dirname(file$2);
		pathExists$12(dir, (err, itDoes) => {
			if (err) return callback(err);
			if (itDoes) return jsonFile$6.writeJson(file$2, data, options, callback);
			mkdir$8.mkdirs(dir, (err$1) => {
				if (err$1) return callback(err$1);
				jsonFile$6.writeJson(file$2, data, options, callback);
			});
		});
	}
	module.exports = outputJson$1;
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/json/output-json-sync.js
var require_output_json_sync$1 = __commonJS({ "../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/json/output-json-sync.js"(exports, module) {
	const fs$52 = require_graceful_fs();
	const path$53 = require("path");
	const mkdir$7 = require_mkdirs$2();
	const jsonFile$5 = require_jsonfile$1();
	function outputJsonSync$1(file$2, data, options) {
		const dir = path$53.dirname(file$2);
		if (!fs$52.existsSync(dir)) mkdir$7.mkdirsSync(dir);
		jsonFile$5.writeJsonSync(file$2, data, options);
	}
	module.exports = outputJsonSync$1;
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/json/index.js
var require_json$3 = __commonJS({ "../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/json/index.js"(exports, module) {
	const u$15 = require_universalify().fromCallback;
	const jsonFile$4 = require_jsonfile$1();
	jsonFile$4.outputJson = u$15(require_output_json$1());
	jsonFile$4.outputJsonSync = require_output_json_sync$1();
	jsonFile$4.outputJSON = jsonFile$4.outputJson;
	jsonFile$4.outputJSONSync = jsonFile$4.outputJsonSync;
	jsonFile$4.writeJSON = jsonFile$4.writeJson;
	jsonFile$4.writeJSONSync = jsonFile$4.writeJsonSync;
	jsonFile$4.readJSON = jsonFile$4.readJson;
	jsonFile$4.readJSONSync = jsonFile$4.readJsonSync;
	module.exports = jsonFile$4;
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/move-sync/index.js
var require_move_sync$2 = __commonJS({ "../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/move-sync/index.js"(exports, module) {
	const fs$51 = require_graceful_fs();
	const path$52 = require("path");
	const copySync$2 = require_copy_sync$2().copySync;
	const removeSync$1 = require_remove$1().removeSync;
	const mkdirpSync$2 = require_mkdirs$2().mkdirsSync;
	const buffer = require_buffer$1();
	function moveSync$1(src$1, dest, options) {
		options = options || {};
		const overwrite = options.overwrite || options.clobber || false;
		src$1 = path$52.resolve(src$1);
		dest = path$52.resolve(dest);
		if (src$1 === dest) return fs$51.accessSync(src$1);
		if (isSrcSubdir$2(src$1, dest)) throw new Error(`Cannot move '${src$1}' into itself '${dest}'.`);
		mkdirpSync$2(path$52.dirname(dest));
		tryRenameSync();
		function tryRenameSync() {
			if (overwrite) try {
				return fs$51.renameSync(src$1, dest);
			} catch (err) {
				if (err.code === "ENOTEMPTY" || err.code === "EEXIST" || err.code === "EPERM") {
					removeSync$1(dest);
					options.overwrite = false;
					return moveSync$1(src$1, dest, options);
				}
				if (err.code !== "EXDEV") throw err;
				return moveSyncAcrossDevice(src$1, dest, overwrite);
			}
else try {
				fs$51.linkSync(src$1, dest);
				return fs$51.unlinkSync(src$1);
			} catch (err) {
				if (err.code === "EXDEV" || err.code === "EISDIR" || err.code === "EPERM" || err.code === "ENOTSUP") return moveSyncAcrossDevice(src$1, dest, overwrite);
				throw err;
			}
		}
	}
	function moveSyncAcrossDevice(src$1, dest, overwrite) {
		const stat$5 = fs$51.statSync(src$1);
		if (stat$5.isDirectory()) return moveDirSyncAcrossDevice(src$1, dest, overwrite);
else return moveFileSyncAcrossDevice(src$1, dest, overwrite);
	}
	function moveFileSyncAcrossDevice(src$1, dest, overwrite) {
		const BUF_LENGTH = 65536;
		const _buff = buffer(BUF_LENGTH);
		const flags = overwrite ? "w" : "wx";
		const fdr = fs$51.openSync(src$1, "r");
		const stat$5 = fs$51.fstatSync(fdr);
		const fdw = fs$51.openSync(dest, flags, stat$5.mode);
		let pos = 0;
		while (pos < stat$5.size) {
			const bytesRead = fs$51.readSync(fdr, _buff, 0, BUF_LENGTH, pos);
			fs$51.writeSync(fdw, _buff, 0, bytesRead);
			pos += bytesRead;
		}
		fs$51.closeSync(fdr);
		fs$51.closeSync(fdw);
		return fs$51.unlinkSync(src$1);
	}
	function moveDirSyncAcrossDevice(src$1, dest, overwrite) {
		const options = { overwrite: false };
		if (overwrite) {
			removeSync$1(dest);
			tryCopySync();
		} else tryCopySync();
		function tryCopySync() {
			copySync$2(src$1, dest, options);
			return removeSync$1(src$1);
		}
	}
	function isSrcSubdir$2(src$1, dest) {
		try {
			return fs$51.statSync(src$1).isDirectory() && src$1 !== dest && dest.indexOf(src$1) > -1 && dest.split(path$52.dirname(src$1) + path$52.sep)[1].split(path$52.sep)[0] === path$52.basename(src$1);
		} catch (e) {
			return false;
		}
	}
	module.exports = { moveSync: moveSync$1 };
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/move/index.js
var require_move$2 = __commonJS({ "../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/move/index.js"(exports, module) {
	const u$14 = require_universalify().fromCallback;
	const fs$50 = require_graceful_fs();
	const path$51 = require("path");
	const copy$2 = require_copy$2().copy;
	const remove$2 = require_remove$1().remove;
	const mkdirp$2 = require_mkdirs$2().mkdirp;
	const pathExists$11 = require_path_exists$2().pathExists;
	function move$1(src$1, dest, opts, cb) {
		if (typeof opts === "function") {
			cb = opts;
			opts = {};
		}
		const overwrite = opts.overwrite || opts.clobber || false;
		src$1 = path$51.resolve(src$1);
		dest = path$51.resolve(dest);
		if (src$1 === dest) return fs$50.access(src$1, cb);
		fs$50.stat(src$1, (err, st) => {
			if (err) return cb(err);
			if (st.isDirectory() && isSrcSubdir$1(src$1, dest)) return cb(new Error(`Cannot move '${src$1}' to a subdirectory of itself, '${dest}'.`));
			mkdirp$2(path$51.dirname(dest), (err$1) => {
				if (err$1) return cb(err$1);
				return doRename$2(src$1, dest, overwrite, cb);
			});
		});
	}
	function doRename$2(src$1, dest, overwrite, cb) {
		if (overwrite) return remove$2(dest, (err) => {
			if (err) return cb(err);
			return rename$2(src$1, dest, overwrite, cb);
		});
		pathExists$11(dest, (err, destExists) => {
			if (err) return cb(err);
			if (destExists) return cb(new Error("dest already exists."));
			return rename$2(src$1, dest, overwrite, cb);
		});
	}
	function rename$2(src$1, dest, overwrite, cb) {
		fs$50.rename(src$1, dest, (err) => {
			if (!err) return cb();
			if (err.code !== "EXDEV") return cb(err);
			return moveAcrossDevice$2(src$1, dest, overwrite, cb);
		});
	}
	function moveAcrossDevice$2(src$1, dest, overwrite, cb) {
		const opts = {
			overwrite,
			errorOnExist: true
		};
		copy$2(src$1, dest, opts, (err) => {
			if (err) return cb(err);
			return remove$2(src$1, cb);
		});
	}
	function isSrcSubdir$1(src$1, dest) {
		const srcArray = src$1.split(path$51.sep);
		const destArray = dest.split(path$51.sep);
		return srcArray.reduce((acc, current, i$2) => {
			return acc && destArray[i$2] === current;
		}, true);
	}
	module.exports = { move: u$14(move$1) };
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/output/index.js
var require_output$1 = __commonJS({ "../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/output/index.js"(exports, module) {
	const u$13 = require_universalify().fromCallback;
	const fs$49 = require_graceful_fs();
	const path$50 = require("path");
	const mkdir$6 = require_mkdirs$2();
	const pathExists$10 = require_path_exists$2().pathExists;
	function outputFile$1(file$2, data, encoding, callback) {
		if (typeof encoding === "function") {
			callback = encoding;
			encoding = "utf8";
		}
		const dir = path$50.dirname(file$2);
		pathExists$10(dir, (err, itDoes) => {
			if (err) return callback(err);
			if (itDoes) return fs$49.writeFile(file$2, data, encoding, callback);
			mkdir$6.mkdirs(dir, (err$1) => {
				if (err$1) return callback(err$1);
				fs$49.writeFile(file$2, data, encoding, callback);
			});
		});
	}
	function outputFileSync$1(file$2, ...args) {
		const dir = path$50.dirname(file$2);
		if (fs$49.existsSync(dir)) return fs$49.writeFileSync(file$2, ...args);
		mkdir$6.mkdirsSync(dir);
		fs$49.writeFileSync(file$2, ...args);
	}
	module.exports = {
		outputFile: u$13(outputFile$1),
		outputFileSync: outputFileSync$1
	};
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/index.js
var require_lib$1 = __commonJS({ "../node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/index.js"(exports, module) {
	module.exports = Object.assign({}, require_fs$5(), require_copy_sync$2(), require_copy$2(), require_empty$1(), require_ensure$1(), require_json$3(), require_mkdirs$2(), require_move_sync$2(), require_move$2(), require_output$1(), require_path_exists$2(), require_remove$1());
	const fs$48 = require("fs");
	if (Object.getOwnPropertyDescriptor(fs$48, "promises")) Object.defineProperty(module.exports, "promises", { get() {
		return fs$48.promises;
	} });
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/common.js
var require_common$3 = __commonJS({ "../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/common.js"(exports, module) {
	function isNothing$1(subject) {
		return typeof subject === "undefined" || subject === null;
	}
	function isObject$4(subject) {
		return typeof subject === "object" && subject !== null;
	}
	function toArray$1(sequence) {
		if (Array.isArray(sequence)) return sequence;
else if (isNothing$1(sequence)) return [];
		return [sequence];
	}
	function extend$2(target, source) {
		var index$1, length, key, sourceKeys;
		if (source) {
			sourceKeys = Object.keys(source);
			for (index$1 = 0, length = sourceKeys.length; index$1 < length; index$1 += 1) {
				key = sourceKeys[index$1];
				target[key] = source[key];
			}
		}
		return target;
	}
	function repeat$1(string$3, count) {
		var result = "", cycle;
		for (cycle = 0; cycle < count; cycle += 1) result += string$3;
		return result;
	}
	function isNegativeZero$1(number) {
		return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;
	}
	module.exports.isNothing = isNothing$1;
	module.exports.isObject = isObject$4;
	module.exports.toArray = toArray$1;
	module.exports.repeat = repeat$1;
	module.exports.isNegativeZero = isNegativeZero$1;
	module.exports.extend = extend$2;
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/exception.js
var require_exception$1 = __commonJS({ "../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/exception.js"(exports, module) {
	function YAMLException$9(reason, mark) {
		Error.call(this);
		this.name = "YAMLException";
		this.reason = reason;
		this.mark = mark;
		this.message = (this.reason || "(unknown reason)") + (this.mark ? " " + this.mark.toString() : "");
		if (Error.captureStackTrace) Error.captureStackTrace(this, this.constructor);
else this.stack = new Error().stack || "";
	}
	YAMLException$9.prototype = Object.create(Error.prototype);
	YAMLException$9.prototype.constructor = YAMLException$9;
	YAMLException$9.prototype.toString = function toString$1(compact) {
		var result = this.name + ": ";
		result += this.reason || "(unknown reason)";
		if (!compact && this.mark) result += " " + this.mark.toString();
		return result;
	};
	module.exports = YAMLException$9;
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/mark.js
var require_mark = __commonJS({ "../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/mark.js"(exports, module) {
	var common$15 = require_common$3();
	function Mark$1(name, buffer$1, position$1, line, column) {
		this.name = name;
		this.buffer = buffer$1;
		this.position = position$1;
		this.line = line;
		this.column = column;
	}
	Mark$1.prototype.getSnippet = function getSnippet(indent, maxLength) {
		var head, start, tail, end, snippet;
		if (!this.buffer) return null;
		indent = indent || 4;
		maxLength = maxLength || 75;
		head = "";
		start = this.position;
		while (start > 0 && "\0\r\n\u2028\u2029".indexOf(this.buffer.charAt(start - 1)) === -1) {
			start -= 1;
			if (this.position - start > maxLength / 2 - 1) {
				head = " ... ";
				start += 5;
				break;
			}
		}
		tail = "";
		end = this.position;
		while (end < this.buffer.length && "\0\r\n\u2028\u2029".indexOf(this.buffer.charAt(end)) === -1) {
			end += 1;
			if (end - this.position > maxLength / 2 - 1) {
				tail = " ... ";
				end -= 5;
				break;
			}
		}
		snippet = this.buffer.slice(start, end);
		return common$15.repeat(" ", indent) + head + snippet + tail + "\n" + common$15.repeat(" ", indent + this.position - start + head.length) + "^";
	};
	Mark$1.prototype.toString = function toString$1(compact) {
		var snippet, where = "";
		if (this.name) where += "in \"" + this.name + "\" ";
		where += "at line " + (this.line + 1) + ", column " + (this.column + 1);
		if (!compact) {
			snippet = this.getSnippet();
			if (snippet) where += ":\n" + snippet;
		}
		return where;
	};
	module.exports = Mark$1;
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type.js
var require_type$1 = __commonJS({ "../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type.js"(exports, module) {
	var YAMLException$8 = require_exception$1();
	var TYPE_CONSTRUCTOR_OPTIONS$1 = [
		"kind",
		"resolve",
		"construct",
		"instanceOf",
		"predicate",
		"represent",
		"defaultStyle",
		"styleAliases"
	];
	var YAML_NODE_KINDS$1 = [
		"scalar",
		"sequence",
		"mapping"
	];
	function compileStyleAliases$1(map$3) {
		var result = {};
		if (map$3 !== null) Object.keys(map$3).forEach(function(style) {
			map$3[style].forEach(function(alias) {
				result[String(alias)] = style;
			});
		});
		return result;
	}
	function Type$32(tag$2, options) {
		options = options || {};
		Object.keys(options).forEach(function(name) {
			if (TYPE_CONSTRUCTOR_OPTIONS$1.indexOf(name) === -1) throw new YAMLException$8("Unknown option \"" + name + "\" is met in definition of \"" + tag$2 + "\" YAML type.");
		});
		this.tag = tag$2;
		this.kind = options["kind"] || null;
		this.resolve = options["resolve"] || function() {
			return true;
		};
		this.construct = options["construct"] || function(data) {
			return data;
		};
		this.instanceOf = options["instanceOf"] || null;
		this.predicate = options["predicate"] || null;
		this.represent = options["represent"] || null;
		this.defaultStyle = options["defaultStyle"] || null;
		this.styleAliases = compileStyleAliases$1(options["styleAliases"] || null);
		if (YAML_NODE_KINDS$1.indexOf(this.kind) === -1) throw new YAMLException$8("Unknown kind \"" + this.kind + "\" is specified for \"" + tag$2 + "\" YAML type.");
	}
	module.exports = Type$32;
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/schema.js
var require_schema$1 = __commonJS({ "../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/schema.js"(exports, module) {
	var common$14 = require_common$3();
	var YAMLException$7 = require_exception$1();
	var Type$31 = require_type$1();
	function compileList$1(schema, name, result) {
		var exclude = [];
		schema.include.forEach(function(includedSchema) {
			result = compileList$1(includedSchema, name, result);
		});
		schema[name].forEach(function(currentType) {
			result.forEach(function(previousType, previousIndex) {
				if (previousType.tag === currentType.tag && previousType.kind === currentType.kind) exclude.push(previousIndex);
			});
			result.push(currentType);
		});
		return result.filter(function(type, index$1) {
			return exclude.indexOf(index$1) === -1;
		});
	}
	function compileMap$1() {
		var result = {
			scalar: {},
			sequence: {},
			mapping: {},
			fallback: {}
		}, index$1, length;
		function collectType(type) {
			result[type.kind][type.tag] = result["fallback"][type.tag] = type;
		}
		for (index$1 = 0, length = arguments.length; index$1 < length; index$1 += 1) arguments[index$1].forEach(collectType);
		return result;
	}
	function Schema$7(definition$2) {
		this.include = definition$2.include || [];
		this.implicit = definition$2.implicit || [];
		this.explicit = definition$2.explicit || [];
		this.implicit.forEach(function(type) {
			if (type.loadKind && type.loadKind !== "scalar") throw new YAMLException$7("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");
		});
		this.compiledImplicit = compileList$1(this, "implicit", []);
		this.compiledExplicit = compileList$1(this, "explicit", []);
		this.compiledTypeMap = compileMap$1(this.compiledImplicit, this.compiledExplicit);
	}
	Schema$7.DEFAULT = null;
	Schema$7.create = function createSchema() {
		var schemas, types$5;
		switch (arguments.length) {
			case 1:
				schemas = Schema$7.DEFAULT;
				types$5 = arguments[0];
				break;
			case 2:
				schemas = arguments[0];
				types$5 = arguments[1];
				break;
			default: throw new YAMLException$7("Wrong number of arguments for Schema.create function");
		}
		schemas = common$14.toArray(schemas);
		types$5 = common$14.toArray(types$5);
		if (!schemas.every(function(schema) {
			return schema instanceof Schema$7;
		})) throw new YAMLException$7("Specified list of super schemas (or a single Schema object) contains a non-Schema object.");
		if (!types$5.every(function(type) {
			return type instanceof Type$31;
		})) throw new YAMLException$7("Specified list of YAML types (or a single Type object) contains a non-Type object.");
		return new Schema$7({
			include: schemas,
			explicit: types$5
		});
	};
	module.exports = Schema$7;
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/str.js
var require_str$1 = __commonJS({ "../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/str.js"(exports, module) {
	var Type$30 = require_type$1();
	module.exports = new Type$30("tag:yaml.org,2002:str", {
		kind: "scalar",
		construct: function(data) {
			return data !== null ? data : "";
		}
	});
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/seq.js
var require_seq$1 = __commonJS({ "../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/seq.js"(exports, module) {
	var Type$29 = require_type$1();
	module.exports = new Type$29("tag:yaml.org,2002:seq", {
		kind: "sequence",
		construct: function(data) {
			return data !== null ? data : [];
		}
	});
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/map.js
var require_map$1 = __commonJS({ "../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/map.js"(exports, module) {
	var Type$28 = require_type$1();
	module.exports = new Type$28("tag:yaml.org,2002:map", {
		kind: "mapping",
		construct: function(data) {
			return data !== null ? data : {};
		}
	});
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/schema/failsafe.js
var require_failsafe$1 = __commonJS({ "../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/schema/failsafe.js"(exports, module) {
	var Schema$6 = require_schema$1();
	module.exports = new Schema$6({ explicit: [
		require_str$1(),
		require_seq$1(),
		require_map$1()
	] });
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/null.js
var require_null$1 = __commonJS({ "../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/null.js"(exports, module) {
	var Type$27 = require_type$1();
	function resolveYamlNull$1(data) {
		if (data === null) return true;
		var max = data.length;
		return max === 1 && data === "~" || max === 4 && (data === "null" || data === "Null" || data === "NULL");
	}
	function constructYamlNull$1() {
		return null;
	}
	function isNull$1(object) {
		return object === null;
	}
	module.exports = new Type$27("tag:yaml.org,2002:null", {
		kind: "scalar",
		resolve: resolveYamlNull$1,
		construct: constructYamlNull$1,
		predicate: isNull$1,
		represent: {
			canonical: function() {
				return "~";
			},
			lowercase: function() {
				return "null";
			},
			uppercase: function() {
				return "NULL";
			},
			camelcase: function() {
				return "Null";
			}
		},
		defaultStyle: "lowercase"
	});
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/bool.js
var require_bool$1 = __commonJS({ "../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/bool.js"(exports, module) {
	var Type$26 = require_type$1();
	function resolveYamlBoolean$1(data) {
		if (data === null) return false;
		var max = data.length;
		return max === 4 && (data === "true" || data === "True" || data === "TRUE") || max === 5 && (data === "false" || data === "False" || data === "FALSE");
	}
	function constructYamlBoolean$1(data) {
		return data === "true" || data === "True" || data === "TRUE";
	}
	function isBoolean$1(object) {
		return Object.prototype.toString.call(object) === "[object Boolean]";
	}
	module.exports = new Type$26("tag:yaml.org,2002:bool", {
		kind: "scalar",
		resolve: resolveYamlBoolean$1,
		construct: constructYamlBoolean$1,
		predicate: isBoolean$1,
		represent: {
			lowercase: function(object) {
				return object ? "true" : "false";
			},
			uppercase: function(object) {
				return object ? "TRUE" : "FALSE";
			},
			camelcase: function(object) {
				return object ? "True" : "False";
			}
		},
		defaultStyle: "lowercase"
	});
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/int.js
var require_int$1 = __commonJS({ "../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/int.js"(exports, module) {
	var common$13 = require_common$3();
	var Type$25 = require_type$1();
	function isHexCode$1(c) {
		return 48 <= c && c <= 57 || 65 <= c && c <= 70 || 97 <= c && c <= 102;
	}
	function isOctCode$1(c) {
		return 48 <= c && c <= 55;
	}
	function isDecCode$1(c) {
		return 48 <= c && c <= 57;
	}
	function resolveYamlInteger$1(data) {
		if (data === null) return false;
		var max = data.length, index$1 = 0, hasDigits = false, ch;
		if (!max) return false;
		ch = data[index$1];
		if (ch === "-" || ch === "+") ch = data[++index$1];
		if (ch === "0") {
			if (index$1 + 1 === max) return true;
			ch = data[++index$1];
			if (ch === "b") {
				index$1++;
				for (; index$1 < max; index$1++) {
					ch = data[index$1];
					if (ch === "_") continue;
					if (ch !== "0" && ch !== "1") return false;
					hasDigits = true;
				}
				return hasDigits && ch !== "_";
			}
			if (ch === "x") {
				index$1++;
				for (; index$1 < max; index$1++) {
					ch = data[index$1];
					if (ch === "_") continue;
					if (!isHexCode$1(data.charCodeAt(index$1))) return false;
					hasDigits = true;
				}
				return hasDigits && ch !== "_";
			}
			for (; index$1 < max; index$1++) {
				ch = data[index$1];
				if (ch === "_") continue;
				if (!isOctCode$1(data.charCodeAt(index$1))) return false;
				hasDigits = true;
			}
			return hasDigits && ch !== "_";
		}
		if (ch === "_") return false;
		for (; index$1 < max; index$1++) {
			ch = data[index$1];
			if (ch === "_") continue;
			if (ch === ":") break;
			if (!isDecCode$1(data.charCodeAt(index$1))) return false;
			hasDigits = true;
		}
		if (!hasDigits || ch === "_") return false;
		if (ch !== ":") return true;
		return /^(:[0-5]?[0-9])+$/.test(data.slice(index$1));
	}
	function constructYamlInteger$1(data) {
		var value = data, sign = 1, ch, base, digits = [];
		if (value.indexOf("_") !== -1) value = value.replace(/_/g, "");
		ch = value[0];
		if (ch === "-" || ch === "+") {
			if (ch === "-") sign = -1;
			value = value.slice(1);
			ch = value[0];
		}
		if (value === "0") return 0;
		if (ch === "0") {
			if (value[1] === "b") return sign * parseInt(value.slice(2), 2);
			if (value[1] === "x") return sign * parseInt(value, 16);
			return sign * parseInt(value, 8);
		}
		if (value.indexOf(":") !== -1) {
			value.split(":").forEach(function(v) {
				digits.unshift(parseInt(v, 10));
			});
			value = 0;
			base = 1;
			digits.forEach(function(d) {
				value += d * base;
				base *= 60;
			});
			return sign * value;
		}
		return sign * parseInt(value, 10);
	}
	function isInteger$1(object) {
		return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 === 0 && !common$13.isNegativeZero(object));
	}
	module.exports = new Type$25("tag:yaml.org,2002:int", {
		kind: "scalar",
		resolve: resolveYamlInteger$1,
		construct: constructYamlInteger$1,
		predicate: isInteger$1,
		represent: {
			binary: function(obj) {
				return obj >= 0 ? "0b" + obj.toString(2) : "-0b" + obj.toString(2).slice(1);
			},
			octal: function(obj) {
				return obj >= 0 ? "0" + obj.toString(8) : "-0" + obj.toString(8).slice(1);
			},
			decimal: function(obj) {
				return obj.toString(10);
			},
			hexadecimal: function(obj) {
				return obj >= 0 ? "0x" + obj.toString(16).toUpperCase() : "-0x" + obj.toString(16).toUpperCase().slice(1);
			}
		},
		defaultStyle: "decimal",
		styleAliases: {
			binary: [2, "bin"],
			octal: [8, "oct"],
			decimal: [10, "dec"],
			hexadecimal: [16, "hex"]
		}
	});
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/float.js
var require_float$1 = __commonJS({ "../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/float.js"(exports, module) {
	var common$12 = require_common$3();
	var Type$24 = require_type$1();
	var YAML_FLOAT_PATTERN$1 = new RegExp(
		// 2.5e4, 2.5 and integers
		"^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$"
);
	function resolveYamlFloat$1(data) {
		if (data === null) return false;
		if (!YAML_FLOAT_PATTERN$1.test(data) || data[data.length - 1] === "_") return false;
		return true;
	}
	function constructYamlFloat$1(data) {
		var value, sign, base, digits;
		value = data.replace(/_/g, "").toLowerCase();
		sign = value[0] === "-" ? -1 : 1;
		digits = [];
		if ("+-".indexOf(value[0]) >= 0) value = value.slice(1);
		if (value === ".inf") return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
else if (value === ".nan") return NaN;
else if (value.indexOf(":") >= 0) {
			value.split(":").forEach(function(v) {
				digits.unshift(parseFloat(v, 10));
			});
			value = 0;
			base = 1;
			digits.forEach(function(d) {
				value += d * base;
				base *= 60;
			});
			return sign * value;
		}
		return sign * parseFloat(value, 10);
	}
	var SCIENTIFIC_WITHOUT_DOT$1 = /^[-+]?[0-9]+e/;
	function representYamlFloat$1(object, style) {
		var res;
		if (isNaN(object)) switch (style) {
			case "lowercase": return ".nan";
			case "uppercase": return ".NAN";
			case "camelcase": return ".NaN";
		}
else if (Number.POSITIVE_INFINITY === object) switch (style) {
			case "lowercase": return ".inf";
			case "uppercase": return ".INF";
			case "camelcase": return ".Inf";
		}
else if (Number.NEGATIVE_INFINITY === object) switch (style) {
			case "lowercase": return "-.inf";
			case "uppercase": return "-.INF";
			case "camelcase": return "-.Inf";
		}
else if (common$12.isNegativeZero(object)) return "-0.0";
		res = object.toString(10);
		return SCIENTIFIC_WITHOUT_DOT$1.test(res) ? res.replace("e", ".e") : res;
	}
	function isFloat$1(object) {
		return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 !== 0 || common$12.isNegativeZero(object));
	}
	module.exports = new Type$24("tag:yaml.org,2002:float", {
		kind: "scalar",
		resolve: resolveYamlFloat$1,
		construct: constructYamlFloat$1,
		predicate: isFloat$1,
		represent: representYamlFloat$1,
		defaultStyle: "lowercase"
	});
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/schema/json.js
var require_json$2 = __commonJS({ "../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/schema/json.js"(exports, module) {
	var Schema$5 = require_schema$1();
	module.exports = new Schema$5({
		include: [require_failsafe$1()],
		implicit: [
			require_null$1(),
			require_bool$1(),
			require_int$1(),
			require_float$1()
		]
	});
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/schema/core.js
var require_core$1 = __commonJS({ "../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/schema/core.js"(exports, module) {
	var Schema$4 = require_schema$1();
	module.exports = new Schema$4({ include: [require_json$2()] });
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/timestamp.js
var require_timestamp$1 = __commonJS({ "../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/timestamp.js"(exports, module) {
	var Type$23 = require_type$1();
	var YAML_DATE_REGEXP$1 = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$");
	var YAML_TIMESTAMP_REGEXP$1 = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$");
	function resolveYamlTimestamp$1(data) {
		if (data === null) return false;
		if (YAML_DATE_REGEXP$1.exec(data) !== null) return true;
		if (YAML_TIMESTAMP_REGEXP$1.exec(data) !== null) return true;
		return false;
	}
	function constructYamlTimestamp$1(data) {
		var match, year, month, day, hour, minute, second, fraction = 0, delta = null, tz_hour, tz_minute, date;
		match = YAML_DATE_REGEXP$1.exec(data);
		if (match === null) match = YAML_TIMESTAMP_REGEXP$1.exec(data);
		if (match === null) throw new Error("Date resolve error");
		year = +match[1];
		month = +match[2] - 1;
		day = +match[3];
		if (!match[4]) return new Date(Date.UTC(year, month, day));
		hour = +match[4];
		minute = +match[5];
		second = +match[6];
		if (match[7]) {
			fraction = match[7].slice(0, 3);
			while (fraction.length < 3) fraction += "0";
			fraction = +fraction;
		}
		if (match[9]) {
			tz_hour = +match[10];
			tz_minute = +(match[11] || 0);
			delta = (tz_hour * 60 + tz_minute) * 6e4;
			if (match[9] === "-") delta = -delta;
		}
		date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
		if (delta) date.setTime(date.getTime() - delta);
		return date;
	}
	function representYamlTimestamp$1(object) {
		return object.toISOString();
	}
	module.exports = new Type$23("tag:yaml.org,2002:timestamp", {
		kind: "scalar",
		resolve: resolveYamlTimestamp$1,
		construct: constructYamlTimestamp$1,
		instanceOf: Date,
		represent: representYamlTimestamp$1
	});
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/merge.js
var require_merge$1 = __commonJS({ "../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/merge.js"(exports, module) {
	var Type$22 = require_type$1();
	function resolveYamlMerge$1(data) {
		return data === "<<" || data === null;
	}
	module.exports = new Type$22("tag:yaml.org,2002:merge", {
		kind: "scalar",
		resolve: resolveYamlMerge$1
	});
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/binary.js
var require_binary$1 = __commonJS({ "../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/binary.js"(exports, module) {
	var NodeBuffer;
	try {
		var _require$1 = require;
		NodeBuffer = _require$1("buffer").Buffer;
	} catch (__) {}
	var Type$21 = require_type$1();
	var BASE64_MAP$1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";
	function resolveYamlBinary$1(data) {
		if (data === null) return false;
		var code$1, idx, bitlen = 0, max = data.length, map$3 = BASE64_MAP$1;
		for (idx = 0; idx < max; idx++) {
			code$1 = map$3.indexOf(data.charAt(idx));
			if (code$1 > 64) continue;
			if (code$1 < 0) return false;
			bitlen += 6;
		}
		return bitlen % 8 === 0;
	}
	function constructYamlBinary$1(data) {
		var idx, tailbits, input = data.replace(/[\r\n=]/g, ""), max = input.length, map$3 = BASE64_MAP$1, bits = 0, result = [];
		for (idx = 0; idx < max; idx++) {
			if (idx % 4 === 0 && idx) {
				result.push(bits >> 16 & 255);
				result.push(bits >> 8 & 255);
				result.push(bits & 255);
			}
			bits = bits << 6 | map$3.indexOf(input.charAt(idx));
		}
		tailbits = max % 4 * 6;
		if (tailbits === 0) {
			result.push(bits >> 16 & 255);
			result.push(bits >> 8 & 255);
			result.push(bits & 255);
		} else if (tailbits === 18) {
			result.push(bits >> 10 & 255);
			result.push(bits >> 2 & 255);
		} else if (tailbits === 12) result.push(bits >> 4 & 255);
		if (NodeBuffer) return NodeBuffer.from ? NodeBuffer.from(result) : new NodeBuffer(result);
		return result;
	}
	function representYamlBinary$1(object) {
		var result = "", bits = 0, idx, tail, max = object.length, map$3 = BASE64_MAP$1;
		for (idx = 0; idx < max; idx++) {
			if (idx % 3 === 0 && idx) {
				result += map$3[bits >> 18 & 63];
				result += map$3[bits >> 12 & 63];
				result += map$3[bits >> 6 & 63];
				result += map$3[bits & 63];
			}
			bits = (bits << 8) + object[idx];
		}
		tail = max % 3;
		if (tail === 0) {
			result += map$3[bits >> 18 & 63];
			result += map$3[bits >> 12 & 63];
			result += map$3[bits >> 6 & 63];
			result += map$3[bits & 63];
		} else if (tail === 2) {
			result += map$3[bits >> 10 & 63];
			result += map$3[bits >> 4 & 63];
			result += map$3[bits << 2 & 63];
			result += map$3[64];
		} else if (tail === 1) {
			result += map$3[bits >> 2 & 63];
			result += map$3[bits << 4 & 63];
			result += map$3[64];
			result += map$3[64];
		}
		return result;
	}
	function isBinary$1(object) {
		return NodeBuffer && NodeBuffer.isBuffer(object);
	}
	module.exports = new Type$21("tag:yaml.org,2002:binary", {
		kind: "scalar",
		resolve: resolveYamlBinary$1,
		construct: constructYamlBinary$1,
		predicate: isBinary$1,
		represent: representYamlBinary$1
	});
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/omap.js
var require_omap$1 = __commonJS({ "../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/omap.js"(exports, module) {
	var Type$20 = require_type$1();
	var _hasOwnProperty$7 = Object.prototype.hasOwnProperty;
	var _toString$5 = Object.prototype.toString;
	function resolveYamlOmap$1(data) {
		if (data === null) return true;
		var objectKeys = [], index$1, length, pair, pairKey, pairHasKey, object = data;
		for (index$1 = 0, length = object.length; index$1 < length; index$1 += 1) {
			pair = object[index$1];
			pairHasKey = false;
			if (_toString$5.call(pair) !== "[object Object]") return false;
			for (pairKey in pair) if (_hasOwnProperty$7.call(pair, pairKey)) if (!pairHasKey) pairHasKey = true;
else return false;
			if (!pairHasKey) return false;
			if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);
else return false;
		}
		return true;
	}
	function constructYamlOmap$1(data) {
		return data !== null ? data : [];
	}
	module.exports = new Type$20("tag:yaml.org,2002:omap", {
		kind: "sequence",
		resolve: resolveYamlOmap$1,
		construct: constructYamlOmap$1
	});
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/pairs.js
var require_pairs$1 = __commonJS({ "../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/pairs.js"(exports, module) {
	var Type$19 = require_type$1();
	var _toString$4 = Object.prototype.toString;
	function resolveYamlPairs$1(data) {
		if (data === null) return true;
		var index$1, length, pair, keys, result, object = data;
		result = new Array(object.length);
		for (index$1 = 0, length = object.length; index$1 < length; index$1 += 1) {
			pair = object[index$1];
			if (_toString$4.call(pair) !== "[object Object]") return false;
			keys = Object.keys(pair);
			if (keys.length !== 1) return false;
			result[index$1] = [keys[0], pair[keys[0]]];
		}
		return true;
	}
	function constructYamlPairs$1(data) {
		if (data === null) return [];
		var index$1, length, pair, keys, result, object = data;
		result = new Array(object.length);
		for (index$1 = 0, length = object.length; index$1 < length; index$1 += 1) {
			pair = object[index$1];
			keys = Object.keys(pair);
			result[index$1] = [keys[0], pair[keys[0]]];
		}
		return result;
	}
	module.exports = new Type$19("tag:yaml.org,2002:pairs", {
		kind: "sequence",
		resolve: resolveYamlPairs$1,
		construct: constructYamlPairs$1
	});
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/set.js
var require_set$1 = __commonJS({ "../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/set.js"(exports, module) {
	var Type$18 = require_type$1();
	var _hasOwnProperty$6 = Object.prototype.hasOwnProperty;
	function resolveYamlSet$1(data) {
		if (data === null) return true;
		var key, object = data;
		for (key in object) if (_hasOwnProperty$6.call(object, key)) {
			if (object[key] !== null) return false;
		}
		return true;
	}
	function constructYamlSet$1(data) {
		return data !== null ? data : {};
	}
	module.exports = new Type$18("tag:yaml.org,2002:set", {
		kind: "mapping",
		resolve: resolveYamlSet$1,
		construct: constructYamlSet$1
	});
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js
var require_default_safe = __commonJS({ "../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js"(exports, module) {
	var Schema$3 = require_schema$1();
	module.exports = new Schema$3({
		include: [require_core$1()],
		implicit: [require_timestamp$1(), require_merge$1()],
		explicit: [
			require_binary$1(),
			require_omap$1(),
			require_pairs$1(),
			require_set$1()
		]
	});
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/js/undefined.js
var require_undefined = __commonJS({ "../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/js/undefined.js"(exports, module) {
	var Type$17 = require_type$1();
	function resolveJavascriptUndefined() {
		return true;
	}
	function constructJavascriptUndefined() {
		return undefined;
	}
	function representJavascriptUndefined() {
		return "";
	}
	function isUndefined(object) {
		return typeof object === "undefined";
	}
	module.exports = new Type$17("tag:yaml.org,2002:js/undefined", {
		kind: "scalar",
		resolve: resolveJavascriptUndefined,
		construct: constructJavascriptUndefined,
		predicate: isUndefined,
		represent: representJavascriptUndefined
	});
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/js/regexp.js
var require_regexp = __commonJS({ "../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/js/regexp.js"(exports, module) {
	var Type$16 = require_type$1();
	function resolveJavascriptRegExp(data) {
		if (data === null) return false;
		if (data.length === 0) return false;
		var regexp = data, tail = /\/([gim]*)$/.exec(data), modifiers = "";
		if (regexp[0] === "/") {
			if (tail) modifiers = tail[1];
			if (modifiers.length > 3) return false;
			if (regexp[regexp.length - modifiers.length - 1] !== "/") return false;
		}
		return true;
	}
	function constructJavascriptRegExp(data) {
		var regexp = data, tail = /\/([gim]*)$/.exec(data), modifiers = "";
		if (regexp[0] === "/") {
			if (tail) modifiers = tail[1];
			regexp = regexp.slice(1, regexp.length - modifiers.length - 1);
		}
		return new RegExp(regexp, modifiers);
	}
	function representJavascriptRegExp(object) {
		var result = "/" + object.source + "/";
		if (object.global) result += "g";
		if (object.multiline) result += "m";
		if (object.ignoreCase) result += "i";
		return result;
	}
	function isRegExp(object) {
		return Object.prototype.toString.call(object) === "[object RegExp]";
	}
	module.exports = new Type$16("tag:yaml.org,2002:js/regexp", {
		kind: "scalar",
		resolve: resolveJavascriptRegExp,
		construct: constructJavascriptRegExp,
		predicate: isRegExp,
		represent: representJavascriptRegExp
	});
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/js/function.js
var require_function = __commonJS({ "../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/js/function.js"(exports, module) {
	var esprima;
	try {
		var _require = require;
		esprima = _require("esprima");
	} catch (_) {
		if (typeof window !== "undefined") esprima = window.esprima;
	}
	var Type$15 = require_type$1();
	function resolveJavascriptFunction(data) {
		if (data === null) return false;
		try {
			var source = "(" + data + ")", ast = esprima.parse(source, { range: true });
			if (ast.type !== "Program" || ast.body.length !== 1 || ast.body[0].type !== "ExpressionStatement" || ast.body[0].expression.type !== "ArrowFunctionExpression" && ast.body[0].expression.type !== "FunctionExpression") return false;
			return true;
		} catch (err) {
			return false;
		}
	}
	function constructJavascriptFunction(data) {
		var source = "(" + data + ")", ast = esprima.parse(source, { range: true }), params = [], body;
		if (ast.type !== "Program" || ast.body.length !== 1 || ast.body[0].type !== "ExpressionStatement" || ast.body[0].expression.type !== "ArrowFunctionExpression" && ast.body[0].expression.type !== "FunctionExpression") throw new Error("Failed to resolve function");
		ast.body[0].expression.params.forEach(function(param) {
			params.push(param.name);
		});
		body = ast.body[0].expression.body.range;
		if (ast.body[0].expression.body.type === "BlockStatement") return new Function(params, source.slice(body[0] + 1, body[1] - 1));
		return new Function(params, "return " + source.slice(body[0], body[1]));
	}
	function representJavascriptFunction(object) {
		return object.toString();
	}
	function isFunction(object) {
		return Object.prototype.toString.call(object) === "[object Function]";
	}
	module.exports = new Type$15("tag:yaml.org,2002:js/function", {
		kind: "scalar",
		resolve: resolveJavascriptFunction,
		construct: constructJavascriptFunction,
		predicate: isFunction,
		represent: representJavascriptFunction
	});
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/schema/default_full.js
var require_default_full = __commonJS({ "../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/schema/default_full.js"(exports, module) {
	var Schema$2 = require_schema$1();
	module.exports = Schema$2.DEFAULT = new Schema$2({
		include: [require_default_safe()],
		explicit: [
			require_undefined(),
			require_regexp(),
			require_function()
		]
	});
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/loader.js
var require_loader$1 = __commonJS({ "../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/loader.js"(exports, module) {
	var common$11 = require_common$3();
	var YAMLException$6 = require_exception$1();
	var Mark = require_mark();
	var DEFAULT_SAFE_SCHEMA$1 = require_default_safe();
	var DEFAULT_FULL_SCHEMA$1 = require_default_full();
	var _hasOwnProperty$5 = Object.prototype.hasOwnProperty;
	var CONTEXT_FLOW_IN$1 = 1;
	var CONTEXT_FLOW_OUT$1 = 2;
	var CONTEXT_BLOCK_IN$1 = 3;
	var CONTEXT_BLOCK_OUT$1 = 4;
	var CHOMPING_CLIP$1 = 1;
	var CHOMPING_STRIP$1 = 2;
	var CHOMPING_KEEP$1 = 3;
	var PATTERN_NON_PRINTABLE$1 = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
	var PATTERN_NON_ASCII_LINE_BREAKS$1 = /[\x85\u2028\u2029]/;
	var PATTERN_FLOW_INDICATORS$1 = /[,\[\]\{\}]/;
	var PATTERN_TAG_HANDLE$1 = /^(?:!|!!|![a-z\-]+!)$/i;
	var PATTERN_TAG_URI$1 = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
	function _class$1(obj) {
		return Object.prototype.toString.call(obj);
	}
	function is_EOL$1(c) {
		return c === 10 || c === 13;
	}
	function is_WHITE_SPACE$1(c) {
		return c === 9 || c === 32;
	}
	function is_WS_OR_EOL$1(c) {
		return c === 9 || c === 32 || c === 10 || c === 13;
	}
	function is_FLOW_INDICATOR$1(c) {
		return c === 44 || c === 91 || c === 93 || c === 123 || c === 125;
	}
	function fromHexCode$1(c) {
		var lc;
		if (48 <= c && c <= 57) return c - 48;
		lc = c | 32;
		if (97 <= lc && lc <= 102) return lc - 97 + 10;
		return -1;
	}
	function escapedHexLen$1(c) {
		if (c === 120) return 2;
		if (c === 117) return 4;
		if (c === 85) return 8;
		return 0;
	}
	function fromDecimalCode$1(c) {
		if (48 <= c && c <= 57) return c - 48;
		return -1;
	}
	function simpleEscapeSequence$1(c) {
		return c === 48 ? "\0" : c === 97 ? "\x07" : c === 98 ? "\b" : c === 116 ? "	" : c === 9 ? "	" : c === 110 ? "\n" : c === 118 ? "\v" : c === 102 ? "\f" : c === 114 ? "\r" : c === 101 ? "\x1B" : c === 32 ? " " : c === 34 ? "\"" : c === 47 ? "/" : c === 92 ? "\\" : c === 78 ? "" : c === 95 ? "\xA0" : c === 76 ? "\u2028" : c === 80 ? "\u2029" : "";
	}
	function charFromCodepoint$1(c) {
		if (c <= 65535) return String.fromCharCode(c);
		return String.fromCharCode((c - 65536 >> 10) + 55296, (c - 65536 & 1023) + 56320);
	}
	var simpleEscapeCheck$1 = new Array(256);
	var simpleEscapeMap$1 = new Array(256);
	for (var i$1 = 0; i$1 < 256; i$1++) {
		simpleEscapeCheck$1[i$1] = simpleEscapeSequence$1(i$1) ? 1 : 0;
		simpleEscapeMap$1[i$1] = simpleEscapeSequence$1(i$1);
	}
	function State$3(input, options) {
		this.input = input;
		this.filename = options["filename"] || null;
		this.schema = options["schema"] || DEFAULT_FULL_SCHEMA$1;
		this.onWarning = options["onWarning"] || null;
		this.legacy = options["legacy"] || false;
		this.json = options["json"] || false;
		this.listener = options["listener"] || null;
		this.implicitTypes = this.schema.compiledImplicit;
		this.typeMap = this.schema.compiledTypeMap;
		this.length = input.length;
		this.position = 0;
		this.line = 0;
		this.lineStart = 0;
		this.lineIndent = 0;
		this.documents = [];
	}
	function generateError$1(state, message) {
		return new YAMLException$6(message, new Mark(state.filename, state.input, state.position, state.line, state.position - state.lineStart));
	}
	function throwError$2(state, message) {
		throw generateError$1(state, message);
	}
	function throwWarning$1(state, message) {
		if (state.onWarning) state.onWarning.call(null, generateError$1(state, message));
	}
	var directiveHandlers$1 = {
		YAML: function handleYamlDirective(state, name, args) {
			var match, major$2, minor$2;
			if (state.version !== null) throwError$2(state, "duplication of %YAML directive");
			if (args.length !== 1) throwError$2(state, "YAML directive accepts exactly one argument");
			match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);
			if (match === null) throwError$2(state, "ill-formed argument of the YAML directive");
			major$2 = parseInt(match[1], 10);
			minor$2 = parseInt(match[2], 10);
			if (major$2 !== 1) throwError$2(state, "unacceptable YAML version of the document");
			state.version = args[0];
			state.checkLineBreaks = minor$2 < 2;
			if (minor$2 !== 1 && minor$2 !== 2) throwWarning$1(state, "unsupported YAML version of the document");
		},
		TAG: function handleTagDirective(state, name, args) {
			var handle$1, prefix$1;
			if (args.length !== 2) throwError$2(state, "TAG directive accepts exactly two arguments");
			handle$1 = args[0];
			prefix$1 = args[1];
			if (!PATTERN_TAG_HANDLE$1.test(handle$1)) throwError$2(state, "ill-formed tag handle (first argument) of the TAG directive");
			if (_hasOwnProperty$5.call(state.tagMap, handle$1)) throwError$2(state, "there is a previously declared suffix for \"" + handle$1 + "\" tag handle");
			if (!PATTERN_TAG_URI$1.test(prefix$1)) throwError$2(state, "ill-formed tag prefix (second argument) of the TAG directive");
			state.tagMap[handle$1] = prefix$1;
		}
	};
	function captureSegment$1(state, start, end, checkJson) {
		var _position, _length, _character, _result;
		if (start < end) {
			_result = state.input.slice(start, end);
			if (checkJson) for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
				_character = _result.charCodeAt(_position);
				if (!(_character === 9 || 32 <= _character && _character <= 1114111)) throwError$2(state, "expected valid JSON character");
			}
else if (PATTERN_NON_PRINTABLE$1.test(_result)) throwError$2(state, "the stream contains non-printable characters");
			state.result += _result;
		}
	}
	function mergeMappings$1(state, destination, source, overridableKeys) {
		var sourceKeys, key, index$1, quantity;
		if (!common$11.isObject(source)) throwError$2(state, "cannot merge mappings; the provided source object is unacceptable");
		sourceKeys = Object.keys(source);
		for (index$1 = 0, quantity = sourceKeys.length; index$1 < quantity; index$1 += 1) {
			key = sourceKeys[index$1];
			if (!_hasOwnProperty$5.call(destination, key)) {
				destination[key] = source[key];
				overridableKeys[key] = true;
			}
		}
	}
	function storeMappingPair$1(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startPos) {
		var index$1, quantity;
		if (Array.isArray(keyNode)) {
			keyNode = Array.prototype.slice.call(keyNode);
			for (index$1 = 0, quantity = keyNode.length; index$1 < quantity; index$1 += 1) {
				if (Array.isArray(keyNode[index$1])) throwError$2(state, "nested arrays are not supported inside keys");
				if (typeof keyNode === "object" && _class$1(keyNode[index$1]) === "[object Object]") keyNode[index$1] = "[object Object]";
			}
		}
		if (typeof keyNode === "object" && _class$1(keyNode) === "[object Object]") keyNode = "[object Object]";
		keyNode = String(keyNode);
		if (_result === null) _result = {};
		if (keyTag === "tag:yaml.org,2002:merge") if (Array.isArray(valueNode)) for (index$1 = 0, quantity = valueNode.length; index$1 < quantity; index$1 += 1) mergeMappings$1(state, _result, valueNode[index$1], overridableKeys);
else mergeMappings$1(state, _result, valueNode, overridableKeys);
else {
			if (!state.json && !_hasOwnProperty$5.call(overridableKeys, keyNode) && _hasOwnProperty$5.call(_result, keyNode)) {
				state.line = startLine || state.line;
				state.position = startPos || state.position;
				throwError$2(state, "duplicated mapping key");
			}
			_result[keyNode] = valueNode;
			delete overridableKeys[keyNode];
		}
		return _result;
	}
	function readLineBreak$1(state) {
		var ch;
		ch = state.input.charCodeAt(state.position);
		if (ch === 10) state.position++;
else if (ch === 13) {
			state.position++;
			if (state.input.charCodeAt(state.position) === 10) state.position++;
		} else throwError$2(state, "a line break is expected");
		state.line += 1;
		state.lineStart = state.position;
	}
	function skipSeparationSpace$1(state, allowComments, checkIndent) {
		var lineBreaks = 0, ch = state.input.charCodeAt(state.position);
		while (ch !== 0) {
			while (is_WHITE_SPACE$1(ch)) ch = state.input.charCodeAt(++state.position);
			if (allowComments && ch === 35) do 
				ch = state.input.charCodeAt(++state.position);
			while (ch !== 10 && ch !== 13 && ch !== 0);
			if (is_EOL$1(ch)) {
				readLineBreak$1(state);
				ch = state.input.charCodeAt(state.position);
				lineBreaks++;
				state.lineIndent = 0;
				while (ch === 32) {
					state.lineIndent++;
					ch = state.input.charCodeAt(++state.position);
				}
			} else break;
		}
		if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) throwWarning$1(state, "deficient indentation");
		return lineBreaks;
	}
	function testDocumentSeparator$1(state) {
		var _position = state.position, ch;
		ch = state.input.charCodeAt(_position);
		if ((ch === 45 || ch === 46) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {
			_position += 3;
			ch = state.input.charCodeAt(_position);
			if (ch === 0 || is_WS_OR_EOL$1(ch)) return true;
		}
		return false;
	}
	function writeFoldedLines$1(state, count) {
		if (count === 1) state.result += " ";
else if (count > 1) state.result += common$11.repeat("\n", count - 1);
	}
	function readPlainScalar$1(state, nodeIndent, withinFlowCollection) {
		var preceding, following, captureStart, captureEnd, hasPendingContent, _line, _lineStart, _lineIndent, _kind = state.kind, _result = state.result, ch;
		ch = state.input.charCodeAt(state.position);
		if (is_WS_OR_EOL$1(ch) || is_FLOW_INDICATOR$1(ch) || ch === 35 || ch === 38 || ch === 42 || ch === 33 || ch === 124 || ch === 62 || ch === 39 || ch === 34 || ch === 37 || ch === 64 || ch === 96) return false;
		if (ch === 63 || ch === 45) {
			following = state.input.charCodeAt(state.position + 1);
			if (is_WS_OR_EOL$1(following) || withinFlowCollection && is_FLOW_INDICATOR$1(following)) return false;
		}
		state.kind = "scalar";
		state.result = "";
		captureStart = captureEnd = state.position;
		hasPendingContent = false;
		while (ch !== 0) {
			if (ch === 58) {
				following = state.input.charCodeAt(state.position + 1);
				if (is_WS_OR_EOL$1(following) || withinFlowCollection && is_FLOW_INDICATOR$1(following)) break;
			} else if (ch === 35) {
				preceding = state.input.charCodeAt(state.position - 1);
				if (is_WS_OR_EOL$1(preceding)) break;
			} else if (state.position === state.lineStart && testDocumentSeparator$1(state) || withinFlowCollection && is_FLOW_INDICATOR$1(ch)) break;
else if (is_EOL$1(ch)) {
				_line = state.line;
				_lineStart = state.lineStart;
				_lineIndent = state.lineIndent;
				skipSeparationSpace$1(state, false, -1);
				if (state.lineIndent >= nodeIndent) {
					hasPendingContent = true;
					ch = state.input.charCodeAt(state.position);
					continue;
				} else {
					state.position = captureEnd;
					state.line = _line;
					state.lineStart = _lineStart;
					state.lineIndent = _lineIndent;
					break;
				}
			}
			if (hasPendingContent) {
				captureSegment$1(state, captureStart, captureEnd, false);
				writeFoldedLines$1(state, state.line - _line);
				captureStart = captureEnd = state.position;
				hasPendingContent = false;
			}
			if (!is_WHITE_SPACE$1(ch)) captureEnd = state.position + 1;
			ch = state.input.charCodeAt(++state.position);
		}
		captureSegment$1(state, captureStart, captureEnd, false);
		if (state.result) return true;
		state.kind = _kind;
		state.result = _result;
		return false;
	}
	function readSingleQuotedScalar$1(state, nodeIndent) {
		var ch, captureStart, captureEnd;
		ch = state.input.charCodeAt(state.position);
		if (ch !== 39) return false;
		state.kind = "scalar";
		state.result = "";
		state.position++;
		captureStart = captureEnd = state.position;
		while ((ch = state.input.charCodeAt(state.position)) !== 0) if (ch === 39) {
			captureSegment$1(state, captureStart, state.position, true);
			ch = state.input.charCodeAt(++state.position);
			if (ch === 39) {
				captureStart = state.position;
				state.position++;
				captureEnd = state.position;
			} else return true;
		} else if (is_EOL$1(ch)) {
			captureSegment$1(state, captureStart, captureEnd, true);
			writeFoldedLines$1(state, skipSeparationSpace$1(state, false, nodeIndent));
			captureStart = captureEnd = state.position;
		} else if (state.position === state.lineStart && testDocumentSeparator$1(state)) throwError$2(state, "unexpected end of the document within a single quoted scalar");
else {
			state.position++;
			captureEnd = state.position;
		}
		throwError$2(state, "unexpected end of the stream within a single quoted scalar");
	}
	function readDoubleQuotedScalar$1(state, nodeIndent) {
		var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
		ch = state.input.charCodeAt(state.position);
		if (ch !== 34) return false;
		state.kind = "scalar";
		state.result = "";
		state.position++;
		captureStart = captureEnd = state.position;
		while ((ch = state.input.charCodeAt(state.position)) !== 0) if (ch === 34) {
			captureSegment$1(state, captureStart, state.position, true);
			state.position++;
			return true;
		} else if (ch === 92) {
			captureSegment$1(state, captureStart, state.position, true);
			ch = state.input.charCodeAt(++state.position);
			if (is_EOL$1(ch)) skipSeparationSpace$1(state, false, nodeIndent);
else if (ch < 256 && simpleEscapeCheck$1[ch]) {
				state.result += simpleEscapeMap$1[ch];
				state.position++;
			} else if ((tmp = escapedHexLen$1(ch)) > 0) {
				hexLength = tmp;
				hexResult = 0;
				for (; hexLength > 0; hexLength--) {
					ch = state.input.charCodeAt(++state.position);
					if ((tmp = fromHexCode$1(ch)) >= 0) hexResult = (hexResult << 4) + tmp;
else throwError$2(state, "expected hexadecimal character");
				}
				state.result += charFromCodepoint$1(hexResult);
				state.position++;
			} else throwError$2(state, "unknown escape sequence");
			captureStart = captureEnd = state.position;
		} else if (is_EOL$1(ch)) {
			captureSegment$1(state, captureStart, captureEnd, true);
			writeFoldedLines$1(state, skipSeparationSpace$1(state, false, nodeIndent));
			captureStart = captureEnd = state.position;
		} else if (state.position === state.lineStart && testDocumentSeparator$1(state)) throwError$2(state, "unexpected end of the document within a double quoted scalar");
else {
			state.position++;
			captureEnd = state.position;
		}
		throwError$2(state, "unexpected end of the stream within a double quoted scalar");
	}
	function readFlowCollection$1(state, nodeIndent) {
		var readNext = true, _line, _tag = state.tag, _result, _anchor = state.anchor, following, terminator, isPair, isExplicitPair, isMapping, overridableKeys = {}, keyNode, keyTag, valueNode, ch;
		ch = state.input.charCodeAt(state.position);
		if (ch === 91) {
			terminator = 93;
			isMapping = false;
			_result = [];
		} else if (ch === 123) {
			terminator = 125;
			isMapping = true;
			_result = {};
		} else return false;
		if (state.anchor !== null) state.anchorMap[state.anchor] = _result;
		ch = state.input.charCodeAt(++state.position);
		while (ch !== 0) {
			skipSeparationSpace$1(state, true, nodeIndent);
			ch = state.input.charCodeAt(state.position);
			if (ch === terminator) {
				state.position++;
				state.tag = _tag;
				state.anchor = _anchor;
				state.kind = isMapping ? "mapping" : "sequence";
				state.result = _result;
				return true;
			} else if (!readNext) throwError$2(state, "missed comma between flow collection entries");
			keyTag = keyNode = valueNode = null;
			isPair = isExplicitPair = false;
			if (ch === 63) {
				following = state.input.charCodeAt(state.position + 1);
				if (is_WS_OR_EOL$1(following)) {
					isPair = isExplicitPair = true;
					state.position++;
					skipSeparationSpace$1(state, true, nodeIndent);
				}
			}
			_line = state.line;
			composeNode$1(state, nodeIndent, CONTEXT_FLOW_IN$1, false, true);
			keyTag = state.tag;
			keyNode = state.result;
			skipSeparationSpace$1(state, true, nodeIndent);
			ch = state.input.charCodeAt(state.position);
			if ((isExplicitPair || state.line === _line) && ch === 58) {
				isPair = true;
				ch = state.input.charCodeAt(++state.position);
				skipSeparationSpace$1(state, true, nodeIndent);
				composeNode$1(state, nodeIndent, CONTEXT_FLOW_IN$1, false, true);
				valueNode = state.result;
			}
			if (isMapping) storeMappingPair$1(state, _result, overridableKeys, keyTag, keyNode, valueNode);
else if (isPair) _result.push(storeMappingPair$1(state, null, overridableKeys, keyTag, keyNode, valueNode));
else _result.push(keyNode);
			skipSeparationSpace$1(state, true, nodeIndent);
			ch = state.input.charCodeAt(state.position);
			if (ch === 44) {
				readNext = true;
				ch = state.input.charCodeAt(++state.position);
			} else readNext = false;
		}
		throwError$2(state, "unexpected end of the stream within a flow collection");
	}
	function readBlockScalar$1(state, nodeIndent) {
		var captureStart, folding, chomping = CHOMPING_CLIP$1, didReadContent = false, detectedIndent = false, textIndent = nodeIndent, emptyLines = 0, atMoreIndented = false, tmp, ch;
		ch = state.input.charCodeAt(state.position);
		if (ch === 124) folding = false;
else if (ch === 62) folding = true;
else return false;
		state.kind = "scalar";
		state.result = "";
		while (ch !== 0) {
			ch = state.input.charCodeAt(++state.position);
			if (ch === 43 || ch === 45) if (CHOMPING_CLIP$1 === chomping) chomping = ch === 43 ? CHOMPING_KEEP$1 : CHOMPING_STRIP$1;
else throwError$2(state, "repeat of a chomping mode identifier");
else if ((tmp = fromDecimalCode$1(ch)) >= 0) if (tmp === 0) throwError$2(state, "bad explicit indentation width of a block scalar; it cannot be less than one");
else if (!detectedIndent) {
				textIndent = nodeIndent + tmp - 1;
				detectedIndent = true;
			} else throwError$2(state, "repeat of an indentation width identifier");
else break;
		}
		if (is_WHITE_SPACE$1(ch)) {
			do 
				ch = state.input.charCodeAt(++state.position);
			while (is_WHITE_SPACE$1(ch));
			if (ch === 35) do 
				ch = state.input.charCodeAt(++state.position);
			while (!is_EOL$1(ch) && ch !== 0);
		}
		while (ch !== 0) {
			readLineBreak$1(state);
			state.lineIndent = 0;
			ch = state.input.charCodeAt(state.position);
			while ((!detectedIndent || state.lineIndent < textIndent) && ch === 32) {
				state.lineIndent++;
				ch = state.input.charCodeAt(++state.position);
			}
			if (!detectedIndent && state.lineIndent > textIndent) textIndent = state.lineIndent;
			if (is_EOL$1(ch)) {
				emptyLines++;
				continue;
			}
			if (state.lineIndent < textIndent) {
				if (chomping === CHOMPING_KEEP$1) state.result += common$11.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
else if (chomping === CHOMPING_CLIP$1) {
					if (didReadContent) state.result += "\n";
				}
				break;
			}
			if (folding) if (is_WHITE_SPACE$1(ch)) {
				atMoreIndented = true;
				state.result += common$11.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
			} else if (atMoreIndented) {
				atMoreIndented = false;
				state.result += common$11.repeat("\n", emptyLines + 1);
			} else if (emptyLines === 0) {
				if (didReadContent) state.result += " ";
			} else state.result += common$11.repeat("\n", emptyLines);
else state.result += common$11.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
			didReadContent = true;
			detectedIndent = true;
			emptyLines = 0;
			captureStart = state.position;
			while (!is_EOL$1(ch) && ch !== 0) ch = state.input.charCodeAt(++state.position);
			captureSegment$1(state, captureStart, state.position, false);
		}
		return true;
	}
	function readBlockSequence$1(state, nodeIndent) {
		var _line, _tag = state.tag, _anchor = state.anchor, _result = [], following, detected = false, ch;
		if (state.anchor !== null) state.anchorMap[state.anchor] = _result;
		ch = state.input.charCodeAt(state.position);
		while (ch !== 0) {
			if (ch !== 45) break;
			following = state.input.charCodeAt(state.position + 1);
			if (!is_WS_OR_EOL$1(following)) break;
			detected = true;
			state.position++;
			if (skipSeparationSpace$1(state, true, -1)) {
				if (state.lineIndent <= nodeIndent) {
					_result.push(null);
					ch = state.input.charCodeAt(state.position);
					continue;
				}
			}
			_line = state.line;
			composeNode$1(state, nodeIndent, CONTEXT_BLOCK_IN$1, false, true);
			_result.push(state.result);
			skipSeparationSpace$1(state, true, -1);
			ch = state.input.charCodeAt(state.position);
			if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) throwError$2(state, "bad indentation of a sequence entry");
else if (state.lineIndent < nodeIndent) break;
		}
		if (detected) {
			state.tag = _tag;
			state.anchor = _anchor;
			state.kind = "sequence";
			state.result = _result;
			return true;
		}
		return false;
	}
	function readBlockMapping$1(state, nodeIndent, flowIndent) {
		var following, allowCompact, _line, _pos, _tag = state.tag, _anchor = state.anchor, _result = {}, overridableKeys = {}, keyTag = null, keyNode = null, valueNode = null, atExplicitKey = false, detected = false, ch;
		if (state.anchor !== null) state.anchorMap[state.anchor] = _result;
		ch = state.input.charCodeAt(state.position);
		while (ch !== 0) {
			following = state.input.charCodeAt(state.position + 1);
			_line = state.line;
			_pos = state.position;
			if ((ch === 63 || ch === 58) && is_WS_OR_EOL$1(following)) {
				if (ch === 63) {
					if (atExplicitKey) {
						storeMappingPair$1(state, _result, overridableKeys, keyTag, keyNode, null);
						keyTag = keyNode = valueNode = null;
					}
					detected = true;
					atExplicitKey = true;
					allowCompact = true;
				} else if (atExplicitKey) {
					atExplicitKey = false;
					allowCompact = true;
				} else throwError$2(state, "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line");
				state.position += 1;
				ch = following;
			} else if (composeNode$1(state, flowIndent, CONTEXT_FLOW_OUT$1, false, true)) if (state.line === _line) {
				ch = state.input.charCodeAt(state.position);
				while (is_WHITE_SPACE$1(ch)) ch = state.input.charCodeAt(++state.position);
				if (ch === 58) {
					ch = state.input.charCodeAt(++state.position);
					if (!is_WS_OR_EOL$1(ch)) throwError$2(state, "a whitespace character is expected after the key-value separator within a block mapping");
					if (atExplicitKey) {
						storeMappingPair$1(state, _result, overridableKeys, keyTag, keyNode, null);
						keyTag = keyNode = valueNode = null;
					}
					detected = true;
					atExplicitKey = false;
					allowCompact = false;
					keyTag = state.tag;
					keyNode = state.result;
				} else if (detected) throwError$2(state, "can not read an implicit mapping pair; a colon is missed");
else {
					state.tag = _tag;
					state.anchor = _anchor;
					return true;
				}
			} else if (detected) throwError$2(state, "can not read a block mapping entry; a multiline key may not be an implicit key");
else {
				state.tag = _tag;
				state.anchor = _anchor;
				return true;
			}
else break;
			if (state.line === _line || state.lineIndent > nodeIndent) {
				if (composeNode$1(state, nodeIndent, CONTEXT_BLOCK_OUT$1, true, allowCompact)) if (atExplicitKey) keyNode = state.result;
else valueNode = state.result;
				if (!atExplicitKey) {
					storeMappingPair$1(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _pos);
					keyTag = keyNode = valueNode = null;
				}
				skipSeparationSpace$1(state, true, -1);
				ch = state.input.charCodeAt(state.position);
			}
			if (state.lineIndent > nodeIndent && ch !== 0) throwError$2(state, "bad indentation of a mapping entry");
else if (state.lineIndent < nodeIndent) break;
		}
		if (atExplicitKey) storeMappingPair$1(state, _result, overridableKeys, keyTag, keyNode, null);
		if (detected) {
			state.tag = _tag;
			state.anchor = _anchor;
			state.kind = "mapping";
			state.result = _result;
		}
		return detected;
	}
	function readTagProperty$1(state) {
		var _position, isVerbatim = false, isNamed = false, tagHandle, tagName, ch;
		ch = state.input.charCodeAt(state.position);
		if (ch !== 33) return false;
		if (state.tag !== null) throwError$2(state, "duplication of a tag property");
		ch = state.input.charCodeAt(++state.position);
		if (ch === 60) {
			isVerbatim = true;
			ch = state.input.charCodeAt(++state.position);
		} else if (ch === 33) {
			isNamed = true;
			tagHandle = "!!";
			ch = state.input.charCodeAt(++state.position);
		} else tagHandle = "!";
		_position = state.position;
		if (isVerbatim) {
			do 
				ch = state.input.charCodeAt(++state.position);
			while (ch !== 0 && ch !== 62);
			if (state.position < state.length) {
				tagName = state.input.slice(_position, state.position);
				ch = state.input.charCodeAt(++state.position);
			} else throwError$2(state, "unexpected end of the stream within a verbatim tag");
		} else {
			while (ch !== 0 && !is_WS_OR_EOL$1(ch)) {
				if (ch === 33) if (!isNamed) {
					tagHandle = state.input.slice(_position - 1, state.position + 1);
					if (!PATTERN_TAG_HANDLE$1.test(tagHandle)) throwError$2(state, "named tag handle cannot contain such characters");
					isNamed = true;
					_position = state.position + 1;
				} else throwError$2(state, "tag suffix cannot contain exclamation marks");
				ch = state.input.charCodeAt(++state.position);
			}
			tagName = state.input.slice(_position, state.position);
			if (PATTERN_FLOW_INDICATORS$1.test(tagName)) throwError$2(state, "tag suffix cannot contain flow indicator characters");
		}
		if (tagName && !PATTERN_TAG_URI$1.test(tagName)) throwError$2(state, "tag name cannot contain such characters: " + tagName);
		if (isVerbatim) state.tag = tagName;
else if (_hasOwnProperty$5.call(state.tagMap, tagHandle)) state.tag = state.tagMap[tagHandle] + tagName;
else if (tagHandle === "!") state.tag = "!" + tagName;
else if (tagHandle === "!!") state.tag = "tag:yaml.org,2002:" + tagName;
else throwError$2(state, "undeclared tag handle \"" + tagHandle + "\"");
		return true;
	}
	function readAnchorProperty$1(state) {
		var _position, ch;
		ch = state.input.charCodeAt(state.position);
		if (ch !== 38) return false;
		if (state.anchor !== null) throwError$2(state, "duplication of an anchor property");
		ch = state.input.charCodeAt(++state.position);
		_position = state.position;
		while (ch !== 0 && !is_WS_OR_EOL$1(ch) && !is_FLOW_INDICATOR$1(ch)) ch = state.input.charCodeAt(++state.position);
		if (state.position === _position) throwError$2(state, "name of an anchor node must contain at least one character");
		state.anchor = state.input.slice(_position, state.position);
		return true;
	}
	function readAlias$1(state) {
		var _position, alias, ch;
		ch = state.input.charCodeAt(state.position);
		if (ch !== 42) return false;
		ch = state.input.charCodeAt(++state.position);
		_position = state.position;
		while (ch !== 0 && !is_WS_OR_EOL$1(ch) && !is_FLOW_INDICATOR$1(ch)) ch = state.input.charCodeAt(++state.position);
		if (state.position === _position) throwError$2(state, "name of an alias node must contain at least one character");
		alias = state.input.slice(_position, state.position);
		if (!_hasOwnProperty$5.call(state.anchorMap, alias)) throwError$2(state, "unidentified alias \"" + alias + "\"");
		state.result = state.anchorMap[alias];
		skipSeparationSpace$1(state, true, -1);
		return true;
	}
	function composeNode$1(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
		var allowBlockStyles, allowBlockScalars, allowBlockCollections, indentStatus = 1, atNewLine = false, hasContent = false, typeIndex, typeQuantity, type, flowIndent, blockIndent;
		if (state.listener !== null) state.listener("open", state);
		state.tag = null;
		state.anchor = null;
		state.kind = null;
		state.result = null;
		allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT$1 === nodeContext || CONTEXT_BLOCK_IN$1 === nodeContext;
		if (allowToSeek) {
			if (skipSeparationSpace$1(state, true, -1)) {
				atNewLine = true;
				if (state.lineIndent > parentIndent) indentStatus = 1;
else if (state.lineIndent === parentIndent) indentStatus = 0;
else if (state.lineIndent < parentIndent) indentStatus = -1;
			}
		}
		if (indentStatus === 1) while (readTagProperty$1(state) || readAnchorProperty$1(state)) if (skipSeparationSpace$1(state, true, -1)) {
			atNewLine = true;
			allowBlockCollections = allowBlockStyles;
			if (state.lineIndent > parentIndent) indentStatus = 1;
else if (state.lineIndent === parentIndent) indentStatus = 0;
else if (state.lineIndent < parentIndent) indentStatus = -1;
		} else allowBlockCollections = false;
		if (allowBlockCollections) allowBlockCollections = atNewLine || allowCompact;
		if (indentStatus === 1 || CONTEXT_BLOCK_OUT$1 === nodeContext) {
			if (CONTEXT_FLOW_IN$1 === nodeContext || CONTEXT_FLOW_OUT$1 === nodeContext) flowIndent = parentIndent;
else flowIndent = parentIndent + 1;
			blockIndent = state.position - state.lineStart;
			if (indentStatus === 1) if (allowBlockCollections && (readBlockSequence$1(state, blockIndent) || readBlockMapping$1(state, blockIndent, flowIndent)) || readFlowCollection$1(state, flowIndent)) hasContent = true;
else {
				if (allowBlockScalars && readBlockScalar$1(state, flowIndent) || readSingleQuotedScalar$1(state, flowIndent) || readDoubleQuotedScalar$1(state, flowIndent)) hasContent = true;
else if (readAlias$1(state)) {
					hasContent = true;
					if (state.tag !== null || state.anchor !== null) throwError$2(state, "alias node should not have any properties");
				} else if (readPlainScalar$1(state, flowIndent, CONTEXT_FLOW_IN$1 === nodeContext)) {
					hasContent = true;
					if (state.tag === null) state.tag = "?";
				}
				if (state.anchor !== null) state.anchorMap[state.anchor] = state.result;
			}
else if (indentStatus === 0) hasContent = allowBlockCollections && readBlockSequence$1(state, blockIndent);
		}
		if (state.tag !== null && state.tag !== "!") if (state.tag === "?") {
			if (state.result !== null && state.kind !== "scalar") throwError$2(state, "unacceptable node kind for !<?> tag; it should be \"scalar\", not \"" + state.kind + "\"");
			for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
				type = state.implicitTypes[typeIndex];
				if (type.resolve(state.result)) {
					state.result = type.construct(state.result);
					state.tag = type.tag;
					if (state.anchor !== null) state.anchorMap[state.anchor] = state.result;
					break;
				}
			}
		} else if (_hasOwnProperty$5.call(state.typeMap[state.kind || "fallback"], state.tag)) {
			type = state.typeMap[state.kind || "fallback"][state.tag];
			if (state.result !== null && type.kind !== state.kind) throwError$2(state, "unacceptable node kind for !<" + state.tag + "> tag; it should be \"" + type.kind + "\", not \"" + state.kind + "\"");
			if (!type.resolve(state.result)) throwError$2(state, "cannot resolve a node with !<" + state.tag + "> explicit tag");
else {
				state.result = type.construct(state.result);
				if (state.anchor !== null) state.anchorMap[state.anchor] = state.result;
			}
		} else throwError$2(state, "unknown tag !<" + state.tag + ">");
		if (state.listener !== null) state.listener("close", state);
		return state.tag !== null || state.anchor !== null || hasContent;
	}
	function readDocument$1(state) {
		var documentStart = state.position, _position, directiveName, directiveArgs, hasDirectives = false, ch;
		state.version = null;
		state.checkLineBreaks = state.legacy;
		state.tagMap = {};
		state.anchorMap = {};
		while ((ch = state.input.charCodeAt(state.position)) !== 0) {
			skipSeparationSpace$1(state, true, -1);
			ch = state.input.charCodeAt(state.position);
			if (state.lineIndent > 0 || ch !== 37) break;
			hasDirectives = true;
			ch = state.input.charCodeAt(++state.position);
			_position = state.position;
			while (ch !== 0 && !is_WS_OR_EOL$1(ch)) ch = state.input.charCodeAt(++state.position);
			directiveName = state.input.slice(_position, state.position);
			directiveArgs = [];
			if (directiveName.length < 1) throwError$2(state, "directive name must not be less than one character in length");
			while (ch !== 0) {
				while (is_WHITE_SPACE$1(ch)) ch = state.input.charCodeAt(++state.position);
				if (ch === 35) {
					do 
						ch = state.input.charCodeAt(++state.position);
					while (ch !== 0 && !is_EOL$1(ch));
					break;
				}
				if (is_EOL$1(ch)) break;
				_position = state.position;
				while (ch !== 0 && !is_WS_OR_EOL$1(ch)) ch = state.input.charCodeAt(++state.position);
				directiveArgs.push(state.input.slice(_position, state.position));
			}
			if (ch !== 0) readLineBreak$1(state);
			if (_hasOwnProperty$5.call(directiveHandlers$1, directiveName)) directiveHandlers$1[directiveName](state, directiveName, directiveArgs);
else throwWarning$1(state, "unknown document directive \"" + directiveName + "\"");
		}
		skipSeparationSpace$1(state, true, -1);
		if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 45 && state.input.charCodeAt(state.position + 1) === 45 && state.input.charCodeAt(state.position + 2) === 45) {
			state.position += 3;
			skipSeparationSpace$1(state, true, -1);
		} else if (hasDirectives) throwError$2(state, "directives end mark is expected");
		composeNode$1(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT$1, false, true);
		skipSeparationSpace$1(state, true, -1);
		if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS$1.test(state.input.slice(documentStart, state.position))) throwWarning$1(state, "non-ASCII line breaks are interpreted as content");
		state.documents.push(state.result);
		if (state.position === state.lineStart && testDocumentSeparator$1(state)) {
			if (state.input.charCodeAt(state.position) === 46) {
				state.position += 3;
				skipSeparationSpace$1(state, true, -1);
			}
			return;
		}
		if (state.position < state.length - 1) throwError$2(state, "end of the stream or a document separator is expected");
else return;
	}
	function loadDocuments$1(input, options) {
		input = String(input);
		options = options || {};
		if (input.length !== 0) {
			if (input.charCodeAt(input.length - 1) !== 10 && input.charCodeAt(input.length - 1) !== 13) input += "\n";
			if (input.charCodeAt(0) === 65279) input = input.slice(1);
		}
		var state = new State$3(input, options);
		var nullpos = input.indexOf("\0");
		if (nullpos !== -1) {
			state.position = nullpos;
			throwError$2(state, "null byte is not allowed in input");
		}
		state.input += "\0";
		while (state.input.charCodeAt(state.position) === 32) {
			state.lineIndent += 1;
			state.position += 1;
		}
		while (state.position < state.length - 1) readDocument$1(state);
		return state.documents;
	}
	function loadAll$1(input, iterator$1, options) {
		if (iterator$1 !== null && typeof iterator$1 === "object" && typeof options === "undefined") {
			options = iterator$1;
			iterator$1 = null;
		}
		var documents = loadDocuments$1(input, options);
		if (typeof iterator$1 !== "function") return documents;
		for (var index$1 = 0, length = documents.length; index$1 < length; index$1 += 1) iterator$1(documents[index$1]);
	}
	function load$1(input, options) {
		var documents = loadDocuments$1(input, options);
		if (documents.length === 0) return undefined;
else if (documents.length === 1) return documents[0];
		throw new YAMLException$6("expected a single document in the stream, but found more");
	}
	function safeLoadAll(input, iterator$1, options) {
		if (typeof iterator$1 === "object" && iterator$1 !== null && typeof options === "undefined") {
			options = iterator$1;
			iterator$1 = null;
		}
		return loadAll$1(input, iterator$1, common$11.extend({ schema: DEFAULT_SAFE_SCHEMA$1 }, options));
	}
	function safeLoad(input, options) {
		return load$1(input, common$11.extend({ schema: DEFAULT_SAFE_SCHEMA$1 }, options));
	}
	module.exports.loadAll = loadAll$1;
	module.exports.load = load$1;
	module.exports.safeLoadAll = safeLoadAll;
	module.exports.safeLoad = safeLoad;
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/dumper.js
var require_dumper$1 = __commonJS({ "../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/dumper.js"(exports, module) {
	var common$10 = require_common$3();
	var YAMLException$5 = require_exception$1();
	var DEFAULT_FULL_SCHEMA = require_default_full();
	var DEFAULT_SAFE_SCHEMA = require_default_safe();
	var _toString$3 = Object.prototype.toString;
	var _hasOwnProperty$4 = Object.prototype.hasOwnProperty;
	var CHAR_TAB$1 = 9;
	var CHAR_LINE_FEED$1 = 10;
	var CHAR_CARRIAGE_RETURN$1 = 13;
	var CHAR_SPACE$1 = 32;
	var CHAR_EXCLAMATION$1 = 33;
	var CHAR_DOUBLE_QUOTE$2 = 34;
	var CHAR_SHARP$1 = 35;
	var CHAR_PERCENT$1 = 37;
	var CHAR_AMPERSAND$1 = 38;
	var CHAR_SINGLE_QUOTE$2 = 39;
	var CHAR_ASTERISK$2 = 42;
	var CHAR_COMMA$3 = 44;
	var CHAR_MINUS$1 = 45;
	var CHAR_COLON$1 = 58;
	var CHAR_EQUALS$1 = 61;
	var CHAR_GREATER_THAN$1 = 62;
	var CHAR_QUESTION$1 = 63;
	var CHAR_COMMERCIAL_AT$1 = 64;
	var CHAR_LEFT_SQUARE_BRACKET$3 = 91;
	var CHAR_RIGHT_SQUARE_BRACKET$3 = 93;
	var CHAR_GRAVE_ACCENT$1 = 96;
	var CHAR_LEFT_CURLY_BRACKET$1 = 123;
	var CHAR_VERTICAL_LINE$1 = 124;
	var CHAR_RIGHT_CURLY_BRACKET$1 = 125;
	var ESCAPE_SEQUENCES$1 = {};
	ESCAPE_SEQUENCES$1[0] = "\\0";
	ESCAPE_SEQUENCES$1[7] = "\\a";
	ESCAPE_SEQUENCES$1[8] = "\\b";
	ESCAPE_SEQUENCES$1[9] = "\\t";
	ESCAPE_SEQUENCES$1[10] = "\\n";
	ESCAPE_SEQUENCES$1[11] = "\\v";
	ESCAPE_SEQUENCES$1[12] = "\\f";
	ESCAPE_SEQUENCES$1[13] = "\\r";
	ESCAPE_SEQUENCES$1[27] = "\\e";
	ESCAPE_SEQUENCES$1[34] = "\\\"";
	ESCAPE_SEQUENCES$1[92] = "\\\\";
	ESCAPE_SEQUENCES$1[133] = "\\N";
	ESCAPE_SEQUENCES$1[160] = "\\_";
	ESCAPE_SEQUENCES$1[8232] = "\\L";
	ESCAPE_SEQUENCES$1[8233] = "\\P";
	var DEPRECATED_BOOLEANS_SYNTAX$1 = [
		"y",
		"Y",
		"yes",
		"Yes",
		"YES",
		"on",
		"On",
		"ON",
		"n",
		"N",
		"no",
		"No",
		"NO",
		"off",
		"Off",
		"OFF"
	];
	function compileStyleMap$1(schema, map$3) {
		var result, keys, index$1, length, tag$2, style, type;
		if (map$3 === null) return {};
		result = {};
		keys = Object.keys(map$3);
		for (index$1 = 0, length = keys.length; index$1 < length; index$1 += 1) {
			tag$2 = keys[index$1];
			style = String(map$3[tag$2]);
			if (tag$2.slice(0, 2) === "!!") tag$2 = "tag:yaml.org,2002:" + tag$2.slice(2);
			type = schema.compiledTypeMap["fallback"][tag$2];
			if (type && _hasOwnProperty$4.call(type.styleAliases, style)) style = type.styleAliases[style];
			result[tag$2] = style;
		}
		return result;
	}
	function encodeHex$1(character) {
		var string$3, handle$1, length;
		string$3 = character.toString(16).toUpperCase();
		if (character <= 255) {
			handle$1 = "x";
			length = 2;
		} else if (character <= 65535) {
			handle$1 = "u";
			length = 4;
		} else if (character <= 4294967295) {
			handle$1 = "U";
			length = 8;
		} else throw new YAMLException$5("code point within a string may not be greater than 0xFFFFFFFF");
		return "\\" + handle$1 + common$10.repeat("0", length - string$3.length) + string$3;
	}
	function State$2(options) {
		this.schema = options["schema"] || DEFAULT_FULL_SCHEMA;
		this.indent = Math.max(1, options["indent"] || 2);
		this.noArrayIndent = options["noArrayIndent"] || false;
		this.skipInvalid = options["skipInvalid"] || false;
		this.flowLevel = common$10.isNothing(options["flowLevel"]) ? -1 : options["flowLevel"];
		this.styleMap = compileStyleMap$1(this.schema, options["styles"] || null);
		this.sortKeys = options["sortKeys"] || false;
		this.lineWidth = options["lineWidth"] || 80;
		this.noRefs = options["noRefs"] || false;
		this.noCompatMode = options["noCompatMode"] || false;
		this.condenseFlow = options["condenseFlow"] || false;
		this.implicitTypes = this.schema.compiledImplicit;
		this.explicitTypes = this.schema.compiledExplicit;
		this.tag = null;
		this.result = "";
		this.duplicates = [];
		this.usedDuplicates = null;
	}
	function indentString$1(string$3, spaces) {
		var ind = common$10.repeat(" ", spaces), position$1 = 0, next = -1, result = "", line, length = string$3.length;
		while (position$1 < length) {
			next = string$3.indexOf("\n", position$1);
			if (next === -1) {
				line = string$3.slice(position$1);
				position$1 = length;
			} else {
				line = string$3.slice(position$1, next + 1);
				position$1 = next + 1;
			}
			if (line.length && line !== "\n") result += ind;
			result += line;
		}
		return result;
	}
	function generateNextLine$1(state, level) {
		return "\n" + common$10.repeat(" ", state.indent * level);
	}
	function testImplicitResolving$1(state, str) {
		var index$1, length, type;
		for (index$1 = 0, length = state.implicitTypes.length; index$1 < length; index$1 += 1) {
			type = state.implicitTypes[index$1];
			if (type.resolve(str)) return true;
		}
		return false;
	}
	function isWhitespace$1(c) {
		return c === CHAR_SPACE$1 || c === CHAR_TAB$1;
	}
	function isPrintable$1(c) {
		return 32 <= c && c <= 126 || 161 <= c && c <= 55295 && c !== 8232 && c !== 8233 || 57344 <= c && c <= 65533 && c !== 65279 || 65536 <= c && c <= 1114111;
	}
	function isNsChar(c) {
		return isPrintable$1(c) && !isWhitespace$1(c) && c !== 65279 && c !== CHAR_CARRIAGE_RETURN$1 && c !== CHAR_LINE_FEED$1;
	}
	function isPlainSafe$1(c, prev) {
		return isPrintable$1(c) && c !== 65279 && c !== CHAR_COMMA$3 && c !== CHAR_LEFT_SQUARE_BRACKET$3 && c !== CHAR_RIGHT_SQUARE_BRACKET$3 && c !== CHAR_LEFT_CURLY_BRACKET$1 && c !== CHAR_RIGHT_CURLY_BRACKET$1 && c !== CHAR_COLON$1 && (c !== CHAR_SHARP$1 || prev && isNsChar(prev));
	}
	function isPlainSafeFirst$1(c) {
		return isPrintable$1(c) && c !== 65279 && !isWhitespace$1(c) && c !== CHAR_MINUS$1 && c !== CHAR_QUESTION$1 && c !== CHAR_COLON$1 && c !== CHAR_COMMA$3 && c !== CHAR_LEFT_SQUARE_BRACKET$3 && c !== CHAR_RIGHT_SQUARE_BRACKET$3 && c !== CHAR_LEFT_CURLY_BRACKET$1 && c !== CHAR_RIGHT_CURLY_BRACKET$1 && c !== CHAR_SHARP$1 && c !== CHAR_AMPERSAND$1 && c !== CHAR_ASTERISK$2 && c !== CHAR_EXCLAMATION$1 && c !== CHAR_VERTICAL_LINE$1 && c !== CHAR_EQUALS$1 && c !== CHAR_GREATER_THAN$1 && c !== CHAR_SINGLE_QUOTE$2 && c !== CHAR_DOUBLE_QUOTE$2 && c !== CHAR_PERCENT$1 && c !== CHAR_COMMERCIAL_AT$1 && c !== CHAR_GRAVE_ACCENT$1;
	}
	function needIndentIndicator$1(string$3) {
		var leadingSpaceRe = /^\n* /;
		return leadingSpaceRe.test(string$3);
	}
	var STYLE_PLAIN$1 = 1, STYLE_SINGLE$1 = 2, STYLE_LITERAL$1 = 3, STYLE_FOLDED$1 = 4, STYLE_DOUBLE$1 = 5;
	function chooseScalarStyle$1(string$3, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType) {
		var i$2;
		var char, prev_char;
		var hasLineBreak = false;
		var hasFoldableLine = false;
		var shouldTrackWidth = lineWidth !== -1;
		var previousLineBreak = -1;
		var plain = isPlainSafeFirst$1(string$3.charCodeAt(0)) && !isWhitespace$1(string$3.charCodeAt(string$3.length - 1));
		if (singleLineOnly) for (i$2 = 0; i$2 < string$3.length; i$2++) {
			char = string$3.charCodeAt(i$2);
			if (!isPrintable$1(char)) return STYLE_DOUBLE$1;
			prev_char = i$2 > 0 ? string$3.charCodeAt(i$2 - 1) : null;
			plain = plain && isPlainSafe$1(char, prev_char);
		}
else {
			for (i$2 = 0; i$2 < string$3.length; i$2++) {
				char = string$3.charCodeAt(i$2);
				if (char === CHAR_LINE_FEED$1) {
					hasLineBreak = true;
					if (shouldTrackWidth) {
						hasFoldableLine = hasFoldableLine || i$2 - previousLineBreak - 1 > lineWidth && string$3[previousLineBreak + 1] !== " ";
						previousLineBreak = i$2;
					}
				} else if (!isPrintable$1(char)) return STYLE_DOUBLE$1;
				prev_char = i$2 > 0 ? string$3.charCodeAt(i$2 - 1) : null;
				plain = plain && isPlainSafe$1(char, prev_char);
			}
			hasFoldableLine = hasFoldableLine || shouldTrackWidth && (i$2 - previousLineBreak - 1 > lineWidth && string$3[previousLineBreak + 1] !== " ");
		}
		if (!hasLineBreak && !hasFoldableLine) return plain && !testAmbiguousType(string$3) ? STYLE_PLAIN$1 : STYLE_SINGLE$1;
		if (indentPerLevel > 9 && needIndentIndicator$1(string$3)) return STYLE_DOUBLE$1;
		return hasFoldableLine ? STYLE_FOLDED$1 : STYLE_LITERAL$1;
	}
	function writeScalar$1(state, string$3, level, iskey) {
		state.dump = function() {
			if (string$3.length === 0) return "''";
			if (!state.noCompatMode && DEPRECATED_BOOLEANS_SYNTAX$1.indexOf(string$3) !== -1) return "'" + string$3 + "'";
			var indent = state.indent * Math.max(1, level);
			var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);
			var singleLineOnly = iskey || state.flowLevel > -1 && level >= state.flowLevel;
			function testAmbiguity(string$4) {
				return testImplicitResolving$1(state, string$4);
			}
			switch (chooseScalarStyle$1(string$3, singleLineOnly, state.indent, lineWidth, testAmbiguity)) {
				case STYLE_PLAIN$1: return string$3;
				case STYLE_SINGLE$1: return "'" + string$3.replace(/'/g, "''") + "'";
				case STYLE_LITERAL$1: return "|" + blockHeader$1(string$3, state.indent) + dropEndingNewline$1(indentString$1(string$3, indent));
				case STYLE_FOLDED$1: return ">" + blockHeader$1(string$3, state.indent) + dropEndingNewline$1(indentString$1(foldString$1(string$3, lineWidth), indent));
				case STYLE_DOUBLE$1: return "\"" + escapeString$1(string$3, lineWidth) + "\"";
				default: throw new YAMLException$5("impossible error: invalid scalar style");
			}
		}();
	}
	function blockHeader$1(string$3, indentPerLevel) {
		var indentIndicator = needIndentIndicator$1(string$3) ? String(indentPerLevel) : "";
		var clip = string$3[string$3.length - 1] === "\n";
		var keep = clip && (string$3[string$3.length - 2] === "\n" || string$3 === "\n");
		var chomp = keep ? "+" : clip ? "" : "-";
		return indentIndicator + chomp + "\n";
	}
	function dropEndingNewline$1(string$3) {
		return string$3[string$3.length - 1] === "\n" ? string$3.slice(0, -1) : string$3;
	}
	function foldString$1(string$3, width) {
		var lineRe = /(\n+)([^\n]*)/g;
		var result = function() {
			var nextLF = string$3.indexOf("\n");
			nextLF = nextLF !== -1 ? nextLF : string$3.length;
			lineRe.lastIndex = nextLF;
			return foldLine$1(string$3.slice(0, nextLF), width);
		}();
		var prevMoreIndented = string$3[0] === "\n" || string$3[0] === " ";
		var moreIndented;
		var match;
		while (match = lineRe.exec(string$3)) {
			var prefix$1 = match[1], line = match[2];
			moreIndented = line[0] === " ";
			result += prefix$1 + (!prevMoreIndented && !moreIndented && line !== "" ? "\n" : "") + foldLine$1(line, width);
			prevMoreIndented = moreIndented;
		}
		return result;
	}
	function foldLine$1(line, width) {
		if (line === "" || line[0] === " ") return line;
		var breakRe = / [^ ]/g;
		var match;
		var start = 0, end, curr = 0, next = 0;
		var result = "";
		while (match = breakRe.exec(line)) {
			next = match.index;
			if (next - start > width) {
				end = curr > start ? curr : next;
				result += "\n" + line.slice(start, end);
				start = end + 1;
			}
			curr = next;
		}
		result += "\n";
		if (line.length - start > width && curr > start) result += line.slice(start, curr) + "\n" + line.slice(curr + 1);
else result += line.slice(start);
		return result.slice(1);
	}
	function escapeString$1(string$3) {
		var result = "";
		var char, nextChar;
		var escapeSeq;
		for (var i$2 = 0; i$2 < string$3.length; i$2++) {
			char = string$3.charCodeAt(i$2);
			if (char >= 55296 && char <= 56319) {
				nextChar = string$3.charCodeAt(i$2 + 1);
				if (nextChar >= 56320 && nextChar <= 57343) {
					result += encodeHex$1((char - 55296) * 1024 + nextChar - 56320 + 65536);
					i$2++;
					continue;
				}
			}
			escapeSeq = ESCAPE_SEQUENCES$1[char];
			result += !escapeSeq && isPrintable$1(char) ? string$3[i$2] : escapeSeq || encodeHex$1(char);
		}
		return result;
	}
	function writeFlowSequence$1(state, level, object) {
		var _result = "", _tag = state.tag, index$1, length;
		for (index$1 = 0, length = object.length; index$1 < length; index$1 += 1) if (writeNode$1(state, level, object[index$1], false, false)) {
			if (index$1 !== 0) _result += "," + (!state.condenseFlow ? " " : "");
			_result += state.dump;
		}
		state.tag = _tag;
		state.dump = "[" + _result + "]";
	}
	function writeBlockSequence$1(state, level, object, compact) {
		var _result = "", _tag = state.tag, index$1, length;
		for (index$1 = 0, length = object.length; index$1 < length; index$1 += 1) if (writeNode$1(state, level + 1, object[index$1], true, true)) {
			if (!compact || index$1 !== 0) _result += generateNextLine$1(state, level);
			if (state.dump && CHAR_LINE_FEED$1 === state.dump.charCodeAt(0)) _result += "-";
else _result += "- ";
			_result += state.dump;
		}
		state.tag = _tag;
		state.dump = _result || "[]";
	}
	function writeFlowMapping$1(state, level, object) {
		var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index$1, length, objectKey, objectValue, pairBuffer;
		for (index$1 = 0, length = objectKeyList.length; index$1 < length; index$1 += 1) {
			pairBuffer = "";
			if (index$1 !== 0) pairBuffer += ", ";
			if (state.condenseFlow) pairBuffer += "\"";
			objectKey = objectKeyList[index$1];
			objectValue = object[objectKey];
			if (!writeNode$1(state, level, objectKey, false, false)) continue;
			if (state.dump.length > 1024) pairBuffer += "? ";
			pairBuffer += state.dump + (state.condenseFlow ? "\"" : "") + ":" + (state.condenseFlow ? "" : " ");
			if (!writeNode$1(state, level, objectValue, false, false)) continue;
			pairBuffer += state.dump;
			_result += pairBuffer;
		}
		state.tag = _tag;
		state.dump = "{" + _result + "}";
	}
	function writeBlockMapping$1(state, level, object, compact) {
		var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index$1, length, objectKey, objectValue, explicitPair, pairBuffer;
		if (state.sortKeys === true) objectKeyList.sort();
else if (typeof state.sortKeys === "function") objectKeyList.sort(state.sortKeys);
else if (state.sortKeys) throw new YAMLException$5("sortKeys must be a boolean or a function");
		for (index$1 = 0, length = objectKeyList.length; index$1 < length; index$1 += 1) {
			pairBuffer = "";
			if (!compact || index$1 !== 0) pairBuffer += generateNextLine$1(state, level);
			objectKey = objectKeyList[index$1];
			objectValue = object[objectKey];
			if (!writeNode$1(state, level + 1, objectKey, true, true, true)) continue;
			explicitPair = state.tag !== null && state.tag !== "?" || state.dump && state.dump.length > 1024;
			if (explicitPair) if (state.dump && CHAR_LINE_FEED$1 === state.dump.charCodeAt(0)) pairBuffer += "?";
else pairBuffer += "? ";
			pairBuffer += state.dump;
			if (explicitPair) pairBuffer += generateNextLine$1(state, level);
			if (!writeNode$1(state, level + 1, objectValue, true, explicitPair)) continue;
			if (state.dump && CHAR_LINE_FEED$1 === state.dump.charCodeAt(0)) pairBuffer += ":";
else pairBuffer += ": ";
			pairBuffer += state.dump;
			_result += pairBuffer;
		}
		state.tag = _tag;
		state.dump = _result || "{}";
	}
	function detectType$1(state, object, explicit) {
		var _result, typeList, index$1, length, type, style;
		typeList = explicit ? state.explicitTypes : state.implicitTypes;
		for (index$1 = 0, length = typeList.length; index$1 < length; index$1 += 1) {
			type = typeList[index$1];
			if ((type.instanceOf || type.predicate) && (!type.instanceOf || typeof object === "object" && object instanceof type.instanceOf) && (!type.predicate || type.predicate(object))) {
				state.tag = explicit ? type.tag : "?";
				if (type.represent) {
					style = state.styleMap[type.tag] || type.defaultStyle;
					if (_toString$3.call(type.represent) === "[object Function]") _result = type.represent(object, style);
else if (_hasOwnProperty$4.call(type.represent, style)) _result = type.represent[style](object, style);
else throw new YAMLException$5("!<" + type.tag + "> tag resolver accepts not \"" + style + "\" style");
					state.dump = _result;
				}
				return true;
			}
		}
		return false;
	}
	function writeNode$1(state, level, object, block, compact, iskey) {
		state.tag = null;
		state.dump = object;
		if (!detectType$1(state, object, false)) detectType$1(state, object, true);
		var type = _toString$3.call(state.dump);
		if (block) block = state.flowLevel < 0 || state.flowLevel > level;
		var objectOrArray = type === "[object Object]" || type === "[object Array]", duplicateIndex, duplicate;
		if (objectOrArray) {
			duplicateIndex = state.duplicates.indexOf(object);
			duplicate = duplicateIndex !== -1;
		}
		if (state.tag !== null && state.tag !== "?" || duplicate || state.indent !== 2 && level > 0) compact = false;
		if (duplicate && state.usedDuplicates[duplicateIndex]) state.dump = "*ref_" + duplicateIndex;
else {
			if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) state.usedDuplicates[duplicateIndex] = true;
			if (type === "[object Object]") if (block && Object.keys(state.dump).length !== 0) {
				writeBlockMapping$1(state, level, state.dump, compact);
				if (duplicate) state.dump = "&ref_" + duplicateIndex + state.dump;
			} else {
				writeFlowMapping$1(state, level, state.dump);
				if (duplicate) state.dump = "&ref_" + duplicateIndex + " " + state.dump;
			}
else if (type === "[object Array]") {
				var arrayLevel = state.noArrayIndent && level > 0 ? level - 1 : level;
				if (block && state.dump.length !== 0) {
					writeBlockSequence$1(state, arrayLevel, state.dump, compact);
					if (duplicate) state.dump = "&ref_" + duplicateIndex + state.dump;
				} else {
					writeFlowSequence$1(state, arrayLevel, state.dump);
					if (duplicate) state.dump = "&ref_" + duplicateIndex + " " + state.dump;
				}
			} else if (type === "[object String]") {
				if (state.tag !== "?") writeScalar$1(state, state.dump, level, iskey);
			} else {
				if (state.skipInvalid) return false;
				throw new YAMLException$5("unacceptable kind of an object to dump " + type);
			}
			if (state.tag !== null && state.tag !== "?") state.dump = "!<" + state.tag + "> " + state.dump;
		}
		return true;
	}
	function getDuplicateReferences$1(object, state) {
		var objects = [], duplicatesIndexes = [], index$1, length;
		inspectNode$1(object, objects, duplicatesIndexes);
		for (index$1 = 0, length = duplicatesIndexes.length; index$1 < length; index$1 += 1) state.duplicates.push(objects[duplicatesIndexes[index$1]]);
		state.usedDuplicates = new Array(length);
	}
	function inspectNode$1(object, objects, duplicatesIndexes) {
		var objectKeyList, index$1, length;
		if (object !== null && typeof object === "object") {
			index$1 = objects.indexOf(object);
			if (index$1 !== -1) {
				if (duplicatesIndexes.indexOf(index$1) === -1) duplicatesIndexes.push(index$1);
			} else {
				objects.push(object);
				if (Array.isArray(object)) for (index$1 = 0, length = object.length; index$1 < length; index$1 += 1) inspectNode$1(object[index$1], objects, duplicatesIndexes);
else {
					objectKeyList = Object.keys(object);
					for (index$1 = 0, length = objectKeyList.length; index$1 < length; index$1 += 1) inspectNode$1(object[objectKeyList[index$1]], objects, duplicatesIndexes);
				}
			}
		}
	}
	function dump$1(input, options) {
		options = options || {};
		var state = new State$2(options);
		if (!state.noRefs) getDuplicateReferences$1(input, state);
		if (writeNode$1(state, 0, input, true, true)) return state.dump + "\n";
		return "";
	}
	function safeDump(input, options) {
		return dump$1(input, common$10.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));
	}
	module.exports.dump = dump$1;
	module.exports.safeDump = safeDump;
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml.js
var require_js_yaml$2 = __commonJS({ "../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml.js"(exports, module) {
	var loader$1 = require_loader$1();
	var dumper$1 = require_dumper$1();
	function deprecated(name) {
		return function() {
			throw new Error("Function " + name + " is deprecated and cannot be used.");
		};
	}
	module.exports.Type = require_type$1();
	module.exports.Schema = require_schema$1();
	module.exports.FAILSAFE_SCHEMA = require_failsafe$1();
	module.exports.JSON_SCHEMA = require_json$2();
	module.exports.CORE_SCHEMA = require_core$1();
	module.exports.DEFAULT_SAFE_SCHEMA = require_default_safe();
	module.exports.DEFAULT_FULL_SCHEMA = require_default_full();
	module.exports.load = loader$1.load;
	module.exports.loadAll = loader$1.loadAll;
	module.exports.safeLoad = loader$1.safeLoad;
	module.exports.safeLoadAll = loader$1.safeLoadAll;
	module.exports.dump = dumper$1.dump;
	module.exports.safeDump = dumper$1.safeDump;
	module.exports.YAMLException = require_exception$1();
	module.exports.MINIMAL_SCHEMA = require_failsafe$1();
	module.exports.SAFE_SCHEMA = require_default_safe();
	module.exports.DEFAULT_SCHEMA = require_default_full();
	module.exports.scan = deprecated("scan");
	module.exports.parse = deprecated("parse");
	module.exports.compose = deprecated("compose");
	module.exports.addConstructor = deprecated("addConstructor");
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/index.js
var require_js_yaml$1 = __commonJS({ "../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/index.js"(exports, module) {
	var yaml$4 = require_js_yaml$2();
	module.exports = yaml$4;
} });

//#endregion
//#region ../node_modules/.pnpm/@changesets+parse@0.4.0/node_modules/@changesets/parse/dist/changesets-parse.cjs.js
var require_changesets_parse_cjs = __commonJS({ "../node_modules/.pnpm/@changesets+parse@0.4.0/node_modules/@changesets/parse/dist/changesets-parse.cjs.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var yaml$3 = require_js_yaml$1();
	function _interopDefault$14(e) {
		return e && e.__esModule ? e : { "default": e };
	}
	var yaml__default$2 = /*#__PURE__*/ _interopDefault$14(yaml$3);
	const mdRegex = /\s*---([^]*?)\n\s*---(\s*(?:\n|$)[^]*)/;
	function parseChangesetFile(contents) {
		const execResult = mdRegex.exec(contents);
		if (!execResult) throw new Error(`could not parse changeset - invalid frontmatter: ${contents}`);
		let [, roughReleases, roughSummary] = execResult;
		let summary = roughSummary.trim();
		let releases;
		try {
			const yamlStuff = yaml__default$2["default"].safeLoad(roughReleases);
			if (yamlStuff) releases = Object.entries(yamlStuff).map(([name, type]) => ({
				name,
				type
			}));
else releases = [];
		} catch (e) {
			throw new Error(`could not parse changeset - invalid frontmatter: ${contents}`);
		}
		if (!releases) throw new Error(`could not parse changeset - unknown error: ${contents}`);
		return {
			releases,
			summary
		};
	}
	exports["default"] = parseChangesetFile;
} });

//#endregion
//#region ../node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/windows.js
var require_windows = __commonJS({ "../node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/windows.js"(exports, module) {
	module.exports = isexe$3;
	isexe$3.sync = sync$4;
	var fs$47 = require("fs");
	function checkPathExt(path$72, options) {
		var pathext = options.pathExt !== undefined ? options.pathExt : process.env.PATHEXT;
		if (!pathext) return true;
		pathext = pathext.split(";");
		if (pathext.indexOf("") !== -1) return true;
		for (var i$2 = 0; i$2 < pathext.length; i$2++) {
			var p = pathext[i$2].toLowerCase();
			if (p && path$72.substr(-p.length).toLowerCase() === p) return true;
		}
		return false;
	}
	function checkStat$1(stat$5, path$72, options) {
		if (!stat$5.isSymbolicLink() && !stat$5.isFile()) return false;
		return checkPathExt(path$72, options);
	}
	function isexe$3(path$72, options, cb) {
		fs$47.stat(path$72, function(er, stat$5) {
			cb(er, er ? false : checkStat$1(stat$5, path$72, options));
		});
	}
	function sync$4(path$72, options) {
		return checkStat$1(fs$47.statSync(path$72), path$72, options);
	}
} });

//#endregion
//#region ../node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/mode.js
var require_mode = __commonJS({ "../node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/mode.js"(exports, module) {
	module.exports = isexe$2;
	isexe$2.sync = sync$3;
	var fs$46 = require("fs");
	function isexe$2(path$72, options, cb) {
		fs$46.stat(path$72, function(er, stat$5) {
			cb(er, er ? false : checkStat(stat$5, options));
		});
	}
	function sync$3(path$72, options) {
		return checkStat(fs$46.statSync(path$72), options);
	}
	function checkStat(stat$5, options) {
		return stat$5.isFile() && checkMode(stat$5, options);
	}
	function checkMode(stat$5, options) {
		var mod = stat$5.mode;
		var uid$2 = stat$5.uid;
		var gid = stat$5.gid;
		var myUid = options.uid !== undefined ? options.uid : process.getuid && process.getuid();
		var myGid = options.gid !== undefined ? options.gid : process.getgid && process.getgid();
		var u$26 = parseInt("100", 8);
		var g = parseInt("010", 8);
		var o = parseInt("001", 8);
		var ug = u$26 | g;
		var ret = mod & o || mod & g && gid === myGid || mod & u$26 && uid$2 === myUid || mod & ug && myUid === 0;
		return ret;
	}
} });

//#endregion
//#region ../node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/index.js
var require_isexe = __commonJS({ "../node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/index.js"(exports, module) {
	var fs$45 = require("fs");
	var core;
	if (process.platform === "win32" || global.TESTING_WINDOWS) core = require_windows();
else core = require_mode();
	module.exports = isexe$1;
	isexe$1.sync = sync$2;
	function isexe$1(path$72, options, cb) {
		if (typeof options === "function") {
			cb = options;
			options = {};
		}
		if (!cb) {
			if (typeof Promise !== "function") throw new TypeError("callback not provided");
			return new Promise(function(resolve$1, reject) {
				isexe$1(path$72, options || {}, function(er, is) {
					if (er) reject(er);
else resolve$1(is);
				});
			});
		}
		core(path$72, options || {}, function(er, is) {
			if (er) {
				if (er.code === "EACCES" || options && options.ignoreErrors) {
					er = null;
					is = false;
				}
			}
			cb(er, is);
		});
	}
	function sync$2(path$72, options) {
		try {
			return core.sync(path$72, options || {});
		} catch (er) {
			if (options && options.ignoreErrors || er.code === "EACCES") return false;
else throw er;
		}
	}
} });

//#endregion
//#region ../node_modules/.pnpm/which@2.0.2/node_modules/which/which.js
var require_which = __commonJS({ "../node_modules/.pnpm/which@2.0.2/node_modules/which/which.js"(exports, module) {
	const isWindows$2 = process.platform === "win32" || process.env.OSTYPE === "cygwin" || process.env.OSTYPE === "msys";
	const path$49 = require("path");
	const COLON = isWindows$2 ? ";" : ":";
	const isexe = require_isexe();
	const getNotFoundError = (cmd) => Object.assign(new Error(`not found: ${cmd}`), { code: "ENOENT" });
	const getPathInfo = (cmd, opt) => {
		const colon = opt.colon || COLON;
		const pathEnv = cmd.match(/\//) || isWindows$2 && cmd.match(/\\/) ? [""] : [...isWindows$2 ? [process.cwd()] : [], ...(opt.path || process.env.PATH || "").split(colon)];
		const pathExtExe = isWindows$2 ? opt.pathExt || process.env.PATHEXT || ".EXE;.CMD;.BAT;.COM" : "";
		const pathExt = isWindows$2 ? pathExtExe.split(colon) : [""];
		if (isWindows$2) {
			if (cmd.indexOf(".") !== -1 && pathExt[0] !== "") pathExt.unshift("");
		}
		return {
			pathEnv,
			pathExt,
			pathExtExe
		};
	};
	const which$1 = (cmd, opt, cb) => {
		if (typeof opt === "function") {
			cb = opt;
			opt = {};
		}
		if (!opt) opt = {};
		const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt);
		const found = [];
		const step = (i$2) => new Promise((resolve$1, reject) => {
			if (i$2 === pathEnv.length) return opt.all && found.length ? resolve$1(found) : reject(getNotFoundError(cmd));
			const ppRaw = pathEnv[i$2];
			const pathPart = /^".*"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;
			const pCmd = path$49.join(pathPart, cmd);
			const p = !pathPart && /^\.[\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;
			resolve$1(subStep(p, i$2, 0));
		});
		const subStep = (p, i$2, ii) => new Promise((resolve$1, reject) => {
			if (ii === pathExt.length) return resolve$1(step(i$2 + 1));
			const ext = pathExt[ii];
			isexe(p + ext, { pathExt: pathExtExe }, (er, is) => {
				if (!er && is) if (opt.all) found.push(p + ext);
else return resolve$1(p + ext);
				return resolve$1(subStep(p, i$2, ii + 1));
			});
		});
		return cb ? step(0).then((res) => cb(null, res), cb) : step(0);
	};
	const whichSync = (cmd, opt) => {
		opt = opt || {};
		const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt);
		const found = [];
		for (let i$2 = 0; i$2 < pathEnv.length; i$2++) {
			const ppRaw = pathEnv[i$2];
			const pathPart = /^".*"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;
			const pCmd = path$49.join(pathPart, cmd);
			const p = !pathPart && /^\.[\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;
			for (let j = 0; j < pathExt.length; j++) {
				const cur = p + pathExt[j];
				try {
					const is = isexe.sync(cur, { pathExt: pathExtExe });
					if (is) if (opt.all) found.push(cur);
else return cur;
				} catch (ex) {}
			}
		}
		if (opt.all && found.length) return found;
		if (opt.nothrow) return null;
		throw getNotFoundError(cmd);
	};
	module.exports = which$1;
	which$1.sync = whichSync;
} });

//#endregion
//#region ../node_modules/.pnpm/path-key@3.1.1/node_modules/path-key/index.js
var require_path_key = __commonJS({ "../node_modules/.pnpm/path-key@3.1.1/node_modules/path-key/index.js"(exports, module) {
	const pathKey = (options = {}) => {
		const environment = options.env || process.env;
		const platform$1 = options.platform || process.platform;
		if (platform$1 !== "win32") return "PATH";
		return Object.keys(environment).reverse().find((key) => key.toUpperCase() === "PATH") || "Path";
	};
	module.exports = pathKey;
	module.exports.default = pathKey;
} });

//#endregion
//#region ../node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/util/resolveCommand.js
var require_resolveCommand = __commonJS({ "../node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/util/resolveCommand.js"(exports, module) {
	const path$48 = require("path");
	const which = require_which();
	const getPathKey = require_path_key();
	function resolveCommandAttempt(parsed, withoutPathExt) {
		const env$1 = parsed.options.env || process.env;
		const cwd$1 = process.cwd();
		const hasCustomCwd = parsed.options.cwd != null;
		const shouldSwitchCwd = hasCustomCwd && process.chdir !== undefined && !process.chdir.disabled;
		if (shouldSwitchCwd) try {
			process.chdir(parsed.options.cwd);
		} catch (err) {}
		let resolved;
		try {
			resolved = which.sync(parsed.command, {
				path: env$1[getPathKey({ env: env$1 })],
				pathExt: withoutPathExt ? path$48.delimiter : undefined
			});
		} catch (e) {} finally {
			if (shouldSwitchCwd) process.chdir(cwd$1);
		}
		if (resolved) resolved = path$48.resolve(hasCustomCwd ? parsed.options.cwd : "", resolved);
		return resolved;
	}
	function resolveCommand$1(parsed) {
		return resolveCommandAttempt(parsed) || resolveCommandAttempt(parsed, true);
	}
	module.exports = resolveCommand$1;
} });

//#endregion
//#region ../node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/util/escape.js
var require_escape = __commonJS({ "../node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/util/escape.js"(exports, module) {
	const metaCharsRegExp = /([()\][%!^"`<>&|;, *?])/g;
	function escapeCommand(arg) {
		arg = arg.replace(metaCharsRegExp, "^$1");
		return arg;
	}
	function escapeArgument(arg, doubleEscapeMetaChars) {
		arg = `${arg}`;
		arg = arg.replace(/(?=(\\+?)?)\1"/g, "$1$1\\\"");
		arg = arg.replace(/(?=(\\+?)?)\1$/, "$1$1");
		arg = `"${arg}"`;
		arg = arg.replace(metaCharsRegExp, "^$1");
		if (doubleEscapeMetaChars) arg = arg.replace(metaCharsRegExp, "^$1");
		return arg;
	}
	module.exports.command = escapeCommand;
	module.exports.argument = escapeArgument;
} });

//#endregion
//#region ../node_modules/.pnpm/shebang-regex@3.0.0/node_modules/shebang-regex/index.js
var require_shebang_regex = __commonJS({ "../node_modules/.pnpm/shebang-regex@3.0.0/node_modules/shebang-regex/index.js"(exports, module) {
	module.exports = /^#!(.*)/;
} });

//#endregion
//#region ../node_modules/.pnpm/shebang-command@2.0.0/node_modules/shebang-command/index.js
var require_shebang_command = __commonJS({ "../node_modules/.pnpm/shebang-command@2.0.0/node_modules/shebang-command/index.js"(exports, module) {
	const shebangRegex = require_shebang_regex();
	module.exports = (string$3 = "") => {
		const match = string$3.match(shebangRegex);
		if (!match) return null;
		const [path$72, argument] = match[0].replace(/#! ?/, "").split(" ");
		const binary = path$72.split("/").pop();
		if (binary === "env") return argument;
		return argument ? `${binary} ${argument}` : binary;
	};
} });

//#endregion
//#region ../node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/util/readShebang.js
var require_readShebang = __commonJS({ "../node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/util/readShebang.js"(exports, module) {
	const fs$44 = require("fs");
	const shebangCommand = require_shebang_command();
	function readShebang$1(command) {
		const size = 150;
		const buffer$1 = Buffer.alloc(size);
		let fd;
		try {
			fd = fs$44.openSync(command, "r");
			fs$44.readSync(fd, buffer$1, 0, size, 0);
			fs$44.closeSync(fd);
		} catch (e) {}
		return shebangCommand(buffer$1.toString());
	}
	module.exports = readShebang$1;
} });

//#endregion
//#region ../node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/parse.js
var require_parse$4 = __commonJS({ "../node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/parse.js"(exports, module) {
	const path$47 = require("path");
	const resolveCommand = require_resolveCommand();
	const escape = require_escape();
	const readShebang = require_readShebang();
	const isWin$1 = process.platform === "win32";
	const isExecutableRegExp = /\.(?:com|exe)$/i;
	const isCmdShimRegExp = /node_modules[\\/].bin[\\/][^\\/]+\.cmd$/i;
	function detectShebang(parsed) {
		parsed.file = resolveCommand(parsed);
		const shebang = parsed.file && readShebang(parsed.file);
		if (shebang) {
			parsed.args.unshift(parsed.file);
			parsed.command = shebang;
			return resolveCommand(parsed);
		}
		return parsed.file;
	}
	function parseNonShell(parsed) {
		if (!isWin$1) return parsed;
		const commandFile = detectShebang(parsed);
		const needsShell = !isExecutableRegExp.test(commandFile);
		if (parsed.options.forceShell || needsShell) {
			const needsDoubleEscapeMetaChars = isCmdShimRegExp.test(commandFile);
			parsed.command = path$47.normalize(parsed.command);
			parsed.command = escape.command(parsed.command);
			parsed.args = parsed.args.map((arg) => escape.argument(arg, needsDoubleEscapeMetaChars));
			const shellCommand = [parsed.command].concat(parsed.args).join(" ");
			parsed.args = [
				"/d",
				"/s",
				"/c",
				`"${shellCommand}"`
			];
			parsed.command = process.env.comspec || "cmd.exe";
			parsed.options.windowsVerbatimArguments = true;
		}
		return parsed;
	}
	function parse$16(command, args, options) {
		if (args && !Array.isArray(args)) {
			options = args;
			args = null;
		}
		args = args ? args.slice(0) : [];
		options = Object.assign({}, options);
		const parsed = {
			command,
			args,
			options,
			file: undefined,
			original: {
				command,
				args
			}
		};
		return options.shell ? parsed : parseNonShell(parsed);
	}
	module.exports = parse$16;
} });

//#endregion
//#region ../node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/enoent.js
var require_enoent = __commonJS({ "../node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/enoent.js"(exports, module) {
	const isWin = process.platform === "win32";
	function notFoundError(original, syscall) {
		return Object.assign(new Error(`${syscall} ${original.command} ENOENT`), {
			code: "ENOENT",
			errno: "ENOENT",
			syscall: `${syscall} ${original.command}`,
			path: original.command,
			spawnargs: original.args
		});
	}
	function hookChildProcess(cp$2, parsed) {
		if (!isWin) return;
		const originalEmit = cp$2.emit;
		cp$2.emit = function(name, arg1) {
			if (name === "exit") {
				const err = verifyENOENT(arg1, parsed);
				if (err) return originalEmit.call(cp$2, "error", err);
			}
			return originalEmit.apply(cp$2, arguments);
		};
	}
	function verifyENOENT(status, parsed) {
		if (isWin && status === 1 && !parsed.file) return notFoundError(parsed.original, "spawn");
		return null;
	}
	function verifyENOENTSync(status, parsed) {
		if (isWin && status === 1 && !parsed.file) return notFoundError(parsed.original, "spawnSync");
		return null;
	}
	module.exports = {
		hookChildProcess,
		verifyENOENT,
		verifyENOENTSync,
		notFoundError
	};
} });

//#endregion
//#region ../node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/index.js
var require_cross_spawn = __commonJS({ "../node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/index.js"(exports, module) {
	const cp = require("child_process");
	const parse$15 = require_parse$4();
	const enoent = require_enoent();
	function spawn$2(command, args, options) {
		const parsed = parse$15(command, args, options);
		const spawned = cp.spawn(parsed.command, parsed.args, parsed.options);
		enoent.hookChildProcess(spawned, parsed);
		return spawned;
	}
	function spawnSync(command, args, options) {
		const parsed = parse$15(command, args, options);
		const result = cp.spawnSync(parsed.command, parsed.args, parsed.options);
		result.error = result.error || enoent.verifyENOENTSync(result.status, parsed);
		return result;
	}
	module.exports = spawn$2;
	module.exports.spawn = spawn$2;
	module.exports.sync = spawnSync;
	module.exports._parse = parse$15;
	module.exports._enoent = enoent;
} });

//#endregion
//#region ../node_modules/.pnpm/signal-exit@4.1.0/node_modules/signal-exit/dist/cjs/signals.js
var require_signals = __commonJS({ "../node_modules/.pnpm/signal-exit@4.1.0/node_modules/signal-exit/dist/cjs/signals.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.signals = void 0;
	/**
	* This is not the set of all possible signals.
	*
	* It IS, however, the set of all signals that trigger
	* an exit on either Linux or BSD systems.  Linux is a
	* superset of the signal names supported on BSD, and
	* the unknown signals just fail to register, so we can
	* catch that easily enough.
	*
	* Windows signals are a different set, since there are
	* signals that terminate Windows processes, but don't
	* terminate (or don't even exist) on Posix systems.
	*
	* Don't bother with SIGKILL.  It's uncatchable, which
	* means that we can't fire any callbacks anyway.
	*
	* If a user does happen to register a handler on a non-
	* fatal signal like SIGWINCH or something, and then
	* exit, it'll end up firing `process.emit('exit')`, so
	* the handler will be fired anyway.
	*
	* SIGBUS, SIGFPE, SIGSEGV and SIGILL, when not raised
	* artificially, inherently leave the process in a
	* state from which it is not safe to try and enter JS
	* listeners.
	*/
	exports.signals = [];
	exports.signals.push("SIGHUP", "SIGINT", "SIGTERM");
	if (process.platform !== "win32") exports.signals.push(
		"SIGALRM",
		"SIGABRT",
		"SIGVTALRM",
		"SIGXCPU",
		"SIGXFSZ",
		"SIGUSR2",
		"SIGTRAP",
		"SIGSYS",
		"SIGQUIT",
		"SIGIOT"
		// should detect profiler and enable/disable accordingly.
		// see #21
		// 'SIGPROF'
);
	if (process.platform === "linux") exports.signals.push("SIGIO", "SIGPOLL", "SIGPWR", "SIGSTKFLT");
} });

//#endregion
//#region ../node_modules/.pnpm/signal-exit@4.1.0/node_modules/signal-exit/dist/cjs/index.js
var require_cjs = __commonJS({ "../node_modules/.pnpm/signal-exit@4.1.0/node_modules/signal-exit/dist/cjs/index.js"(exports) {
	var _a;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.unload = exports.load = exports.onExit = exports.signals = void 0;
	const signals_js_1 = require_signals();
	Object.defineProperty(exports, "signals", {
		enumerable: true,
		get: function() {
			return signals_js_1.signals;
		}
	});
	const processOk = (process$2) => !!process$2 && typeof process$2 === "object" && typeof process$2.removeListener === "function" && typeof process$2.emit === "function" && typeof process$2.reallyExit === "function" && typeof process$2.listeners === "function" && typeof process$2.kill === "function" && typeof process$2.pid === "number" && typeof process$2.on === "function";
	const kExitEmitter = Symbol.for("signal-exit emitter");
	const global$1 = globalThis;
	const ObjectDefineProperty = Object.defineProperty.bind(Object);
	var Emitter = class {
		emitted = {
			afterExit: false,
			exit: false
		};
		listeners = {
			afterExit: [],
			exit: []
		};
		count = 0;
		id = Math.random();
		constructor() {
			if (global$1[kExitEmitter]) return global$1[kExitEmitter];
			ObjectDefineProperty(global$1, kExitEmitter, {
				value: this,
				writable: false,
				enumerable: false,
				configurable: false
			});
		}
		on(ev, fn) {
			this.listeners[ev].push(fn);
		}
		removeListener(ev, fn) {
			const list$3 = this.listeners[ev];
			const i$2 = list$3.indexOf(fn);
			if (i$2 === -1) return;
			if (i$2 === 0 && list$3.length === 1) list$3.length = 0;
else list$3.splice(i$2, 1);
		}
		emit(ev, code$1, signal) {
			if (this.emitted[ev]) return false;
			this.emitted[ev] = true;
			let ret = false;
			for (const fn of this.listeners[ev]) ret = fn(code$1, signal) === true || ret;
			if (ev === "exit") ret = this.emit("afterExit", code$1, signal) || ret;
			return ret;
		}
	};
	var SignalExitBase = class {};
	const signalExitWrap = (handler$1) => {
		return {
			onExit(cb, opts) {
				return handler$1.onExit(cb, opts);
			},
			load() {
				return handler$1.load();
			},
			unload() {
				return handler$1.unload();
			}
		};
	};
	var SignalExitFallback = class extends SignalExitBase {
		onExit() {
			return () => {};
		}
		load() {}
		unload() {}
	};
	var SignalExit = class extends SignalExitBase {
		#hupSig = process$1.platform === "win32" ? "SIGINT" : "SIGHUP";
		#emitter = new Emitter();
		#process;
		#originalProcessEmit;
		#originalProcessReallyExit;
		#sigListeners = {};
		#loaded = false;
		constructor(process$2) {
			super();
			this.#process = process$2;
			this.#sigListeners = {};
			for (const sig of signals_js_1.signals) this.#sigListeners[sig] = () => {
				const listeners = this.#process.listeners(sig);
				let { count } = this.#emitter;
				const p = process$2;
				if (typeof p.__signal_exit_emitter__ === "object" && typeof p.__signal_exit_emitter__.count === "number") count += p.__signal_exit_emitter__.count;
				if (listeners.length === count) {
					this.unload();
					const ret = this.#emitter.emit("exit", null, sig);
					const s = sig === "SIGHUP" ? this.#hupSig : sig;
					if (!ret) process$2.kill(process$2.pid, s);
				}
			};
			this.#originalProcessReallyExit = process$2.reallyExit;
			this.#originalProcessEmit = process$2.emit;
		}
		onExit(cb, opts) {
			if (!processOk(this.#process)) return () => {};
			if (this.#loaded === false) this.load();
			const ev = opts?.alwaysLast ? "afterExit" : "exit";
			this.#emitter.on(ev, cb);
			return () => {
				this.#emitter.removeListener(ev, cb);
				if (this.#emitter.listeners["exit"].length === 0 && this.#emitter.listeners["afterExit"].length === 0) this.unload();
			};
		}
		load() {
			if (this.#loaded) return;
			this.#loaded = true;
			this.#emitter.count += 1;
			for (const sig of signals_js_1.signals) try {
				const fn = this.#sigListeners[sig];
				if (fn) this.#process.on(sig, fn);
			} catch (_) {}
			this.#process.emit = (ev, ...a) => {
				return this.#processEmit(ev, ...a);
			};
			this.#process.reallyExit = (code$1) => {
				return this.#processReallyExit(code$1);
			};
		}
		unload() {
			if (!this.#loaded) return;
			this.#loaded = false;
			signals_js_1.signals.forEach((sig) => {
				const listener = this.#sigListeners[sig];
				if (!listener) throw new Error("Listener not defined for signal: " + sig);
				try {
					this.#process.removeListener(sig, listener);
				} catch (_) {}
			});
			this.#process.emit = this.#originalProcessEmit;
			this.#process.reallyExit = this.#originalProcessReallyExit;
			this.#emitter.count -= 1;
		}
		#processReallyExit(code$1) {
			if (!processOk(this.#process)) return 0;
			this.#process.exitCode = code$1 || 0;
			this.#emitter.emit("exit", this.#process.exitCode, null);
			return this.#originalProcessReallyExit.call(this.#process, this.#process.exitCode);
		}
		#processEmit(ev, ...args) {
			const og = this.#originalProcessEmit;
			if (ev === "exit" && processOk(this.#process)) {
				if (typeof args[0] === "number") this.#process.exitCode = args[0];
				const ret = og.call(this.#process, ev, ...args);
				this.#emitter.emit("exit", this.#process.exitCode, null);
				return ret;
			} else return og.call(this.#process, ev, ...args);
		}
	};
	const process$1 = globalThis.process;
	_a = signalExitWrap(processOk(process$1) ? new SignalExit(process$1) : new SignalExitFallback()), exports.onExit = _a.onExit, exports.load = _a.load, exports.unload = _a.unload;
} });

//#endregion
//#region ../node_modules/.pnpm/spawndamnit@3.0.1/node_modules/spawndamnit/promise.js
var require_promise = __commonJS({ "../node_modules/.pnpm/spawndamnit@3.0.1/node_modules/spawndamnit/promise.js"(exports, module) {
	const EventEmitter$1 = require("events");
	var ChildProcessPromise$1 = class extends Promise {
		constructor(executer) {
			let resolve$1;
			let reject;
			super((res, rej) => {
				resolve$1 = res;
				reject = rej;
			});
			executer(resolve$1, reject, this);
		}
	};
	Object.assign(ChildProcessPromise$1.prototype, EventEmitter$1.prototype);
	module.exports = ChildProcessPromise$1;
} });

//#endregion
//#region ../node_modules/.pnpm/spawndamnit@3.0.1/node_modules/spawndamnit/index.js
var require_spawndamnit = __commonJS({ "../node_modules/.pnpm/spawndamnit@3.0.1/node_modules/spawndamnit/index.js"(exports, module) {
	const crossSpawn = require_cross_spawn();
	const { onExit } = require_cjs();
	const EventEmitter = require("events");
	const ChildProcessPromise = require_promise();
	const activeProcesses = new Set();
	onExit(() => {
		for (let child$1 of activeProcesses) child$1.kill("SIGTERM");
	});
	function spawn$1(cmd, args, opts) {
		return new ChildProcessPromise((resolve$1, reject, events$2) => {
			let child$1 = crossSpawn(cmd, args, opts);
			let stdout = Buffer.from("");
			let stderr = Buffer.from("");
			activeProcesses.add(child$1);
			if (child$1.stdout) child$1.stdout.on("data", (data) => {
				stdout = Buffer.concat([stdout, data]);
				events$2.emit("stdout", data);
			});
			if (child$1.stderr) child$1.stderr.on("data", (data) => {
				stderr = Buffer.concat([stderr, data]);
				events$2.emit("stderr", data);
			});
			child$1.on("error", (err) => {
				activeProcesses.delete(child$1);
				reject(err);
			});
			child$1.on("close", (code$1) => {
				activeProcesses.delete(child$1);
				resolve$1({
					code: code$1,
					stdout,
					stderr
				});
			});
		});
	}
	module.exports = spawn$1;
	module.exports.ChildProcessPromise = ChildProcessPromise;
} });

//#endregion
//#region ../node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/typeof.js
var require_typeof = __commonJS({ "../node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/typeof.js"(exports, module) {
	function _typeof$2(o) {
		"@babel/helpers - typeof";
		return module.exports = _typeof$2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o$1) {
			return typeof o$1;
		} : function(o$1) {
			return o$1 && "function" == typeof Symbol && o$1.constructor === Symbol && o$1 !== Symbol.prototype ? "symbol" : typeof o$1;
		}, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof$2(o);
	}
	module.exports = _typeof$2, module.exports.__esModule = true, module.exports["default"] = module.exports;
} });

//#endregion
//#region ../node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/regeneratorRuntime.js
var require_regeneratorRuntime = __commonJS({ "../node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/regeneratorRuntime.js"(exports, module) {
	var _typeof$1 = require_typeof()["default"];
	function _regeneratorRuntime$4() {
		"use strict";
		module.exports = _regeneratorRuntime$4 = function _regeneratorRuntime$5() {
			return e;
		}, module.exports.__esModule = true, module.exports["default"] = module.exports;
		var t$5, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function(t$6, e$1, r$1) {
			t$6[e$1] = r$1.value;
		}, i$2 = "function" == typeof Symbol ? Symbol : {}, a = i$2.iterator || "@@iterator", c = i$2.asyncIterator || "@@asyncIterator", u$26 = i$2.toStringTag || "@@toStringTag";
		function define$2(t$6, e$1, r$1) {
			return Object.defineProperty(t$6, e$1, {
				value: r$1,
				enumerable: !0,
				configurable: !0,
				writable: !0
			}), t$6[e$1];
		}
		try {
			define$2({}, "");
		} catch (t$6) {
			define$2 = function define$3(t$7, e$1, r$1) {
				return t$7[e$1] = r$1;
			};
		}
		function wrap$1(t$6, e$1, r$1, n$1) {
			var i$3 = e$1 && e$1.prototype instanceof Generator ? e$1 : Generator, a$1 = Object.create(i$3.prototype), c$1 = new Context$3(n$1 || []);
			return o(a$1, "_invoke", { value: makeInvokeMethod(t$6, r$1, c$1) }), a$1;
		}
		function tryCatch(t$6, e$1, r$1) {
			try {
				return {
					type: "normal",
					arg: t$6.call(e$1, r$1)
				};
			} catch (t$7) {
				return {
					type: "throw",
					arg: t$7
				};
			}
		}
		e.wrap = wrap$1;
		var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {};
		function Generator() {}
		function GeneratorFunction() {}
		function GeneratorFunctionPrototype() {}
		var p = {};
		define$2(p, a, function() {
			return this;
		});
		var d = Object.getPrototypeOf, v = d && d(d(values([])));
		v && v !== r && n.call(v, a) && (p = v);
		var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
		function defineIteratorMethods(t$6) {
			[
				"next",
				"throw",
				"return"
			].forEach(function(e$1) {
				define$2(t$6, e$1, function(t$7) {
					return this._invoke(e$1, t$7);
				});
			});
		}
		function AsyncIterator(t$6, e$1) {
			function invoke(r$2, o$1, i$3, a$1) {
				var c$1 = tryCatch(t$6[r$2], t$6, o$1);
				if ("throw" !== c$1.type) {
					var u$27 = c$1.arg, h$1 = u$27.value;
					return h$1 && "object" == _typeof$1(h$1) && n.call(h$1, "__await") ? e$1.resolve(h$1.__await).then(function(t$7) {
						invoke("next", t$7, i$3, a$1);
					}, function(t$7) {
						invoke("throw", t$7, i$3, a$1);
					}) : e$1.resolve(h$1).then(function(t$7) {
						u$27.value = t$7, i$3(u$27);
					}, function(t$7) {
						return invoke("throw", t$7, i$3, a$1);
					});
				}
				a$1(c$1.arg);
			}
			var r$1;
			o(this, "_invoke", { value: function value(t$7, n$1) {
				function callInvokeWithMethodAndArg() {
					return new e$1(function(e$2, r$2) {
						invoke(t$7, n$1, e$2, r$2);
					});
				}
				return r$1 = r$1 ? r$1.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
			} });
		}
		function makeInvokeMethod(e$1, r$1, n$1) {
			var o$1 = h;
			return function(i$3, a$1) {
				if (o$1 === f) throw Error("Generator is already running");
				if (o$1 === s) {
					if ("throw" === i$3) throw a$1;
					return {
						value: t$5,
						done: !0
					};
				}
				for (n$1.method = i$3, n$1.arg = a$1;;) {
					var c$1 = n$1.delegate;
					if (c$1) {
						var u$27 = maybeInvokeDelegate(c$1, n$1);
						if (u$27) {
							if (u$27 === y) continue;
							return u$27;
						}
					}
					if ("next" === n$1.method) n$1.sent = n$1._sent = n$1.arg;
else if ("throw" === n$1.method) {
						if (o$1 === h) throw o$1 = s, n$1.arg;
						n$1.dispatchException(n$1.arg);
					} else "return" === n$1.method && n$1.abrupt("return", n$1.arg);
					o$1 = f;
					var p$1 = tryCatch(e$1, r$1, n$1);
					if ("normal" === p$1.type) {
						if (o$1 = n$1.done ? s : l, p$1.arg === y) continue;
						return {
							value: p$1.arg,
							done: n$1.done
						};
					}
					"throw" === p$1.type && (o$1 = s, n$1.method = "throw", n$1.arg = p$1.arg);
				}
			};
		}
		function maybeInvokeDelegate(e$1, r$1) {
			var n$1 = r$1.method, o$1 = e$1.iterator[n$1];
			if (o$1 === t$5) return r$1.delegate = null, "throw" === n$1 && e$1.iterator["return"] && (r$1.method = "return", r$1.arg = t$5, maybeInvokeDelegate(e$1, r$1), "throw" === r$1.method) || "return" !== n$1 && (r$1.method = "throw", r$1.arg = new TypeError("The iterator does not provide a '" + n$1 + "' method")), y;
			var i$3 = tryCatch(o$1, e$1.iterator, r$1.arg);
			if ("throw" === i$3.type) return r$1.method = "throw", r$1.arg = i$3.arg, r$1.delegate = null, y;
			var a$1 = i$3.arg;
			return a$1 ? a$1.done ? (r$1[e$1.resultName] = a$1.value, r$1.next = e$1.nextLoc, "return" !== r$1.method && (r$1.method = "next", r$1.arg = t$5), r$1.delegate = null, y) : a$1 : (r$1.method = "throw", r$1.arg = new TypeError("iterator result is not an object"), r$1.delegate = null, y);
		}
		function pushTryEntry(t$6) {
			var e$1 = { tryLoc: t$6[0] };
			1 in t$6 && (e$1.catchLoc = t$6[1]), 2 in t$6 && (e$1.finallyLoc = t$6[2], e$1.afterLoc = t$6[3]), this.tryEntries.push(e$1);
		}
		function resetTryEntry(t$6) {
			var e$1 = t$6.completion || {};
			e$1.type = "normal", delete e$1.arg, t$6.completion = e$1;
		}
		function Context$3(t$6) {
			this.tryEntries = [{ tryLoc: "root" }], t$6.forEach(pushTryEntry, this), this.reset(!0);
		}
		function values(e$1) {
			if (e$1 || "" === e$1) {
				var r$1 = e$1[a];
				if (r$1) return r$1.call(e$1);
				if ("function" == typeof e$1.next) return e$1;
				if (!isNaN(e$1.length)) {
					var o$1 = -1, i$3 = function next() {
						for (; ++o$1 < e$1.length;) if (n.call(e$1, o$1)) return next.value = e$1[o$1], next.done = !1, next;
						return next.value = t$5, next.done = !0, next;
					};
					return i$3.next = i$3;
				}
			}
			throw new TypeError(_typeof$1(e$1) + " is not iterable");
		}
		return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
			value: GeneratorFunctionPrototype,
			configurable: !0
		}), o(GeneratorFunctionPrototype, "constructor", {
			value: GeneratorFunction,
			configurable: !0
		}), GeneratorFunction.displayName = define$2(GeneratorFunctionPrototype, u$26, "GeneratorFunction"), e.isGeneratorFunction = function(t$6) {
			var e$1 = "function" == typeof t$6 && t$6.constructor;
			return !!e$1 && (e$1 === GeneratorFunction || "GeneratorFunction" === (e$1.displayName || e$1.name));
		}, e.mark = function(t$6) {
			return Object.setPrototypeOf ? Object.setPrototypeOf(t$6, GeneratorFunctionPrototype) : (t$6.__proto__ = GeneratorFunctionPrototype, define$2(t$6, u$26, "GeneratorFunction")), t$6.prototype = Object.create(g), t$6;
		}, e.awrap = function(t$6) {
			return { __await: t$6 };
		}, defineIteratorMethods(AsyncIterator.prototype), define$2(AsyncIterator.prototype, c, function() {
			return this;
		}), e.AsyncIterator = AsyncIterator, e.async = function(t$6, r$1, n$1, o$1, i$3) {
			void 0 === i$3 && (i$3 = Promise);
			var a$1 = new AsyncIterator(wrap$1(t$6, r$1, n$1, o$1), i$3);
			return e.isGeneratorFunction(r$1) ? a$1 : a$1.next().then(function(t$7) {
				return t$7.done ? t$7.value : a$1.next();
			});
		}, defineIteratorMethods(g), define$2(g, u$26, "Generator"), define$2(g, a, function() {
			return this;
		}), define$2(g, "toString", function() {
			return "[object Generator]";
		}), e.keys = function(t$6) {
			var e$1 = Object(t$6), r$1 = [];
			for (var n$1 in e$1) r$1.push(n$1);
			return r$1.reverse(), function next() {
				for (; r$1.length;) {
					var t$7 = r$1.pop();
					if (t$7 in e$1) return next.value = t$7, next.done = !1, next;
				}
				return next.done = !0, next;
			};
		}, e.values = values, Context$3.prototype = {
			constructor: Context$3,
			reset: function reset(e$1) {
				if (this.prev = 0, this.next = 0, this.sent = this._sent = t$5, this.done = !1, this.delegate = null, this.method = "next", this.arg = t$5, this.tryEntries.forEach(resetTryEntry), !e$1) for (var r$1 in this) "t" === r$1.charAt(0) && n.call(this, r$1) && !isNaN(+r$1.slice(1)) && (this[r$1] = t$5);
			},
			stop: function stop$1() {
				this.done = !0;
				var t$6 = this.tryEntries[0].completion;
				if ("throw" === t$6.type) throw t$6.arg;
				return this.rval;
			},
			dispatchException: function dispatchException(e$1) {
				if (this.done) throw e$1;
				var r$1 = this;
				function handle$1(n$1, o$2) {
					return a$1.type = "throw", a$1.arg = e$1, r$1.next = n$1, o$2 && (r$1.method = "next", r$1.arg = t$5), !!o$2;
				}
				for (var o$1 = this.tryEntries.length - 1; o$1 >= 0; --o$1) {
					var i$3 = this.tryEntries[o$1], a$1 = i$3.completion;
					if ("root" === i$3.tryLoc) return handle$1("end");
					if (i$3.tryLoc <= this.prev) {
						var c$1 = n.call(i$3, "catchLoc"), u$27 = n.call(i$3, "finallyLoc");
						if (c$1 && u$27) {
							if (this.prev < i$3.catchLoc) return handle$1(i$3.catchLoc, !0);
							if (this.prev < i$3.finallyLoc) return handle$1(i$3.finallyLoc);
						} else if (c$1) {
							if (this.prev < i$3.catchLoc) return handle$1(i$3.catchLoc, !0);
						} else {
							if (!u$27) throw Error("try statement without catch or finally");
							if (this.prev < i$3.finallyLoc) return handle$1(i$3.finallyLoc);
						}
					}
				}
			},
			abrupt: function abrupt(t$6, e$1) {
				for (var r$1 = this.tryEntries.length - 1; r$1 >= 0; --r$1) {
					var o$1 = this.tryEntries[r$1];
					if (o$1.tryLoc <= this.prev && n.call(o$1, "finallyLoc") && this.prev < o$1.finallyLoc) {
						var i$3 = o$1;
						break;
					}
				}
				i$3 && ("break" === t$6 || "continue" === t$6) && i$3.tryLoc <= e$1 && e$1 <= i$3.finallyLoc && (i$3 = null);
				var a$1 = i$3 ? i$3.completion : {};
				return a$1.type = t$6, a$1.arg = e$1, i$3 ? (this.method = "next", this.next = i$3.finallyLoc, y) : this.complete(a$1);
			},
			complete: function complete(t$6, e$1) {
				if ("throw" === t$6.type) throw t$6.arg;
				return "break" === t$6.type || "continue" === t$6.type ? this.next = t$6.arg : "return" === t$6.type ? (this.rval = this.arg = t$6.arg, this.method = "return", this.next = "end") : "normal" === t$6.type && e$1 && (this.next = e$1), y;
			},
			finish: function finish(t$6) {
				for (var e$1 = this.tryEntries.length - 1; e$1 >= 0; --e$1) {
					var r$1 = this.tryEntries[e$1];
					if (r$1.finallyLoc === t$6) return this.complete(r$1.completion, r$1.afterLoc), resetTryEntry(r$1), y;
				}
			},
			"catch": function _catch(t$6) {
				for (var e$1 = this.tryEntries.length - 1; e$1 >= 0; --e$1) {
					var r$1 = this.tryEntries[e$1];
					if (r$1.tryLoc === t$6) {
						var n$1 = r$1.completion;
						if ("throw" === n$1.type) {
							var o$1 = n$1.arg;
							resetTryEntry(r$1);
						}
						return o$1;
					}
				}
				throw Error("illegal catch attempt");
			},
			delegateYield: function delegateYield(e$1, r$1, n$1) {
				return this.delegate = {
					iterator: values(e$1),
					resultName: r$1,
					nextLoc: n$1
				}, "next" === this.method && (this.arg = t$5), y;
			}
		}, e;
	}
	module.exports = _regeneratorRuntime$4, module.exports.__esModule = true, module.exports["default"] = module.exports;
} });

//#endregion
//#region ../node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/regenerator/index.js
var require_regenerator = __commonJS({ "../node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/regenerator/index.js"(exports, module) {
	var runtime = require_regeneratorRuntime()();
	module.exports = runtime;
	try {
		regeneratorRuntime = runtime;
	} catch (accidentalStrictMode) {
		if (typeof globalThis === "object") globalThis.regeneratorRuntime = runtime;
else Function("r", "regeneratorRuntime = r")(runtime);
	}
} });

//#endregion
//#region ../node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/asyncToGenerator.js
var require_asyncToGenerator = __commonJS({ "../node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/asyncToGenerator.js"(exports, module) {
	function asyncGeneratorStep(n, t$5, e, r, o, a, c) {
		try {
			var i$2 = n[a](c), u$26 = i$2.value;
		} catch (n$1) {
			return void e(n$1);
		}
		i$2.done ? t$5(u$26) : Promise.resolve(u$26).then(r, o);
	}
	function _asyncToGenerator$4(n) {
		return function() {
			var t$5 = this, e = arguments;
			return new Promise(function(r, o) {
				var a = n.apply(t$5, e);
				function _next(n$1) {
					asyncGeneratorStep(a, r, o, _next, _throw, "next", n$1);
				}
				function _throw(n$1) {
					asyncGeneratorStep(a, r, o, _next, _throw, "throw", n$1);
				}
				_next(void 0);
			});
		};
	}
	module.exports = _asyncToGenerator$4, module.exports.__esModule = true, module.exports["default"] = module.exports;
} });

//#endregion
//#region ../node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/classCallCheck.js
var require_classCallCheck = __commonJS({ "../node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/classCallCheck.js"(exports, module) {
	function _classCallCheck$4(a, n) {
		if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
	}
	module.exports = _classCallCheck$4, module.exports.__esModule = true, module.exports["default"] = module.exports;
} });

//#endregion
//#region ../node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/assertThisInitialized.js
var require_assertThisInitialized = __commonJS({ "../node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/assertThisInitialized.js"(exports, module) {
	function _assertThisInitialized(e) {
		if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		return e;
	}
	module.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports["default"] = module.exports;
} });

//#endregion
//#region ../node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
var require_possibleConstructorReturn = __commonJS({ "../node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"(exports, module) {
	var _typeof = require_typeof()["default"];
	var assertThisInitialized = require_assertThisInitialized();
	function _possibleConstructorReturn$4(t$5, e) {
		if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
		if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
		return assertThisInitialized(t$5);
	}
	module.exports = _possibleConstructorReturn$4, module.exports.__esModule = true, module.exports["default"] = module.exports;
} });

//#endregion
//#region ../node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/getPrototypeOf.js
var require_getPrototypeOf = __commonJS({ "../node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/getPrototypeOf.js"(exports, module) {
	function _getPrototypeOf$4(t$5) {
		return module.exports = _getPrototypeOf$4 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t$6) {
			return t$6.__proto__ || Object.getPrototypeOf(t$6);
		}, module.exports.__esModule = true, module.exports["default"] = module.exports, _getPrototypeOf$4(t$5);
	}
	module.exports = _getPrototypeOf$4, module.exports.__esModule = true, module.exports["default"] = module.exports;
} });

//#endregion
//#region ../node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/setPrototypeOf.js
var require_setPrototypeOf = __commonJS({ "../node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/setPrototypeOf.js"(exports, module) {
	function _setPrototypeOf(t$5, e) {
		return module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t$6, e$1) {
			return t$6.__proto__ = e$1, t$6;
		}, module.exports.__esModule = true, module.exports["default"] = module.exports, _setPrototypeOf(t$5, e);
	}
	module.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
} });

//#endregion
//#region ../node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/inherits.js
var require_inherits = __commonJS({ "../node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/inherits.js"(exports, module) {
	var setPrototypeOf$2 = require_setPrototypeOf();
	function _inherits$4(t$5, e) {
		if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
		t$5.prototype = Object.create(e && e.prototype, { constructor: {
			value: t$5,
			writable: !0,
			configurable: !0
		} }), Object.defineProperty(t$5, "prototype", { writable: !1 }), e && setPrototypeOf$2(t$5, e);
	}
	module.exports = _inherits$4, module.exports.__esModule = true, module.exports["default"] = module.exports;
} });

//#endregion
//#region ../node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/isNativeFunction.js
var require_isNativeFunction = __commonJS({ "../node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/isNativeFunction.js"(exports, module) {
	function _isNativeFunction(t$5) {
		try {
			return -1 !== Function.toString.call(t$5).indexOf("[native code]");
		} catch (n) {
			return "function" == typeof t$5;
		}
	}
	module.exports = _isNativeFunction, module.exports.__esModule = true, module.exports["default"] = module.exports;
} });

//#endregion
//#region ../node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js
var require_isNativeReflectConstruct = __commonJS({ "../node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js"(exports, module) {
	function _isNativeReflectConstruct() {
		try {
			var t$5 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
		} catch (t$6) {}
		return (module.exports = _isNativeReflectConstruct = function _isNativeReflectConstruct$1() {
			return !!t$5;
		}, module.exports.__esModule = true, module.exports["default"] = module.exports)();
	}
	module.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports["default"] = module.exports;
} });

//#endregion
//#region ../node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/construct.js
var require_construct = __commonJS({ "../node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/construct.js"(exports, module) {
	var isNativeReflectConstruct = require_isNativeReflectConstruct();
	var setPrototypeOf$1 = require_setPrototypeOf();
	function _construct(t$5, e, r) {
		if (isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);
		var o = [null];
		o.push.apply(o, e);
		var p = new (t$5.bind.apply(t$5, o))();
		return r && setPrototypeOf$1(p, r.prototype), p;
	}
	module.exports = _construct, module.exports.__esModule = true, module.exports["default"] = module.exports;
} });

//#endregion
//#region ../node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/wrapNativeSuper.js
var require_wrapNativeSuper = __commonJS({ "../node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/wrapNativeSuper.js"(exports, module) {
	var getPrototypeOf = require_getPrototypeOf();
	var setPrototypeOf = require_setPrototypeOf();
	var isNativeFunction = require_isNativeFunction();
	var construct = require_construct();
	function _wrapNativeSuper$4(t$5) {
		var r = "function" == typeof Map ? new Map() : void 0;
		return module.exports = _wrapNativeSuper$4 = function _wrapNativeSuper$5(t$6) {
			if (null === t$6 || !isNativeFunction(t$6)) return t$6;
			if ("function" != typeof t$6) throw new TypeError("Super expression must either be null or a function");
			if (void 0 !== r) {
				if (r.has(t$6)) return r.get(t$6);
				r.set(t$6, Wrapper);
			}
			function Wrapper() {
				return construct(t$6, arguments, getPrototypeOf(this).constructor);
			}
			return Wrapper.prototype = Object.create(t$6.prototype, { constructor: {
				value: Wrapper,
				enumerable: !1,
				writable: !0,
				configurable: !0
			} }), setPrototypeOf(Wrapper, t$6);
		}, module.exports.__esModule = true, module.exports["default"] = module.exports, _wrapNativeSuper$4(t$5);
	}
	module.exports = _wrapNativeSuper$4, module.exports.__esModule = true, module.exports["default"] = module.exports;
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/fs/index.js
var require_fs$4 = __commonJS({ "../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/fs/index.js"(exports) {
	const u$12 = require_universalify().fromCallback;
	const fs$43 = require_graceful_fs();
	const api = [
		"access",
		"appendFile",
		"chmod",
		"chown",
		"close",
		"copyFile",
		"fchmod",
		"fchown",
		"fdatasync",
		"fstat",
		"fsync",
		"ftruncate",
		"futimes",
		"lchown",
		"lchmod",
		"link",
		"lstat",
		"mkdir",
		"mkdtemp",
		"open",
		"readFile",
		"readdir",
		"readlink",
		"realpath",
		"rename",
		"rmdir",
		"stat",
		"symlink",
		"truncate",
		"unlink",
		"utimes",
		"writeFile"
	].filter((key) => {
		return typeof fs$43[key] === "function";
	});
	Object.keys(fs$43).forEach((key) => {
		if (key === "promises") return;
		exports[key] = fs$43[key];
	});
	api.forEach((method) => {
		exports[method] = u$12(fs$43[method]);
	});
	exports.exists = function(filename, callback) {
		if (typeof callback === "function") return fs$43.exists(filename, callback);
		return new Promise((resolve$1) => {
			return fs$43.exists(filename, resolve$1);
		});
	};
	exports.read = function(fd, buffer$1, offset, length, position$1, callback) {
		if (typeof callback === "function") return fs$43.read(fd, buffer$1, offset, length, position$1, callback);
		return new Promise((resolve$1, reject) => {
			fs$43.read(fd, buffer$1, offset, length, position$1, (err, bytesRead, buffer$2) => {
				if (err) return reject(err);
				resolve$1({
					bytesRead,
					buffer: buffer$2
				});
			});
		});
	};
	exports.write = function(fd, buffer$1, ...args) {
		if (typeof args[args.length - 1] === "function") return fs$43.write(fd, buffer$1, ...args);
		return new Promise((resolve$1, reject) => {
			fs$43.write(fd, buffer$1, ...args, (err, bytesWritten, buffer$2) => {
				if (err) return reject(err);
				resolve$1({
					bytesWritten,
					buffer: buffer$2
				});
			});
		});
	};
	if (typeof fs$43.realpath.native === "function") exports.realpath.native = u$12(fs$43.realpath.native);
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/mkdirs/win32.js
var require_win32 = __commonJS({ "../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/mkdirs/win32.js"(exports, module) {
	const path$46 = require("path");
	function getRootPath(p) {
		p = path$46.normalize(path$46.resolve(p)).split(path$46.sep);
		if (p.length > 0) return p[0];
		return null;
	}
	const INVALID_PATH_CHARS = /[<>:"|?*]/;
	function invalidWin32Path$2(p) {
		const rp = getRootPath(p);
		p = p.replace(rp, "");
		return INVALID_PATH_CHARS.test(p);
	}
	module.exports = {
		getRootPath,
		invalidWin32Path: invalidWin32Path$2
	};
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/mkdirs/mkdirs.js
var require_mkdirs$1 = __commonJS({ "../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/mkdirs/mkdirs.js"(exports, module) {
	const fs$42 = require_graceful_fs();
	const path$45 = require("path");
	const invalidWin32Path$1 = require_win32().invalidWin32Path;
	const o777$1 = parseInt("0777", 8);
	function mkdirs$2(p, opts, callback, made) {
		if (typeof opts === "function") {
			callback = opts;
			opts = {};
		} else if (!opts || typeof opts !== "object") opts = { mode: opts };
		if (process.platform === "win32" && invalidWin32Path$1(p)) {
			const errInval = new Error(p + " contains invalid WIN32 path characters.");
			errInval.code = "EINVAL";
			return callback(errInval);
		}
		let mode = opts.mode;
		const xfs = opts.fs || fs$42;
		if (mode === undefined) mode = o777$1 & ~process.umask();
		if (!made) made = null;
		callback = callback || function() {};
		p = path$45.resolve(p);
		xfs.mkdir(p, mode, (er) => {
			if (!er) {
				made = made || p;
				return callback(null, made);
			}
			switch (er.code) {
				case "ENOENT":
					if (path$45.dirname(p) === p) return callback(er);
					mkdirs$2(path$45.dirname(p), opts, (er$1, made$1) => {
						if (er$1) callback(er$1, made$1);
else mkdirs$2(p, opts, callback, made$1);
					});
					break;
				default:
					xfs.stat(p, (er2, stat$5) => {
						if (er2 || !stat$5.isDirectory()) callback(er, made);
else callback(null, made);
					});
					break;
			}
		});
	}
	module.exports = mkdirs$2;
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/mkdirs/mkdirs-sync.js
var require_mkdirs_sync = __commonJS({ "../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/mkdirs/mkdirs-sync.js"(exports, module) {
	const fs$41 = require_graceful_fs();
	const path$44 = require("path");
	const invalidWin32Path = require_win32().invalidWin32Path;
	const o777 = parseInt("0777", 8);
	function mkdirsSync$2(p, opts, made) {
		if (!opts || typeof opts !== "object") opts = { mode: opts };
		let mode = opts.mode;
		const xfs = opts.fs || fs$41;
		if (process.platform === "win32" && invalidWin32Path(p)) {
			const errInval = new Error(p + " contains invalid WIN32 path characters.");
			errInval.code = "EINVAL";
			throw errInval;
		}
		if (mode === undefined) mode = o777 & ~process.umask();
		if (!made) made = null;
		p = path$44.resolve(p);
		try {
			xfs.mkdirSync(p, mode);
			made = made || p;
		} catch (err0) {
			if (err0.code === "ENOENT") {
				if (path$44.dirname(p) === p) throw err0;
				made = mkdirsSync$2(path$44.dirname(p), opts, made);
				mkdirsSync$2(p, opts, made);
			} else {
				let stat$5;
				try {
					stat$5 = xfs.statSync(p);
				} catch (err1) {
					throw err0;
				}
				if (!stat$5.isDirectory()) throw err0;
			}
		}
		return made;
	}
	module.exports = mkdirsSync$2;
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/mkdirs/index.js
var require_mkdirs = __commonJS({ "../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/mkdirs/index.js"(exports, module) {
	const u$11 = require_universalify().fromCallback;
	const mkdirs$1 = u$11(require_mkdirs$1());
	const mkdirsSync$1 = require_mkdirs_sync();
	module.exports = {
		mkdirs: mkdirs$1,
		mkdirsSync: mkdirsSync$1,
		mkdirp: mkdirs$1,
		mkdirpSync: mkdirsSync$1,
		ensureDir: mkdirs$1,
		ensureDirSync: mkdirsSync$1
	};
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/util/utimes.js
var require_utimes = __commonJS({ "../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/util/utimes.js"(exports, module) {
	const fs$40 = require_graceful_fs();
	const os$2 = require("os");
	const path$43 = require("path");
	function hasMillisResSync() {
		let tmpfile = path$43.join("millis-test-sync" + Date.now().toString() + Math.random().toString().slice(2));
		tmpfile = path$43.join(os$2.tmpdir(), tmpfile);
		const d = new Date(1435410243862);
		fs$40.writeFileSync(tmpfile, "https://github.com/jprichardson/node-fs-extra/pull/141");
		const fd = fs$40.openSync(tmpfile, "r+");
		fs$40.futimesSync(fd, d, d);
		fs$40.closeSync(fd);
		return fs$40.statSync(tmpfile).mtime > 1435410243e3;
	}
	function hasMillisRes(callback) {
		let tmpfile = path$43.join("millis-test" + Date.now().toString() + Math.random().toString().slice(2));
		tmpfile = path$43.join(os$2.tmpdir(), tmpfile);
		const d = new Date(1435410243862);
		fs$40.writeFile(tmpfile, "https://github.com/jprichardson/node-fs-extra/pull/141", (err) => {
			if (err) return callback(err);
			fs$40.open(tmpfile, "r+", (err$1, fd) => {
				if (err$1) return callback(err$1);
				fs$40.futimes(fd, d, d, (err$2) => {
					if (err$2) return callback(err$2);
					fs$40.close(fd, (err$3) => {
						if (err$3) return callback(err$3);
						fs$40.stat(tmpfile, (err$4, stats) => {
							if (err$4) return callback(err$4);
							callback(null, stats.mtime > 1435410243e3);
						});
					});
				});
			});
		});
	}
	function timeRemoveMillis(timestamp) {
		if (typeof timestamp === "number") return Math.floor(timestamp / 1e3) * 1e3;
else if (timestamp instanceof Date) return new Date(Math.floor(timestamp.getTime() / 1e3) * 1e3);
else throw new Error("fs-extra: timeRemoveMillis() unknown parameter type");
	}
	function utimesMillis(path$72, atime, mtime, callback) {
		fs$40.open(path$72, "r+", (err, fd) => {
			if (err) return callback(err);
			fs$40.futimes(fd, atime, mtime, (futimesErr) => {
				fs$40.close(fd, (closeErr) => {
					if (callback) callback(futimesErr || closeErr);
				});
			});
		});
	}
	function utimesMillisSync(path$72, atime, mtime) {
		const fd = fs$40.openSync(path$72, "r+");
		fs$40.futimesSync(fd, atime, mtime);
		return fs$40.closeSync(fd);
	}
	module.exports = {
		hasMillisRes,
		hasMillisResSync,
		timeRemoveMillis,
		utimesMillis,
		utimesMillisSync
	};
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/util/stat.js
var require_stat = __commonJS({ "../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/util/stat.js"(exports, module) {
	const fs$39 = require_graceful_fs();
	const path$42 = require("path");
	const NODE_VERSION_MAJOR_WITH_BIGINT = 10;
	const NODE_VERSION_MINOR_WITH_BIGINT = 5;
	const NODE_VERSION_PATCH_WITH_BIGINT = 0;
	const nodeVersion = process.versions.node.split(".");
	const nodeVersionMajor = Number.parseInt(nodeVersion[0], 10);
	const nodeVersionMinor = Number.parseInt(nodeVersion[1], 10);
	const nodeVersionPatch = Number.parseInt(nodeVersion[2], 10);
	function nodeSupportsBigInt() {
		if (nodeVersionMajor > NODE_VERSION_MAJOR_WITH_BIGINT) return true;
else if (nodeVersionMajor === NODE_VERSION_MAJOR_WITH_BIGINT) {
			if (nodeVersionMinor > NODE_VERSION_MINOR_WITH_BIGINT) return true;
else if (nodeVersionMinor === NODE_VERSION_MINOR_WITH_BIGINT) {
				if (nodeVersionPatch >= NODE_VERSION_PATCH_WITH_BIGINT) return true;
			}
		}
		return false;
	}
	function getStats$2(src$1, dest, cb) {
		if (nodeSupportsBigInt()) fs$39.stat(src$1, { bigint: true }, (err, srcStat) => {
			if (err) return cb(err);
			fs$39.stat(dest, { bigint: true }, (err$1, destStat) => {
				if (err$1) {
					if (err$1.code === "ENOENT") return cb(null, {
						srcStat,
						destStat: null
					});
					return cb(err$1);
				}
				return cb(null, {
					srcStat,
					destStat
				});
			});
		});
else fs$39.stat(src$1, (err, srcStat) => {
			if (err) return cb(err);
			fs$39.stat(dest, (err$1, destStat) => {
				if (err$1) {
					if (err$1.code === "ENOENT") return cb(null, {
						srcStat,
						destStat: null
					});
					return cb(err$1);
				}
				return cb(null, {
					srcStat,
					destStat
				});
			});
		});
	}
	function getStatsSync(src$1, dest) {
		let srcStat, destStat;
		if (nodeSupportsBigInt()) srcStat = fs$39.statSync(src$1, { bigint: true });
else srcStat = fs$39.statSync(src$1);
		try {
			if (nodeSupportsBigInt()) destStat = fs$39.statSync(dest, { bigint: true });
else destStat = fs$39.statSync(dest);
		} catch (err) {
			if (err.code === "ENOENT") return {
				srcStat,
				destStat: null
			};
			throw err;
		}
		return {
			srcStat,
			destStat
		};
	}
	function checkPaths(src$1, dest, funcName, cb) {
		getStats$2(src$1, dest, (err, stats) => {
			if (err) return cb(err);
			const { srcStat, destStat } = stats;
			if (destStat && destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev) return cb(new Error("Source and destination must not be the same."));
			if (srcStat.isDirectory() && isSrcSubdir(src$1, dest)) return cb(new Error(errMsg(src$1, dest, funcName)));
			return cb(null, {
				srcStat,
				destStat
			});
		});
	}
	function checkPathsSync(src$1, dest, funcName) {
		const { srcStat, destStat } = getStatsSync(src$1, dest);
		if (destStat && destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev) throw new Error("Source and destination must not be the same.");
		if (srcStat.isDirectory() && isSrcSubdir(src$1, dest)) throw new Error(errMsg(src$1, dest, funcName));
		return {
			srcStat,
			destStat
		};
	}
	function checkParentPaths(src$1, srcStat, dest, funcName, cb) {
		const srcParent = path$42.resolve(path$42.dirname(src$1));
		const destParent = path$42.resolve(path$42.dirname(dest));
		if (destParent === srcParent || destParent === path$42.parse(destParent).root) return cb();
		if (nodeSupportsBigInt()) fs$39.stat(destParent, { bigint: true }, (err, destStat) => {
			if (err) {
				if (err.code === "ENOENT") return cb();
				return cb(err);
			}
			if (destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev) return cb(new Error(errMsg(src$1, dest, funcName)));
			return checkParentPaths(src$1, srcStat, destParent, funcName, cb);
		});
else fs$39.stat(destParent, (err, destStat) => {
			if (err) {
				if (err.code === "ENOENT") return cb();
				return cb(err);
			}
			if (destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev) return cb(new Error(errMsg(src$1, dest, funcName)));
			return checkParentPaths(src$1, srcStat, destParent, funcName, cb);
		});
	}
	function checkParentPathsSync(src$1, srcStat, dest, funcName) {
		const srcParent = path$42.resolve(path$42.dirname(src$1));
		const destParent = path$42.resolve(path$42.dirname(dest));
		if (destParent === srcParent || destParent === path$42.parse(destParent).root) return;
		let destStat;
		try {
			if (nodeSupportsBigInt()) destStat = fs$39.statSync(destParent, { bigint: true });
else destStat = fs$39.statSync(destParent);
		} catch (err) {
			if (err.code === "ENOENT") return;
			throw err;
		}
		if (destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev) throw new Error(errMsg(src$1, dest, funcName));
		return checkParentPathsSync(src$1, srcStat, destParent, funcName);
	}
	function isSrcSubdir(src$1, dest) {
		const srcArr = path$42.resolve(src$1).split(path$42.sep).filter((i$2) => i$2);
		const destArr = path$42.resolve(dest).split(path$42.sep).filter((i$2) => i$2);
		return srcArr.reduce((acc, cur, i$2) => acc && destArr[i$2] === cur, true);
	}
	function errMsg(src$1, dest, funcName) {
		return `Cannot ${funcName} '${src$1}' to a subdirectory of itself, '${dest}'.`;
	}
	module.exports = {
		checkPaths,
		checkPathsSync,
		checkParentPaths,
		checkParentPathsSync,
		isSrcSubdir
	};
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/util/buffer.js
var require_buffer = __commonJS({ "../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/util/buffer.js"(exports, module) {
	module.exports = function(size) {
		if (typeof Buffer.allocUnsafe === "function") try {
			return Buffer.allocUnsafe(size);
		} catch (e) {
			return new Buffer(size);
		}
		return new Buffer(size);
	};
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/copy-sync/copy-sync.js
var require_copy_sync$1 = __commonJS({ "../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/copy-sync/copy-sync.js"(exports, module) {
	const fs$38 = require_graceful_fs();
	const path$41 = require("path");
	const mkdirpSync$1 = require_mkdirs().mkdirsSync;
	const utimesSync = require_utimes().utimesMillisSync;
	const stat$4 = require_stat();
	function copySync$1(src$1, dest, opts) {
		if (typeof opts === "function") opts = { filter: opts };
		opts = opts || {};
		opts.clobber = "clobber" in opts ? !!opts.clobber : true;
		opts.overwrite = "overwrite" in opts ? !!opts.overwrite : opts.clobber;
		if (opts.preserveTimestamps && process.arch === "ia32") console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\n
    see https://github.com/jprichardson/node-fs-extra/issues/269`);
		const { srcStat, destStat } = stat$4.checkPathsSync(src$1, dest, "copy");
		stat$4.checkParentPathsSync(src$1, srcStat, dest, "copy");
		return handleFilterAndCopy(destStat, src$1, dest, opts);
	}
	function handleFilterAndCopy(destStat, src$1, dest, opts) {
		if (opts.filter && !opts.filter(src$1, dest)) return;
		const destParent = path$41.dirname(dest);
		if (!fs$38.existsSync(destParent)) mkdirpSync$1(destParent);
		return startCopy$1(destStat, src$1, dest, opts);
	}
	function startCopy$1(destStat, src$1, dest, opts) {
		if (opts.filter && !opts.filter(src$1, dest)) return;
		return getStats$1(destStat, src$1, dest, opts);
	}
	function getStats$1(destStat, src$1, dest, opts) {
		const statSync$1 = opts.dereference ? fs$38.statSync : fs$38.lstatSync;
		const srcStat = statSync$1(src$1);
		if (srcStat.isDirectory()) return onDir$1(srcStat, destStat, src$1, dest, opts);
else if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice()) return onFile$1(srcStat, destStat, src$1, dest, opts);
else if (srcStat.isSymbolicLink()) return onLink$1(destStat, src$1, dest, opts);
	}
	function onFile$1(srcStat, destStat, src$1, dest, opts) {
		if (!destStat) return copyFile$1(srcStat, src$1, dest, opts);
		return mayCopyFile$1(srcStat, src$1, dest, opts);
	}
	function mayCopyFile$1(srcStat, src$1, dest, opts) {
		if (opts.overwrite) {
			fs$38.unlinkSync(dest);
			return copyFile$1(srcStat, src$1, dest, opts);
		} else if (opts.errorOnExist) throw new Error(`'${dest}' already exists`);
	}
	function copyFile$1(srcStat, src$1, dest, opts) {
		if (typeof fs$38.copyFileSync === "function") {
			fs$38.copyFileSync(src$1, dest);
			fs$38.chmodSync(dest, srcStat.mode);
			if (opts.preserveTimestamps) return utimesSync(dest, srcStat.atime, srcStat.mtime);
			return;
		}
		return copyFileFallback$1(srcStat, src$1, dest, opts);
	}
	function copyFileFallback$1(srcStat, src$1, dest, opts) {
		const BUF_LENGTH = 65536;
		const _buff = require_buffer()(BUF_LENGTH);
		const fdr = fs$38.openSync(src$1, "r");
		const fdw = fs$38.openSync(dest, "w", srcStat.mode);
		let pos = 0;
		while (pos < srcStat.size) {
			const bytesRead = fs$38.readSync(fdr, _buff, 0, BUF_LENGTH, pos);
			fs$38.writeSync(fdw, _buff, 0, bytesRead);
			pos += bytesRead;
		}
		if (opts.preserveTimestamps) fs$38.futimesSync(fdw, srcStat.atime, srcStat.mtime);
		fs$38.closeSync(fdr);
		fs$38.closeSync(fdw);
	}
	function onDir$1(srcStat, destStat, src$1, dest, opts) {
		if (!destStat) return mkDirAndCopy$1(srcStat, src$1, dest, opts);
		if (destStat && !destStat.isDirectory()) throw new Error(`Cannot overwrite non-directory '${dest}' with directory '${src$1}'.`);
		return copyDir$1(src$1, dest, opts);
	}
	function mkDirAndCopy$1(srcStat, src$1, dest, opts) {
		fs$38.mkdirSync(dest);
		copyDir$1(src$1, dest, opts);
		return fs$38.chmodSync(dest, srcStat.mode);
	}
	function copyDir$1(src$1, dest, opts) {
		fs$38.readdirSync(src$1).forEach((item) => copyDirItem$1(item, src$1, dest, opts));
	}
	function copyDirItem$1(item, src$1, dest, opts) {
		const srcItem = path$41.join(src$1, item);
		const destItem = path$41.join(dest, item);
		const { destStat } = stat$4.checkPathsSync(srcItem, destItem, "copy");
		return startCopy$1(destStat, srcItem, destItem, opts);
	}
	function onLink$1(destStat, src$1, dest, opts) {
		let resolvedSrc = fs$38.readlinkSync(src$1);
		if (opts.dereference) resolvedSrc = path$41.resolve(process.cwd(), resolvedSrc);
		if (!destStat) return fs$38.symlinkSync(resolvedSrc, dest);
else {
			let resolvedDest;
			try {
				resolvedDest = fs$38.readlinkSync(dest);
			} catch (err) {
				if (err.code === "EINVAL" || err.code === "UNKNOWN") return fs$38.symlinkSync(resolvedSrc, dest);
				throw err;
			}
			if (opts.dereference) resolvedDest = path$41.resolve(process.cwd(), resolvedDest);
			if (stat$4.isSrcSubdir(resolvedSrc, resolvedDest)) throw new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`);
			if (fs$38.statSync(dest).isDirectory() && stat$4.isSrcSubdir(resolvedDest, resolvedSrc)) throw new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`);
			return copyLink$1(resolvedSrc, dest);
		}
	}
	function copyLink$1(resolvedSrc, dest) {
		fs$38.unlinkSync(dest);
		return fs$38.symlinkSync(resolvedSrc, dest);
	}
	module.exports = copySync$1;
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/copy-sync/index.js
var require_copy_sync = __commonJS({ "../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/copy-sync/index.js"(exports, module) {
	module.exports = { copySync: require_copy_sync$1() };
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/path-exists/index.js
var require_path_exists$1 = __commonJS({ "../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/path-exists/index.js"(exports, module) {
	const u$10 = require_universalify().fromPromise;
	const fs$37 = require_fs$4();
	function pathExists$9(path$72) {
		return fs$37.access(path$72).then(() => true).catch(() => false);
	}
	module.exports = {
		pathExists: u$10(pathExists$9),
		pathExistsSync: fs$37.existsSync
	};
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/copy/copy.js
var require_copy$1 = __commonJS({ "../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/copy/copy.js"(exports, module) {
	const fs$36 = require_graceful_fs();
	const path$40 = require("path");
	const mkdirp$1 = require_mkdirs().mkdirs;
	const pathExists$8 = require_path_exists$1().pathExists;
	const utimes = require_utimes().utimesMillis;
	const stat$3 = require_stat();
	function copy$1(src$1, dest, opts, cb) {
		if (typeof opts === "function" && !cb) {
			cb = opts;
			opts = {};
		} else if (typeof opts === "function") opts = { filter: opts };
		cb = cb || function() {};
		opts = opts || {};
		opts.clobber = "clobber" in opts ? !!opts.clobber : true;
		opts.overwrite = "overwrite" in opts ? !!opts.overwrite : opts.clobber;
		if (opts.preserveTimestamps && process.arch === "ia32") console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\n
    see https://github.com/jprichardson/node-fs-extra/issues/269`);
		stat$3.checkPaths(src$1, dest, "copy", (err, stats) => {
			if (err) return cb(err);
			const { srcStat, destStat } = stats;
			stat$3.checkParentPaths(src$1, srcStat, dest, "copy", (err$1) => {
				if (err$1) return cb(err$1);
				if (opts.filter) return handleFilter(checkParentDir, destStat, src$1, dest, opts, cb);
				return checkParentDir(destStat, src$1, dest, opts, cb);
			});
		});
	}
	function checkParentDir(destStat, src$1, dest, opts, cb) {
		const destParent = path$40.dirname(dest);
		pathExists$8(destParent, (err, dirExists) => {
			if (err) return cb(err);
			if (dirExists) return startCopy(destStat, src$1, dest, opts, cb);
			mkdirp$1(destParent, (err$1) => {
				if (err$1) return cb(err$1);
				return startCopy(destStat, src$1, dest, opts, cb);
			});
		});
	}
	function handleFilter(onInclude, destStat, src$1, dest, opts, cb) {
		Promise.resolve(opts.filter(src$1, dest)).then((include) => {
			if (include) return onInclude(destStat, src$1, dest, opts, cb);
			return cb();
		}, (error$2) => cb(error$2));
	}
	function startCopy(destStat, src$1, dest, opts, cb) {
		if (opts.filter) return handleFilter(getStats, destStat, src$1, dest, opts, cb);
		return getStats(destStat, src$1, dest, opts, cb);
	}
	function getStats(destStat, src$1, dest, opts, cb) {
		const stat$5 = opts.dereference ? fs$36.stat : fs$36.lstat;
		stat$5(src$1, (err, srcStat) => {
			if (err) return cb(err);
			if (srcStat.isDirectory()) return onDir(srcStat, destStat, src$1, dest, opts, cb);
else if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice()) return onFile(srcStat, destStat, src$1, dest, opts, cb);
else if (srcStat.isSymbolicLink()) return onLink(destStat, src$1, dest, opts, cb);
		});
	}
	function onFile(srcStat, destStat, src$1, dest, opts, cb) {
		if (!destStat) return copyFile(srcStat, src$1, dest, opts, cb);
		return mayCopyFile(srcStat, src$1, dest, opts, cb);
	}
	function mayCopyFile(srcStat, src$1, dest, opts, cb) {
		if (opts.overwrite) fs$36.unlink(dest, (err) => {
			if (err) return cb(err);
			return copyFile(srcStat, src$1, dest, opts, cb);
		});
else if (opts.errorOnExist) return cb(new Error(`'${dest}' already exists`));
else return cb();
	}
	function copyFile(srcStat, src$1, dest, opts, cb) {
		if (typeof fs$36.copyFile === "function") return fs$36.copyFile(src$1, dest, (err) => {
			if (err) return cb(err);
			return setDestModeAndTimestamps(srcStat, dest, opts, cb);
		});
		return copyFileFallback(srcStat, src$1, dest, opts, cb);
	}
	function copyFileFallback(srcStat, src$1, dest, opts, cb) {
		const rs = fs$36.createReadStream(src$1);
		rs.on("error", (err) => cb(err)).once("open", () => {
			const ws = fs$36.createWriteStream(dest, { mode: srcStat.mode });
			ws.on("error", (err) => cb(err)).on("open", () => rs.pipe(ws)).once("close", () => setDestModeAndTimestamps(srcStat, dest, opts, cb));
		});
	}
	function setDestModeAndTimestamps(srcStat, dest, opts, cb) {
		fs$36.chmod(dest, srcStat.mode, (err) => {
			if (err) return cb(err);
			if (opts.preserveTimestamps) return utimes(dest, srcStat.atime, srcStat.mtime, cb);
			return cb();
		});
	}
	function onDir(srcStat, destStat, src$1, dest, opts, cb) {
		if (!destStat) return mkDirAndCopy(srcStat, src$1, dest, opts, cb);
		if (destStat && !destStat.isDirectory()) return cb(new Error(`Cannot overwrite non-directory '${dest}' with directory '${src$1}'.`));
		return copyDir(src$1, dest, opts, cb);
	}
	function mkDirAndCopy(srcStat, src$1, dest, opts, cb) {
		fs$36.mkdir(dest, (err) => {
			if (err) return cb(err);
			copyDir(src$1, dest, opts, (err$1) => {
				if (err$1) return cb(err$1);
				return fs$36.chmod(dest, srcStat.mode, cb);
			});
		});
	}
	function copyDir(src$1, dest, opts, cb) {
		fs$36.readdir(src$1, (err, items) => {
			if (err) return cb(err);
			return copyDirItems(items, src$1, dest, opts, cb);
		});
	}
	function copyDirItems(items, src$1, dest, opts, cb) {
		const item = items.pop();
		if (!item) return cb();
		return copyDirItem(items, item, src$1, dest, opts, cb);
	}
	function copyDirItem(items, item, src$1, dest, opts, cb) {
		const srcItem = path$40.join(src$1, item);
		const destItem = path$40.join(dest, item);
		stat$3.checkPaths(srcItem, destItem, "copy", (err, stats) => {
			if (err) return cb(err);
			const { destStat } = stats;
			startCopy(destStat, srcItem, destItem, opts, (err$1) => {
				if (err$1) return cb(err$1);
				return copyDirItems(items, src$1, dest, opts, cb);
			});
		});
	}
	function onLink(destStat, src$1, dest, opts, cb) {
		fs$36.readlink(src$1, (err, resolvedSrc) => {
			if (err) return cb(err);
			if (opts.dereference) resolvedSrc = path$40.resolve(process.cwd(), resolvedSrc);
			if (!destStat) return fs$36.symlink(resolvedSrc, dest, cb);
else fs$36.readlink(dest, (err$1, resolvedDest) => {
				if (err$1) {
					if (err$1.code === "EINVAL" || err$1.code === "UNKNOWN") return fs$36.symlink(resolvedSrc, dest, cb);
					return cb(err$1);
				}
				if (opts.dereference) resolvedDest = path$40.resolve(process.cwd(), resolvedDest);
				if (stat$3.isSrcSubdir(resolvedSrc, resolvedDest)) return cb(new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`));
				if (destStat.isDirectory() && stat$3.isSrcSubdir(resolvedDest, resolvedSrc)) return cb(new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`));
				return copyLink(resolvedSrc, dest, cb);
			});
		});
	}
	function copyLink(resolvedSrc, dest, cb) {
		fs$36.unlink(dest, (err) => {
			if (err) return cb(err);
			return fs$36.symlink(resolvedSrc, dest, cb);
		});
	}
	module.exports = copy$1;
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/copy/index.js
var require_copy = __commonJS({ "../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/copy/index.js"(exports, module) {
	const u$9 = require_universalify().fromCallback;
	module.exports = { copy: u$9(require_copy$1()) };
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/remove/rimraf.js
var require_rimraf = __commonJS({ "../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/remove/rimraf.js"(exports, module) {
	const fs$35 = require_graceful_fs();
	const path$39 = require("path");
	const assert$1 = require("assert");
	const isWindows$1 = process.platform === "win32";
	function defaults(options) {
		const methods = [
			"unlink",
			"chmod",
			"stat",
			"lstat",
			"rmdir",
			"readdir"
		];
		methods.forEach((m) => {
			options[m] = options[m] || fs$35[m];
			m = m + "Sync";
			options[m] = options[m] || fs$35[m];
		});
		options.maxBusyTries = options.maxBusyTries || 3;
	}
	function rimraf$1(p, options, cb) {
		let busyTries = 0;
		if (typeof options === "function") {
			cb = options;
			options = {};
		}
		assert$1(p, "rimraf: missing path");
		assert$1.strictEqual(typeof p, "string", "rimraf: path should be a string");
		assert$1.strictEqual(typeof cb, "function", "rimraf: callback function required");
		assert$1(options, "rimraf: invalid options argument provided");
		assert$1.strictEqual(typeof options, "object", "rimraf: options should be object");
		defaults(options);
		rimraf_(p, options, function CB(er) {
			if (er) {
				if ((er.code === "EBUSY" || er.code === "ENOTEMPTY" || er.code === "EPERM") && busyTries < options.maxBusyTries) {
					busyTries++;
					const time = busyTries * 100;
					return setTimeout(() => rimraf_(p, options, CB), time);
				}
				if (er.code === "ENOENT") er = null;
			}
			cb(er);
		});
	}
	function rimraf_(p, options, cb) {
		assert$1(p);
		assert$1(options);
		assert$1(typeof cb === "function");
		options.lstat(p, (er, st) => {
			if (er && er.code === "ENOENT") return cb(null);
			if (er && er.code === "EPERM" && isWindows$1) return fixWinEPERM(p, options, er, cb);
			if (st && st.isDirectory()) return rmdir(p, options, er, cb);
			options.unlink(p, (er$1) => {
				if (er$1) {
					if (er$1.code === "ENOENT") return cb(null);
					if (er$1.code === "EPERM") return isWindows$1 ? fixWinEPERM(p, options, er$1, cb) : rmdir(p, options, er$1, cb);
					if (er$1.code === "EISDIR") return rmdir(p, options, er$1, cb);
				}
				return cb(er$1);
			});
		});
	}
	function fixWinEPERM(p, options, er, cb) {
		assert$1(p);
		assert$1(options);
		assert$1(typeof cb === "function");
		if (er) assert$1(er instanceof Error);
		options.chmod(p, 438, (er2) => {
			if (er2) cb(er2.code === "ENOENT" ? null : er);
else options.stat(p, (er3, stats) => {
				if (er3) cb(er3.code === "ENOENT" ? null : er);
else if (stats.isDirectory()) rmdir(p, options, er, cb);
else options.unlink(p, cb);
			});
		});
	}
	function fixWinEPERMSync(p, options, er) {
		let stats;
		assert$1(p);
		assert$1(options);
		if (er) assert$1(er instanceof Error);
		try {
			options.chmodSync(p, 438);
		} catch (er2) {
			if (er2.code === "ENOENT") return;
else throw er;
		}
		try {
			stats = options.statSync(p);
		} catch (er3) {
			if (er3.code === "ENOENT") return;
else throw er;
		}
		if (stats.isDirectory()) rmdirSync(p, options, er);
else options.unlinkSync(p);
	}
	function rmdir(p, options, originalEr, cb) {
		assert$1(p);
		assert$1(options);
		if (originalEr) assert$1(originalEr instanceof Error);
		assert$1(typeof cb === "function");
		options.rmdir(p, (er) => {
			if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")) rmkids(p, options, cb);
else if (er && er.code === "ENOTDIR") cb(originalEr);
else cb(er);
		});
	}
	function rmkids(p, options, cb) {
		assert$1(p);
		assert$1(options);
		assert$1(typeof cb === "function");
		options.readdir(p, (er, files) => {
			if (er) return cb(er);
			let n = files.length;
			let errState;
			if (n === 0) return options.rmdir(p, cb);
			files.forEach((f) => {
				rimraf$1(path$39.join(p, f), options, (er$1) => {
					if (errState) return;
					if (er$1) return cb(errState = er$1);
					if (--n === 0) options.rmdir(p, cb);
				});
			});
		});
	}
	function rimrafSync(p, options) {
		let st;
		options = options || {};
		defaults(options);
		assert$1(p, "rimraf: missing path");
		assert$1.strictEqual(typeof p, "string", "rimraf: path should be a string");
		assert$1(options, "rimraf: missing options");
		assert$1.strictEqual(typeof options, "object", "rimraf: options should be object");
		try {
			st = options.lstatSync(p);
		} catch (er) {
			if (er.code === "ENOENT") return;
			if (er.code === "EPERM" && isWindows$1) fixWinEPERMSync(p, options, er);
		}
		try {
			if (st && st.isDirectory()) rmdirSync(p, options, null);
else options.unlinkSync(p);
		} catch (er) {
			if (er.code === "ENOENT") return;
else if (er.code === "EPERM") return isWindows$1 ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er);
else if (er.code !== "EISDIR") throw er;
			rmdirSync(p, options, er);
		}
	}
	function rmdirSync(p, options, originalEr) {
		assert$1(p);
		assert$1(options);
		if (originalEr) assert$1(originalEr instanceof Error);
		try {
			options.rmdirSync(p);
		} catch (er) {
			if (er.code === "ENOTDIR") throw originalEr;
else if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM") rmkidsSync(p, options);
else if (er.code !== "ENOENT") throw er;
		}
	}
	function rmkidsSync(p, options) {
		assert$1(p);
		assert$1(options);
		options.readdirSync(p).forEach((f) => rimrafSync(path$39.join(p, f), options));
		if (isWindows$1) {
			const startTime = Date.now();
			do 
				try {
					const ret = options.rmdirSync(p, options);
					return ret;
				} catch (er) {}
			while (Date.now() - startTime < 500);
		} else {
			const ret = options.rmdirSync(p, options);
			return ret;
		}
	}
	module.exports = rimraf$1;
	rimraf$1.sync = rimrafSync;
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/remove/index.js
var require_remove = __commonJS({ "../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/remove/index.js"(exports, module) {
	const u$8 = require_universalify().fromCallback;
	const rimraf = require_rimraf();
	module.exports = {
		remove: u$8(rimraf),
		removeSync: rimraf.sync
	};
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/empty/index.js
var require_empty = __commonJS({ "../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/empty/index.js"(exports, module) {
	const u$7 = require_universalify().fromCallback;
	const fs$34 = require_graceful_fs();
	const path$38 = require("path");
	const mkdir$5 = require_mkdirs();
	const remove$1 = require_remove();
	const emptyDir = u$7(function emptyDir$2(dir, callback) {
		callback = callback || function() {};
		fs$34.readdir(dir, (err, items) => {
			if (err) return mkdir$5.mkdirs(dir, callback);
			items = items.map((item) => path$38.join(dir, item));
			deleteItem();
			function deleteItem() {
				const item = items.pop();
				if (!item) return callback();
				remove$1.remove(item, (err$1) => {
					if (err$1) return callback(err$1);
					deleteItem();
				});
			}
		});
	});
	function emptyDirSync(dir) {
		let items;
		try {
			items = fs$34.readdirSync(dir);
		} catch (err) {
			return mkdir$5.mkdirsSync(dir);
		}
		items.forEach((item) => {
			item = path$38.join(dir, item);
			remove$1.removeSync(item);
		});
	}
	module.exports = {
		emptyDirSync,
		emptydirSync: emptyDirSync,
		emptyDir,
		emptydir: emptyDir
	};
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/ensure/file.js
var require_file = __commonJS({ "../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/ensure/file.js"(exports, module) {
	const u$6 = require_universalify().fromCallback;
	const path$37 = require("path");
	const fs$33 = require_graceful_fs();
	const mkdir$4 = require_mkdirs();
	const pathExists$7 = require_path_exists$1().pathExists;
	function createFile(file$2, callback) {
		function makeFile() {
			fs$33.writeFile(file$2, "", (err) => {
				if (err) return callback(err);
				callback();
			});
		}
		fs$33.stat(file$2, (err, stats) => {
			if (!err && stats.isFile()) return callback();
			const dir = path$37.dirname(file$2);
			pathExists$7(dir, (err$1, dirExists) => {
				if (err$1) return callback(err$1);
				if (dirExists) return makeFile();
				mkdir$4.mkdirs(dir, (err$2) => {
					if (err$2) return callback(err$2);
					makeFile();
				});
			});
		});
	}
	function createFileSync(file$2) {
		let stats;
		try {
			stats = fs$33.statSync(file$2);
		} catch (e) {}
		if (stats && stats.isFile()) return;
		const dir = path$37.dirname(file$2);
		if (!fs$33.existsSync(dir)) mkdir$4.mkdirsSync(dir);
		fs$33.writeFileSync(file$2, "");
	}
	module.exports = {
		createFile: u$6(createFile),
		createFileSync
	};
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/ensure/link.js
var require_link = __commonJS({ "../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/ensure/link.js"(exports, module) {
	const u$5 = require_universalify().fromCallback;
	const path$36 = require("path");
	const fs$32 = require_graceful_fs();
	const mkdir$3 = require_mkdirs();
	const pathExists$6 = require_path_exists$1().pathExists;
	function createLink(srcpath, dstpath, callback) {
		function makeLink(srcpath$1, dstpath$1) {
			fs$32.link(srcpath$1, dstpath$1, (err) => {
				if (err) return callback(err);
				callback(null);
			});
		}
		pathExists$6(dstpath, (err, destinationExists) => {
			if (err) return callback(err);
			if (destinationExists) return callback(null);
			fs$32.lstat(srcpath, (err$1) => {
				if (err$1) {
					err$1.message = err$1.message.replace("lstat", "ensureLink");
					return callback(err$1);
				}
				const dir = path$36.dirname(dstpath);
				pathExists$6(dir, (err$2, dirExists) => {
					if (err$2) return callback(err$2);
					if (dirExists) return makeLink(srcpath, dstpath);
					mkdir$3.mkdirs(dir, (err$3) => {
						if (err$3) return callback(err$3);
						makeLink(srcpath, dstpath);
					});
				});
			});
		});
	}
	function createLinkSync(srcpath, dstpath) {
		const destinationExists = fs$32.existsSync(dstpath);
		if (destinationExists) return undefined;
		try {
			fs$32.lstatSync(srcpath);
		} catch (err) {
			err.message = err.message.replace("lstat", "ensureLink");
			throw err;
		}
		const dir = path$36.dirname(dstpath);
		const dirExists = fs$32.existsSync(dir);
		if (dirExists) return fs$32.linkSync(srcpath, dstpath);
		mkdir$3.mkdirsSync(dir);
		return fs$32.linkSync(srcpath, dstpath);
	}
	module.exports = {
		createLink: u$5(createLink),
		createLinkSync
	};
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/ensure/symlink-paths.js
var require_symlink_paths = __commonJS({ "../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/ensure/symlink-paths.js"(exports, module) {
	const path$35 = require("path");
	const fs$31 = require_graceful_fs();
	const pathExists$5 = require_path_exists$1().pathExists;
	/**
	* Function that returns two types of paths, one relative to symlink, and one
	* relative to the current working directory. Checks if path is absolute or
	* relative. If the path is relative, this function checks if the path is
	* relative to symlink or relative to current working directory. This is an
	* initiative to find a smarter `srcpath` to supply when building symlinks.
	* This allows you to determine which path to use out of one of three possible
	* types of source paths. The first is an absolute path. This is detected by
	* `path.isAbsolute()`. When an absolute path is provided, it is checked to
	* see if it exists. If it does it's used, if not an error is returned
	* (callback)/ thrown (sync). The other two options for `srcpath` are a
	* relative url. By default Node's `fs.symlink` works by creating a symlink
	* using `dstpath` and expects the `srcpath` to be relative to the newly
	* created symlink. If you provide a `srcpath` that does not exist on the file
	* system it results in a broken symlink. To minimize this, the function
	* checks to see if the 'relative to symlink' source file exists, and if it
	* does it will use it. If it does not, it checks if there's a file that
	* exists that is relative to the current working directory, if does its used.
	* This preserves the expectations of the original fs.symlink spec and adds
	* the ability to pass in `relative to current working direcotry` paths.
	*/
	function symlinkPaths$1(srcpath, dstpath, callback) {
		if (path$35.isAbsolute(srcpath)) return fs$31.lstat(srcpath, (err) => {
			if (err) {
				err.message = err.message.replace("lstat", "ensureSymlink");
				return callback(err);
			}
			return callback(null, {
				"toCwd": srcpath,
				"toDst": srcpath
			});
		});
else {
			const dstdir = path$35.dirname(dstpath);
			const relativeToDst = path$35.join(dstdir, srcpath);
			return pathExists$5(relativeToDst, (err, exists$1) => {
				if (err) return callback(err);
				if (exists$1) return callback(null, {
					"toCwd": relativeToDst,
					"toDst": srcpath
				});
else return fs$31.lstat(srcpath, (err$1) => {
					if (err$1) {
						err$1.message = err$1.message.replace("lstat", "ensureSymlink");
						return callback(err$1);
					}
					return callback(null, {
						"toCwd": srcpath,
						"toDst": path$35.relative(dstdir, srcpath)
					});
				});
			});
		}
	}
	function symlinkPathsSync$1(srcpath, dstpath) {
		let exists$1;
		if (path$35.isAbsolute(srcpath)) {
			exists$1 = fs$31.existsSync(srcpath);
			if (!exists$1) throw new Error("absolute srcpath does not exist");
			return {
				"toCwd": srcpath,
				"toDst": srcpath
			};
		} else {
			const dstdir = path$35.dirname(dstpath);
			const relativeToDst = path$35.join(dstdir, srcpath);
			exists$1 = fs$31.existsSync(relativeToDst);
			if (exists$1) return {
				"toCwd": relativeToDst,
				"toDst": srcpath
			};
else {
				exists$1 = fs$31.existsSync(srcpath);
				if (!exists$1) throw new Error("relative srcpath does not exist");
				return {
					"toCwd": srcpath,
					"toDst": path$35.relative(dstdir, srcpath)
				};
			}
		}
	}
	module.exports = {
		symlinkPaths: symlinkPaths$1,
		symlinkPathsSync: symlinkPathsSync$1
	};
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/ensure/symlink-type.js
var require_symlink_type = __commonJS({ "../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/ensure/symlink-type.js"(exports, module) {
	const fs$30 = require_graceful_fs();
	function symlinkType$1(srcpath, type, callback) {
		callback = typeof type === "function" ? type : callback;
		type = typeof type === "function" ? false : type;
		if (type) return callback(null, type);
		fs$30.lstat(srcpath, (err, stats) => {
			if (err) return callback(null, "file");
			type = stats && stats.isDirectory() ? "dir" : "file";
			callback(null, type);
		});
	}
	function symlinkTypeSync$1(srcpath, type) {
		let stats;
		if (type) return type;
		try {
			stats = fs$30.lstatSync(srcpath);
		} catch (e) {
			return "file";
		}
		return stats && stats.isDirectory() ? "dir" : "file";
	}
	module.exports = {
		symlinkType: symlinkType$1,
		symlinkTypeSync: symlinkTypeSync$1
	};
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/ensure/symlink.js
var require_symlink = __commonJS({ "../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/ensure/symlink.js"(exports, module) {
	const u$4 = require_universalify().fromCallback;
	const path$34 = require("path");
	const fs$29 = require_graceful_fs();
	const _mkdirs = require_mkdirs();
	const mkdirs = _mkdirs.mkdirs;
	const mkdirsSync = _mkdirs.mkdirsSync;
	const _symlinkPaths = require_symlink_paths();
	const symlinkPaths = _symlinkPaths.symlinkPaths;
	const symlinkPathsSync = _symlinkPaths.symlinkPathsSync;
	const _symlinkType = require_symlink_type();
	const symlinkType = _symlinkType.symlinkType;
	const symlinkTypeSync = _symlinkType.symlinkTypeSync;
	const pathExists$4 = require_path_exists$1().pathExists;
	function createSymlink(srcpath, dstpath, type, callback) {
		callback = typeof type === "function" ? type : callback;
		type = typeof type === "function" ? false : type;
		pathExists$4(dstpath, (err, destinationExists) => {
			if (err) return callback(err);
			if (destinationExists) return callback(null);
			symlinkPaths(srcpath, dstpath, (err$1, relative) => {
				if (err$1) return callback(err$1);
				srcpath = relative.toDst;
				symlinkType(relative.toCwd, type, (err$2, type$1) => {
					if (err$2) return callback(err$2);
					const dir = path$34.dirname(dstpath);
					pathExists$4(dir, (err$3, dirExists) => {
						if (err$3) return callback(err$3);
						if (dirExists) return fs$29.symlink(srcpath, dstpath, type$1, callback);
						mkdirs(dir, (err$4) => {
							if (err$4) return callback(err$4);
							fs$29.symlink(srcpath, dstpath, type$1, callback);
						});
					});
				});
			});
		});
	}
	function createSymlinkSync(srcpath, dstpath, type) {
		const destinationExists = fs$29.existsSync(dstpath);
		if (destinationExists) return undefined;
		const relative = symlinkPathsSync(srcpath, dstpath);
		srcpath = relative.toDst;
		type = symlinkTypeSync(relative.toCwd, type);
		const dir = path$34.dirname(dstpath);
		const exists$1 = fs$29.existsSync(dir);
		if (exists$1) return fs$29.symlinkSync(srcpath, dstpath, type);
		mkdirsSync(dir);
		return fs$29.symlinkSync(srcpath, dstpath, type);
	}
	module.exports = {
		createSymlink: u$4(createSymlink),
		createSymlinkSync
	};
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/ensure/index.js
var require_ensure = __commonJS({ "../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/ensure/index.js"(exports, module) {
	const file = require_file();
	const link$1 = require_link();
	const symlink = require_symlink();
	module.exports = {
		createFile: file.createFile,
		createFileSync: file.createFileSync,
		ensureFile: file.createFile,
		ensureFileSync: file.createFileSync,
		createLink: link$1.createLink,
		createLinkSync: link$1.createLinkSync,
		ensureLink: link$1.createLink,
		ensureLinkSync: link$1.createLinkSync,
		createSymlink: symlink.createSymlink,
		createSymlinkSync: symlink.createSymlinkSync,
		ensureSymlink: symlink.createSymlink,
		ensureSymlinkSync: symlink.createSymlinkSync
	};
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/json/jsonfile.js
var require_jsonfile = __commonJS({ "../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/json/jsonfile.js"(exports, module) {
	const u$3 = require_universalify().fromCallback;
	const jsonFile$3 = require_jsonfile$2();
	module.exports = {
		readJson: u$3(jsonFile$3.readFile),
		readJsonSync: jsonFile$3.readFileSync,
		writeJson: u$3(jsonFile$3.writeFile),
		writeJsonSync: jsonFile$3.writeFileSync
	};
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/json/output-json.js
var require_output_json = __commonJS({ "../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/json/output-json.js"(exports, module) {
	const path$33 = require("path");
	const mkdir$2 = require_mkdirs();
	const pathExists$3 = require_path_exists$1().pathExists;
	const jsonFile$2 = require_jsonfile();
	function outputJson(file$2, data, options, callback) {
		if (typeof options === "function") {
			callback = options;
			options = {};
		}
		const dir = path$33.dirname(file$2);
		pathExists$3(dir, (err, itDoes) => {
			if (err) return callback(err);
			if (itDoes) return jsonFile$2.writeJson(file$2, data, options, callback);
			mkdir$2.mkdirs(dir, (err$1) => {
				if (err$1) return callback(err$1);
				jsonFile$2.writeJson(file$2, data, options, callback);
			});
		});
	}
	module.exports = outputJson;
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/json/output-json-sync.js
var require_output_json_sync = __commonJS({ "../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/json/output-json-sync.js"(exports, module) {
	const fs$28 = require_graceful_fs();
	const path$32 = require("path");
	const mkdir$1 = require_mkdirs();
	const jsonFile$1 = require_jsonfile();
	function outputJsonSync(file$2, data, options) {
		const dir = path$32.dirname(file$2);
		if (!fs$28.existsSync(dir)) mkdir$1.mkdirsSync(dir);
		jsonFile$1.writeJsonSync(file$2, data, options);
	}
	module.exports = outputJsonSync;
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/json/index.js
var require_json$1 = __commonJS({ "../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/json/index.js"(exports, module) {
	const u$2 = require_universalify().fromCallback;
	const jsonFile = require_jsonfile();
	jsonFile.outputJson = u$2(require_output_json());
	jsonFile.outputJsonSync = require_output_json_sync();
	jsonFile.outputJSON = jsonFile.outputJson;
	jsonFile.outputJSONSync = jsonFile.outputJsonSync;
	jsonFile.writeJSON = jsonFile.writeJson;
	jsonFile.writeJSONSync = jsonFile.writeJsonSync;
	jsonFile.readJSON = jsonFile.readJson;
	jsonFile.readJSONSync = jsonFile.readJsonSync;
	module.exports = jsonFile;
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/move-sync/move-sync.js
var require_move_sync$1 = __commonJS({ "../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/move-sync/move-sync.js"(exports, module) {
	const fs$27 = require_graceful_fs();
	const path$31 = require("path");
	const copySync = require_copy_sync().copySync;
	const removeSync = require_remove().removeSync;
	const mkdirpSync = require_mkdirs().mkdirpSync;
	const stat$2 = require_stat();
	function moveSync(src$1, dest, opts) {
		opts = opts || {};
		const overwrite = opts.overwrite || opts.clobber || false;
		const { srcStat } = stat$2.checkPathsSync(src$1, dest, "move");
		stat$2.checkParentPathsSync(src$1, srcStat, dest, "move");
		mkdirpSync(path$31.dirname(dest));
		return doRename$1(src$1, dest, overwrite);
	}
	function doRename$1(src$1, dest, overwrite) {
		if (overwrite) {
			removeSync(dest);
			return rename$1(src$1, dest, overwrite);
		}
		if (fs$27.existsSync(dest)) throw new Error("dest already exists.");
		return rename$1(src$1, dest, overwrite);
	}
	function rename$1(src$1, dest, overwrite) {
		try {
			fs$27.renameSync(src$1, dest);
		} catch (err) {
			if (err.code !== "EXDEV") throw err;
			return moveAcrossDevice$1(src$1, dest, overwrite);
		}
	}
	function moveAcrossDevice$1(src$1, dest, overwrite) {
		const opts = {
			overwrite,
			errorOnExist: true
		};
		copySync(src$1, dest, opts);
		return removeSync(src$1);
	}
	module.exports = moveSync;
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/move-sync/index.js
var require_move_sync = __commonJS({ "../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/move-sync/index.js"(exports, module) {
	module.exports = { moveSync: require_move_sync$1() };
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/move/move.js
var require_move$1 = __commonJS({ "../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/move/move.js"(exports, module) {
	const fs$26 = require_graceful_fs();
	const path$30 = require("path");
	const copy = require_copy().copy;
	const remove = require_remove().remove;
	const mkdirp = require_mkdirs().mkdirp;
	const pathExists$2 = require_path_exists$1().pathExists;
	const stat$1 = require_stat();
	function move(src$1, dest, opts, cb) {
		if (typeof opts === "function") {
			cb = opts;
			opts = {};
		}
		const overwrite = opts.overwrite || opts.clobber || false;
		stat$1.checkPaths(src$1, dest, "move", (err, stats) => {
			if (err) return cb(err);
			const { srcStat } = stats;
			stat$1.checkParentPaths(src$1, srcStat, dest, "move", (err$1) => {
				if (err$1) return cb(err$1);
				mkdirp(path$30.dirname(dest), (err$2) => {
					if (err$2) return cb(err$2);
					return doRename(src$1, dest, overwrite, cb);
				});
			});
		});
	}
	function doRename(src$1, dest, overwrite, cb) {
		if (overwrite) return remove(dest, (err) => {
			if (err) return cb(err);
			return rename(src$1, dest, overwrite, cb);
		});
		pathExists$2(dest, (err, destExists) => {
			if (err) return cb(err);
			if (destExists) return cb(new Error("dest already exists."));
			return rename(src$1, dest, overwrite, cb);
		});
	}
	function rename(src$1, dest, overwrite, cb) {
		fs$26.rename(src$1, dest, (err) => {
			if (!err) return cb();
			if (err.code !== "EXDEV") return cb(err);
			return moveAcrossDevice(src$1, dest, overwrite, cb);
		});
	}
	function moveAcrossDevice(src$1, dest, overwrite, cb) {
		const opts = {
			overwrite,
			errorOnExist: true
		};
		copy(src$1, dest, opts, (err) => {
			if (err) return cb(err);
			return remove(src$1, cb);
		});
	}
	module.exports = move;
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/move/index.js
var require_move = __commonJS({ "../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/move/index.js"(exports, module) {
	const u$1 = require_universalify().fromCallback;
	module.exports = { move: u$1(require_move$1()) };
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/output/index.js
var require_output = __commonJS({ "../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/output/index.js"(exports, module) {
	const u = require_universalify().fromCallback;
	const fs$25 = require_graceful_fs();
	const path$29 = require("path");
	const mkdir = require_mkdirs();
	const pathExists$1 = require_path_exists$1().pathExists;
	function outputFile(file$2, data, encoding, callback) {
		if (typeof encoding === "function") {
			callback = encoding;
			encoding = "utf8";
		}
		const dir = path$29.dirname(file$2);
		pathExists$1(dir, (err, itDoes) => {
			if (err) return callback(err);
			if (itDoes) return fs$25.writeFile(file$2, data, encoding, callback);
			mkdir.mkdirs(dir, (err$1) => {
				if (err$1) return callback(err$1);
				fs$25.writeFile(file$2, data, encoding, callback);
			});
		});
	}
	function outputFileSync(file$2, ...args) {
		const dir = path$29.dirname(file$2);
		if (fs$25.existsSync(dir)) return fs$25.writeFileSync(file$2, ...args);
		mkdir.mkdirsSync(dir);
		fs$25.writeFileSync(file$2, ...args);
	}
	module.exports = {
		outputFile: u(outputFile),
		outputFileSync
	};
} });

//#endregion
//#region ../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/index.js
var require_lib = __commonJS({ "../node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/index.js"(exports, module) {
	module.exports = Object.assign({}, require_fs$4(), require_copy_sync(), require_copy(), require_empty(), require_ensure(), require_json$1(), require_mkdirs(), require_move_sync(), require_move(), require_output(), require_path_exists$1(), require_remove());
	const fs$24 = require("fs");
	if (Object.getOwnPropertyDescriptor(fs$24, "promises")) Object.defineProperty(module.exports, "promises", { get() {
		return fs$24.promises;
	} });
} });

//#endregion
//#region ../node_modules/.pnpm/array-union@2.1.0/node_modules/array-union/index.js
var require_array_union = __commonJS({ "../node_modules/.pnpm/array-union@2.1.0/node_modules/array-union/index.js"(exports, module) {
	module.exports = (...arguments_) => {
		return [...new Set([].concat(...arguments_))];
	};
} });

//#endregion
//#region ../node_modules/.pnpm/merge2@1.4.1/node_modules/merge2/index.js
var require_merge2 = __commonJS({ "../node_modules/.pnpm/merge2@1.4.1/node_modules/merge2/index.js"(exports, module) {
	const Stream = require("stream");
	const PassThrough = Stream.PassThrough;
	const slice = Array.prototype.slice;
	module.exports = merge2$2;
	function merge2$2() {
		const streamsQueue = [];
		const args = slice.call(arguments);
		let merging = false;
		let options = args[args.length - 1];
		if (options && !Array.isArray(options) && options.pipe == null) args.pop();
else options = {};
		const doEnd = options.end !== false;
		const doPipeError = options.pipeError === true;
		if (options.objectMode == null) options.objectMode = true;
		if (options.highWaterMark == null) options.highWaterMark = 65536;
		const mergedStream = PassThrough(options);
		function addStream() {
			for (let i$2 = 0, len = arguments.length; i$2 < len; i$2++) streamsQueue.push(pauseStreams(arguments[i$2], options));
			mergeStream();
			return this;
		}
		function mergeStream() {
			if (merging) return;
			merging = true;
			let streams = streamsQueue.shift();
			if (!streams) {
				process.nextTick(endStream);
				return;
			}
			if (!Array.isArray(streams)) streams = [streams];
			let pipesCount = streams.length + 1;
			function next() {
				if (--pipesCount > 0) return;
				merging = false;
				mergeStream();
			}
			function pipe(stream$3) {
				function onend() {
					stream$3.removeListener("merge2UnpipeEnd", onend);
					stream$3.removeListener("end", onend);
					if (doPipeError) stream$3.removeListener("error", onerror);
					next();
				}
				function onerror(err) {
					mergedStream.emit("error", err);
				}
				if (stream$3._readableState.endEmitted) return next();
				stream$3.on("merge2UnpipeEnd", onend);
				stream$3.on("end", onend);
				if (doPipeError) stream$3.on("error", onerror);
				stream$3.pipe(mergedStream, { end: false });
				stream$3.resume();
			}
			for (let i$2 = 0; i$2 < streams.length; i$2++) pipe(streams[i$2]);
			next();
		}
		function endStream() {
			merging = false;
			mergedStream.emit("queueDrain");
			if (doEnd) mergedStream.end();
		}
		mergedStream.setMaxListeners(0);
		mergedStream.add = addStream;
		mergedStream.on("unpipe", function(stream$3) {
			stream$3.emit("merge2UnpipeEnd");
		});
		if (args.length) addStream.apply(null, args);
		return mergedStream;
	}
	function pauseStreams(streams, options) {
		if (!Array.isArray(streams)) {
			if (!streams._readableState && streams.pipe) streams = streams.pipe(PassThrough(options));
			if (!streams._readableState || !streams.pause || !streams.pipe) throw new Error("Only readable stream can be merged.");
			streams.pause();
		} else for (let i$2 = 0, len = streams.length; i$2 < len; i$2++) streams[i$2] = pauseStreams(streams[i$2], options);
		return streams;
	}
} });

//#endregion
//#region ../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/array.js
var require_array = __commonJS({ "../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/array.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.splitWhen = exports.flatten = void 0;
	function flatten(items) {
		return items.reduce((collection, item) => [].concat(collection, item), []);
	}
	exports.flatten = flatten;
	function splitWhen(items, predicate) {
		const result = [[]];
		let groupIndex = 0;
		for (const item of items) if (predicate(item)) {
			groupIndex++;
			result[groupIndex] = [];
		} else result[groupIndex].push(item);
		return result;
	}
	exports.splitWhen = splitWhen;
} });

//#endregion
//#region ../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/errno.js
var require_errno = __commonJS({ "../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/errno.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.isEnoentCodeError = void 0;
	function isEnoentCodeError(error$2) {
		return error$2.code === "ENOENT";
	}
	exports.isEnoentCodeError = isEnoentCodeError;
} });

//#endregion
//#region ../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/fs.js
var require_fs$3 = __commonJS({ "../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/fs.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.createDirentFromStats = void 0;
	var DirentFromStats$1 = class {
		constructor(name, stats) {
			this.name = name;
			this.isBlockDevice = stats.isBlockDevice.bind(stats);
			this.isCharacterDevice = stats.isCharacterDevice.bind(stats);
			this.isDirectory = stats.isDirectory.bind(stats);
			this.isFIFO = stats.isFIFO.bind(stats);
			this.isFile = stats.isFile.bind(stats);
			this.isSocket = stats.isSocket.bind(stats);
			this.isSymbolicLink = stats.isSymbolicLink.bind(stats);
		}
	};
	function createDirentFromStats$1(name, stats) {
		return new DirentFromStats$1(name, stats);
	}
	exports.createDirentFromStats = createDirentFromStats$1;
} });

//#endregion
//#region ../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/path.js
var require_path = __commonJS({ "../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/path.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.convertPosixPathToPattern = exports.convertWindowsPathToPattern = exports.convertPathToPattern = exports.escapePosixPath = exports.escapeWindowsPath = exports.escape = exports.removeLeadingDotSegment = exports.makeAbsolute = exports.unixify = void 0;
	const os$1 = require("os");
	const path$28 = require("path");
	const IS_WINDOWS_PLATFORM = os$1.platform() === "win32";
	const LEADING_DOT_SEGMENT_CHARACTERS_COUNT = 2;
	/**
	* All non-escaped special characters.
	* Posix: ()*?[]{|}, !+@ before (, ! at the beginning, \\ before non-special characters.
	* Windows: (){}[], !+@ before (, ! at the beginning.
	*/
	const POSIX_UNESCAPED_GLOB_SYMBOLS_RE = /(\\?)([()*?[\]{|}]|^!|[!+@](?=\()|\\(?![!()*+?@[\]{|}]))/g;
	const WINDOWS_UNESCAPED_GLOB_SYMBOLS_RE = /(\\?)([()[\]{}]|^!|[!+@](?=\())/g;
	/**
	* The device path (\\.\ or \\?\).
	* https://learn.microsoft.com/en-us/dotnet/standard/io/file-path-formats#dos-device-paths
	*/
	const DOS_DEVICE_PATH_RE = /^\\\\([.?])/;
	/**
	* All backslashes except those escaping special characters.
	* Windows: !()+@{}
	* https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#naming-conventions
	*/
	const WINDOWS_BACKSLASHES_RE = /\\(?![!()+@[\]{}])/g;
	/**
	* Designed to work only with simple paths: `dir\\file`.
	*/
	function unixify(filepath) {
		return filepath.replace(/\\/g, "/");
	}
	exports.unixify = unixify;
	function makeAbsolute(cwd$1, filepath) {
		return path$28.resolve(cwd$1, filepath);
	}
	exports.makeAbsolute = makeAbsolute;
	function removeLeadingDotSegment(entry) {
		if (entry.charAt(0) === ".") {
			const secondCharactery = entry.charAt(1);
			if (secondCharactery === "/" || secondCharactery === "\\") return entry.slice(LEADING_DOT_SEGMENT_CHARACTERS_COUNT);
		}
		return entry;
	}
	exports.removeLeadingDotSegment = removeLeadingDotSegment;
	exports.escape = IS_WINDOWS_PLATFORM ? escapeWindowsPath : escapePosixPath;
	function escapeWindowsPath(pattern$1) {
		return pattern$1.replace(WINDOWS_UNESCAPED_GLOB_SYMBOLS_RE, "\\$2");
	}
	exports.escapeWindowsPath = escapeWindowsPath;
	function escapePosixPath(pattern$1) {
		return pattern$1.replace(POSIX_UNESCAPED_GLOB_SYMBOLS_RE, "\\$2");
	}
	exports.escapePosixPath = escapePosixPath;
	exports.convertPathToPattern = IS_WINDOWS_PLATFORM ? convertWindowsPathToPattern : convertPosixPathToPattern;
	function convertWindowsPathToPattern(filepath) {
		return escapeWindowsPath(filepath).replace(DOS_DEVICE_PATH_RE, "//$1").replace(WINDOWS_BACKSLASHES_RE, "/");
	}
	exports.convertWindowsPathToPattern = convertWindowsPathToPattern;
	function convertPosixPathToPattern(filepath) {
		return escapePosixPath(filepath);
	}
	exports.convertPosixPathToPattern = convertPosixPathToPattern;
} });

//#endregion
//#region ../node_modules/.pnpm/is-extglob@2.1.1/node_modules/is-extglob/index.js
var require_is_extglob = __commonJS({ "../node_modules/.pnpm/is-extglob@2.1.1/node_modules/is-extglob/index.js"(exports, module) {
	/*!
	* is-extglob <https://github.com/jonschlinkert/is-extglob>
	*
	* Copyright (c) 2014-2016, Jon Schlinkert.
	* Licensed under the MIT License.
	*/
	module.exports = function isExtglob$1(str) {
		if (typeof str !== "string" || str === "") return false;
		var match;
		while (match = /(\\).|([@?!+*]\(.*\))/g.exec(str)) {
			if (match[2]) return true;
			str = str.slice(match.index + match[0].length);
		}
		return false;
	};
} });

//#endregion
//#region ../node_modules/.pnpm/is-glob@4.0.3/node_modules/is-glob/index.js
var require_is_glob = __commonJS({ "../node_modules/.pnpm/is-glob@4.0.3/node_modules/is-glob/index.js"(exports, module) {
	/*!
	* is-glob <https://github.com/jonschlinkert/is-glob>
	*
	* Copyright (c) 2014-2017, Jon Schlinkert.
	* Released under the MIT License.
	*/
	var isExtglob = require_is_extglob();
	var chars = {
		"{": "}",
		"(": ")",
		"[": "]"
	};
	var strictCheck = function(str) {
		if (str[0] === "!") return true;
		var index$1 = 0;
		var pipeIndex = -2;
		var closeSquareIndex = -2;
		var closeCurlyIndex = -2;
		var closeParenIndex = -2;
		var backSlashIndex = -2;
		while (index$1 < str.length) {
			if (str[index$1] === "*") return true;
			if (str[index$1 + 1] === "?" && /[\].+)]/.test(str[index$1])) return true;
			if (closeSquareIndex !== -1 && str[index$1] === "[" && str[index$1 + 1] !== "]") {
				if (closeSquareIndex < index$1) closeSquareIndex = str.indexOf("]", index$1);
				if (closeSquareIndex > index$1) {
					if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) return true;
					backSlashIndex = str.indexOf("\\", index$1);
					if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) return true;
				}
			}
			if (closeCurlyIndex !== -1 && str[index$1] === "{" && str[index$1 + 1] !== "}") {
				closeCurlyIndex = str.indexOf("}", index$1);
				if (closeCurlyIndex > index$1) {
					backSlashIndex = str.indexOf("\\", index$1);
					if (backSlashIndex === -1 || backSlashIndex > closeCurlyIndex) return true;
				}
			}
			if (closeParenIndex !== -1 && str[index$1] === "(" && str[index$1 + 1] === "?" && /[:!=]/.test(str[index$1 + 2]) && str[index$1 + 3] !== ")") {
				closeParenIndex = str.indexOf(")", index$1);
				if (closeParenIndex > index$1) {
					backSlashIndex = str.indexOf("\\", index$1);
					if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) return true;
				}
			}
			if (pipeIndex !== -1 && str[index$1] === "(" && str[index$1 + 1] !== "|") {
				if (pipeIndex < index$1) pipeIndex = str.indexOf("|", index$1);
				if (pipeIndex !== -1 && str[pipeIndex + 1] !== ")") {
					closeParenIndex = str.indexOf(")", pipeIndex);
					if (closeParenIndex > pipeIndex) {
						backSlashIndex = str.indexOf("\\", pipeIndex);
						if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) return true;
					}
				}
			}
			if (str[index$1] === "\\") {
				var open = str[index$1 + 1];
				index$1 += 2;
				var close = chars[open];
				if (close) {
					var n = str.indexOf(close, index$1);
					if (n !== -1) index$1 = n + 1;
				}
				if (str[index$1] === "!") return true;
			} else index$1++;
		}
		return false;
	};
	var relaxedCheck = function(str) {
		if (str[0] === "!") return true;
		var index$1 = 0;
		while (index$1 < str.length) {
			if (/[*?{}()[\]]/.test(str[index$1])) return true;
			if (str[index$1] === "\\") {
				var open = str[index$1 + 1];
				index$1 += 2;
				var close = chars[open];
				if (close) {
					var n = str.indexOf(close, index$1);
					if (n !== -1) index$1 = n + 1;
				}
				if (str[index$1] === "!") return true;
			} else index$1++;
		}
		return false;
	};
	module.exports = function isGlob$1(str, options) {
		if (typeof str !== "string" || str === "") return false;
		if (isExtglob(str)) return true;
		var check = strictCheck;
		if (options && options.strict === false) check = relaxedCheck;
		return check(str);
	};
} });

//#endregion
//#region ../node_modules/.pnpm/glob-parent@5.1.2/node_modules/glob-parent/index.js
var require_glob_parent = __commonJS({ "../node_modules/.pnpm/glob-parent@5.1.2/node_modules/glob-parent/index.js"(exports, module) {
	var isGlob = require_is_glob();
	var pathPosixDirname = require("path").posix.dirname;
	var isWin32 = require("os").platform() === "win32";
	var slash$1 = "/";
	var backslash = /\\/g;
	var enclosure = /[\{\[].*[\}\]]$/;
	var globby$2 = /(^|[^\\])([\{\[]|\([^\)]+$)/;
	var escaped = /\\([\!\*\?\|\[\]\(\)\{\}])/g;
	/**
	* @param {string} str
	* @param {Object} opts
	* @param {boolean} [opts.flipBackslashes=true]
	* @returns {string}
	*/
	module.exports = function globParent$1(str, opts) {
		var options = Object.assign({ flipBackslashes: true }, opts);
		if (options.flipBackslashes && isWin32 && str.indexOf(slash$1) < 0) str = str.replace(backslash, slash$1);
		if (enclosure.test(str)) str += slash$1;
		str += "a";
		do 
			str = pathPosixDirname(str);
		while (isGlob(str) || globby$2.test(str));
		return str.replace(escaped, "$1");
	};
} });

//#endregion
//#region ../node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/utils.js
var require_utils$4 = __commonJS({ "../node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/utils.js"(exports) {
	exports.isInteger = (num) => {
		if (typeof num === "number") return Number.isInteger(num);
		if (typeof num === "string" && num.trim() !== "") return Number.isInteger(Number(num));
		return false;
	};
	/**
	* Find a node of the given type
	*/
	exports.find = (node$1, type) => node$1.nodes.find((node$2) => node$2.type === type);
	/**
	* Find a node of the given type
	*/
	exports.exceedsLimit = (min, max, step = 1, limit) => {
		if (limit === false) return false;
		if (!exports.isInteger(min) || !exports.isInteger(max)) return false;
		return (Number(max) - Number(min)) / Number(step) >= limit;
	};
	/**
	* Escape the given node with '\\' before node.value
	*/
	exports.escapeNode = (block, n = 0, type) => {
		const node$1 = block.nodes[n];
		if (!node$1) return;
		if (type && node$1.type === type || node$1.type === "open" || node$1.type === "close") {
			if (node$1.escaped !== true) {
				node$1.value = "\\" + node$1.value;
				node$1.escaped = true;
			}
		}
	};
	/**
	* Returns true if the given brace node should be enclosed in literal braces
	*/
	exports.encloseBrace = (node$1) => {
		if (node$1.type !== "brace") return false;
		if (node$1.commas >> 0 + node$1.ranges >> 0 === 0) {
			node$1.invalid = true;
			return true;
		}
		return false;
	};
	/**
	* Returns true if a brace node is invalid.
	*/
	exports.isInvalidBrace = (block) => {
		if (block.type !== "brace") return false;
		if (block.invalid === true || block.dollar) return true;
		if (block.commas >> 0 + block.ranges >> 0 === 0) {
			block.invalid = true;
			return true;
		}
		if (block.open !== true || block.close !== true) {
			block.invalid = true;
			return true;
		}
		return false;
	};
	/**
	* Returns true if a node is an open or close node
	*/
	exports.isOpenOrClose = (node$1) => {
		if (node$1.type === "open" || node$1.type === "close") return true;
		return node$1.open === true || node$1.close === true;
	};
	/**
	* Reduce an array of text nodes.
	*/
	exports.reduce = (nodes) => nodes.reduce((acc, node$1) => {
		if (node$1.type === "text") acc.push(node$1.value);
		if (node$1.type === "range") node$1.type = "text";
		return acc;
	}, []);
	/**
	* Flatten an array
	*/
	exports.flatten = (...args) => {
		const result = [];
		const flat = (arr) => {
			for (let i$2 = 0; i$2 < arr.length; i$2++) {
				const ele = arr[i$2];
				if (Array.isArray(ele)) {
					flat(ele);
					continue;
				}
				if (ele !== undefined) result.push(ele);
			}
			return result;
		};
		flat(args);
		return result;
	};
} });

//#endregion
//#region ../node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/stringify.js
var require_stringify$1 = __commonJS({ "../node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/stringify.js"(exports, module) {
	const utils$16 = require_utils$4();
	module.exports = (ast, options = {}) => {
		const stringify$9 = (node$1, parent = {}) => {
			const invalidBlock = options.escapeInvalid && utils$16.isInvalidBrace(parent);
			const invalidNode = node$1.invalid === true && options.escapeInvalid === true;
			let output = "";
			if (node$1.value) {
				if ((invalidBlock || invalidNode) && utils$16.isOpenOrClose(node$1)) return "\\" + node$1.value;
				return node$1.value;
			}
			if (node$1.value) return node$1.value;
			if (node$1.nodes) for (const child$1 of node$1.nodes) output += stringify$9(child$1);
			return output;
		};
		return stringify$9(ast);
	};
} });

//#endregion
//#region ../node_modules/.pnpm/is-number@7.0.0/node_modules/is-number/index.js
var require_is_number = __commonJS({ "../node_modules/.pnpm/is-number@7.0.0/node_modules/is-number/index.js"(exports, module) {
	module.exports = function(num) {
		if (typeof num === "number") return num - num === 0;
		if (typeof num === "string" && num.trim() !== "") return Number.isFinite ? Number.isFinite(+num) : isFinite(+num);
		return false;
	};
} });

//#endregion
//#region ../node_modules/.pnpm/to-regex-range@5.0.1/node_modules/to-regex-range/index.js
var require_to_regex_range = __commonJS({ "../node_modules/.pnpm/to-regex-range@5.0.1/node_modules/to-regex-range/index.js"(exports, module) {
	const isNumber$1 = require_is_number();
	const toRegexRange$1 = (min, max, options) => {
		if (isNumber$1(min) === false) throw new TypeError("toRegexRange: expected the first argument to be a number");
		if (max === void 0 || min === max) return String(min);
		if (isNumber$1(max) === false) throw new TypeError("toRegexRange: expected the second argument to be a number.");
		let opts = {
			relaxZeros: true,
			...options
		};
		if (typeof opts.strictZeros === "boolean") opts.relaxZeros = opts.strictZeros === false;
		let relax = String(opts.relaxZeros);
		let shorthand = String(opts.shorthand);
		let capture = String(opts.capture);
		let wrap$1 = String(opts.wrap);
		let cacheKey = min + ":" + max + "=" + relax + shorthand + capture + wrap$1;
		if (toRegexRange$1.cache.hasOwnProperty(cacheKey)) return toRegexRange$1.cache[cacheKey].result;
		let a = Math.min(min, max);
		let b = Math.max(min, max);
		if (Math.abs(a - b) === 1) {
			let result = min + "|" + max;
			if (opts.capture) return `(${result})`;
			if (opts.wrap === false) return result;
			return `(?:${result})`;
		}
		let isPadded = hasPadding(min) || hasPadding(max);
		let state = {
			min,
			max,
			a,
			b
		};
		let positives = [];
		let negatives = [];
		if (isPadded) {
			state.isPadded = isPadded;
			state.maxLen = String(state.max).length;
		}
		if (a < 0) {
			let newMin = b < 0 ? Math.abs(b) : 1;
			negatives = splitToPatterns(newMin, Math.abs(a), state, opts);
			a = state.a = 0;
		}
		if (b >= 0) positives = splitToPatterns(a, b, state, opts);
		state.negatives = negatives;
		state.positives = positives;
		state.result = collatePatterns(negatives, positives, opts);
		if (opts.capture === true) state.result = `(${state.result})`;
else if (opts.wrap !== false && positives.length + negatives.length > 1) state.result = `(?:${state.result})`;
		toRegexRange$1.cache[cacheKey] = state;
		return state.result;
	};
	function collatePatterns(neg, pos, options) {
		let onlyNegative = filterPatterns(neg, pos, "-", false, options) || [];
		let onlyPositive = filterPatterns(pos, neg, "", false, options) || [];
		let intersected = filterPatterns(neg, pos, "-?", true, options) || [];
		let subpatterns = onlyNegative.concat(intersected).concat(onlyPositive);
		return subpatterns.join("|");
	}
	function splitToRanges(min, max) {
		let nines = 1;
		let zeros$1 = 1;
		let stop$1 = countNines(min, nines);
		let stops = new Set([max]);
		while (min <= stop$1 && stop$1 <= max) {
			stops.add(stop$1);
			nines += 1;
			stop$1 = countNines(min, nines);
		}
		stop$1 = countZeros(max + 1, zeros$1) - 1;
		while (min < stop$1 && stop$1 <= max) {
			stops.add(stop$1);
			zeros$1 += 1;
			stop$1 = countZeros(max + 1, zeros$1) - 1;
		}
		stops = [...stops];
		stops.sort(compare$12);
		return stops;
	}
	/**
	* Convert a range to a regex pattern
	* @param {Number} `start`
	* @param {Number} `stop`
	* @return {String}
	*/
	function rangeToPattern(start, stop$1, options) {
		if (start === stop$1) return {
			pattern: start,
			count: [],
			digits: 0
		};
		let zipped = zip(start, stop$1);
		let digits = zipped.length;
		let pattern$1 = "";
		let count = 0;
		for (let i$2 = 0; i$2 < digits; i$2++) {
			let [startDigit, stopDigit] = zipped[i$2];
			if (startDigit === stopDigit) pattern$1 += startDigit;
else if (startDigit !== "0" || stopDigit !== "9") pattern$1 += toCharacterClass(startDigit, stopDigit, options);
else count++;
		}
		if (count) pattern$1 += options.shorthand === true ? "\\d" : "[0-9]";
		return {
			pattern: pattern$1,
			count: [count],
			digits
		};
	}
	function splitToPatterns(min, max, tok, options) {
		let ranges = splitToRanges(min, max);
		let tokens = [];
		let start = min;
		let prev;
		for (let i$2 = 0; i$2 < ranges.length; i$2++) {
			let max$1 = ranges[i$2];
			let obj = rangeToPattern(String(start), String(max$1), options);
			let zeros$1 = "";
			if (!tok.isPadded && prev && prev.pattern === obj.pattern) {
				if (prev.count.length > 1) prev.count.pop();
				prev.count.push(obj.count[0]);
				prev.string = prev.pattern + toQuantifier(prev.count);
				start = max$1 + 1;
				continue;
			}
			if (tok.isPadded) zeros$1 = padZeros(max$1, tok, options);
			obj.string = zeros$1 + obj.pattern + toQuantifier(obj.count);
			tokens.push(obj);
			start = max$1 + 1;
			prev = obj;
		}
		return tokens;
	}
	function filterPatterns(arr, comparison, prefix$1, intersection, options) {
		let result = [];
		for (let ele of arr) {
			let { string: string$3 } = ele;
			if (!intersection && !contains(comparison, "string", string$3)) result.push(prefix$1 + string$3);
			if (intersection && contains(comparison, "string", string$3)) result.push(prefix$1 + string$3);
		}
		return result;
	}
	/**
	* Zip strings
	*/
	function zip(a, b) {
		let arr = [];
		for (let i$2 = 0; i$2 < a.length; i$2++) arr.push([a[i$2], b[i$2]]);
		return arr;
	}
	function compare$12(a, b) {
		return a > b ? 1 : b > a ? -1 : 0;
	}
	function contains(arr, key, val) {
		return arr.some((ele) => ele[key] === val);
	}
	function countNines(min, len) {
		return Number(String(min).slice(0, -len) + "9".repeat(len));
	}
	function countZeros(integer, zeros$1) {
		return integer - integer % Math.pow(10, zeros$1);
	}
	function toQuantifier(digits) {
		let [start = 0, stop$1 = ""] = digits;
		if (stop$1 || start > 1) return `{${start + (stop$1 ? "," + stop$1 : "")}}`;
		return "";
	}
	function toCharacterClass(a, b, options) {
		return `[${a}${b - a === 1 ? "" : "-"}${b}]`;
	}
	function hasPadding(str) {
		return /^-?(0+)\d/.test(str);
	}
	function padZeros(value, tok, options) {
		if (!tok.isPadded) return value;
		let diff$2 = Math.abs(tok.maxLen - String(value).length);
		let relax = options.relaxZeros !== false;
		switch (diff$2) {
			case 0: return "";
			case 1: return relax ? "0?" : "0";
			case 2: return relax ? "0{0,2}" : "00";
			default: return relax ? `0{0,${diff$2}}` : `0{${diff$2}}`;
		}
	}
	/**
	* Cache
	*/
	toRegexRange$1.cache = {};
	toRegexRange$1.clearCache = () => toRegexRange$1.cache = {};
	/**
	* Expose `toRegexRange`
	*/
	module.exports = toRegexRange$1;
} });

//#endregion
//#region ../node_modules/.pnpm/fill-range@7.1.1/node_modules/fill-range/index.js
var require_fill_range = __commonJS({ "../node_modules/.pnpm/fill-range@7.1.1/node_modules/fill-range/index.js"(exports, module) {
	const util$2 = require("util");
	const toRegexRange = require_to_regex_range();
	const isObject$3 = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
	const transform = (toNumber) => {
		return (value) => toNumber === true ? Number(value) : String(value);
	};
	const isValidValue = (value) => {
		return typeof value === "number" || typeof value === "string" && value !== "";
	};
	const isNumber = (num) => Number.isInteger(+num);
	const zeros = (input) => {
		let value = `${input}`;
		let index$1 = -1;
		if (value[0] === "-") value = value.slice(1);
		if (value === "0") return false;
		while (value[++index$1] === "0");
		return index$1 > 0;
	};
	const stringify$4 = (start, end, options) => {
		if (typeof start === "string" || typeof end === "string") return true;
		return options.stringify === true;
	};
	const pad = (input, maxLength, toNumber) => {
		if (maxLength > 0) {
			let dash = input[0] === "-" ? "-" : "";
			if (dash) input = input.slice(1);
			input = dash + input.padStart(dash ? maxLength - 1 : maxLength, "0");
		}
		if (toNumber === false) return String(input);
		return input;
	};
	const toMaxLen = (input, maxLength) => {
		let negative = input[0] === "-" ? "-" : "";
		if (negative) {
			input = input.slice(1);
			maxLength--;
		}
		while (input.length < maxLength) input = "0" + input;
		return negative ? "-" + input : input;
	};
	const toSequence = (parts, options, maxLen) => {
		parts.negatives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
		parts.positives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
		let prefix$1 = options.capture ? "" : "?:";
		let positives = "";
		let negatives = "";
		let result;
		if (parts.positives.length) positives = parts.positives.map((v) => toMaxLen(String(v), maxLen)).join("|");
		if (parts.negatives.length) negatives = `-(${prefix$1}${parts.negatives.map((v) => toMaxLen(String(v), maxLen)).join("|")})`;
		if (positives && negatives) result = `${positives}|${negatives}`;
else result = positives || negatives;
		if (options.wrap) return `(${prefix$1}${result})`;
		return result;
	};
	const toRange = (a, b, isNumbers, options) => {
		if (isNumbers) return toRegexRange(a, b, {
			wrap: false,
			...options
		});
		let start = String.fromCharCode(a);
		if (a === b) return start;
		let stop$1 = String.fromCharCode(b);
		return `[${start}-${stop$1}]`;
	};
	const toRegex = (start, end, options) => {
		if (Array.isArray(start)) {
			let wrap$1 = options.wrap === true;
			let prefix$1 = options.capture ? "" : "?:";
			return wrap$1 ? `(${prefix$1}${start.join("|")})` : start.join("|");
		}
		return toRegexRange(start, end, options);
	};
	const rangeError = (...args) => {
		return new RangeError("Invalid range arguments: " + util$2.inspect(...args));
	};
	const invalidRange = (start, end, options) => {
		if (options.strictRanges === true) throw rangeError([start, end]);
		return [];
	};
	const invalidStep = (step, options) => {
		if (options.strictRanges === true) throw new TypeError(`Expected step "${step}" to be a number`);
		return [];
	};
	const fillNumbers = (start, end, step = 1, options = {}) => {
		let a = Number(start);
		let b = Number(end);
		if (!Number.isInteger(a) || !Number.isInteger(b)) {
			if (options.strictRanges === true) throw rangeError([start, end]);
			return [];
		}
		if (a === 0) a = 0;
		if (b === 0) b = 0;
		let descending = a > b;
		let startString = String(start);
		let endString = String(end);
		let stepString = String(step);
		step = Math.max(Math.abs(step), 1);
		let padded = zeros(startString) || zeros(endString) || zeros(stepString);
		let maxLen = padded ? Math.max(startString.length, endString.length, stepString.length) : 0;
		let toNumber = padded === false && stringify$4(start, end, options) === false;
		let format$1 = options.transform || transform(toNumber);
		if (options.toRegex && step === 1) return toRange(toMaxLen(start, maxLen), toMaxLen(end, maxLen), true, options);
		let parts = {
			negatives: [],
			positives: []
		};
		let push$2 = (num) => parts[num < 0 ? "negatives" : "positives"].push(Math.abs(num));
		let range = [];
		let index$1 = 0;
		while (descending ? a >= b : a <= b) {
			if (options.toRegex === true && step > 1) push$2(a);
else range.push(pad(format$1(a, index$1), maxLen, toNumber));
			a = descending ? a - step : a + step;
			index$1++;
		}
		if (options.toRegex === true) return step > 1 ? toSequence(parts, options, maxLen) : toRegex(range, null, {
			wrap: false,
			...options
		});
		return range;
	};
	const fillLetters = (start, end, step = 1, options = {}) => {
		if (!isNumber(start) && start.length > 1 || !isNumber(end) && end.length > 1) return invalidRange(start, end, options);
		let format$1 = options.transform || ((val) => String.fromCharCode(val));
		let a = `${start}`.charCodeAt(0);
		let b = `${end}`.charCodeAt(0);
		let descending = a > b;
		let min = Math.min(a, b);
		let max = Math.max(a, b);
		if (options.toRegex && step === 1) return toRange(min, max, false, options);
		let range = [];
		let index$1 = 0;
		while (descending ? a >= b : a <= b) {
			range.push(format$1(a, index$1));
			a = descending ? a - step : a + step;
			index$1++;
		}
		if (options.toRegex === true) return toRegex(range, null, {
			wrap: false,
			options
		});
		return range;
	};
	const fill$2 = (start, end, step, options = {}) => {
		if (end == null && isValidValue(start)) return [start];
		if (!isValidValue(start) || !isValidValue(end)) return invalidRange(start, end, options);
		if (typeof step === "function") return fill$2(start, end, 1, { transform: step });
		if (isObject$3(step)) return fill$2(start, end, 0, step);
		let opts = { ...options };
		if (opts.capture === true) opts.wrap = true;
		step = step || opts.step || 1;
		if (!isNumber(step)) {
			if (step != null && !isObject$3(step)) return invalidStep(step, opts);
			return fill$2(start, end, 1, step);
		}
		if (isNumber(start) && isNumber(end)) return fillNumbers(start, end, step, opts);
		return fillLetters(start, end, Math.max(Math.abs(step), 1), opts);
	};
	module.exports = fill$2;
} });

//#endregion
//#region ../node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/compile.js
var require_compile = __commonJS({ "../node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/compile.js"(exports, module) {
	const fill$1 = require_fill_range();
	const utils$15 = require_utils$4();
	const compile$1 = (ast, options = {}) => {
		const walk$1 = (node$1, parent = {}) => {
			const invalidBlock = utils$15.isInvalidBrace(parent);
			const invalidNode = node$1.invalid === true && options.escapeInvalid === true;
			const invalid$1 = invalidBlock === true || invalidNode === true;
			const prefix$1 = options.escapeInvalid === true ? "\\" : "";
			let output = "";
			if (node$1.isOpen === true) return prefix$1 + node$1.value;
			if (node$1.isClose === true) {
				console.log("node.isClose", prefix$1, node$1.value);
				return prefix$1 + node$1.value;
			}
			if (node$1.type === "open") return invalid$1 ? prefix$1 + node$1.value : "(";
			if (node$1.type === "close") return invalid$1 ? prefix$1 + node$1.value : ")";
			if (node$1.type === "comma") return node$1.prev.type === "comma" ? "" : invalid$1 ? node$1.value : "|";
			if (node$1.value) return node$1.value;
			if (node$1.nodes && node$1.ranges > 0) {
				const args = utils$15.reduce(node$1.nodes);
				const range = fill$1(...args, {
					...options,
					wrap: false,
					toRegex: true,
					strictZeros: true
				});
				if (range.length !== 0) return args.length > 1 && range.length > 1 ? `(${range})` : range;
			}
			if (node$1.nodes) for (const child$1 of node$1.nodes) output += walk$1(child$1, node$1);
			return output;
		};
		return walk$1(ast);
	};
	module.exports = compile$1;
} });

//#endregion
//#region ../node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/expand.js
var require_expand = __commonJS({ "../node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/expand.js"(exports, module) {
	const fill = require_fill_range();
	const stringify$3 = require_stringify$1();
	const utils$14 = require_utils$4();
	const append = (queue$1 = "", stash = "", enclose = false) => {
		const result = [];
		queue$1 = [].concat(queue$1);
		stash = [].concat(stash);
		if (!stash.length) return queue$1;
		if (!queue$1.length) return enclose ? utils$14.flatten(stash).map((ele) => `{${ele}}`) : stash;
		for (const item of queue$1) if (Array.isArray(item)) for (const value of item) result.push(append(value, stash, enclose));
else for (let ele of stash) {
			if (enclose === true && typeof ele === "string") ele = `{${ele}}`;
			result.push(Array.isArray(ele) ? append(item, ele, enclose) : item + ele);
		}
		return utils$14.flatten(result);
	};
	const expand$1 = (ast, options = {}) => {
		const rangeLimit = options.rangeLimit === undefined ? 1e3 : options.rangeLimit;
		const walk$1 = (node$1, parent = {}) => {
			node$1.queue = [];
			let p = parent;
			let q = parent.queue;
			while (p.type !== "brace" && p.type !== "root" && p.parent) {
				p = p.parent;
				q = p.queue;
			}
			if (node$1.invalid || node$1.dollar) {
				q.push(append(q.pop(), stringify$3(node$1, options)));
				return;
			}
			if (node$1.type === "brace" && node$1.invalid !== true && node$1.nodes.length === 2) {
				q.push(append(q.pop(), ["{}"]));
				return;
			}
			if (node$1.nodes && node$1.ranges > 0) {
				const args = utils$14.reduce(node$1.nodes);
				if (utils$14.exceedsLimit(...args, options.step, rangeLimit)) throw new RangeError("expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.");
				let range = fill(...args, options);
				if (range.length === 0) range = stringify$3(node$1, options);
				q.push(append(q.pop(), range));
				node$1.nodes = [];
				return;
			}
			const enclose = utils$14.encloseBrace(node$1);
			let queue$1 = node$1.queue;
			let block = node$1;
			while (block.type !== "brace" && block.type !== "root" && block.parent) {
				block = block.parent;
				queue$1 = block.queue;
			}
			for (let i$2 = 0; i$2 < node$1.nodes.length; i$2++) {
				const child$1 = node$1.nodes[i$2];
				if (child$1.type === "comma" && node$1.type === "brace") {
					if (i$2 === 1) queue$1.push("");
					queue$1.push("");
					continue;
				}
				if (child$1.type === "close") {
					q.push(append(q.pop(), queue$1, enclose));
					continue;
				}
				if (child$1.value && child$1.type !== "open") {
					queue$1.push(append(queue$1.pop(), child$1.value));
					continue;
				}
				if (child$1.nodes) walk$1(child$1, node$1);
			}
			return queue$1;
		};
		return utils$14.flatten(walk$1(ast));
	};
	module.exports = expand$1;
} });

//#endregion
//#region ../node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/constants.js
var require_constants$3 = __commonJS({ "../node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/constants.js"(exports, module) {
	module.exports = {
		MAX_LENGTH: 1e4,
		CHAR_0: "0",
		CHAR_9: "9",
		CHAR_UPPERCASE_A: "A",
		CHAR_LOWERCASE_A: "a",
		CHAR_UPPERCASE_Z: "Z",
		CHAR_LOWERCASE_Z: "z",
		CHAR_LEFT_PARENTHESES: "(",
		CHAR_RIGHT_PARENTHESES: ")",
		CHAR_ASTERISK: "*",
		CHAR_AMPERSAND: "&",
		CHAR_AT: "@",
		CHAR_BACKSLASH: "\\",
		CHAR_BACKTICK: "`",
		CHAR_CARRIAGE_RETURN: "\r",
		CHAR_CIRCUMFLEX_ACCENT: "^",
		CHAR_COLON: ":",
		CHAR_COMMA: ",",
		CHAR_DOLLAR: "$",
		CHAR_DOT: ".",
		CHAR_DOUBLE_QUOTE: "\"",
		CHAR_EQUAL: "=",
		CHAR_EXCLAMATION_MARK: "!",
		CHAR_FORM_FEED: "\f",
		CHAR_FORWARD_SLASH: "/",
		CHAR_HASH: "#",
		CHAR_HYPHEN_MINUS: "-",
		CHAR_LEFT_ANGLE_BRACKET: "<",
		CHAR_LEFT_CURLY_BRACE: "{",
		CHAR_LEFT_SQUARE_BRACKET: "[",
		CHAR_LINE_FEED: "\n",
		CHAR_NO_BREAK_SPACE: "\xA0",
		CHAR_PERCENT: "%",
		CHAR_PLUS: "+",
		CHAR_QUESTION_MARK: "?",
		CHAR_RIGHT_ANGLE_BRACKET: ">",
		CHAR_RIGHT_CURLY_BRACE: "}",
		CHAR_RIGHT_SQUARE_BRACKET: "]",
		CHAR_SEMICOLON: ";",
		CHAR_SINGLE_QUOTE: "'",
		CHAR_SPACE: " ",
		CHAR_TAB: "	",
		CHAR_UNDERSCORE: "_",
		CHAR_VERTICAL_LINE: "|",
		CHAR_ZERO_WIDTH_NOBREAK_SPACE: "﻿"
	};
} });

//#endregion
//#region ../node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/parse.js
var require_parse$3 = __commonJS({ "../node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/parse.js"(exports, module) {
	const stringify$2 = require_stringify$1();
	/**
	* Constants
	*/
	const { MAX_LENGTH: MAX_LENGTH$4, CHAR_BACKSLASH, CHAR_BACKTICK, CHAR_COMMA: CHAR_COMMA$2, CHAR_DOT: CHAR_DOT$1, CHAR_LEFT_PARENTHESES: CHAR_LEFT_PARENTHESES$1, CHAR_RIGHT_PARENTHESES: CHAR_RIGHT_PARENTHESES$1, CHAR_LEFT_CURLY_BRACE: CHAR_LEFT_CURLY_BRACE$1, CHAR_RIGHT_CURLY_BRACE: CHAR_RIGHT_CURLY_BRACE$1, CHAR_LEFT_SQUARE_BRACKET: CHAR_LEFT_SQUARE_BRACKET$2, CHAR_RIGHT_SQUARE_BRACKET: CHAR_RIGHT_SQUARE_BRACKET$2, CHAR_DOUBLE_QUOTE: CHAR_DOUBLE_QUOTE$1, CHAR_SINGLE_QUOTE: CHAR_SINGLE_QUOTE$1, CHAR_NO_BREAK_SPACE, CHAR_ZERO_WIDTH_NOBREAK_SPACE } = require_constants$3();
	/**
	* parse
	*/
	const parse$14 = (input, options = {}) => {
		if (typeof input !== "string") throw new TypeError("Expected a string");
		const opts = options || {};
		const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH$4, opts.maxLength) : MAX_LENGTH$4;
		if (input.length > max) throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max})`);
		const ast = {
			type: "root",
			input,
			nodes: []
		};
		const stack = [ast];
		let block = ast;
		let prev = ast;
		let brackets = 0;
		const length = input.length;
		let index$1 = 0;
		let depth$1 = 0;
		let value;
		/**
		* Helpers
		*/
		const advance = () => input[index$1++];
		const push$2 = (node$1) => {
			if (node$1.type === "text" && prev.type === "dot") prev.type = "text";
			if (prev && prev.type === "text" && node$1.type === "text") {
				prev.value += node$1.value;
				return;
			}
			block.nodes.push(node$1);
			node$1.parent = block;
			node$1.prev = prev;
			prev = node$1;
			return node$1;
		};
		push$2({ type: "bos" });
		while (index$1 < length) {
			block = stack[stack.length - 1];
			value = advance();
			/**
			* Invalid chars
			*/
			if (value === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value === CHAR_NO_BREAK_SPACE) continue;
			/**
			* Escaped chars
			*/
			if (value === CHAR_BACKSLASH) {
				push$2({
					type: "text",
					value: (options.keepEscaping ? value : "") + advance()
				});
				continue;
			}
			/**
			* Right square bracket (literal): ']'
			*/
			if (value === CHAR_RIGHT_SQUARE_BRACKET$2) {
				push$2({
					type: "text",
					value: "\\" + value
				});
				continue;
			}
			/**
			* Left square bracket: '['
			*/
			if (value === CHAR_LEFT_SQUARE_BRACKET$2) {
				brackets++;
				let next;
				while (index$1 < length && (next = advance())) {
					value += next;
					if (next === CHAR_LEFT_SQUARE_BRACKET$2) {
						brackets++;
						continue;
					}
					if (next === CHAR_BACKSLASH) {
						value += advance();
						continue;
					}
					if (next === CHAR_RIGHT_SQUARE_BRACKET$2) {
						brackets--;
						if (brackets === 0) break;
					}
				}
				push$2({
					type: "text",
					value
				});
				continue;
			}
			/**
			* Parentheses
			*/
			if (value === CHAR_LEFT_PARENTHESES$1) {
				block = push$2({
					type: "paren",
					nodes: []
				});
				stack.push(block);
				push$2({
					type: "text",
					value
				});
				continue;
			}
			if (value === CHAR_RIGHT_PARENTHESES$1) {
				if (block.type !== "paren") {
					push$2({
						type: "text",
						value
					});
					continue;
				}
				block = stack.pop();
				push$2({
					type: "text",
					value
				});
				block = stack[stack.length - 1];
				continue;
			}
			/**
			* Quotes: '|"|`
			*/
			if (value === CHAR_DOUBLE_QUOTE$1 || value === CHAR_SINGLE_QUOTE$1 || value === CHAR_BACKTICK) {
				const open = value;
				let next;
				if (options.keepQuotes !== true) value = "";
				while (index$1 < length && (next = advance())) {
					if (next === CHAR_BACKSLASH) {
						value += next + advance();
						continue;
					}
					if (next === open) {
						if (options.keepQuotes === true) value += next;
						break;
					}
					value += next;
				}
				push$2({
					type: "text",
					value
				});
				continue;
			}
			/**
			* Left curly brace: '{'
			*/
			if (value === CHAR_LEFT_CURLY_BRACE$1) {
				depth$1++;
				const dollar = prev.value && prev.value.slice(-1) === "$" || block.dollar === true;
				const brace = {
					type: "brace",
					open: true,
					close: false,
					dollar,
					depth: depth$1,
					commas: 0,
					ranges: 0,
					nodes: []
				};
				block = push$2(brace);
				stack.push(block);
				push$2({
					type: "open",
					value
				});
				continue;
			}
			/**
			* Right curly brace: '}'
			*/
			if (value === CHAR_RIGHT_CURLY_BRACE$1) {
				if (block.type !== "brace") {
					push$2({
						type: "text",
						value
					});
					continue;
				}
				const type = "close";
				block = stack.pop();
				block.close = true;
				push$2({
					type,
					value
				});
				depth$1--;
				block = stack[stack.length - 1];
				continue;
			}
			/**
			* Comma: ','
			*/
			if (value === CHAR_COMMA$2 && depth$1 > 0) {
				if (block.ranges > 0) {
					block.ranges = 0;
					const open = block.nodes.shift();
					block.nodes = [open, {
						type: "text",
						value: stringify$2(block)
					}];
				}
				push$2({
					type: "comma",
					value
				});
				block.commas++;
				continue;
			}
			/**
			* Dot: '.'
			*/
			if (value === CHAR_DOT$1 && depth$1 > 0 && block.commas === 0) {
				const siblings = block.nodes;
				if (depth$1 === 0 || siblings.length === 0) {
					push$2({
						type: "text",
						value
					});
					continue;
				}
				if (prev.type === "dot") {
					block.range = [];
					prev.value += value;
					prev.type = "range";
					if (block.nodes.length !== 3 && block.nodes.length !== 5) {
						block.invalid = true;
						block.ranges = 0;
						prev.type = "text";
						continue;
					}
					block.ranges++;
					block.args = [];
					continue;
				}
				if (prev.type === "range") {
					siblings.pop();
					const before = siblings[siblings.length - 1];
					before.value += prev.value + value;
					prev = before;
					block.ranges--;
					continue;
				}
				push$2({
					type: "dot",
					value
				});
				continue;
			}
			/**
			* Text
			*/
			push$2({
				type: "text",
				value
			});
		}
		do {
			block = stack.pop();
			if (block.type !== "root") {
				block.nodes.forEach((node$1) => {
					if (!node$1.nodes) {
						if (node$1.type === "open") node$1.isOpen = true;
						if (node$1.type === "close") node$1.isClose = true;
						if (!node$1.nodes) node$1.type = "text";
						node$1.invalid = true;
					}
				});
				const parent = stack[stack.length - 1];
				const index$2 = parent.nodes.indexOf(block);
				parent.nodes.splice(index$2, 1, ...block.nodes);
			}
		} while (stack.length > 0);
		push$2({ type: "eos" });
		return ast;
	};
	module.exports = parse$14;
} });

//#endregion
//#region ../node_modules/.pnpm/braces@3.0.3/node_modules/braces/index.js
var require_braces = __commonJS({ "../node_modules/.pnpm/braces@3.0.3/node_modules/braces/index.js"(exports, module) {
	const stringify$1 = require_stringify$1();
	const compile = require_compile();
	const expand = require_expand();
	const parse$13 = require_parse$3();
	/**
	* Expand the given pattern or create a regex-compatible string.
	*
	* ```js
	* const braces = require('braces');
	* console.log(braces('{a,b,c}', { compile: true })); //=> ['(a|b|c)']
	* console.log(braces('{a,b,c}')); //=> ['a', 'b', 'c']
	* ```
	* @param {String} `str`
	* @param {Object} `options`
	* @return {String}
	* @api public
	*/
	const braces$1 = (input, options = {}) => {
		let output = [];
		if (Array.isArray(input)) for (const pattern$1 of input) {
			const result = braces$1.create(pattern$1, options);
			if (Array.isArray(result)) output.push(...result);
else output.push(result);
		}
else output = [].concat(braces$1.create(input, options));
		if (options && options.expand === true && options.nodupes === true) output = [...new Set(output)];
		return output;
	};
	/**
	* Parse the given `str` with the given `options`.
	*
	* ```js
	* // braces.parse(pattern, [, options]);
	* const ast = braces.parse('a/{b,c}/d');
	* console.log(ast);
	* ```
	* @param {String} pattern Brace pattern to parse
	* @param {Object} options
	* @return {Object} Returns an AST
	* @api public
	*/
	braces$1.parse = (input, options = {}) => parse$13(input, options);
	/**
	* Creates a braces string from an AST, or an AST node.
	*
	* ```js
	* const braces = require('braces');
	* let ast = braces.parse('foo/{a,b}/bar');
	* console.log(stringify(ast.nodes[2])); //=> '{a,b}'
	* ```
	* @param {String} `input` Brace pattern or AST.
	* @param {Object} `options`
	* @return {Array} Returns an array of expanded values.
	* @api public
	*/
	braces$1.stringify = (input, options = {}) => {
		if (typeof input === "string") return stringify$1(braces$1.parse(input, options), options);
		return stringify$1(input, options);
	};
	/**
	* Compiles a brace pattern into a regex-compatible, optimized string.
	* This method is called by the main [braces](#braces) function by default.
	*
	* ```js
	* const braces = require('braces');
	* console.log(braces.compile('a/{b,c}/d'));
	* //=> ['a/(b|c)/d']
	* ```
	* @param {String} `input` Brace pattern or AST.
	* @param {Object} `options`
	* @return {Array} Returns an array of expanded values.
	* @api public
	*/
	braces$1.compile = (input, options = {}) => {
		if (typeof input === "string") input = braces$1.parse(input, options);
		return compile(input, options);
	};
	/**
	* Expands a brace pattern into an array. This method is called by the
	* main [braces](#braces) function when `options.expand` is true. Before
	* using this method it's recommended that you read the [performance notes](#performance))
	* and advantages of using [.compile](#compile) instead.
	*
	* ```js
	* const braces = require('braces');
	* console.log(braces.expand('a/{b,c}/d'));
	* //=> ['a/b/d', 'a/c/d'];
	* ```
	* @param {String} `pattern` Brace pattern
	* @param {Object} `options`
	* @return {Array} Returns an array of expanded values.
	* @api public
	*/
	braces$1.expand = (input, options = {}) => {
		if (typeof input === "string") input = braces$1.parse(input, options);
		let result = expand(input, options);
		if (options.noempty === true) result = result.filter(Boolean);
		if (options.nodupes === true) result = [...new Set(result)];
		return result;
	};
	/**
	* Processes a brace pattern and returns either an expanded array
	* (if `options.expand` is true), a highly optimized regex-compatible string.
	* This method is called by the main [braces](#braces) function.
	*
	* ```js
	* const braces = require('braces');
	* console.log(braces.create('user-{200..300}/project-{a,b,c}-{1..10}'))
	* //=> 'user-(20[0-9]|2[1-9][0-9]|300)/project-(a|b|c)-([1-9]|10)'
	* ```
	* @param {String} `pattern` Brace pattern
	* @param {Object} `options`
	* @return {Array} Returns an array of expanded values.
	* @api public
	*/
	braces$1.create = (input, options = {}) => {
		if (input === "" || input.length < 3) return [input];
		return options.expand !== true ? braces$1.compile(input, options) : braces$1.expand(input, options);
	};
	/**
	* Expose "braces"
	*/
	module.exports = braces$1;
} });

//#endregion
//#region ../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/constants.js
var require_constants$2 = __commonJS({ "../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/constants.js"(exports, module) {
	const path$27 = require("path");
	const WIN_SLASH = "\\\\/";
	const WIN_NO_SLASH = `[^${WIN_SLASH}]`;
	/**
	* Posix glob regex
	*/
	const DOT_LITERAL = "\\.";
	const PLUS_LITERAL = "\\+";
	const QMARK_LITERAL = "\\?";
	const SLASH_LITERAL = "\\/";
	const ONE_CHAR = "(?=.)";
	const QMARK = "[^/]";
	const END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;
	const START_ANCHOR = `(?:^|${SLASH_LITERAL})`;
	const DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;
	const NO_DOT = `(?!${DOT_LITERAL})`;
	const NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;
	const NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;
	const NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;
	const QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;
	const STAR = `${QMARK}*?`;
	const POSIX_CHARS = {
		DOT_LITERAL,
		PLUS_LITERAL,
		QMARK_LITERAL,
		SLASH_LITERAL,
		ONE_CHAR,
		QMARK,
		END_ANCHOR,
		DOTS_SLASH,
		NO_DOT,
		NO_DOTS,
		NO_DOT_SLASH,
		NO_DOTS_SLASH,
		QMARK_NO_DOT,
		STAR,
		START_ANCHOR
	};
	/**
	* Windows glob regex
	*/
	const WINDOWS_CHARS = {
		...POSIX_CHARS,
		SLASH_LITERAL: `[${WIN_SLASH}]`,
		QMARK: WIN_NO_SLASH,
		STAR: `${WIN_NO_SLASH}*?`,
		DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,
		NO_DOT: `(?!${DOT_LITERAL})`,
		NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
		NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,
		NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
		QMARK_NO_DOT: `[^.${WIN_SLASH}]`,
		START_ANCHOR: `(?:^|[${WIN_SLASH}])`,
		END_ANCHOR: `(?:[${WIN_SLASH}]|$)`
	};
	/**
	* POSIX Bracket Regex
	*/
	const POSIX_REGEX_SOURCE$1 = {
		alnum: "a-zA-Z0-9",
		alpha: "a-zA-Z",
		ascii: "\\x00-\\x7F",
		blank: " \\t",
		cntrl: "\\x00-\\x1F\\x7F",
		digit: "0-9",
		graph: "\\x21-\\x7E",
		lower: "a-z",
		print: "\\x20-\\x7E ",
		punct: "\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",
		space: " \\t\\r\\n\\v\\f",
		upper: "A-Z",
		word: "A-Za-z0-9_",
		xdigit: "A-Fa-f0-9"
	};
	module.exports = {
		MAX_LENGTH: 65536,
		POSIX_REGEX_SOURCE: POSIX_REGEX_SOURCE$1,
		REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
		REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
		REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
		REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
		REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
		REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,
		REPLACEMENTS: {
			"***": "*",
			"**/**": "**",
			"**/**/**": "**"
		},
		CHAR_0: 48,
		CHAR_9: 57,
		CHAR_UPPERCASE_A: 65,
		CHAR_LOWERCASE_A: 97,
		CHAR_UPPERCASE_Z: 90,
		CHAR_LOWERCASE_Z: 122,
		CHAR_LEFT_PARENTHESES: 40,
		CHAR_RIGHT_PARENTHESES: 41,
		CHAR_ASTERISK: 42,
		CHAR_AMPERSAND: 38,
		CHAR_AT: 64,
		CHAR_BACKWARD_SLASH: 92,
		CHAR_CARRIAGE_RETURN: 13,
		CHAR_CIRCUMFLEX_ACCENT: 94,
		CHAR_COLON: 58,
		CHAR_COMMA: 44,
		CHAR_DOT: 46,
		CHAR_DOUBLE_QUOTE: 34,
		CHAR_EQUAL: 61,
		CHAR_EXCLAMATION_MARK: 33,
		CHAR_FORM_FEED: 12,
		CHAR_FORWARD_SLASH: 47,
		CHAR_GRAVE_ACCENT: 96,
		CHAR_HASH: 35,
		CHAR_HYPHEN_MINUS: 45,
		CHAR_LEFT_ANGLE_BRACKET: 60,
		CHAR_LEFT_CURLY_BRACE: 123,
		CHAR_LEFT_SQUARE_BRACKET: 91,
		CHAR_LINE_FEED: 10,
		CHAR_NO_BREAK_SPACE: 160,
		CHAR_PERCENT: 37,
		CHAR_PLUS: 43,
		CHAR_QUESTION_MARK: 63,
		CHAR_RIGHT_ANGLE_BRACKET: 62,
		CHAR_RIGHT_CURLY_BRACE: 125,
		CHAR_RIGHT_SQUARE_BRACKET: 93,
		CHAR_SEMICOLON: 59,
		CHAR_SINGLE_QUOTE: 39,
		CHAR_SPACE: 32,
		CHAR_TAB: 9,
		CHAR_UNDERSCORE: 95,
		CHAR_VERTICAL_LINE: 124,
		CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,
		SEP: path$27.sep,
		extglobChars(chars$1) {
			return {
				"!": {
					type: "negate",
					open: "(?:(?!(?:",
					close: `))${chars$1.STAR})`
				},
				"?": {
					type: "qmark",
					open: "(?:",
					close: ")?"
				},
				"+": {
					type: "plus",
					open: "(?:",
					close: ")+"
				},
				"*": {
					type: "star",
					open: "(?:",
					close: ")*"
				},
				"@": {
					type: "at",
					open: "(?:",
					close: ")"
				}
			};
		},
		globChars(win32$1) {
			return win32$1 === true ? WINDOWS_CHARS : POSIX_CHARS;
		}
	};
} });

//#endregion
//#region ../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/utils.js
var require_utils$3 = __commonJS({ "../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/utils.js"(exports) {
	const path$26 = require("path");
	const win32 = process.platform === "win32";
	const { REGEX_BACKSLASH, REGEX_REMOVE_BACKSLASH, REGEX_SPECIAL_CHARS, REGEX_SPECIAL_CHARS_GLOBAL } = require_constants$2();
	exports.isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
	exports.hasRegexChars = (str) => REGEX_SPECIAL_CHARS.test(str);
	exports.isRegexChar = (str) => str.length === 1 && exports.hasRegexChars(str);
	exports.escapeRegex = (str) => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, "\\$1");
	exports.toPosixSlashes = (str) => str.replace(REGEX_BACKSLASH, "/");
	exports.removeBackslashes = (str) => {
		return str.replace(REGEX_REMOVE_BACKSLASH, (match) => {
			return match === "\\" ? "" : match;
		});
	};
	exports.supportsLookbehinds = () => {
		const segs = process.version.slice(1).split(".").map(Number);
		if (segs.length === 3 && segs[0] >= 9 || segs[0] === 8 && segs[1] >= 10) return true;
		return false;
	};
	exports.isWindows = (options) => {
		if (options && typeof options.windows === "boolean") return options.windows;
		return win32 === true || path$26.sep === "\\";
	};
	exports.escapeLast = (input, char, lastIdx) => {
		const idx = input.lastIndexOf(char, lastIdx);
		if (idx === -1) return input;
		if (input[idx - 1] === "\\") return exports.escapeLast(input, char, idx - 1);
		return `${input.slice(0, idx)}\\${input.slice(idx)}`;
	};
	exports.removePrefix = (input, state = {}) => {
		let output = input;
		if (output.startsWith("./")) {
			output = output.slice(2);
			state.prefix = "./";
		}
		return output;
	};
	exports.wrapOutput = (input, state = {}, options = {}) => {
		const prepend = options.contains ? "" : "^";
		const append$1 = options.contains ? "" : "$";
		let output = `${prepend}(?:${input})${append$1}`;
		if (state.negated === true) output = `(?:^(?!${output}).*$)`;
		return output;
	};
} });

//#endregion
//#region ../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/scan.js
var require_scan = __commonJS({ "../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/scan.js"(exports, module) {
	const utils$13 = require_utils$3();
	const { CHAR_ASTERISK: CHAR_ASTERISK$1, CHAR_AT, CHAR_BACKWARD_SLASH, CHAR_COMMA: CHAR_COMMA$1, CHAR_DOT, CHAR_EXCLAMATION_MARK, CHAR_FORWARD_SLASH, CHAR_LEFT_CURLY_BRACE, CHAR_LEFT_PARENTHESES, CHAR_LEFT_SQUARE_BRACKET: CHAR_LEFT_SQUARE_BRACKET$1, CHAR_PLUS, CHAR_QUESTION_MARK, CHAR_RIGHT_CURLY_BRACE, CHAR_RIGHT_PARENTHESES, CHAR_RIGHT_SQUARE_BRACKET: CHAR_RIGHT_SQUARE_BRACKET$1 } = require_constants$2();
	const isPathSeparator = (code$1) => {
		return code$1 === CHAR_FORWARD_SLASH || code$1 === CHAR_BACKWARD_SLASH;
	};
	const depth = (token) => {
		if (token.isPrefix !== true) token.depth = token.isGlobstar ? Infinity : 1;
	};
	/**
	* Quickly scans a glob pattern and returns an object with a handful of
	* useful properties, like `isGlob`, `path` (the leading non-glob, if it exists),
	* `glob` (the actual pattern), `negated` (true if the path starts with `!` but not
	* with `!(`) and `negatedExtglob` (true if the path starts with `!(`).
	*
	* ```js
	* const pm = require('picomatch');
	* console.log(pm.scan('foo/bar/*.js'));
	* { isGlob: true, input: 'foo/bar/*.js', base: 'foo/bar', glob: '*.js' }
	* ```
	* @param {String} `str`
	* @param {Object} `options`
	* @return {Object} Returns an object with tokens and regex source string.
	* @api public
	*/
	const scan$1 = (input, options) => {
		const opts = options || {};
		const length = input.length - 1;
		const scanToEnd = opts.parts === true || opts.scanToEnd === true;
		const slashes = [];
		const tokens = [];
		const parts = [];
		let str = input;
		let index$1 = -1;
		let start = 0;
		let lastIndex = 0;
		let isBrace = false;
		let isBracket = false;
		let isGlob$1 = false;
		let isExtglob$1 = false;
		let isGlobstar = false;
		let braceEscaped = false;
		let backslashes = false;
		let negated = false;
		let negatedExtglob = false;
		let finished$1 = false;
		let braces$2 = 0;
		let prev;
		let code$1;
		let token = {
			value: "",
			depth: 0,
			isGlob: false
		};
		const eos = () => index$1 >= length;
		const peek = () => str.charCodeAt(index$1 + 1);
		const advance = () => {
			prev = code$1;
			return str.charCodeAt(++index$1);
		};
		while (index$1 < length) {
			code$1 = advance();
			let next;
			if (code$1 === CHAR_BACKWARD_SLASH) {
				backslashes = token.backslashes = true;
				code$1 = advance();
				if (code$1 === CHAR_LEFT_CURLY_BRACE) braceEscaped = true;
				continue;
			}
			if (braceEscaped === true || code$1 === CHAR_LEFT_CURLY_BRACE) {
				braces$2++;
				while (eos() !== true && (code$1 = advance())) {
					if (code$1 === CHAR_BACKWARD_SLASH) {
						backslashes = token.backslashes = true;
						advance();
						continue;
					}
					if (code$1 === CHAR_LEFT_CURLY_BRACE) {
						braces$2++;
						continue;
					}
					if (braceEscaped !== true && code$1 === CHAR_DOT && (code$1 = advance()) === CHAR_DOT) {
						isBrace = token.isBrace = true;
						isGlob$1 = token.isGlob = true;
						finished$1 = true;
						if (scanToEnd === true) continue;
						break;
					}
					if (braceEscaped !== true && code$1 === CHAR_COMMA$1) {
						isBrace = token.isBrace = true;
						isGlob$1 = token.isGlob = true;
						finished$1 = true;
						if (scanToEnd === true) continue;
						break;
					}
					if (code$1 === CHAR_RIGHT_CURLY_BRACE) {
						braces$2--;
						if (braces$2 === 0) {
							braceEscaped = false;
							isBrace = token.isBrace = true;
							finished$1 = true;
							break;
						}
					}
				}
				if (scanToEnd === true) continue;
				break;
			}
			if (code$1 === CHAR_FORWARD_SLASH) {
				slashes.push(index$1);
				tokens.push(token);
				token = {
					value: "",
					depth: 0,
					isGlob: false
				};
				if (finished$1 === true) continue;
				if (prev === CHAR_DOT && index$1 === start + 1) {
					start += 2;
					continue;
				}
				lastIndex = index$1 + 1;
				continue;
			}
			if (opts.noext !== true) {
				const isExtglobChar = code$1 === CHAR_PLUS || code$1 === CHAR_AT || code$1 === CHAR_ASTERISK$1 || code$1 === CHAR_QUESTION_MARK || code$1 === CHAR_EXCLAMATION_MARK;
				if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {
					isGlob$1 = token.isGlob = true;
					isExtglob$1 = token.isExtglob = true;
					finished$1 = true;
					if (code$1 === CHAR_EXCLAMATION_MARK && index$1 === start) negatedExtglob = true;
					if (scanToEnd === true) {
						while (eos() !== true && (code$1 = advance())) {
							if (code$1 === CHAR_BACKWARD_SLASH) {
								backslashes = token.backslashes = true;
								code$1 = advance();
								continue;
							}
							if (code$1 === CHAR_RIGHT_PARENTHESES) {
								isGlob$1 = token.isGlob = true;
								finished$1 = true;
								break;
							}
						}
						continue;
					}
					break;
				}
			}
			if (code$1 === CHAR_ASTERISK$1) {
				if (prev === CHAR_ASTERISK$1) isGlobstar = token.isGlobstar = true;
				isGlob$1 = token.isGlob = true;
				finished$1 = true;
				if (scanToEnd === true) continue;
				break;
			}
			if (code$1 === CHAR_QUESTION_MARK) {
				isGlob$1 = token.isGlob = true;
				finished$1 = true;
				if (scanToEnd === true) continue;
				break;
			}
			if (code$1 === CHAR_LEFT_SQUARE_BRACKET$1) {
				while (eos() !== true && (next = advance())) {
					if (next === CHAR_BACKWARD_SLASH) {
						backslashes = token.backslashes = true;
						advance();
						continue;
					}
					if (next === CHAR_RIGHT_SQUARE_BRACKET$1) {
						isBracket = token.isBracket = true;
						isGlob$1 = token.isGlob = true;
						finished$1 = true;
						break;
					}
				}
				if (scanToEnd === true) continue;
				break;
			}
			if (opts.nonegate !== true && code$1 === CHAR_EXCLAMATION_MARK && index$1 === start) {
				negated = token.negated = true;
				start++;
				continue;
			}
			if (opts.noparen !== true && code$1 === CHAR_LEFT_PARENTHESES) {
				isGlob$1 = token.isGlob = true;
				if (scanToEnd === true) {
					while (eos() !== true && (code$1 = advance())) {
						if (code$1 === CHAR_LEFT_PARENTHESES) {
							backslashes = token.backslashes = true;
							code$1 = advance();
							continue;
						}
						if (code$1 === CHAR_RIGHT_PARENTHESES) {
							finished$1 = true;
							break;
						}
					}
					continue;
				}
				break;
			}
			if (isGlob$1 === true) {
				finished$1 = true;
				if (scanToEnd === true) continue;
				break;
			}
		}
		if (opts.noext === true) {
			isExtglob$1 = false;
			isGlob$1 = false;
		}
		let base = str;
		let prefix$1 = "";
		let glob$2 = "";
		if (start > 0) {
			prefix$1 = str.slice(0, start);
			str = str.slice(start);
			lastIndex -= start;
		}
		if (base && isGlob$1 === true && lastIndex > 0) {
			base = str.slice(0, lastIndex);
			glob$2 = str.slice(lastIndex);
		} else if (isGlob$1 === true) {
			base = "";
			glob$2 = str;
		} else base = str;
		if (base && base !== "" && base !== "/" && base !== str) {
			if (isPathSeparator(base.charCodeAt(base.length - 1))) base = base.slice(0, -1);
		}
		if (opts.unescape === true) {
			if (glob$2) glob$2 = utils$13.removeBackslashes(glob$2);
			if (base && backslashes === true) base = utils$13.removeBackslashes(base);
		}
		const state = {
			prefix: prefix$1,
			input,
			start,
			base,
			glob: glob$2,
			isBrace,
			isBracket,
			isGlob: isGlob$1,
			isExtglob: isExtglob$1,
			isGlobstar,
			negated,
			negatedExtglob
		};
		if (opts.tokens === true) {
			state.maxDepth = 0;
			if (!isPathSeparator(code$1)) tokens.push(token);
			state.tokens = tokens;
		}
		if (opts.parts === true || opts.tokens === true) {
			let prevIndex;
			for (let idx = 0; idx < slashes.length; idx++) {
				const n = prevIndex ? prevIndex + 1 : start;
				const i$2 = slashes[idx];
				const value = input.slice(n, i$2);
				if (opts.tokens) {
					if (idx === 0 && start !== 0) {
						tokens[idx].isPrefix = true;
						tokens[idx].value = prefix$1;
					} else tokens[idx].value = value;
					depth(tokens[idx]);
					state.maxDepth += tokens[idx].depth;
				}
				if (idx !== 0 || value !== "") parts.push(value);
				prevIndex = i$2;
			}
			if (prevIndex && prevIndex + 1 < input.length) {
				const value = input.slice(prevIndex + 1);
				parts.push(value);
				if (opts.tokens) {
					tokens[tokens.length - 1].value = value;
					depth(tokens[tokens.length - 1]);
					state.maxDepth += tokens[tokens.length - 1].depth;
				}
			}
			state.slashes = slashes;
			state.parts = parts;
		}
		return state;
	};
	module.exports = scan$1;
} });

//#endregion
//#region ../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/parse.js
var require_parse$2 = __commonJS({ "../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/parse.js"(exports, module) {
	const constants$2 = require_constants$2();
	const utils$12 = require_utils$3();
	/**
	* Constants
	*/
	const { MAX_LENGTH: MAX_LENGTH$3, POSIX_REGEX_SOURCE, REGEX_NON_SPECIAL_CHARS, REGEX_SPECIAL_CHARS_BACKREF, REPLACEMENTS } = constants$2;
	/**
	* Helpers
	*/
	const expandRange = (args, options) => {
		if (typeof options.expandRange === "function") return options.expandRange(...args, options);
		args.sort();
		const value = `[${args.join("-")}]`;
		try {
			new RegExp(value);
		} catch (ex) {
			return args.map((v) => utils$12.escapeRegex(v)).join("..");
		}
		return value;
	};
	/**
	* Create the message for a syntax error
	*/
	const syntaxError = (type, char) => {
		return `Missing ${type}: "${char}" - use "\\\\${char}" to match literal characters`;
	};
	/**
	* Parse the given input string.
	* @param {String} input
	* @param {Object} options
	* @return {Object}
	*/
	const parse$12 = (input, options) => {
		if (typeof input !== "string") throw new TypeError("Expected a string");
		input = REPLACEMENTS[input] || input;
		const opts = { ...options };
		const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH$3, opts.maxLength) : MAX_LENGTH$3;
		let len = input.length;
		if (len > max) throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
		const bos = {
			type: "bos",
			value: "",
			output: opts.prepend || ""
		};
		const tokens = [bos];
		const capture = opts.capture ? "" : "?:";
		const win32$1 = utils$12.isWindows(options);
		const PLATFORM_CHARS = constants$2.globChars(win32$1);
		const EXTGLOB_CHARS = constants$2.extglobChars(PLATFORM_CHARS);
		const { DOT_LITERAL: DOT_LITERAL$1, PLUS_LITERAL: PLUS_LITERAL$1, SLASH_LITERAL: SLASH_LITERAL$1, ONE_CHAR: ONE_CHAR$1, DOTS_SLASH: DOTS_SLASH$1, NO_DOT: NO_DOT$1, NO_DOT_SLASH: NO_DOT_SLASH$1, NO_DOTS_SLASH: NO_DOTS_SLASH$1, QMARK: QMARK$1, QMARK_NO_DOT: QMARK_NO_DOT$1, STAR: STAR$1, START_ANCHOR: START_ANCHOR$1 } = PLATFORM_CHARS;
		const globstar = (opts$1) => {
			return `(${capture}(?:(?!${START_ANCHOR$1}${opts$1.dot ? DOTS_SLASH$1 : DOT_LITERAL$1}).)*?)`;
		};
		const nodot = opts.dot ? "" : NO_DOT$1;
		const qmarkNoDot = opts.dot ? QMARK$1 : QMARK_NO_DOT$1;
		let star = opts.bash === true ? globstar(opts) : STAR$1;
		if (opts.capture) star = `(${star})`;
		if (typeof opts.noext === "boolean") opts.noextglob = opts.noext;
		const state = {
			input,
			index: -1,
			start: 0,
			dot: opts.dot === true,
			consumed: "",
			output: "",
			prefix: "",
			backtrack: false,
			negated: false,
			brackets: 0,
			braces: 0,
			parens: 0,
			quotes: 0,
			globstar: false,
			tokens
		};
		input = utils$12.removePrefix(input, state);
		len = input.length;
		const extglobs = [];
		const braces$2 = [];
		const stack = [];
		let prev = bos;
		let value;
		/**
		* Tokenizing helpers
		*/
		const eos = () => state.index === len - 1;
		const peek = state.peek = (n = 1) => input[state.index + n];
		const advance = state.advance = () => input[++state.index] || "";
		const remaining = () => input.slice(state.index + 1);
		const consume$1 = (value$1 = "", num = 0) => {
			state.consumed += value$1;
			state.index += num;
		};
		const append$1 = (token) => {
			state.output += token.output != null ? token.output : token.value;
			consume$1(token.value);
		};
		const negate = () => {
			let count = 1;
			while (peek() === "!" && (peek(2) !== "(" || peek(3) === "?")) {
				advance();
				state.start++;
				count++;
			}
			if (count % 2 === 0) return false;
			state.negated = true;
			state.start++;
			return true;
		};
		const increment = (type) => {
			state[type]++;
			stack.push(type);
		};
		const decrement = (type) => {
			state[type]--;
			stack.pop();
		};
		/**
		* Push tokens onto the tokens array. This helper speeds up
		* tokenizing by 1) helping us avoid backtracking as much as possible,
		* and 2) helping us avoid creating extra tokens when consecutive
		* characters are plain text. This improves performance and simplifies
		* lookbehinds.
		*/
		const push$2 = (tok) => {
			if (prev.type === "globstar") {
				const isBrace = state.braces > 0 && (tok.type === "comma" || tok.type === "brace");
				const isExtglob$1 = tok.extglob === true || extglobs.length && (tok.type === "pipe" || tok.type === "paren");
				if (tok.type !== "slash" && tok.type !== "paren" && !isBrace && !isExtglob$1) {
					state.output = state.output.slice(0, -prev.output.length);
					prev.type = "star";
					prev.value = "*";
					prev.output = star;
					state.output += prev.output;
				}
			}
			if (extglobs.length && tok.type !== "paren") extglobs[extglobs.length - 1].inner += tok.value;
			if (tok.value || tok.output) append$1(tok);
			if (prev && prev.type === "text" && tok.type === "text") {
				prev.value += tok.value;
				prev.output = (prev.output || "") + tok.value;
				return;
			}
			tok.prev = prev;
			tokens.push(tok);
			prev = tok;
		};
		const extglobOpen = (type, value$1) => {
			const token = {
				...EXTGLOB_CHARS[value$1],
				conditions: 1,
				inner: ""
			};
			token.prev = prev;
			token.parens = state.parens;
			token.output = state.output;
			const output = (opts.capture ? "(" : "") + token.open;
			increment("parens");
			push$2({
				type,
				value: value$1,
				output: state.output ? "" : ONE_CHAR$1
			});
			push$2({
				type: "paren",
				extglob: true,
				value: advance(),
				output
			});
			extglobs.push(token);
		};
		const extglobClose = (token) => {
			let output = token.close + (opts.capture ? ")" : "");
			let rest;
			if (token.type === "negate") {
				let extglobStar = star;
				if (token.inner && token.inner.length > 1 && token.inner.includes("/")) extglobStar = globstar(opts);
				if (extglobStar !== star || eos() || /^\)+$/.test(remaining())) output = token.close = `)$))${extglobStar}`;
				if (token.inner.includes("*") && (rest = remaining()) && /^\.[^\\/.]+$/.test(rest)) {
					const expression = parse$12(rest, {
						...options,
						fastpaths: false
					}).output;
					output = token.close = `)${expression})${extglobStar})`;
				}
				if (token.prev.type === "bos") state.negatedExtglob = true;
			}
			push$2({
				type: "paren",
				extglob: true,
				value,
				output
			});
			decrement("parens");
		};
		/**
		* Fast paths
		*/
		if (opts.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(input)) {
			let backslashes = false;
			let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m, esc, chars$1, first, rest, index$1) => {
				if (first === "\\") {
					backslashes = true;
					return m;
				}
				if (first === "?") {
					if (esc) return esc + first + (rest ? QMARK$1.repeat(rest.length) : "");
					if (index$1 === 0) return qmarkNoDot + (rest ? QMARK$1.repeat(rest.length) : "");
					return QMARK$1.repeat(chars$1.length);
				}
				if (first === ".") return DOT_LITERAL$1.repeat(chars$1.length);
				if (first === "*") {
					if (esc) return esc + first + (rest ? star : "");
					return star;
				}
				return esc ? m : `\\${m}`;
			});
			if (backslashes === true) if (opts.unescape === true) output = output.replace(/\\/g, "");
else output = output.replace(/\\+/g, (m) => {
				return m.length % 2 === 0 ? "\\\\" : m ? "\\" : "";
			});
			if (output === input && opts.contains === true) {
				state.output = input;
				return state;
			}
			state.output = utils$12.wrapOutput(output, state, options);
			return state;
		}
		/**
		* Tokenize input until we reach end-of-string
		*/
		while (!eos()) {
			value = advance();
			if (value === "\0") continue;
			/**
			* Escaped characters
			*/
			if (value === "\\") {
				const next = peek();
				if (next === "/" && opts.bash !== true) continue;
				if (next === "." || next === ";") continue;
				if (!next) {
					value += "\\";
					push$2({
						type: "text",
						value
					});
					continue;
				}
				const match = /^\\+/.exec(remaining());
				let slashes = 0;
				if (match && match[0].length > 2) {
					slashes = match[0].length;
					state.index += slashes;
					if (slashes % 2 !== 0) value += "\\";
				}
				if (opts.unescape === true) value = advance();
else value += advance();
				if (state.brackets === 0) {
					push$2({
						type: "text",
						value
					});
					continue;
				}
			}
			/**
			* If we're inside a regex character class, continue
			* until we reach the closing bracket.
			*/
			if (state.brackets > 0 && (value !== "]" || prev.value === "[" || prev.value === "[^")) {
				if (opts.posix !== false && value === ":") {
					const inner = prev.value.slice(1);
					if (inner.includes("[")) {
						prev.posix = true;
						if (inner.includes(":")) {
							const idx = prev.value.lastIndexOf("[");
							const pre = prev.value.slice(0, idx);
							const rest$1 = prev.value.slice(idx + 2);
							const posix = POSIX_REGEX_SOURCE[rest$1];
							if (posix) {
								prev.value = pre + posix;
								state.backtrack = true;
								advance();
								if (!bos.output && tokens.indexOf(prev) === 1) bos.output = ONE_CHAR$1;
								continue;
							}
						}
					}
				}
				if (value === "[" && peek() !== ":" || value === "-" && peek() === "]") value = `\\${value}`;
				if (value === "]" && (prev.value === "[" || prev.value === "[^")) value = `\\${value}`;
				if (opts.posix === true && value === "!" && prev.value === "[") value = "^";
				prev.value += value;
				append$1({ value });
				continue;
			}
			/**
			* If we're inside a quoted string, continue
			* until we reach the closing double quote.
			*/
			if (state.quotes === 1 && value !== "\"") {
				value = utils$12.escapeRegex(value);
				prev.value += value;
				append$1({ value });
				continue;
			}
			/**
			* Double quotes
			*/
			if (value === "\"") {
				state.quotes = state.quotes === 1 ? 0 : 1;
				if (opts.keepQuotes === true) push$2({
					type: "text",
					value
				});
				continue;
			}
			/**
			* Parentheses
			*/
			if (value === "(") {
				increment("parens");
				push$2({
					type: "paren",
					value
				});
				continue;
			}
			if (value === ")") {
				if (state.parens === 0 && opts.strictBrackets === true) throw new SyntaxError(syntaxError("opening", "("));
				const extglob = extglobs[extglobs.length - 1];
				if (extglob && state.parens === extglob.parens + 1) {
					extglobClose(extglobs.pop());
					continue;
				}
				push$2({
					type: "paren",
					value,
					output: state.parens ? ")" : "\\)"
				});
				decrement("parens");
				continue;
			}
			/**
			* Square brackets
			*/
			if (value === "[") {
				if (opts.nobracket === true || !remaining().includes("]")) {
					if (opts.nobracket !== true && opts.strictBrackets === true) throw new SyntaxError(syntaxError("closing", "]"));
					value = `\\${value}`;
				} else increment("brackets");
				push$2({
					type: "bracket",
					value
				});
				continue;
			}
			if (value === "]") {
				if (opts.nobracket === true || prev && prev.type === "bracket" && prev.value.length === 1) {
					push$2({
						type: "text",
						value,
						output: `\\${value}`
					});
					continue;
				}
				if (state.brackets === 0) {
					if (opts.strictBrackets === true) throw new SyntaxError(syntaxError("opening", "["));
					push$2({
						type: "text",
						value,
						output: `\\${value}`
					});
					continue;
				}
				decrement("brackets");
				const prevValue = prev.value.slice(1);
				if (prev.posix !== true && prevValue[0] === "^" && !prevValue.includes("/")) value = `/${value}`;
				prev.value += value;
				append$1({ value });
				if (opts.literalBrackets === false || utils$12.hasRegexChars(prevValue)) continue;
				const escaped$1 = utils$12.escapeRegex(prev.value);
				state.output = state.output.slice(0, -prev.value.length);
				if (opts.literalBrackets === true) {
					state.output += escaped$1;
					prev.value = escaped$1;
					continue;
				}
				prev.value = `(${capture}${escaped$1}|${prev.value})`;
				state.output += prev.value;
				continue;
			}
			/**
			* Braces
			*/
			if (value === "{" && opts.nobrace !== true) {
				increment("braces");
				const open = {
					type: "brace",
					value,
					output: "(",
					outputIndex: state.output.length,
					tokensIndex: state.tokens.length
				};
				braces$2.push(open);
				push$2(open);
				continue;
			}
			if (value === "}") {
				const brace = braces$2[braces$2.length - 1];
				if (opts.nobrace === true || !brace) {
					push$2({
						type: "text",
						value,
						output: value
					});
					continue;
				}
				let output = ")";
				if (brace.dots === true) {
					const arr = tokens.slice();
					const range = [];
					for (let i$2 = arr.length - 1; i$2 >= 0; i$2--) {
						tokens.pop();
						if (arr[i$2].type === "brace") break;
						if (arr[i$2].type !== "dots") range.unshift(arr[i$2].value);
					}
					output = expandRange(range, opts);
					state.backtrack = true;
				}
				if (brace.comma !== true && brace.dots !== true) {
					const out = state.output.slice(0, brace.outputIndex);
					const toks = state.tokens.slice(brace.tokensIndex);
					brace.value = brace.output = "\\{";
					value = output = "\\}";
					state.output = out;
					for (const t$5 of toks) state.output += t$5.output || t$5.value;
				}
				push$2({
					type: "brace",
					value,
					output
				});
				decrement("braces");
				braces$2.pop();
				continue;
			}
			/**
			* Pipes
			*/
			if (value === "|") {
				if (extglobs.length > 0) extglobs[extglobs.length - 1].conditions++;
				push$2({
					type: "text",
					value
				});
				continue;
			}
			/**
			* Commas
			*/
			if (value === ",") {
				let output = value;
				const brace = braces$2[braces$2.length - 1];
				if (brace && stack[stack.length - 1] === "braces") {
					brace.comma = true;
					output = "|";
				}
				push$2({
					type: "comma",
					value,
					output
				});
				continue;
			}
			/**
			* Slashes
			*/
			if (value === "/") {
				if (prev.type === "dot" && state.index === state.start + 1) {
					state.start = state.index + 1;
					state.consumed = "";
					state.output = "";
					tokens.pop();
					prev = bos;
					continue;
				}
				push$2({
					type: "slash",
					value,
					output: SLASH_LITERAL$1
				});
				continue;
			}
			/**
			* Dots
			*/
			if (value === ".") {
				if (state.braces > 0 && prev.type === "dot") {
					if (prev.value === ".") prev.output = DOT_LITERAL$1;
					const brace = braces$2[braces$2.length - 1];
					prev.type = "dots";
					prev.output += value;
					prev.value += value;
					brace.dots = true;
					continue;
				}
				if (state.braces + state.parens === 0 && prev.type !== "bos" && prev.type !== "slash") {
					push$2({
						type: "text",
						value,
						output: DOT_LITERAL$1
					});
					continue;
				}
				push$2({
					type: "dot",
					value,
					output: DOT_LITERAL$1
				});
				continue;
			}
			/**
			* Question marks
			*/
			if (value === "?") {
				const isGroup = prev && prev.value === "(";
				if (!isGroup && opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
					extglobOpen("qmark", value);
					continue;
				}
				if (prev && prev.type === "paren") {
					const next = peek();
					let output = value;
					if (next === "<" && !utils$12.supportsLookbehinds()) throw new Error("Node.js v10 or higher is required for regex lookbehinds");
					if (prev.value === "(" && !/[!=<:]/.test(next) || next === "<" && !/<([!=]|\w+>)/.test(remaining())) output = `\\${value}`;
					push$2({
						type: "text",
						value,
						output
					});
					continue;
				}
				if (opts.dot !== true && (prev.type === "slash" || prev.type === "bos")) {
					push$2({
						type: "qmark",
						value,
						output: QMARK_NO_DOT$1
					});
					continue;
				}
				push$2({
					type: "qmark",
					value,
					output: QMARK$1
				});
				continue;
			}
			/**
			* Exclamation
			*/
			if (value === "!") {
				if (opts.noextglob !== true && peek() === "(") {
					if (peek(2) !== "?" || !/[!=<:]/.test(peek(3))) {
						extglobOpen("negate", value);
						continue;
					}
				}
				if (opts.nonegate !== true && state.index === 0) {
					negate();
					continue;
				}
			}
			/**
			* Plus
			*/
			if (value === "+") {
				if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
					extglobOpen("plus", value);
					continue;
				}
				if (prev && prev.value === "(" || opts.regex === false) {
					push$2({
						type: "plus",
						value,
						output: PLUS_LITERAL$1
					});
					continue;
				}
				if (prev && (prev.type === "bracket" || prev.type === "paren" || prev.type === "brace") || state.parens > 0) {
					push$2({
						type: "plus",
						value
					});
					continue;
				}
				push$2({
					type: "plus",
					value: PLUS_LITERAL$1
				});
				continue;
			}
			/**
			* Plain text
			*/
			if (value === "@") {
				if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
					push$2({
						type: "at",
						extglob: true,
						value,
						output: ""
					});
					continue;
				}
				push$2({
					type: "text",
					value
				});
				continue;
			}
			/**
			* Plain text
			*/
			if (value !== "*") {
				if (value === "$" || value === "^") value = `\\${value}`;
				const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());
				if (match) {
					value += match[0];
					state.index += match[0].length;
				}
				push$2({
					type: "text",
					value
				});
				continue;
			}
			/**
			* Stars
			*/
			if (prev && (prev.type === "globstar" || prev.star === true)) {
				prev.type = "star";
				prev.star = true;
				prev.value += value;
				prev.output = star;
				state.backtrack = true;
				state.globstar = true;
				consume$1(value);
				continue;
			}
			let rest = remaining();
			if (opts.noextglob !== true && /^\([^?]/.test(rest)) {
				extglobOpen("star", value);
				continue;
			}
			if (prev.type === "star") {
				if (opts.noglobstar === true) {
					consume$1(value);
					continue;
				}
				const prior = prev.prev;
				const before = prior.prev;
				const isStart = prior.type === "slash" || prior.type === "bos";
				const afterStar = before && (before.type === "star" || before.type === "globstar");
				if (opts.bash === true && (!isStart || rest[0] && rest[0] !== "/")) {
					push$2({
						type: "star",
						value,
						output: ""
					});
					continue;
				}
				const isBrace = state.braces > 0 && (prior.type === "comma" || prior.type === "brace");
				const isExtglob$1 = extglobs.length && (prior.type === "pipe" || prior.type === "paren");
				if (!isStart && prior.type !== "paren" && !isBrace && !isExtglob$1) {
					push$2({
						type: "star",
						value,
						output: ""
					});
					continue;
				}
				while (rest.slice(0, 3) === "/**") {
					const after = input[state.index + 4];
					if (after && after !== "/") break;
					rest = rest.slice(3);
					consume$1("/**", 3);
				}
				if (prior.type === "bos" && eos()) {
					prev.type = "globstar";
					prev.value += value;
					prev.output = globstar(opts);
					state.output = prev.output;
					state.globstar = true;
					consume$1(value);
					continue;
				}
				if (prior.type === "slash" && prior.prev.type !== "bos" && !afterStar && eos()) {
					state.output = state.output.slice(0, -(prior.output + prev.output).length);
					prior.output = `(?:${prior.output}`;
					prev.type = "globstar";
					prev.output = globstar(opts) + (opts.strictSlashes ? ")" : "|$)");
					prev.value += value;
					state.globstar = true;
					state.output += prior.output + prev.output;
					consume$1(value);
					continue;
				}
				if (prior.type === "slash" && prior.prev.type !== "bos" && rest[0] === "/") {
					const end = rest[1] !== void 0 ? "|$" : "";
					state.output = state.output.slice(0, -(prior.output + prev.output).length);
					prior.output = `(?:${prior.output}`;
					prev.type = "globstar";
					prev.output = `${globstar(opts)}${SLASH_LITERAL$1}|${SLASH_LITERAL$1}${end})`;
					prev.value += value;
					state.output += prior.output + prev.output;
					state.globstar = true;
					consume$1(value + advance());
					push$2({
						type: "slash",
						value: "/",
						output: ""
					});
					continue;
				}
				if (prior.type === "bos" && rest[0] === "/") {
					prev.type = "globstar";
					prev.value += value;
					prev.output = `(?:^|${SLASH_LITERAL$1}|${globstar(opts)}${SLASH_LITERAL$1})`;
					state.output = prev.output;
					state.globstar = true;
					consume$1(value + advance());
					push$2({
						type: "slash",
						value: "/",
						output: ""
					});
					continue;
				}
				state.output = state.output.slice(0, -prev.output.length);
				prev.type = "globstar";
				prev.output = globstar(opts);
				prev.value += value;
				state.output += prev.output;
				state.globstar = true;
				consume$1(value);
				continue;
			}
			const token = {
				type: "star",
				value,
				output: star
			};
			if (opts.bash === true) {
				token.output = ".*?";
				if (prev.type === "bos" || prev.type === "slash") token.output = nodot + token.output;
				push$2(token);
				continue;
			}
			if (prev && (prev.type === "bracket" || prev.type === "paren") && opts.regex === true) {
				token.output = value;
				push$2(token);
				continue;
			}
			if (state.index === state.start || prev.type === "slash" || prev.type === "dot") {
				if (prev.type === "dot") {
					state.output += NO_DOT_SLASH$1;
					prev.output += NO_DOT_SLASH$1;
				} else if (opts.dot === true) {
					state.output += NO_DOTS_SLASH$1;
					prev.output += NO_DOTS_SLASH$1;
				} else {
					state.output += nodot;
					prev.output += nodot;
				}
				if (peek() !== "*") {
					state.output += ONE_CHAR$1;
					prev.output += ONE_CHAR$1;
				}
			}
			push$2(token);
		}
		while (state.brackets > 0) {
			if (opts.strictBrackets === true) throw new SyntaxError(syntaxError("closing", "]"));
			state.output = utils$12.escapeLast(state.output, "[");
			decrement("brackets");
		}
		while (state.parens > 0) {
			if (opts.strictBrackets === true) throw new SyntaxError(syntaxError("closing", ")"));
			state.output = utils$12.escapeLast(state.output, "(");
			decrement("parens");
		}
		while (state.braces > 0) {
			if (opts.strictBrackets === true) throw new SyntaxError(syntaxError("closing", "}"));
			state.output = utils$12.escapeLast(state.output, "{");
			decrement("braces");
		}
		if (opts.strictSlashes !== true && (prev.type === "star" || prev.type === "bracket")) push$2({
			type: "maybe_slash",
			value: "",
			output: `${SLASH_LITERAL$1}?`
		});
		if (state.backtrack === true) {
			state.output = "";
			for (const token of state.tokens) {
				state.output += token.output != null ? token.output : token.value;
				if (token.suffix) state.output += token.suffix;
			}
		}
		return state;
	};
	/**
	* Fast paths for creating regular expressions for common glob patterns.
	* This can significantly speed up processing and has very little downside
	* impact when none of the fast paths match.
	*/
	parse$12.fastpaths = (input, options) => {
		const opts = { ...options };
		const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH$3, opts.maxLength) : MAX_LENGTH$3;
		const len = input.length;
		if (len > max) throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
		input = REPLACEMENTS[input] || input;
		const win32$1 = utils$12.isWindows(options);
		const { DOT_LITERAL: DOT_LITERAL$1, SLASH_LITERAL: SLASH_LITERAL$1, ONE_CHAR: ONE_CHAR$1, DOTS_SLASH: DOTS_SLASH$1, NO_DOT: NO_DOT$1, NO_DOTS: NO_DOTS$1, NO_DOTS_SLASH: NO_DOTS_SLASH$1, STAR: STAR$1, START_ANCHOR: START_ANCHOR$1 } = constants$2.globChars(win32$1);
		const nodot = opts.dot ? NO_DOTS$1 : NO_DOT$1;
		const slashDot = opts.dot ? NO_DOTS_SLASH$1 : NO_DOT$1;
		const capture = opts.capture ? "" : "?:";
		const state = {
			negated: false,
			prefix: ""
		};
		let star = opts.bash === true ? ".*?" : STAR$1;
		if (opts.capture) star = `(${star})`;
		const globstar = (opts$1) => {
			if (opts$1.noglobstar === true) return star;
			return `(${capture}(?:(?!${START_ANCHOR$1}${opts$1.dot ? DOTS_SLASH$1 : DOT_LITERAL$1}).)*?)`;
		};
		const create = (str) => {
			switch (str) {
				case "*": return `${nodot}${ONE_CHAR$1}${star}`;
				case ".*": return `${DOT_LITERAL$1}${ONE_CHAR$1}${star}`;
				case "*.*": return `${nodot}${star}${DOT_LITERAL$1}${ONE_CHAR$1}${star}`;
				case "*/*": return `${nodot}${star}${SLASH_LITERAL$1}${ONE_CHAR$1}${slashDot}${star}`;
				case "**": return nodot + globstar(opts);
				case "**/*": return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL$1})?${slashDot}${ONE_CHAR$1}${star}`;
				case "**/*.*": return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL$1})?${slashDot}${star}${DOT_LITERAL$1}${ONE_CHAR$1}${star}`;
				case "**/.*": return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL$1})?${DOT_LITERAL$1}${ONE_CHAR$1}${star}`;
				default: {
					const match = /^(.*?)\.(\w+)$/.exec(str);
					if (!match) return;
					const source$1 = create(match[1]);
					if (!source$1) return;
					return source$1 + DOT_LITERAL$1 + match[2];
				}
			}
		};
		const output = utils$12.removePrefix(input, state);
		let source = create(output);
		if (source && opts.strictSlashes !== true) source += `${SLASH_LITERAL$1}?`;
		return source;
	};
	module.exports = parse$12;
} });

//#endregion
//#region ../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/picomatch.js
var require_picomatch$1 = __commonJS({ "../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/picomatch.js"(exports, module) {
	const path$25 = require("path");
	const scan = require_scan();
	const parse$11 = require_parse$2();
	const utils$11 = require_utils$3();
	const constants$1 = require_constants$2();
	const isObject$2 = (val) => val && typeof val === "object" && !Array.isArray(val);
	/**
	* Creates a matcher function from one or more glob patterns. The
	* returned function takes a string to match as its first argument,
	* and returns true if the string is a match. The returned matcher
	* function also takes a boolean as the second argument that, when true,
	* returns an object with additional information.
	*
	* ```js
	* const picomatch = require('picomatch');
	* // picomatch(glob[, options]);
	*
	* const isMatch = picomatch('*.!(*a)');
	* console.log(isMatch('a.a')); //=> false
	* console.log(isMatch('a.b')); //=> true
	* ```
	* @name picomatch
	* @param {String|Array} `globs` One or more glob patterns.
	* @param {Object=} `options`
	* @return {Function=} Returns a matcher function.
	* @api public
	*/
	const picomatch$1 = (glob$2, options, returnState = false) => {
		if (Array.isArray(glob$2)) {
			const fns = glob$2.map((input) => picomatch$1(input, options, returnState));
			const arrayMatcher = (str) => {
				for (const isMatch of fns) {
					const state$1 = isMatch(str);
					if (state$1) return state$1;
				}
				return false;
			};
			return arrayMatcher;
		}
		const isState = isObject$2(glob$2) && glob$2.tokens && glob$2.input;
		if (glob$2 === "" || typeof glob$2 !== "string" && !isState) throw new TypeError("Expected pattern to be a non-empty string");
		const opts = options || {};
		const posix = utils$11.isWindows(options);
		const regex = isState ? picomatch$1.compileRe(glob$2, options) : picomatch$1.makeRe(glob$2, options, false, true);
		const state = regex.state;
		delete regex.state;
		let isIgnored = () => false;
		if (opts.ignore) {
			const ignoreOpts = {
				...options,
				ignore: null,
				onMatch: null,
				onResult: null
			};
			isIgnored = picomatch$1(opts.ignore, ignoreOpts, returnState);
		}
		const matcher = (input, returnObject = false) => {
			const { isMatch, match, output } = picomatch$1.test(input, regex, options, {
				glob: glob$2,
				posix
			});
			const result = {
				glob: glob$2,
				state,
				regex,
				posix,
				input,
				output,
				match,
				isMatch
			};
			if (typeof opts.onResult === "function") opts.onResult(result);
			if (isMatch === false) {
				result.isMatch = false;
				return returnObject ? result : false;
			}
			if (isIgnored(input)) {
				if (typeof opts.onIgnore === "function") opts.onIgnore(result);
				result.isMatch = false;
				return returnObject ? result : false;
			}
			if (typeof opts.onMatch === "function") opts.onMatch(result);
			return returnObject ? result : true;
		};
		if (returnState) matcher.state = state;
		return matcher;
	};
	/**
	* Test `input` with the given `regex`. This is used by the main
	* `picomatch()` function to test the input string.
	*
	* ```js
	* const picomatch = require('picomatch');
	* // picomatch.test(input, regex[, options]);
	*
	* console.log(picomatch.test('foo/bar', /^(?:([^/]*?)\/([^/]*?))$/));
	* // { isMatch: true, match: [ 'foo/', 'foo', 'bar' ], output: 'foo/bar' }
	* ```
	* @param {String} `input` String to test.
	* @param {RegExp} `regex`
	* @return {Object} Returns an object with matching info.
	* @api public
	*/
	picomatch$1.test = (input, regex, options, { glob: glob$2, posix } = {}) => {
		if (typeof input !== "string") throw new TypeError("Expected input to be a string");
		if (input === "") return {
			isMatch: false,
			output: ""
		};
		const opts = options || {};
		const format$1 = opts.format || (posix ? utils$11.toPosixSlashes : null);
		let match = input === glob$2;
		let output = match && format$1 ? format$1(input) : input;
		if (match === false) {
			output = format$1 ? format$1(input) : input;
			match = output === glob$2;
		}
		if (match === false || opts.capture === true) if (opts.matchBase === true || opts.basename === true) match = picomatch$1.matchBase(input, regex, options, posix);
else match = regex.exec(output);
		return {
			isMatch: Boolean(match),
			match,
			output
		};
	};
	/**
	* Match the basename of a filepath.
	*
	* ```js
	* const picomatch = require('picomatch');
	* // picomatch.matchBase(input, glob[, options]);
	* console.log(picomatch.matchBase('foo/bar.js', '*.js'); // true
	* ```
	* @param {String} `input` String to test.
	* @param {RegExp|String} `glob` Glob pattern or regex created by [.makeRe](#makeRe).
	* @return {Boolean}
	* @api public
	*/
	picomatch$1.matchBase = (input, glob$2, options, posix = utils$11.isWindows(options)) => {
		const regex = glob$2 instanceof RegExp ? glob$2 : picomatch$1.makeRe(glob$2, options);
		return regex.test(path$25.basename(input));
	};
	/**
	* Returns true if **any** of the given glob `patterns` match the specified `string`.
	*
	* ```js
	* const picomatch = require('picomatch');
	* // picomatch.isMatch(string, patterns[, options]);
	*
	* console.log(picomatch.isMatch('a.a', ['b.*', '*.a'])); //=> true
	* console.log(picomatch.isMatch('a.a', 'b.*')); //=> false
	* ```
	* @param {String|Array} str The string to test.
	* @param {String|Array} patterns One or more glob patterns to use for matching.
	* @param {Object} [options] See available [options](#options).
	* @return {Boolean} Returns true if any patterns match `str`
	* @api public
	*/
	picomatch$1.isMatch = (str, patterns, options) => picomatch$1(patterns, options)(str);
	/**
	* Parse a glob pattern to create the source string for a regular
	* expression.
	*
	* ```js
	* const picomatch = require('picomatch');
	* const result = picomatch.parse(pattern[, options]);
	* ```
	* @param {String} `pattern`
	* @param {Object} `options`
	* @return {Object} Returns an object with useful properties and output to be used as a regex source string.
	* @api public
	*/
	picomatch$1.parse = (pattern$1, options) => {
		if (Array.isArray(pattern$1)) return pattern$1.map((p) => picomatch$1.parse(p, options));
		return parse$11(pattern$1, {
			...options,
			fastpaths: false
		});
	};
	/**
	* Scan a glob pattern to separate the pattern into segments.
	*
	* ```js
	* const picomatch = require('picomatch');
	* // picomatch.scan(input[, options]);
	*
	* const result = picomatch.scan('!./foo/*.js');
	* console.log(result);
	* { prefix: '!./',
	*   input: '!./foo/*.js',
	*   start: 3,
	*   base: 'foo',
	*   glob: '*.js',
	*   isBrace: false,
	*   isBracket: false,
	*   isGlob: true,
	*   isExtglob: false,
	*   isGlobstar: false,
	*   negated: true }
	* ```
	* @param {String} `input` Glob pattern to scan.
	* @param {Object} `options`
	* @return {Object} Returns an object with
	* @api public
	*/
	picomatch$1.scan = (input, options) => scan(input, options);
	/**
	* Compile a regular expression from the `state` object returned by the
	* [parse()](#parse) method.
	*
	* @param {Object} `state`
	* @param {Object} `options`
	* @param {Boolean} `returnOutput` Intended for implementors, this argument allows you to return the raw output from the parser.
	* @param {Boolean} `returnState` Adds the state to a `state` property on the returned regex. Useful for implementors and debugging.
	* @return {RegExp}
	* @api public
	*/
	picomatch$1.compileRe = (state, options, returnOutput = false, returnState = false) => {
		if (returnOutput === true) return state.output;
		const opts = options || {};
		const prepend = opts.contains ? "" : "^";
		const append$1 = opts.contains ? "" : "$";
		let source = `${prepend}(?:${state.output})${append$1}`;
		if (state && state.negated === true) source = `^(?!${source}).*$`;
		const regex = picomatch$1.toRegex(source, options);
		if (returnState === true) regex.state = state;
		return regex;
	};
	/**
	* Create a regular expression from a parsed glob pattern.
	*
	* ```js
	* const picomatch = require('picomatch');
	* const state = picomatch.parse('*.js');
	* // picomatch.compileRe(state[, options]);
	*
	* console.log(picomatch.compileRe(state));
	* //=> /^(?:(?!\.)(?=.)[^/]*?\.js)$/
	* ```
	* @param {String} `state` The object returned from the `.parse` method.
	* @param {Object} `options`
	* @param {Boolean} `returnOutput` Implementors may use this argument to return the compiled output, instead of a regular expression. This is not exposed on the options to prevent end-users from mutating the result.
	* @param {Boolean} `returnState` Implementors may use this argument to return the state from the parsed glob with the returned regular expression.
	* @return {RegExp} Returns a regex created from the given pattern.
	* @api public
	*/
	picomatch$1.makeRe = (input, options = {}, returnOutput = false, returnState = false) => {
		if (!input || typeof input !== "string") throw new TypeError("Expected a non-empty string");
		let parsed = {
			negated: false,
			fastpaths: true
		};
		if (options.fastpaths !== false && (input[0] === "." || input[0] === "*")) parsed.output = parse$11.fastpaths(input, options);
		if (!parsed.output) parsed = parse$11(input, options);
		return picomatch$1.compileRe(parsed, options, returnOutput, returnState);
	};
	/**
	* Create a regular expression from the given regex source string.
	*
	* ```js
	* const picomatch = require('picomatch');
	* // picomatch.toRegex(source[, options]);
	*
	* const { output } = picomatch.parse('*.js');
	* console.log(picomatch.toRegex(output));
	* //=> /^(?:(?!\.)(?=.)[^/]*?\.js)$/
	* ```
	* @param {String} `source` Regular expression source string.
	* @param {Object} `options`
	* @return {RegExp}
	* @api public
	*/
	picomatch$1.toRegex = (source, options) => {
		try {
			const opts = options || {};
			return new RegExp(source, opts.flags || (opts.nocase ? "i" : ""));
		} catch (err) {
			if (options && options.debug === true) throw err;
			return /$^/;
		}
	};
	/**
	* Picomatch constants.
	* @return {Object}
	*/
	picomatch$1.constants = constants$1;
	/**
	* Expose "picomatch"
	*/
	module.exports = picomatch$1;
} });

//#endregion
//#region ../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/index.js
var require_picomatch = __commonJS({ "../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/index.js"(exports, module) {
	module.exports = require_picomatch$1();
} });

//#endregion
//#region ../node_modules/.pnpm/micromatch@4.0.8/node_modules/micromatch/index.js
var require_micromatch = __commonJS({ "../node_modules/.pnpm/micromatch@4.0.8/node_modules/micromatch/index.js"(exports, module) {
	const util$1 = require("util");
	const braces = require_braces();
	const picomatch = require_picomatch();
	const utils$10 = require_utils$3();
	const isEmptyString = (v) => v === "" || v === "./";
	const hasBraces = (v) => {
		const index$1 = v.indexOf("{");
		return index$1 > -1 && v.indexOf("}", index$1) > -1;
	};
	/**
	* Returns an array of strings that match one or more glob patterns.
	*
	* ```js
	* const mm = require('micromatch');
	* // mm(list, patterns[, options]);
	*
	* console.log(mm(['a.js', 'a.txt'], ['*.js']));
	* //=> [ 'a.js' ]
	* ```
	* @param {String|Array<string>} `list` List of strings to match.
	* @param {String|Array<string>} `patterns` One or more glob patterns to use for matching.
	* @param {Object} `options` See available [options](#options)
	* @return {Array} Returns an array of matches
	* @summary false
	* @api public
	*/
	const micromatch$2 = (list$3, patterns, options) => {
		patterns = [].concat(patterns);
		list$3 = [].concat(list$3);
		let omit$1 = new Set();
		let keep = new Set();
		let items = new Set();
		let negatives = 0;
		let onResult = (state) => {
			items.add(state.output);
			if (options && options.onResult) options.onResult(state);
		};
		for (let i$2 = 0; i$2 < patterns.length; i$2++) {
			let isMatch = picomatch(String(patterns[i$2]), {
				...options,
				onResult
			}, true);
			let negated = isMatch.state.negated || isMatch.state.negatedExtglob;
			if (negated) negatives++;
			for (let item of list$3) {
				let matched = isMatch(item, true);
				let match = negated ? !matched.isMatch : matched.isMatch;
				if (!match) continue;
				if (negated) omit$1.add(matched.output);
else {
					omit$1.delete(matched.output);
					keep.add(matched.output);
				}
			}
		}
		let result = negatives === patterns.length ? [...items] : [...keep];
		let matches = result.filter((item) => !omit$1.has(item));
		if (options && matches.length === 0) {
			if (options.failglob === true) throw new Error(`No matches found for "${patterns.join(", ")}"`);
			if (options.nonull === true || options.nullglob === true) return options.unescape ? patterns.map((p) => p.replace(/\\/g, "")) : patterns;
		}
		return matches;
	};
	/**
	* Backwards compatibility
	*/
	micromatch$2.match = micromatch$2;
	/**
	* Returns a matcher function from the given glob `pattern` and `options`.
	* The returned function takes a string to match as its only argument and returns
	* true if the string is a match.
	*
	* ```js
	* const mm = require('micromatch');
	* // mm.matcher(pattern[, options]);
	*
	* const isMatch = mm.matcher('*.!(*a)');
	* console.log(isMatch('a.a')); //=> false
	* console.log(isMatch('a.b')); //=> true
	* ```
	* @param {String} `pattern` Glob pattern
	* @param {Object} `options`
	* @return {Function} Returns a matcher function.
	* @api public
	*/
	micromatch$2.matcher = (pattern$1, options) => picomatch(pattern$1, options);
	/**
	* Returns true if **any** of the given glob `patterns` match the specified `string`.
	*
	* ```js
	* const mm = require('micromatch');
	* // mm.isMatch(string, patterns[, options]);
	*
	* console.log(mm.isMatch('a.a', ['b.*', '*.a'])); //=> true
	* console.log(mm.isMatch('a.a', 'b.*')); //=> false
	* ```
	* @param {String} `str` The string to test.
	* @param {String|Array} `patterns` One or more glob patterns to use for matching.
	* @param {Object} `[options]` See available [options](#options).
	* @return {Boolean} Returns true if any patterns match `str`
	* @api public
	*/
	micromatch$2.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);
	/**
	* Backwards compatibility
	*/
	micromatch$2.any = micromatch$2.isMatch;
	/**
	* Returns a list of strings that _**do not match any**_ of the given `patterns`.
	*
	* ```js
	* const mm = require('micromatch');
	* // mm.not(list, patterns[, options]);
	*
	* console.log(mm.not(['a.a', 'b.b', 'c.c'], '*.a'));
	* //=> ['b.b', 'c.c']
	* ```
	* @param {Array} `list` Array of strings to match.
	* @param {String|Array} `patterns` One or more glob pattern to use for matching.
	* @param {Object} `options` See available [options](#options) for changing how matches are performed
	* @return {Array} Returns an array of strings that **do not match** the given patterns.
	* @api public
	*/
	micromatch$2.not = (list$3, patterns, options = {}) => {
		patterns = [].concat(patterns).map(String);
		let result = new Set();
		let items = [];
		let onResult = (state) => {
			if (options.onResult) options.onResult(state);
			items.push(state.output);
		};
		let matches = new Set(micromatch$2(list$3, patterns, {
			...options,
			onResult
		}));
		for (let item of items) if (!matches.has(item)) result.add(item);
		return [...result];
	};
	/**
	* Returns true if the given `string` contains the given pattern. Similar
	* to [.isMatch](#isMatch) but the pattern can match any part of the string.
	*
	* ```js
	* var mm = require('micromatch');
	* // mm.contains(string, pattern[, options]);
	*
	* console.log(mm.contains('aa/bb/cc', '*b'));
	* //=> true
	* console.log(mm.contains('aa/bb/cc', '*d'));
	* //=> false
	* ```
	* @param {String} `str` The string to match.
	* @param {String|Array} `patterns` Glob pattern to use for matching.
	* @param {Object} `options` See available [options](#options) for changing how matches are performed
	* @return {Boolean} Returns true if any of the patterns matches any part of `str`.
	* @api public
	*/
	micromatch$2.contains = (str, pattern$1, options) => {
		if (typeof str !== "string") throw new TypeError(`Expected a string: "${util$1.inspect(str)}"`);
		if (Array.isArray(pattern$1)) return pattern$1.some((p) => micromatch$2.contains(str, p, options));
		if (typeof pattern$1 === "string") {
			if (isEmptyString(str) || isEmptyString(pattern$1)) return false;
			if (str.includes(pattern$1) || str.startsWith("./") && str.slice(2).includes(pattern$1)) return true;
		}
		return micromatch$2.isMatch(str, pattern$1, {
			...options,
			contains: true
		});
	};
	/**
	* Filter the keys of the given object with the given `glob` pattern
	* and `options`. Does not attempt to match nested keys. If you need this feature,
	* use [glob-object][] instead.
	*
	* ```js
	* const mm = require('micromatch');
	* // mm.matchKeys(object, patterns[, options]);
	*
	* const obj = { aa: 'a', ab: 'b', ac: 'c' };
	* console.log(mm.matchKeys(obj, '*b'));
	* //=> { ab: 'b' }
	* ```
	* @param {Object} `object` The object with keys to filter.
	* @param {String|Array} `patterns` One or more glob patterns to use for matching.
	* @param {Object} `options` See available [options](#options) for changing how matches are performed
	* @return {Object} Returns an object with only keys that match the given patterns.
	* @api public
	*/
	micromatch$2.matchKeys = (obj, patterns, options) => {
		if (!utils$10.isObject(obj)) throw new TypeError("Expected the first argument to be an object");
		let keys = micromatch$2(Object.keys(obj), patterns, options);
		let res = {};
		for (let key of keys) res[key] = obj[key];
		return res;
	};
	/**
	* Returns true if some of the strings in the given `list` match any of the given glob `patterns`.
	*
	* ```js
	* const mm = require('micromatch');
	* // mm.some(list, patterns[, options]);
	*
	* console.log(mm.some(['foo.js', 'bar.js'], ['*.js', '!foo.js']));
	* // true
	* console.log(mm.some(['foo.js'], ['*.js', '!foo.js']));
	* // false
	* ```
	* @param {String|Array} `list` The string or array of strings to test. Returns as soon as the first match is found.
	* @param {String|Array} `patterns` One or more glob patterns to use for matching.
	* @param {Object} `options` See available [options](#options) for changing how matches are performed
	* @return {Boolean} Returns true if any `patterns` matches any of the strings in `list`
	* @api public
	*/
	micromatch$2.some = (list$3, patterns, options) => {
		let items = [].concat(list$3);
		for (let pattern$1 of [].concat(patterns)) {
			let isMatch = picomatch(String(pattern$1), options);
			if (items.some((item) => isMatch(item))) return true;
		}
		return false;
	};
	/**
	* Returns true if every string in the given `list` matches
	* any of the given glob `patterns`.
	*
	* ```js
	* const mm = require('micromatch');
	* // mm.every(list, patterns[, options]);
	*
	* console.log(mm.every('foo.js', ['foo.js']));
	* // true
	* console.log(mm.every(['foo.js', 'bar.js'], ['*.js']));
	* // true
	* console.log(mm.every(['foo.js', 'bar.js'], ['*.js', '!foo.js']));
	* // false
	* console.log(mm.every(['foo.js'], ['*.js', '!foo.js']));
	* // false
	* ```
	* @param {String|Array} `list` The string or array of strings to test.
	* @param {String|Array} `patterns` One or more glob patterns to use for matching.
	* @param {Object} `options` See available [options](#options) for changing how matches are performed
	* @return {Boolean} Returns true if all `patterns` matches all of the strings in `list`
	* @api public
	*/
	micromatch$2.every = (list$3, patterns, options) => {
		let items = [].concat(list$3);
		for (let pattern$1 of [].concat(patterns)) {
			let isMatch = picomatch(String(pattern$1), options);
			if (!items.every((item) => isMatch(item))) return false;
		}
		return true;
	};
	/**
	* Returns true if **all** of the given `patterns` match
	* the specified string.
	*
	* ```js
	* const mm = require('micromatch');
	* // mm.all(string, patterns[, options]);
	*
	* console.log(mm.all('foo.js', ['foo.js']));
	* // true
	*
	* console.log(mm.all('foo.js', ['*.js', '!foo.js']));
	* // false
	*
	* console.log(mm.all('foo.js', ['*.js', 'foo.js']));
	* // true
	*
	* console.log(mm.all('foo.js', ['*.js', 'f*', '*o*', '*o.js']));
	* // true
	* ```
	* @param {String|Array} `str` The string to test.
	* @param {String|Array} `patterns` One or more glob patterns to use for matching.
	* @param {Object} `options` See available [options](#options) for changing how matches are performed
	* @return {Boolean} Returns true if any patterns match `str`
	* @api public
	*/
	micromatch$2.all = (str, patterns, options) => {
		if (typeof str !== "string") throw new TypeError(`Expected a string: "${util$1.inspect(str)}"`);
		return [].concat(patterns).every((p) => picomatch(p, options)(str));
	};
	/**
	* Returns an array of matches captured by `pattern` in `string, or `null` if the pattern did not match.
	*
	* ```js
	* const mm = require('micromatch');
	* // mm.capture(pattern, string[, options]);
	*
	* console.log(mm.capture('test/*.js', 'test/foo.js'));
	* //=> ['foo']
	* console.log(mm.capture('test/*.js', 'foo/bar.css'));
	* //=> null
	* ```
	* @param {String} `glob` Glob pattern to use for matching.
	* @param {String} `input` String to match
	* @param {Object} `options` See available [options](#options) for changing how matches are performed
	* @return {Array|null} Returns an array of captures if the input matches the glob pattern, otherwise `null`.
	* @api public
	*/
	micromatch$2.capture = (glob$2, input, options) => {
		let posix = utils$10.isWindows(options);
		let regex = picomatch.makeRe(String(glob$2), {
			...options,
			capture: true
		});
		let match = regex.exec(posix ? utils$10.toPosixSlashes(input) : input);
		if (match) return match.slice(1).map((v) => v === void 0 ? "" : v);
	};
	/**
	* Create a regular expression from the given glob `pattern`.
	*
	* ```js
	* const mm = require('micromatch');
	* // mm.makeRe(pattern[, options]);
	*
	* console.log(mm.makeRe('*.js'));
	* //=> /^(?:(\.[\\\/])?(?!\.)(?=.)[^\/]*?\.js)$/
	* ```
	* @param {String} `pattern` A glob pattern to convert to regex.
	* @param {Object} `options`
	* @return {RegExp} Returns a regex created from the given pattern.
	* @api public
	*/
	micromatch$2.makeRe = (...args) => picomatch.makeRe(...args);
	/**
	* Scan a glob pattern to separate the pattern into segments. Used
	* by the [split](#split) method.
	*
	* ```js
	* const mm = require('micromatch');
	* const state = mm.scan(pattern[, options]);
	* ```
	* @param {String} `pattern`
	* @param {Object} `options`
	* @return {Object} Returns an object with
	* @api public
	*/
	micromatch$2.scan = (...args) => picomatch.scan(...args);
	/**
	* Parse a glob pattern to create the source string for a regular
	* expression.
	*
	* ```js
	* const mm = require('micromatch');
	* const state = mm.parse(pattern[, options]);
	* ```
	* @param {String} `glob`
	* @param {Object} `options`
	* @return {Object} Returns an object with useful properties and output to be used as regex source string.
	* @api public
	*/
	micromatch$2.parse = (patterns, options) => {
		let res = [];
		for (let pattern$1 of [].concat(patterns || [])) for (let str of braces(String(pattern$1), options)) res.push(picomatch.parse(str, options));
		return res;
	};
	/**
	* Process the given brace `pattern`.
	*
	* ```js
	* const { braces } = require('micromatch');
	* console.log(braces('foo/{a,b,c}/bar'));
	* //=> [ 'foo/(a|b|c)/bar' ]
	*
	* console.log(braces('foo/{a,b,c}/bar', { expand: true }));
	* //=> [ 'foo/a/bar', 'foo/b/bar', 'foo/c/bar' ]
	* ```
	* @param {String} `pattern` String with brace pattern to process.
	* @param {Object} `options` Any [options](#options) to change how expansion is performed. See the [braces][] library for all available options.
	* @return {Array}
	* @api public
	*/
	micromatch$2.braces = (pattern$1, options) => {
		if (typeof pattern$1 !== "string") throw new TypeError("Expected a string");
		if (options && options.nobrace === true || !hasBraces(pattern$1)) return [pattern$1];
		return braces(pattern$1, options);
	};
	/**
	* Expand braces
	*/
	micromatch$2.braceExpand = (pattern$1, options) => {
		if (typeof pattern$1 !== "string") throw new TypeError("Expected a string");
		return micromatch$2.braces(pattern$1, {
			...options,
			expand: true
		});
	};
	/**
	* Expose micromatch
	*/
	micromatch$2.hasBraces = hasBraces;
	module.exports = micromatch$2;
} });

//#endregion
//#region ../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/pattern.js
var require_pattern = __commonJS({ "../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/pattern.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.removeDuplicateSlashes = exports.matchAny = exports.convertPatternsToRe = exports.makeRe = exports.getPatternParts = exports.expandBraceExpansion = exports.expandPatternsWithBraceExpansion = exports.isAffectDepthOfReadingPattern = exports.endsWithSlashGlobStar = exports.hasGlobStar = exports.getBaseDirectory = exports.isPatternRelatedToParentDirectory = exports.getPatternsOutsideCurrentDirectory = exports.getPatternsInsideCurrentDirectory = exports.getPositivePatterns = exports.getNegativePatterns = exports.isPositivePattern = exports.isNegativePattern = exports.convertToNegativePattern = exports.convertToPositivePattern = exports.isDynamicPattern = exports.isStaticPattern = void 0;
	const path$24 = require("path");
	const globParent = require_glob_parent();
	const micromatch$1 = require_micromatch();
	const GLOBSTAR = "**";
	const ESCAPE_SYMBOL = "\\";
	const COMMON_GLOB_SYMBOLS_RE = /[*?]|^!/;
	const REGEX_CHARACTER_CLASS_SYMBOLS_RE = /\[[^[]*]/;
	const REGEX_GROUP_SYMBOLS_RE = /(?:^|[^!*+?@])\([^(]*\|[^|]*\)/;
	const GLOB_EXTENSION_SYMBOLS_RE = /[!*+?@]\([^(]*\)/;
	const BRACE_EXPANSION_SEPARATORS_RE = /,|\.\./;
	/**
	* Matches a sequence of two or more consecutive slashes, excluding the first two slashes at the beginning of the string.
	* The latter is due to the presence of the device path at the beginning of the UNC path.
	*/
	const DOUBLE_SLASH_RE = /(?!^)\/{2,}/g;
	function isStaticPattern(pattern$1, options = {}) {
		return !isDynamicPattern(pattern$1, options);
	}
	exports.isStaticPattern = isStaticPattern;
	function isDynamicPattern(pattern$1, options = {}) {
		/**
		* A special case with an empty string is necessary for matching patterns that start with a forward slash.
		* An empty string cannot be a dynamic pattern.
		* For example, the pattern `/lib/*` will be spread into parts: '', 'lib', '*'.
		*/
		if (pattern$1 === "") return false;
		/**
		* When the `caseSensitiveMatch` option is disabled, all patterns must be marked as dynamic, because we cannot check
		* filepath directly (without read directory).
		*/
		if (options.caseSensitiveMatch === false || pattern$1.includes(ESCAPE_SYMBOL)) return true;
		if (COMMON_GLOB_SYMBOLS_RE.test(pattern$1) || REGEX_CHARACTER_CLASS_SYMBOLS_RE.test(pattern$1) || REGEX_GROUP_SYMBOLS_RE.test(pattern$1)) return true;
		if (options.extglob !== false && GLOB_EXTENSION_SYMBOLS_RE.test(pattern$1)) return true;
		if (options.braceExpansion !== false && hasBraceExpansion(pattern$1)) return true;
		return false;
	}
	exports.isDynamicPattern = isDynamicPattern;
	function hasBraceExpansion(pattern$1) {
		const openingBraceIndex = pattern$1.indexOf("{");
		if (openingBraceIndex === -1) return false;
		const closingBraceIndex = pattern$1.indexOf("}", openingBraceIndex + 1);
		if (closingBraceIndex === -1) return false;
		const braceContent = pattern$1.slice(openingBraceIndex, closingBraceIndex);
		return BRACE_EXPANSION_SEPARATORS_RE.test(braceContent);
	}
	function convertToPositivePattern(pattern$1) {
		return isNegativePattern(pattern$1) ? pattern$1.slice(1) : pattern$1;
	}
	exports.convertToPositivePattern = convertToPositivePattern;
	function convertToNegativePattern(pattern$1) {
		return "!" + pattern$1;
	}
	exports.convertToNegativePattern = convertToNegativePattern;
	function isNegativePattern(pattern$1) {
		return pattern$1.startsWith("!") && pattern$1[1] !== "(";
	}
	exports.isNegativePattern = isNegativePattern;
	function isPositivePattern(pattern$1) {
		return !isNegativePattern(pattern$1);
	}
	exports.isPositivePattern = isPositivePattern;
	function getNegativePatterns(patterns) {
		return patterns.filter(isNegativePattern);
	}
	exports.getNegativePatterns = getNegativePatterns;
	function getPositivePatterns$1(patterns) {
		return patterns.filter(isPositivePattern);
	}
	exports.getPositivePatterns = getPositivePatterns$1;
	/**
	* Returns patterns that can be applied inside the current directory.
	*
	* @example
	* // ['./*', '*', 'a/*']
	* getPatternsInsideCurrentDirectory(['./*', '*', 'a/*', '../*', './../*'])
	*/
	function getPatternsInsideCurrentDirectory(patterns) {
		return patterns.filter((pattern$1) => !isPatternRelatedToParentDirectory(pattern$1));
	}
	exports.getPatternsInsideCurrentDirectory = getPatternsInsideCurrentDirectory;
	/**
	* Returns patterns to be expanded relative to (outside) the current directory.
	*
	* @example
	* // ['../*', './../*']
	* getPatternsInsideCurrentDirectory(['./*', '*', 'a/*', '../*', './../*'])
	*/
	function getPatternsOutsideCurrentDirectory(patterns) {
		return patterns.filter(isPatternRelatedToParentDirectory);
	}
	exports.getPatternsOutsideCurrentDirectory = getPatternsOutsideCurrentDirectory;
	function isPatternRelatedToParentDirectory(pattern$1) {
		return pattern$1.startsWith("..") || pattern$1.startsWith("./..");
	}
	exports.isPatternRelatedToParentDirectory = isPatternRelatedToParentDirectory;
	function getBaseDirectory(pattern$1) {
		return globParent(pattern$1, { flipBackslashes: false });
	}
	exports.getBaseDirectory = getBaseDirectory;
	function hasGlobStar(pattern$1) {
		return pattern$1.includes(GLOBSTAR);
	}
	exports.hasGlobStar = hasGlobStar;
	function endsWithSlashGlobStar(pattern$1) {
		return pattern$1.endsWith("/" + GLOBSTAR);
	}
	exports.endsWithSlashGlobStar = endsWithSlashGlobStar;
	function isAffectDepthOfReadingPattern(pattern$1) {
		const basename$1 = path$24.basename(pattern$1);
		return endsWithSlashGlobStar(pattern$1) || isStaticPattern(basename$1);
	}
	exports.isAffectDepthOfReadingPattern = isAffectDepthOfReadingPattern;
	function expandPatternsWithBraceExpansion(patterns) {
		return patterns.reduce((collection, pattern$1) => {
			return collection.concat(expandBraceExpansion(pattern$1));
		}, []);
	}
	exports.expandPatternsWithBraceExpansion = expandPatternsWithBraceExpansion;
	function expandBraceExpansion(pattern$1) {
		const patterns = micromatch$1.braces(pattern$1, {
			expand: true,
			nodupes: true,
			keepEscaping: true
		});
		/**
		* Sort the patterns by length so that the same depth patterns are processed side by side.
		* `a/{b,}/{c,}/*` – `['a///*', 'a/b//*', 'a//c/*', 'a/b/c/*']`
		*/
		patterns.sort((a, b) => a.length - b.length);
		/**
		* Micromatch can return an empty string in the case of patterns like `{a,}`.
		*/
		return patterns.filter((pattern$2) => pattern$2 !== "");
	}
	exports.expandBraceExpansion = expandBraceExpansion;
	function getPatternParts(pattern$1, options) {
		let { parts } = micromatch$1.scan(pattern$1, Object.assign(Object.assign({}, options), { parts: true }));
		/**
		* The scan method returns an empty array in some cases.
		* See micromatch/picomatch#58 for more details.
		*/
		if (parts.length === 0) parts = [pattern$1];
		/**
		* The scan method does not return an empty part for the pattern with a forward slash.
		* This is another part of micromatch/picomatch#58.
		*/
		if (parts[0].startsWith("/")) {
			parts[0] = parts[0].slice(1);
			parts.unshift("");
		}
		return parts;
	}
	exports.getPatternParts = getPatternParts;
	function makeRe(pattern$1, options) {
		return micromatch$1.makeRe(pattern$1, options);
	}
	exports.makeRe = makeRe;
	function convertPatternsToRe(patterns, options) {
		return patterns.map((pattern$1) => makeRe(pattern$1, options));
	}
	exports.convertPatternsToRe = convertPatternsToRe;
	function matchAny(entry, patternsRe) {
		return patternsRe.some((patternRe) => patternRe.test(entry));
	}
	exports.matchAny = matchAny;
	/**
	* This package only works with forward slashes as a path separator.
	* Because of this, we cannot use the standard `path.normalize` method, because on Windows platform it will use of backslashes.
	*/
	function removeDuplicateSlashes(pattern$1) {
		return pattern$1.replace(DOUBLE_SLASH_RE, "/");
	}
	exports.removeDuplicateSlashes = removeDuplicateSlashes;
} });

//#endregion
//#region ../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/stream.js
var require_stream$3 = __commonJS({ "../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/stream.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.merge = void 0;
	const merge2$1 = require_merge2();
	function merge(streams) {
		const mergedStream = merge2$1(streams);
		streams.forEach((stream$3) => {
			stream$3.once("error", (error$2) => mergedStream.emit("error", error$2));
		});
		mergedStream.once("close", () => propagateCloseEventToSources(streams));
		mergedStream.once("end", () => propagateCloseEventToSources(streams));
		return mergedStream;
	}
	exports.merge = merge;
	function propagateCloseEventToSources(streams) {
		streams.forEach((stream$3) => stream$3.emit("close"));
	}
} });

//#endregion
//#region ../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/string.js
var require_string = __commonJS({ "../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/string.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.isEmpty = exports.isString = void 0;
	function isString$1(input) {
		return typeof input === "string";
	}
	exports.isString = isString$1;
	function isEmpty(input) {
		return input === "";
	}
	exports.isEmpty = isEmpty;
} });

//#endregion
//#region ../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/index.js
var require_utils$2 = __commonJS({ "../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/index.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.string = exports.stream = exports.pattern = exports.path = exports.fs = exports.errno = exports.array = void 0;
	const array = require_array();
	exports.array = array;
	const errno = require_errno();
	exports.errno = errno;
	const fs$23 = require_fs$3();
	exports.fs = fs$23;
	const path$23 = require_path();
	exports.path = path$23;
	const pattern = require_pattern();
	exports.pattern = pattern;
	const stream = require_stream$3();
	exports.stream = stream;
	const string$2 = require_string();
	exports.string = string$2;
} });

//#endregion
//#region ../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/managers/tasks.js
var require_tasks = __commonJS({ "../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/managers/tasks.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.convertPatternGroupToTask = exports.convertPatternGroupsToTasks = exports.groupPatternsByBaseDirectory = exports.getNegativePatternsAsPositive = exports.getPositivePatterns = exports.convertPatternsToTasks = exports.generate = void 0;
	const utils$9 = require_utils$2();
	function generate(input, settings) {
		const patterns = processPatterns(input, settings);
		const ignore = processPatterns(settings.ignore, settings);
		const positivePatterns = getPositivePatterns(patterns);
		const negativePatterns = getNegativePatternsAsPositive(patterns, ignore);
		const staticPatterns = positivePatterns.filter((pattern$1) => utils$9.pattern.isStaticPattern(pattern$1, settings));
		const dynamicPatterns = positivePatterns.filter((pattern$1) => utils$9.pattern.isDynamicPattern(pattern$1, settings));
		const staticTasks = convertPatternsToTasks(
			staticPatterns,
			negativePatterns,
			/* dynamic */
			false
);
		const dynamicTasks = convertPatternsToTasks(
			dynamicPatterns,
			negativePatterns,
			/* dynamic */
			true
);
		return staticTasks.concat(dynamicTasks);
	}
	exports.generate = generate;
	function processPatterns(input, settings) {
		let patterns = input;
		/**
		* The original pattern like `{,*,**,a/*}` can lead to problems checking the depth when matching entry
		* and some problems with the micromatch package (see fast-glob issues: #365, #394).
		*
		* To solve this problem, we expand all patterns containing brace expansion. This can lead to a slight slowdown
		* in matching in the case of a large set of patterns after expansion.
		*/
		if (settings.braceExpansion) patterns = utils$9.pattern.expandPatternsWithBraceExpansion(patterns);
		/**
		* If the `baseNameMatch` option is enabled, we must add globstar to patterns, so that they can be used
		* at any nesting level.
		*
		* We do this here, because otherwise we have to complicate the filtering logic. For example, we need to change
		* the pattern in the filter before creating a regular expression. There is no need to change the patterns
		* in the application. Only on the input.
		*/
		if (settings.baseNameMatch) patterns = patterns.map((pattern$1) => pattern$1.includes("/") ? pattern$1 : `**/${pattern$1}`);
		/**
		* This method also removes duplicate slashes that may have been in the pattern or formed as a result of expansion.
		*/
		return patterns.map((pattern$1) => utils$9.pattern.removeDuplicateSlashes(pattern$1));
	}
	/**
	* Returns tasks grouped by basic pattern directories.
	*
	* Patterns that can be found inside (`./`) and outside (`../`) the current directory are handled separately.
	* This is necessary because directory traversal starts at the base directory and goes deeper.
	*/
	function convertPatternsToTasks(positive, negative, dynamic) {
		const tasks = [];
		const patternsOutsideCurrentDirectory = utils$9.pattern.getPatternsOutsideCurrentDirectory(positive);
		const patternsInsideCurrentDirectory = utils$9.pattern.getPatternsInsideCurrentDirectory(positive);
		const outsideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsOutsideCurrentDirectory);
		const insideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsInsideCurrentDirectory);
		tasks.push(...convertPatternGroupsToTasks(outsideCurrentDirectoryGroup, negative, dynamic));
		if ("." in insideCurrentDirectoryGroup) tasks.push(convertPatternGroupToTask(".", patternsInsideCurrentDirectory, negative, dynamic));
else tasks.push(...convertPatternGroupsToTasks(insideCurrentDirectoryGroup, negative, dynamic));
		return tasks;
	}
	exports.convertPatternsToTasks = convertPatternsToTasks;
	function getPositivePatterns(patterns) {
		return utils$9.pattern.getPositivePatterns(patterns);
	}
	exports.getPositivePatterns = getPositivePatterns;
	function getNegativePatternsAsPositive(patterns, ignore) {
		const negative = utils$9.pattern.getNegativePatterns(patterns).concat(ignore);
		const positive = negative.map(utils$9.pattern.convertToPositivePattern);
		return positive;
	}
	exports.getNegativePatternsAsPositive = getNegativePatternsAsPositive;
	function groupPatternsByBaseDirectory(patterns) {
		const group$1 = {};
		return patterns.reduce((collection, pattern$1) => {
			const base = utils$9.pattern.getBaseDirectory(pattern$1);
			if (base in collection) collection[base].push(pattern$1);
else collection[base] = [pattern$1];
			return collection;
		}, group$1);
	}
	exports.groupPatternsByBaseDirectory = groupPatternsByBaseDirectory;
	function convertPatternGroupsToTasks(positive, negative, dynamic) {
		return Object.keys(positive).map((base) => {
			return convertPatternGroupToTask(base, positive[base], negative, dynamic);
		});
	}
	exports.convertPatternGroupsToTasks = convertPatternGroupsToTasks;
	function convertPatternGroupToTask(base, positive, negative, dynamic) {
		return {
			dynamic,
			positive,
			negative,
			base,
			patterns: [].concat(positive, negative.map(utils$9.pattern.convertToNegativePattern))
		};
	}
	exports.convertPatternGroupToTask = convertPatternGroupToTask;
} });

//#endregion
//#region ../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/providers/async.js
var require_async$5 = __commonJS({ "../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/providers/async.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.read = void 0;
	function read$3(path$72, settings, callback) {
		settings.fs.lstat(path$72, (lstatError, lstat) => {
			if (lstatError !== null) {
				callFailureCallback$2(callback, lstatError);
				return;
			}
			if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {
				callSuccessCallback$2(callback, lstat);
				return;
			}
			settings.fs.stat(path$72, (statError, stat$5) => {
				if (statError !== null) {
					if (settings.throwErrorOnBrokenSymbolicLink) {
						callFailureCallback$2(callback, statError);
						return;
					}
					callSuccessCallback$2(callback, lstat);
					return;
				}
				if (settings.markSymbolicLink) stat$5.isSymbolicLink = () => true;
				callSuccessCallback$2(callback, stat$5);
			});
		});
	}
	exports.read = read$3;
	function callFailureCallback$2(callback, error$2) {
		callback(error$2);
	}
	function callSuccessCallback$2(callback, result) {
		callback(null, result);
	}
} });

//#endregion
//#region ../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/providers/sync.js
var require_sync$5 = __commonJS({ "../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/providers/sync.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.read = void 0;
	function read$2(path$72, settings) {
		const lstat = settings.fs.lstatSync(path$72);
		if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) return lstat;
		try {
			const stat$5 = settings.fs.statSync(path$72);
			if (settings.markSymbolicLink) stat$5.isSymbolicLink = () => true;
			return stat$5;
		} catch (error$2) {
			if (!settings.throwErrorOnBrokenSymbolicLink) return lstat;
			throw error$2;
		}
	}
	exports.read = read$2;
} });

//#endregion
//#region ../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/adapters/fs.js
var require_fs$2 = __commonJS({ "../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/adapters/fs.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.createFileSystemAdapter = exports.FILE_SYSTEM_ADAPTER = void 0;
	const fs$22 = require("fs");
	exports.FILE_SYSTEM_ADAPTER = {
		lstat: fs$22.lstat,
		stat: fs$22.stat,
		lstatSync: fs$22.lstatSync,
		statSync: fs$22.statSync
	};
	function createFileSystemAdapter$1(fsMethods) {
		if (fsMethods === undefined) return exports.FILE_SYSTEM_ADAPTER;
		return Object.assign(Object.assign({}, exports.FILE_SYSTEM_ADAPTER), fsMethods);
	}
	exports.createFileSystemAdapter = createFileSystemAdapter$1;
} });

//#endregion
//#region ../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/settings.js
var require_settings$3 = __commonJS({ "../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/settings.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	const fs$21 = require_fs$2();
	var Settings$3 = class {
		constructor(_options = {}) {
			this._options = _options;
			this.followSymbolicLink = this._getValue(this._options.followSymbolicLink, true);
			this.fs = fs$21.createFileSystemAdapter(this._options.fs);
			this.markSymbolicLink = this._getValue(this._options.markSymbolicLink, false);
			this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
		}
		_getValue(option, value) {
			return option !== null && option !== void 0 ? option : value;
		}
	};
	exports.default = Settings$3;
} });

//#endregion
//#region ../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/index.js
var require_out$3 = __commonJS({ "../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/index.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.statSync = exports.stat = exports.Settings = void 0;
	const async$1 = require_async$5();
	const sync$1 = require_sync$5();
	const settings_1$3 = require_settings$3();
	exports.Settings = settings_1$3.default;
	function stat(path$72, optionsOrSettingsOrCallback, callback) {
		if (typeof optionsOrSettingsOrCallback === "function") {
			async$1.read(path$72, getSettings$2(), optionsOrSettingsOrCallback);
			return;
		}
		async$1.read(path$72, getSettings$2(optionsOrSettingsOrCallback), callback);
	}
	exports.stat = stat;
	function statSync(path$72, optionsOrSettings) {
		const settings = getSettings$2(optionsOrSettings);
		return sync$1.read(path$72, settings);
	}
	exports.statSync = statSync;
	function getSettings$2(settingsOrOptions = {}) {
		if (settingsOrOptions instanceof settings_1$3.default) return settingsOrOptions;
		return new settings_1$3.default(settingsOrOptions);
	}
} });

//#endregion
//#region ../node_modules/.pnpm/queue-microtask@1.2.3/node_modules/queue-microtask/index.js
var require_queue_microtask = __commonJS({ "../node_modules/.pnpm/queue-microtask@1.2.3/node_modules/queue-microtask/index.js"(exports, module) {
	/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
	let promise;
	module.exports = typeof queueMicrotask === "function" ? queueMicrotask.bind(typeof window !== "undefined" ? window : global) : (cb) => (promise || (promise = Promise.resolve())).then(cb).catch((err) => setTimeout(() => {
		throw err;
	}, 0));
} });

//#endregion
//#region ../node_modules/.pnpm/run-parallel@1.2.0/node_modules/run-parallel/index.js
var require_run_parallel = __commonJS({ "../node_modules/.pnpm/run-parallel@1.2.0/node_modules/run-parallel/index.js"(exports, module) {
	/*! run-parallel. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
	module.exports = runParallel;
	const queueMicrotask$1 = require_queue_microtask();
	function runParallel(tasks, cb) {
		let results, pending, keys;
		let isSync = true;
		if (Array.isArray(tasks)) {
			results = [];
			pending = tasks.length;
		} else {
			keys = Object.keys(tasks);
			results = {};
			pending = keys.length;
		}
		function done(err) {
			function end() {
				if (cb) cb(err, results);
				cb = null;
			}
			if (isSync) queueMicrotask$1(end);
else end();
		}
		function each(i$2, err, result) {
			results[i$2] = result;
			if (--pending === 0 || err) done(err);
		}
		if (!pending) done(null);
else if (keys) keys.forEach(function(key) {
			tasks[key](function(err, result) {
				each(key, err, result);
			});
		});
else tasks.forEach(function(task, i$2) {
			task(function(err, result) {
				each(i$2, err, result);
			});
		});
		isSync = false;
	}
} });

//#endregion
//#region ../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/constants.js
var require_constants$1 = __commonJS({ "../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/constants.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.IS_SUPPORT_READDIR_WITH_FILE_TYPES = void 0;
	const NODE_PROCESS_VERSION_PARTS = process.versions.node.split(".");
	if (NODE_PROCESS_VERSION_PARTS[0] === undefined || NODE_PROCESS_VERSION_PARTS[1] === undefined) throw new Error(`Unexpected behavior. The 'process.versions.node' variable has invalid value: ${process.versions.node}`);
	const MAJOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[0], 10);
	const MINOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[1], 10);
	const SUPPORTED_MAJOR_VERSION = 10;
	const SUPPORTED_MINOR_VERSION = 10;
	const IS_MATCHED_BY_MAJOR = MAJOR_VERSION > SUPPORTED_MAJOR_VERSION;
	const IS_MATCHED_BY_MAJOR_AND_MINOR = MAJOR_VERSION === SUPPORTED_MAJOR_VERSION && MINOR_VERSION >= SUPPORTED_MINOR_VERSION;
	/**
	* IS `true` for Node.js 10.10 and greater.
	*/
	exports.IS_SUPPORT_READDIR_WITH_FILE_TYPES = IS_MATCHED_BY_MAJOR || IS_MATCHED_BY_MAJOR_AND_MINOR;
} });

//#endregion
//#region ../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/utils/fs.js
var require_fs$1 = __commonJS({ "../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/utils/fs.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.createDirentFromStats = void 0;
	var DirentFromStats = class {
		constructor(name, stats) {
			this.name = name;
			this.isBlockDevice = stats.isBlockDevice.bind(stats);
			this.isCharacterDevice = stats.isCharacterDevice.bind(stats);
			this.isDirectory = stats.isDirectory.bind(stats);
			this.isFIFO = stats.isFIFO.bind(stats);
			this.isFile = stats.isFile.bind(stats);
			this.isSocket = stats.isSocket.bind(stats);
			this.isSymbolicLink = stats.isSymbolicLink.bind(stats);
		}
	};
	function createDirentFromStats(name, stats) {
		return new DirentFromStats(name, stats);
	}
	exports.createDirentFromStats = createDirentFromStats;
} });

//#endregion
//#region ../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/utils/index.js
var require_utils$1 = __commonJS({ "../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/utils/index.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.fs = void 0;
	const fs$20 = require_fs$1();
	exports.fs = fs$20;
} });

//#endregion
//#region ../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/common.js
var require_common$2 = __commonJS({ "../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/common.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.joinPathSegments = void 0;
	function joinPathSegments$1(a, b, separator) {
		/**
		* The correct handling of cases when the first segment is a root (`/`, `C:/`) or UNC path (`//?/C:/`).
		*/
		if (a.endsWith(separator)) return a + b;
		return a + separator + b;
	}
	exports.joinPathSegments = joinPathSegments$1;
} });

//#endregion
//#region ../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/async.js
var require_async$4 = __commonJS({ "../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/async.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.readdir = exports.readdirWithFileTypes = exports.read = void 0;
	const fsStat$6 = require_out$3();
	const rpl = require_run_parallel();
	const constants_1$1 = require_constants$1();
	const utils$8 = require_utils$1();
	const common$9 = require_common$2();
	function read$1(directory, settings, callback) {
		if (!settings.stats && constants_1$1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
			readdirWithFileTypes$1(directory, settings, callback);
			return;
		}
		readdir$1(directory, settings, callback);
	}
	exports.read = read$1;
	function readdirWithFileTypes$1(directory, settings, callback) {
		settings.fs.readdir(directory, { withFileTypes: true }, (readdirError, dirents) => {
			if (readdirError !== null) {
				callFailureCallback$1(callback, readdirError);
				return;
			}
			const entries = dirents.map((dirent) => ({
				dirent,
				name: dirent.name,
				path: common$9.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)
			}));
			if (!settings.followSymbolicLinks) {
				callSuccessCallback$1(callback, entries);
				return;
			}
			const tasks = entries.map((entry) => makeRplTaskEntry(entry, settings));
			rpl(tasks, (rplError, rplEntries) => {
				if (rplError !== null) {
					callFailureCallback$1(callback, rplError);
					return;
				}
				callSuccessCallback$1(callback, rplEntries);
			});
		});
	}
	exports.readdirWithFileTypes = readdirWithFileTypes$1;
	function makeRplTaskEntry(entry, settings) {
		return (done) => {
			if (!entry.dirent.isSymbolicLink()) {
				done(null, entry);
				return;
			}
			settings.fs.stat(entry.path, (statError, stats) => {
				if (statError !== null) {
					if (settings.throwErrorOnBrokenSymbolicLink) {
						done(statError);
						return;
					}
					done(null, entry);
					return;
				}
				entry.dirent = utils$8.fs.createDirentFromStats(entry.name, stats);
				done(null, entry);
			});
		};
	}
	function readdir$1(directory, settings, callback) {
		settings.fs.readdir(directory, (readdirError, names) => {
			if (readdirError !== null) {
				callFailureCallback$1(callback, readdirError);
				return;
			}
			const tasks = names.map((name) => {
				const path$72 = common$9.joinPathSegments(directory, name, settings.pathSegmentSeparator);
				return (done) => {
					fsStat$6.stat(path$72, settings.fsStatSettings, (error$2, stats) => {
						if (error$2 !== null) {
							done(error$2);
							return;
						}
						const entry = {
							name,
							path: path$72,
							dirent: utils$8.fs.createDirentFromStats(name, stats)
						};
						if (settings.stats) entry.stats = stats;
						done(null, entry);
					});
				};
			});
			rpl(tasks, (rplError, entries) => {
				if (rplError !== null) {
					callFailureCallback$1(callback, rplError);
					return;
				}
				callSuccessCallback$1(callback, entries);
			});
		});
	}
	exports.readdir = readdir$1;
	function callFailureCallback$1(callback, error$2) {
		callback(error$2);
	}
	function callSuccessCallback$1(callback, result) {
		callback(null, result);
	}
} });

//#endregion
//#region ../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/sync.js
var require_sync$4 = __commonJS({ "../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/sync.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.readdir = exports.readdirWithFileTypes = exports.read = void 0;
	const fsStat$5 = require_out$3();
	const constants_1 = require_constants$1();
	const utils$7 = require_utils$1();
	const common$8 = require_common$2();
	function read(directory, settings) {
		if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) return readdirWithFileTypes(directory, settings);
		return readdir(directory, settings);
	}
	exports.read = read;
	function readdirWithFileTypes(directory, settings) {
		const dirents = settings.fs.readdirSync(directory, { withFileTypes: true });
		return dirents.map((dirent) => {
			const entry = {
				dirent,
				name: dirent.name,
				path: common$8.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)
			};
			if (entry.dirent.isSymbolicLink() && settings.followSymbolicLinks) try {
				const stats = settings.fs.statSync(entry.path);
				entry.dirent = utils$7.fs.createDirentFromStats(entry.name, stats);
			} catch (error$2) {
				if (settings.throwErrorOnBrokenSymbolicLink) throw error$2;
			}
			return entry;
		});
	}
	exports.readdirWithFileTypes = readdirWithFileTypes;
	function readdir(directory, settings) {
		const names = settings.fs.readdirSync(directory);
		return names.map((name) => {
			const entryPath = common$8.joinPathSegments(directory, name, settings.pathSegmentSeparator);
			const stats = fsStat$5.statSync(entryPath, settings.fsStatSettings);
			const entry = {
				name,
				path: entryPath,
				dirent: utils$7.fs.createDirentFromStats(name, stats)
			};
			if (settings.stats) entry.stats = stats;
			return entry;
		});
	}
	exports.readdir = readdir;
} });

//#endregion
//#region ../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/adapters/fs.js
var require_fs = __commonJS({ "../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/adapters/fs.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.createFileSystemAdapter = exports.FILE_SYSTEM_ADAPTER = void 0;
	const fs$19 = require("fs");
	exports.FILE_SYSTEM_ADAPTER = {
		lstat: fs$19.lstat,
		stat: fs$19.stat,
		lstatSync: fs$19.lstatSync,
		statSync: fs$19.statSync,
		readdir: fs$19.readdir,
		readdirSync: fs$19.readdirSync
	};
	function createFileSystemAdapter(fsMethods) {
		if (fsMethods === undefined) return exports.FILE_SYSTEM_ADAPTER;
		return Object.assign(Object.assign({}, exports.FILE_SYSTEM_ADAPTER), fsMethods);
	}
	exports.createFileSystemAdapter = createFileSystemAdapter;
} });

//#endregion
//#region ../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/settings.js
var require_settings$2 = __commonJS({ "../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/settings.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	const path$22 = require("path");
	const fsStat$4 = require_out$3();
	const fs$18 = require_fs();
	var Settings$2 = class {
		constructor(_options = {}) {
			this._options = _options;
			this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, false);
			this.fs = fs$18.createFileSystemAdapter(this._options.fs);
			this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path$22.sep);
			this.stats = this._getValue(this._options.stats, false);
			this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
			this.fsStatSettings = new fsStat$4.Settings({
				followSymbolicLink: this.followSymbolicLinks,
				fs: this.fs,
				throwErrorOnBrokenSymbolicLink: this.throwErrorOnBrokenSymbolicLink
			});
		}
		_getValue(option, value) {
			return option !== null && option !== void 0 ? option : value;
		}
	};
	exports.default = Settings$2;
} });

//#endregion
//#region ../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/index.js
var require_out$2 = __commonJS({ "../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/index.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Settings = exports.scandirSync = exports.scandir = void 0;
	const async = require_async$4();
	const sync = require_sync$4();
	const settings_1$2 = require_settings$2();
	exports.Settings = settings_1$2.default;
	function scandir(path$72, optionsOrSettingsOrCallback, callback) {
		if (typeof optionsOrSettingsOrCallback === "function") {
			async.read(path$72, getSettings$1(), optionsOrSettingsOrCallback);
			return;
		}
		async.read(path$72, getSettings$1(optionsOrSettingsOrCallback), callback);
	}
	exports.scandir = scandir;
	function scandirSync(path$72, optionsOrSettings) {
		const settings = getSettings$1(optionsOrSettings);
		return sync.read(path$72, settings);
	}
	exports.scandirSync = scandirSync;
	function getSettings$1(settingsOrOptions = {}) {
		if (settingsOrOptions instanceof settings_1$2.default) return settingsOrOptions;
		return new settings_1$2.default(settingsOrOptions);
	}
} });

//#endregion
//#region ../node_modules/.pnpm/reusify@1.0.4/node_modules/reusify/reusify.js
var require_reusify = __commonJS({ "../node_modules/.pnpm/reusify@1.0.4/node_modules/reusify/reusify.js"(exports, module) {
	function reusify$1(Constructor) {
		var head = new Constructor();
		var tail = head;
		function get() {
			var current = head;
			if (current.next) head = current.next;
else {
				head = new Constructor();
				tail = head;
			}
			current.next = null;
			return current;
		}
		function release(obj) {
			tail.next = obj;
			tail = obj;
		}
		return {
			get,
			release
		};
	}
	module.exports = reusify$1;
} });

//#endregion
//#region ../node_modules/.pnpm/fastq@1.17.1/node_modules/fastq/queue.js
var require_queue = __commonJS({ "../node_modules/.pnpm/fastq@1.17.1/node_modules/fastq/queue.js"(exports, module) {
	var reusify = require_reusify();
	function fastqueue(context$1, worker, _concurrency) {
		if (typeof context$1 === "function") {
			_concurrency = worker;
			worker = context$1;
			context$1 = null;
		}
		if (!(_concurrency >= 1)) throw new Error("fastqueue concurrency must be equal to or greater than 1");
		var cache$1 = reusify(Task);
		var queueHead = null;
		var queueTail = null;
		var _running = 0;
		var errorHandler = null;
		var self$1 = {
			push: push$2,
			drain: noop,
			saturated: noop,
			pause,
			paused: false,
			get concurrency() {
				return _concurrency;
			},
			set concurrency(value) {
				if (!(value >= 1)) throw new Error("fastqueue concurrency must be equal to or greater than 1");
				_concurrency = value;
				if (self$1.paused) return;
				for (; queueHead && _running < _concurrency;) {
					_running++;
					release();
				}
			},
			running,
			resume: resume$1,
			idle,
			length,
			getQueue,
			unshift,
			empty: noop,
			kill,
			killAndDrain,
			error: error$2
		};
		return self$1;
		function running() {
			return _running;
		}
		function pause() {
			self$1.paused = true;
		}
		function length() {
			var current = queueHead;
			var counter = 0;
			while (current) {
				current = current.next;
				counter++;
			}
			return counter;
		}
		function getQueue() {
			var current = queueHead;
			var tasks = [];
			while (current) {
				tasks.push(current.value);
				current = current.next;
			}
			return tasks;
		}
		function resume$1() {
			if (!self$1.paused) return;
			self$1.paused = false;
			if (queueHead === null) {
				_running++;
				release();
				return;
			}
			for (; queueHead && _running < _concurrency;) {
				_running++;
				release();
			}
		}
		function idle() {
			return _running === 0 && self$1.length() === 0;
		}
		function push$2(value, done) {
			var current = cache$1.get();
			current.context = context$1;
			current.release = release;
			current.value = value;
			current.callback = done || noop;
			current.errorHandler = errorHandler;
			if (_running >= _concurrency || self$1.paused) if (queueTail) {
				queueTail.next = current;
				queueTail = current;
			} else {
				queueHead = current;
				queueTail = current;
				self$1.saturated();
			}
else {
				_running++;
				worker.call(context$1, current.value, current.worked);
			}
		}
		function unshift(value, done) {
			var current = cache$1.get();
			current.context = context$1;
			current.release = release;
			current.value = value;
			current.callback = done || noop;
			current.errorHandler = errorHandler;
			if (_running >= _concurrency || self$1.paused) if (queueHead) {
				current.next = queueHead;
				queueHead = current;
			} else {
				queueHead = current;
				queueTail = current;
				self$1.saturated();
			}
else {
				_running++;
				worker.call(context$1, current.value, current.worked);
			}
		}
		function release(holder) {
			if (holder) cache$1.release(holder);
			var next = queueHead;
			if (next && _running <= _concurrency) if (!self$1.paused) {
				if (queueTail === queueHead) queueTail = null;
				queueHead = next.next;
				next.next = null;
				worker.call(context$1, next.value, next.worked);
				if (queueTail === null) self$1.empty();
			} else _running--;
else if (--_running === 0) self$1.drain();
		}
		function kill() {
			queueHead = null;
			queueTail = null;
			self$1.drain = noop;
		}
		function killAndDrain() {
			queueHead = null;
			queueTail = null;
			self$1.drain();
			self$1.drain = noop;
		}
		function error$2(handler$1) {
			errorHandler = handler$1;
		}
	}
	function noop() {}
	function Task() {
		this.value = null;
		this.callback = noop;
		this.next = null;
		this.release = noop;
		this.context = null;
		this.errorHandler = null;
		var self$1 = this;
		this.worked = function worked(err, result) {
			var callback = self$1.callback;
			var errorHandler = self$1.errorHandler;
			var val = self$1.value;
			self$1.value = null;
			self$1.callback = noop;
			if (self$1.errorHandler) errorHandler(err, val);
			callback.call(self$1.context, err, result);
			self$1.release(self$1);
		};
	}
	function queueAsPromised(context$1, worker, _concurrency) {
		if (typeof context$1 === "function") {
			_concurrency = worker;
			worker = context$1;
			context$1 = null;
		}
		function asyncWrapper(arg, cb) {
			worker.call(this, arg).then(function(res) {
				cb(null, res);
			}, cb);
		}
		var queue$1 = fastqueue(context$1, asyncWrapper, _concurrency);
		var pushCb = queue$1.push;
		var unshiftCb = queue$1.unshift;
		queue$1.push = push$2;
		queue$1.unshift = unshift;
		queue$1.drained = drained;
		return queue$1;
		function push$2(value) {
			var p = new Promise(function(resolve$1, reject) {
				pushCb(value, function(err, result) {
					if (err) {
						reject(err);
						return;
					}
					resolve$1(result);
				});
			});
			p.catch(noop);
			return p;
		}
		function unshift(value) {
			var p = new Promise(function(resolve$1, reject) {
				unshiftCb(value, function(err, result) {
					if (err) {
						reject(err);
						return;
					}
					resolve$1(result);
				});
			});
			p.catch(noop);
			return p;
		}
		function drained() {
			if (queue$1.idle()) return new Promise(function(resolve$1) {
				resolve$1();
			});
			var previousDrain = queue$1.drain;
			var p = new Promise(function(resolve$1) {
				queue$1.drain = function() {
					previousDrain();
					resolve$1();
				};
			});
			return p;
		}
	}
	module.exports = fastqueue;
	module.exports.promise = queueAsPromised;
} });

//#endregion
//#region ../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/common.js
var require_common$1 = __commonJS({ "../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/common.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.joinPathSegments = exports.replacePathSegmentSeparator = exports.isAppliedFilter = exports.isFatalError = void 0;
	function isFatalError(settings, error$2) {
		if (settings.errorFilter === null) return true;
		return !settings.errorFilter(error$2);
	}
	exports.isFatalError = isFatalError;
	function isAppliedFilter(filter, value) {
		return filter === null || filter(value);
	}
	exports.isAppliedFilter = isAppliedFilter;
	function replacePathSegmentSeparator(filepath, separator) {
		return filepath.split(/[/\\]/).join(separator);
	}
	exports.replacePathSegmentSeparator = replacePathSegmentSeparator;
	function joinPathSegments(a, b, separator) {
		if (a === "") return b;
		/**
		* The correct handling of cases when the first segment is a root (`/`, `C:/`) or UNC path (`//?/C:/`).
		*/
		if (a.endsWith(separator)) return a + b;
		return a + separator + b;
	}
	exports.joinPathSegments = joinPathSegments;
} });

//#endregion
//#region ../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/reader.js
var require_reader$1 = __commonJS({ "../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/reader.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	const common$7 = require_common$1();
	var Reader$1 = class {
		constructor(_root, _settings) {
			this._root = _root;
			this._settings = _settings;
			this._root = common$7.replacePathSegmentSeparator(_root, _settings.pathSegmentSeparator);
		}
	};
	exports.default = Reader$1;
} });

//#endregion
//#region ../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/async.js
var require_async$3 = __commonJS({ "../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/async.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	const events_1 = require("events");
	const fsScandir$2 = require_out$2();
	const fastq = require_queue();
	const common$6 = require_common$1();
	const reader_1$4 = require_reader$1();
	var AsyncReader = class extends reader_1$4.default {
		constructor(_root, _settings) {
			super(_root, _settings);
			this._settings = _settings;
			this._scandir = fsScandir$2.scandir;
			this._emitter = new events_1.EventEmitter();
			this._queue = fastq(this._worker.bind(this), this._settings.concurrency);
			this._isFatalError = false;
			this._isDestroyed = false;
			this._queue.drain = () => {
				if (!this._isFatalError) this._emitter.emit("end");
			};
		}
		read() {
			this._isFatalError = false;
			this._isDestroyed = false;
			setImmediate(() => {
				this._pushToQueue(this._root, this._settings.basePath);
			});
			return this._emitter;
		}
		get isDestroyed() {
			return this._isDestroyed;
		}
		destroy() {
			if (this._isDestroyed) throw new Error("The reader is already destroyed");
			this._isDestroyed = true;
			this._queue.killAndDrain();
		}
		onEntry(callback) {
			this._emitter.on("entry", callback);
		}
		onError(callback) {
			this._emitter.once("error", callback);
		}
		onEnd(callback) {
			this._emitter.once("end", callback);
		}
		_pushToQueue(directory, base) {
			const queueItem = {
				directory,
				base
			};
			this._queue.push(queueItem, (error$2) => {
				if (error$2 !== null) this._handleError(error$2);
			});
		}
		_worker(item, done) {
			this._scandir(item.directory, this._settings.fsScandirSettings, (error$2, entries) => {
				if (error$2 !== null) {
					done(error$2, undefined);
					return;
				}
				for (const entry of entries) this._handleEntry(entry, item.base);
				done(null, undefined);
			});
		}
		_handleError(error$2) {
			if (this._isDestroyed || !common$6.isFatalError(this._settings, error$2)) return;
			this._isFatalError = true;
			this._isDestroyed = true;
			this._emitter.emit("error", error$2);
		}
		_handleEntry(entry, base) {
			if (this._isDestroyed || this._isFatalError) return;
			const fullpath = entry.path;
			if (base !== undefined) entry.path = common$6.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
			if (common$6.isAppliedFilter(this._settings.entryFilter, entry)) this._emitEntry(entry);
			if (entry.dirent.isDirectory() && common$6.isAppliedFilter(this._settings.deepFilter, entry)) this._pushToQueue(fullpath, base === undefined ? undefined : entry.path);
		}
		_emitEntry(entry) {
			this._emitter.emit("entry", entry);
		}
	};
	exports.default = AsyncReader;
} });

//#endregion
//#region ../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/async.js
var require_async$2 = __commonJS({ "../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/async.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	const async_1$4 = require_async$3();
	var AsyncProvider = class {
		constructor(_root, _settings) {
			this._root = _root;
			this._settings = _settings;
			this._reader = new async_1$4.default(this._root, this._settings);
			this._storage = [];
		}
		read(callback) {
			this._reader.onError((error$2) => {
				callFailureCallback(callback, error$2);
			});
			this._reader.onEntry((entry) => {
				this._storage.push(entry);
			});
			this._reader.onEnd(() => {
				callSuccessCallback(callback, this._storage);
			});
			this._reader.read();
		}
	};
	exports.default = AsyncProvider;
	function callFailureCallback(callback, error$2) {
		callback(error$2);
	}
	function callSuccessCallback(callback, entries) {
		callback(null, entries);
	}
} });

//#endregion
//#region ../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/stream.js
var require_stream$2 = __commonJS({ "../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/stream.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	const stream_1$5 = require("stream");
	const async_1$3 = require_async$3();
	var StreamProvider = class {
		constructor(_root, _settings) {
			this._root = _root;
			this._settings = _settings;
			this._reader = new async_1$3.default(this._root, this._settings);
			this._stream = new stream_1$5.Readable({
				objectMode: true,
				read: () => {},
				destroy: () => {
					if (!this._reader.isDestroyed) this._reader.destroy();
				}
			});
		}
		read() {
			this._reader.onError((error$2) => {
				this._stream.emit("error", error$2);
			});
			this._reader.onEntry((entry) => {
				this._stream.push(entry);
			});
			this._reader.onEnd(() => {
				this._stream.push(null);
			});
			this._reader.read();
			return this._stream;
		}
	};
	exports.default = StreamProvider;
} });

//#endregion
//#region ../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/sync.js
var require_sync$3 = __commonJS({ "../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/sync.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	const fsScandir$1 = require_out$2();
	const common$5 = require_common$1();
	const reader_1$3 = require_reader$1();
	var SyncReader = class extends reader_1$3.default {
		constructor() {
			super(...arguments);
			this._scandir = fsScandir$1.scandirSync;
			this._storage = [];
			this._queue = new Set();
		}
		read() {
			this._pushToQueue(this._root, this._settings.basePath);
			this._handleQueue();
			return this._storage;
		}
		_pushToQueue(directory, base) {
			this._queue.add({
				directory,
				base
			});
		}
		_handleQueue() {
			for (const item of this._queue.values()) this._handleDirectory(item.directory, item.base);
		}
		_handleDirectory(directory, base) {
			try {
				const entries = this._scandir(directory, this._settings.fsScandirSettings);
				for (const entry of entries) this._handleEntry(entry, base);
			} catch (error$2) {
				this._handleError(error$2);
			}
		}
		_handleError(error$2) {
			if (!common$5.isFatalError(this._settings, error$2)) return;
			throw error$2;
		}
		_handleEntry(entry, base) {
			const fullpath = entry.path;
			if (base !== undefined) entry.path = common$5.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
			if (common$5.isAppliedFilter(this._settings.entryFilter, entry)) this._pushToStorage(entry);
			if (entry.dirent.isDirectory() && common$5.isAppliedFilter(this._settings.deepFilter, entry)) this._pushToQueue(fullpath, base === undefined ? undefined : entry.path);
		}
		_pushToStorage(entry) {
			this._storage.push(entry);
		}
	};
	exports.default = SyncReader;
} });

//#endregion
//#region ../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/sync.js
var require_sync$2 = __commonJS({ "../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/sync.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	const sync_1$3 = require_sync$3();
	var SyncProvider = class {
		constructor(_root, _settings) {
			this._root = _root;
			this._settings = _settings;
			this._reader = new sync_1$3.default(this._root, this._settings);
		}
		read() {
			return this._reader.read();
		}
	};
	exports.default = SyncProvider;
} });

//#endregion
//#region ../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/settings.js
var require_settings$1 = __commonJS({ "../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/settings.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	const path$21 = require("path");
	const fsScandir = require_out$2();
	var Settings$1 = class {
		constructor(_options = {}) {
			this._options = _options;
			this.basePath = this._getValue(this._options.basePath, undefined);
			this.concurrency = this._getValue(this._options.concurrency, Number.POSITIVE_INFINITY);
			this.deepFilter = this._getValue(this._options.deepFilter, null);
			this.entryFilter = this._getValue(this._options.entryFilter, null);
			this.errorFilter = this._getValue(this._options.errorFilter, null);
			this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path$21.sep);
			this.fsScandirSettings = new fsScandir.Settings({
				followSymbolicLinks: this._options.followSymbolicLinks,
				fs: this._options.fs,
				pathSegmentSeparator: this._options.pathSegmentSeparator,
				stats: this._options.stats,
				throwErrorOnBrokenSymbolicLink: this._options.throwErrorOnBrokenSymbolicLink
			});
		}
		_getValue(option, value) {
			return option !== null && option !== void 0 ? option : value;
		}
	};
	exports.default = Settings$1;
} });

//#endregion
//#region ../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/index.js
var require_out$1 = __commonJS({ "../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/index.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Settings = exports.walkStream = exports.walkSync = exports.walk = void 0;
	const async_1$2 = require_async$2();
	const stream_1$4 = require_stream$2();
	const sync_1$2 = require_sync$2();
	const settings_1$1 = require_settings$1();
	exports.Settings = settings_1$1.default;
	function walk(directory, optionsOrSettingsOrCallback, callback) {
		if (typeof optionsOrSettingsOrCallback === "function") {
			new async_1$2.default(directory, getSettings()).read(optionsOrSettingsOrCallback);
			return;
		}
		new async_1$2.default(directory, getSettings(optionsOrSettingsOrCallback)).read(callback);
	}
	exports.walk = walk;
	function walkSync(directory, optionsOrSettings) {
		const settings = getSettings(optionsOrSettings);
		const provider = new sync_1$2.default(directory, settings);
		return provider.read();
	}
	exports.walkSync = walkSync;
	function walkStream(directory, optionsOrSettings) {
		const settings = getSettings(optionsOrSettings);
		const provider = new stream_1$4.default(directory, settings);
		return provider.read();
	}
	exports.walkStream = walkStream;
	function getSettings(settingsOrOptions = {}) {
		if (settingsOrOptions instanceof settings_1$1.default) return settingsOrOptions;
		return new settings_1$1.default(settingsOrOptions);
	}
} });

//#endregion
//#region ../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/readers/reader.js
var require_reader = __commonJS({ "../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/readers/reader.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	const path$20 = require("path");
	const fsStat$3 = require_out$3();
	const utils$6 = require_utils$2();
	var Reader = class {
		constructor(_settings) {
			this._settings = _settings;
			this._fsStatSettings = new fsStat$3.Settings({
				followSymbolicLink: this._settings.followSymbolicLinks,
				fs: this._settings.fs,
				throwErrorOnBrokenSymbolicLink: this._settings.followSymbolicLinks
			});
		}
		_getFullEntryPath(filepath) {
			return path$20.resolve(this._settings.cwd, filepath);
		}
		_makeEntry(stats, pattern$1) {
			const entry = {
				name: pattern$1,
				path: pattern$1,
				dirent: utils$6.fs.createDirentFromStats(pattern$1, stats)
			};
			if (this._settings.stats) entry.stats = stats;
			return entry;
		}
		_isFatalError(error$2) {
			return !utils$6.errno.isEnoentCodeError(error$2) && !this._settings.suppressErrors;
		}
	};
	exports.default = Reader;
} });

//#endregion
//#region ../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/readers/stream.js
var require_stream$1 = __commonJS({ "../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/readers/stream.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	const stream_1$3 = require("stream");
	const fsStat$2 = require_out$3();
	const fsWalk$2 = require_out$1();
	const reader_1$2 = require_reader();
	var ReaderStream = class extends reader_1$2.default {
		constructor() {
			super(...arguments);
			this._walkStream = fsWalk$2.walkStream;
			this._stat = fsStat$2.stat;
		}
		dynamic(root$1, options) {
			return this._walkStream(root$1, options);
		}
		static(patterns, options) {
			const filepaths = patterns.map(this._getFullEntryPath, this);
			const stream$3 = new stream_1$3.PassThrough({ objectMode: true });
			stream$3._write = (index$1, _enc, done) => {
				return this._getEntry(filepaths[index$1], patterns[index$1], options).then((entry) => {
					if (entry !== null && options.entryFilter(entry)) stream$3.push(entry);
					if (index$1 === filepaths.length - 1) stream$3.end();
					done();
				}).catch(done);
			};
			for (let i$2 = 0; i$2 < filepaths.length; i$2++) stream$3.write(i$2);
			return stream$3;
		}
		_getEntry(filepath, pattern$1, options) {
			return this._getStat(filepath).then((stats) => this._makeEntry(stats, pattern$1)).catch((error$2) => {
				if (options.errorFilter(error$2)) return null;
				throw error$2;
			});
		}
		_getStat(filepath) {
			return new Promise((resolve$1, reject) => {
				this._stat(filepath, this._fsStatSettings, (error$2, stats) => {
					return error$2 === null ? resolve$1(stats) : reject(error$2);
				});
			});
		}
	};
	exports.default = ReaderStream;
} });

//#endregion
//#region ../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/readers/async.js
var require_async$1 = __commonJS({ "../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/readers/async.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	const fsWalk$1 = require_out$1();
	const reader_1$1 = require_reader();
	const stream_1$2 = require_stream$1();
	var ReaderAsync = class extends reader_1$1.default {
		constructor() {
			super(...arguments);
			this._walkAsync = fsWalk$1.walk;
			this._readerStream = new stream_1$2.default(this._settings);
		}
		dynamic(root$1, options) {
			return new Promise((resolve$1, reject) => {
				this._walkAsync(root$1, options, (error$2, entries) => {
					if (error$2 === null) resolve$1(entries);
else reject(error$2);
				});
			});
		}
		async static(patterns, options) {
			const entries = [];
			const stream$3 = this._readerStream.static(patterns, options);
			return new Promise((resolve$1, reject) => {
				stream$3.once("error", reject);
				stream$3.on("data", (entry) => entries.push(entry));
				stream$3.once("end", () => resolve$1(entries));
			});
		}
	};
	exports.default = ReaderAsync;
} });

//#endregion
//#region ../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/matchers/matcher.js
var require_matcher = __commonJS({ "../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/matchers/matcher.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	const utils$5 = require_utils$2();
	var Matcher = class {
		constructor(_patterns, _settings, _micromatchOptions) {
			this._patterns = _patterns;
			this._settings = _settings;
			this._micromatchOptions = _micromatchOptions;
			this._storage = [];
			this._fillStorage();
		}
		_fillStorage() {
			for (const pattern$1 of this._patterns) {
				const segments = this._getPatternSegments(pattern$1);
				const sections = this._splitSegmentsIntoSections(segments);
				this._storage.push({
					complete: sections.length <= 1,
					pattern: pattern$1,
					segments,
					sections
				});
			}
		}
		_getPatternSegments(pattern$1) {
			const parts = utils$5.pattern.getPatternParts(pattern$1, this._micromatchOptions);
			return parts.map((part) => {
				const dynamic = utils$5.pattern.isDynamicPattern(part, this._settings);
				if (!dynamic) return {
					dynamic: false,
					pattern: part
				};
				return {
					dynamic: true,
					pattern: part,
					patternRe: utils$5.pattern.makeRe(part, this._micromatchOptions)
				};
			});
		}
		_splitSegmentsIntoSections(segments) {
			return utils$5.array.splitWhen(segments, (segment) => segment.dynamic && utils$5.pattern.hasGlobStar(segment.pattern));
		}
	};
	exports.default = Matcher;
} });

//#endregion
//#region ../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/matchers/partial.js
var require_partial = __commonJS({ "../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/matchers/partial.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	const matcher_1 = require_matcher();
	var PartialMatcher = class extends matcher_1.default {
		match(filepath) {
			const parts = filepath.split("/");
			const levels = parts.length;
			const patterns = this._storage.filter((info$2) => !info$2.complete || info$2.segments.length > levels);
			for (const pattern$1 of patterns) {
				const section = pattern$1.sections[0];
				/**
				* In this case, the pattern has a globstar and we must read all directories unconditionally,
				* but only if the level has reached the end of the first group.
				*
				* fixtures/{a,b}/**
				*  ^ true/false  ^ always true
				*/
				if (!pattern$1.complete && levels > section.length) return true;
				const match = parts.every((part, index$1) => {
					const segment = pattern$1.segments[index$1];
					if (segment.dynamic && segment.patternRe.test(part)) return true;
					if (!segment.dynamic && segment.pattern === part) return true;
					return false;
				});
				if (match) return true;
			}
			return false;
		}
	};
	exports.default = PartialMatcher;
} });

//#endregion
//#region ../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/filters/deep.js
var require_deep = __commonJS({ "../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/filters/deep.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	const utils$4 = require_utils$2();
	const partial_1 = require_partial();
	var DeepFilter = class {
		constructor(_settings, _micromatchOptions) {
			this._settings = _settings;
			this._micromatchOptions = _micromatchOptions;
		}
		getFilter(basePath, positive, negative) {
			const matcher = this._getMatcher(positive);
			const negativeRe = this._getNegativePatternsRe(negative);
			return (entry) => this._filter(basePath, entry, matcher, negativeRe);
		}
		_getMatcher(patterns) {
			return new partial_1.default(patterns, this._settings, this._micromatchOptions);
		}
		_getNegativePatternsRe(patterns) {
			const affectDepthOfReadingPatterns = patterns.filter(utils$4.pattern.isAffectDepthOfReadingPattern);
			return utils$4.pattern.convertPatternsToRe(affectDepthOfReadingPatterns, this._micromatchOptions);
		}
		_filter(basePath, entry, matcher, negativeRe) {
			if (this._isSkippedByDeep(basePath, entry.path)) return false;
			if (this._isSkippedSymbolicLink(entry)) return false;
			const filepath = utils$4.path.removeLeadingDotSegment(entry.path);
			if (this._isSkippedByPositivePatterns(filepath, matcher)) return false;
			return this._isSkippedByNegativePatterns(filepath, negativeRe);
		}
		_isSkippedByDeep(basePath, entryPath) {
			/**
			* Avoid unnecessary depth calculations when it doesn't matter.
			*/
			if (this._settings.deep === Infinity) return false;
			return this._getEntryLevel(basePath, entryPath) >= this._settings.deep;
		}
		_getEntryLevel(basePath, entryPath) {
			const entryPathDepth = entryPath.split("/").length;
			if (basePath === "") return entryPathDepth;
			const basePathDepth = basePath.split("/").length;
			return entryPathDepth - basePathDepth;
		}
		_isSkippedSymbolicLink(entry) {
			return !this._settings.followSymbolicLinks && entry.dirent.isSymbolicLink();
		}
		_isSkippedByPositivePatterns(entryPath, matcher) {
			return !this._settings.baseNameMatch && !matcher.match(entryPath);
		}
		_isSkippedByNegativePatterns(entryPath, patternsRe) {
			return !utils$4.pattern.matchAny(entryPath, patternsRe);
		}
	};
	exports.default = DeepFilter;
} });

//#endregion
//#region ../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/filters/entry.js
var require_entry$1 = __commonJS({ "../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/filters/entry.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	const utils$3 = require_utils$2();
	var EntryFilter = class {
		constructor(_settings, _micromatchOptions) {
			this._settings = _settings;
			this._micromatchOptions = _micromatchOptions;
			this.index = new Map();
		}
		getFilter(positive, negative) {
			const positiveRe = utils$3.pattern.convertPatternsToRe(positive, this._micromatchOptions);
			const negativeRe = utils$3.pattern.convertPatternsToRe(negative, Object.assign(Object.assign({}, this._micromatchOptions), { dot: true }));
			return (entry) => this._filter(entry, positiveRe, negativeRe);
		}
		_filter(entry, positiveRe, negativeRe) {
			const filepath = utils$3.path.removeLeadingDotSegment(entry.path);
			if (this._settings.unique && this._isDuplicateEntry(filepath)) return false;
			if (this._onlyFileFilter(entry) || this._onlyDirectoryFilter(entry)) return false;
			if (this._isSkippedByAbsoluteNegativePatterns(filepath, negativeRe)) return false;
			const isDirectory$1 = entry.dirent.isDirectory();
			const isMatched = this._isMatchToPatterns(filepath, positiveRe, isDirectory$1) && !this._isMatchToPatterns(filepath, negativeRe, isDirectory$1);
			if (this._settings.unique && isMatched) this._createIndexRecord(filepath);
			return isMatched;
		}
		_isDuplicateEntry(filepath) {
			return this.index.has(filepath);
		}
		_createIndexRecord(filepath) {
			this.index.set(filepath, undefined);
		}
		_onlyFileFilter(entry) {
			return this._settings.onlyFiles && !entry.dirent.isFile();
		}
		_onlyDirectoryFilter(entry) {
			return this._settings.onlyDirectories && !entry.dirent.isDirectory();
		}
		_isSkippedByAbsoluteNegativePatterns(entryPath, patternsRe) {
			if (!this._settings.absolute) return false;
			const fullpath = utils$3.path.makeAbsolute(this._settings.cwd, entryPath);
			return utils$3.pattern.matchAny(fullpath, patternsRe);
		}
		_isMatchToPatterns(filepath, patternsRe, isDirectory$1) {
			const isMatched = utils$3.pattern.matchAny(filepath, patternsRe);
			if (!isMatched && isDirectory$1) return utils$3.pattern.matchAny(filepath + "/", patternsRe);
			return isMatched;
		}
	};
	exports.default = EntryFilter;
} });

//#endregion
//#region ../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/filters/error.js
var require_error = __commonJS({ "../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/filters/error.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	const utils$2 = require_utils$2();
	var ErrorFilter = class {
		constructor(_settings) {
			this._settings = _settings;
		}
		getFilter() {
			return (error$2) => this._isNonFatalError(error$2);
		}
		_isNonFatalError(error$2) {
			return utils$2.errno.isEnoentCodeError(error$2) || this._settings.suppressErrors;
		}
	};
	exports.default = ErrorFilter;
} });

//#endregion
//#region ../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/transformers/entry.js
var require_entry = __commonJS({ "../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/transformers/entry.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	const utils$1 = require_utils$2();
	var EntryTransformer = class {
		constructor(_settings) {
			this._settings = _settings;
		}
		getTransformer() {
			return (entry) => this._transform(entry);
		}
		_transform(entry) {
			let filepath = entry.path;
			if (this._settings.absolute) {
				filepath = utils$1.path.makeAbsolute(this._settings.cwd, filepath);
				filepath = utils$1.path.unixify(filepath);
			}
			if (this._settings.markDirectories && entry.dirent.isDirectory()) filepath += "/";
			if (!this._settings.objectMode) return filepath;
			return Object.assign(Object.assign({}, entry), { path: filepath });
		}
	};
	exports.default = EntryTransformer;
} });

//#endregion
//#region ../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/provider.js
var require_provider = __commonJS({ "../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/provider.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	const path$19 = require("path");
	const deep_1 = require_deep();
	const entry_1 = require_entry$1();
	const error_1 = require_error();
	const entry_2 = require_entry();
	var Provider = class {
		constructor(_settings) {
			this._settings = _settings;
			this.errorFilter = new error_1.default(this._settings);
			this.entryFilter = new entry_1.default(this._settings, this._getMicromatchOptions());
			this.deepFilter = new deep_1.default(this._settings, this._getMicromatchOptions());
			this.entryTransformer = new entry_2.default(this._settings);
		}
		_getRootDirectory(task) {
			return path$19.resolve(this._settings.cwd, task.base);
		}
		_getReaderOptions(task) {
			const basePath = task.base === "." ? "" : task.base;
			return {
				basePath,
				pathSegmentSeparator: "/",
				concurrency: this._settings.concurrency,
				deepFilter: this.deepFilter.getFilter(basePath, task.positive, task.negative),
				entryFilter: this.entryFilter.getFilter(task.positive, task.negative),
				errorFilter: this.errorFilter.getFilter(),
				followSymbolicLinks: this._settings.followSymbolicLinks,
				fs: this._settings.fs,
				stats: this._settings.stats,
				throwErrorOnBrokenSymbolicLink: this._settings.throwErrorOnBrokenSymbolicLink,
				transform: this.entryTransformer.getTransformer()
			};
		}
		_getMicromatchOptions() {
			return {
				dot: this._settings.dot,
				matchBase: this._settings.baseNameMatch,
				nobrace: !this._settings.braceExpansion,
				nocase: !this._settings.caseSensitiveMatch,
				noext: !this._settings.extglob,
				noglobstar: !this._settings.globstar,
				posix: true,
				strictSlashes: false
			};
		}
	};
	exports.default = Provider;
} });

//#endregion
//#region ../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/async.js
var require_async = __commonJS({ "../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/async.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	const async_1$1 = require_async$1();
	const provider_1$2 = require_provider();
	var ProviderAsync = class extends provider_1$2.default {
		constructor() {
			super(...arguments);
			this._reader = new async_1$1.default(this._settings);
		}
		async read(task) {
			const root$1 = this._getRootDirectory(task);
			const options = this._getReaderOptions(task);
			const entries = await this.api(root$1, task, options);
			return entries.map((entry) => options.transform(entry));
		}
		api(root$1, task, options) {
			if (task.dynamic) return this._reader.dynamic(root$1, options);
			return this._reader.static(task.patterns, options);
		}
	};
	exports.default = ProviderAsync;
} });

//#endregion
//#region ../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/stream.js
var require_stream = __commonJS({ "../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/stream.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	const stream_1$1 = require("stream");
	const stream_2 = require_stream$1();
	const provider_1$1 = require_provider();
	var ProviderStream = class extends provider_1$1.default {
		constructor() {
			super(...arguments);
			this._reader = new stream_2.default(this._settings);
		}
		read(task) {
			const root$1 = this._getRootDirectory(task);
			const options = this._getReaderOptions(task);
			const source = this.api(root$1, task, options);
			const destination = new stream_1$1.Readable({
				objectMode: true,
				read: () => {}
			});
			source.once("error", (error$2) => destination.emit("error", error$2)).on("data", (entry) => destination.emit("data", options.transform(entry))).once("end", () => destination.emit("end"));
			destination.once("close", () => source.destroy());
			return destination;
		}
		api(root$1, task, options) {
			if (task.dynamic) return this._reader.dynamic(root$1, options);
			return this._reader.static(task.patterns, options);
		}
	};
	exports.default = ProviderStream;
} });

//#endregion
//#region ../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/readers/sync.js
var require_sync$1 = __commonJS({ "../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/readers/sync.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	const fsStat$1 = require_out$3();
	const fsWalk = require_out$1();
	const reader_1 = require_reader();
	var ReaderSync = class extends reader_1.default {
		constructor() {
			super(...arguments);
			this._walkSync = fsWalk.walkSync;
			this._statSync = fsStat$1.statSync;
		}
		dynamic(root$1, options) {
			return this._walkSync(root$1, options);
		}
		static(patterns, options) {
			const entries = [];
			for (const pattern$1 of patterns) {
				const filepath = this._getFullEntryPath(pattern$1);
				const entry = this._getEntry(filepath, pattern$1, options);
				if (entry === null || !options.entryFilter(entry)) continue;
				entries.push(entry);
			}
			return entries;
		}
		_getEntry(filepath, pattern$1, options) {
			try {
				const stats = this._getStat(filepath);
				return this._makeEntry(stats, pattern$1);
			} catch (error$2) {
				if (options.errorFilter(error$2)) return null;
				throw error$2;
			}
		}
		_getStat(filepath) {
			return this._statSync(filepath, this._fsStatSettings);
		}
	};
	exports.default = ReaderSync;
} });

//#endregion
//#region ../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/sync.js
var require_sync = __commonJS({ "../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/sync.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	const sync_1$1 = require_sync$1();
	const provider_1 = require_provider();
	var ProviderSync = class extends provider_1.default {
		constructor() {
			super(...arguments);
			this._reader = new sync_1$1.default(this._settings);
		}
		read(task) {
			const root$1 = this._getRootDirectory(task);
			const options = this._getReaderOptions(task);
			const entries = this.api(root$1, task, options);
			return entries.map(options.transform);
		}
		api(root$1, task, options) {
			if (task.dynamic) return this._reader.dynamic(root$1, options);
			return this._reader.static(task.patterns, options);
		}
	};
	exports.default = ProviderSync;
} });

//#endregion
//#region ../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/settings.js
var require_settings = __commonJS({ "../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/settings.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.DEFAULT_FILE_SYSTEM_ADAPTER = void 0;
	const fs$17 = require("fs");
	const os = require("os");
	/**
	* The `os.cpus` method can return zero. We expect the number of cores to be greater than zero.
	* https://github.com/nodejs/node/blob/7faeddf23a98c53896f8b574a6e66589e8fb1eb8/lib/os.js#L106-L107
	*/
	const CPU_COUNT = Math.max(os.cpus().length, 1);
	exports.DEFAULT_FILE_SYSTEM_ADAPTER = {
		lstat: fs$17.lstat,
		lstatSync: fs$17.lstatSync,
		stat: fs$17.stat,
		statSync: fs$17.statSync,
		readdir: fs$17.readdir,
		readdirSync: fs$17.readdirSync
	};
	var Settings = class {
		constructor(_options = {}) {
			this._options = _options;
			this.absolute = this._getValue(this._options.absolute, false);
			this.baseNameMatch = this._getValue(this._options.baseNameMatch, false);
			this.braceExpansion = this._getValue(this._options.braceExpansion, true);
			this.caseSensitiveMatch = this._getValue(this._options.caseSensitiveMatch, true);
			this.concurrency = this._getValue(this._options.concurrency, CPU_COUNT);
			this.cwd = this._getValue(this._options.cwd, process.cwd());
			this.deep = this._getValue(this._options.deep, Infinity);
			this.dot = this._getValue(this._options.dot, false);
			this.extglob = this._getValue(this._options.extglob, true);
			this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, true);
			this.fs = this._getFileSystemMethods(this._options.fs);
			this.globstar = this._getValue(this._options.globstar, true);
			this.ignore = this._getValue(this._options.ignore, []);
			this.markDirectories = this._getValue(this._options.markDirectories, false);
			this.objectMode = this._getValue(this._options.objectMode, false);
			this.onlyDirectories = this._getValue(this._options.onlyDirectories, false);
			this.onlyFiles = this._getValue(this._options.onlyFiles, true);
			this.stats = this._getValue(this._options.stats, false);
			this.suppressErrors = this._getValue(this._options.suppressErrors, false);
			this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, false);
			this.unique = this._getValue(this._options.unique, true);
			if (this.onlyDirectories) this.onlyFiles = false;
			if (this.stats) this.objectMode = true;
			this.ignore = [].concat(this.ignore);
		}
		_getValue(option, value) {
			return option === undefined ? value : option;
		}
		_getFileSystemMethods(methods = {}) {
			return Object.assign(Object.assign({}, exports.DEFAULT_FILE_SYSTEM_ADAPTER), methods);
		}
	};
	exports.default = Settings;
} });

//#endregion
//#region ../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/index.js
var require_out = __commonJS({ "../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/index.js"(exports, module) {
	const taskManager = require_tasks();
	const async_1 = require_async();
	const stream_1 = require_stream();
	const sync_1 = require_sync();
	const settings_1 = require_settings();
	const utils = require_utils$2();
	async function FastGlob(source, options) {
		assertPatternsInput$1(source);
		const works = getWorks(source, async_1.default, options);
		const result = await Promise.all(works);
		return utils.array.flatten(result);
	}
	(function(FastGlob$1) {
		FastGlob$1.glob = FastGlob$1;
		FastGlob$1.globSync = sync$5;
		FastGlob$1.globStream = stream$3;
		FastGlob$1.async = FastGlob$1;
		function sync$5(source, options) {
			assertPatternsInput$1(source);
			const works = getWorks(source, sync_1.default, options);
			return utils.array.flatten(works);
		}
		FastGlob$1.sync = sync$5;
		function stream$3(source, options) {
			assertPatternsInput$1(source);
			const works = getWorks(source, stream_1.default, options);
			/**
			* The stream returned by the provider cannot work with an asynchronous iterator.
			* To support asynchronous iterators, regardless of the number of tasks, we always multiplex streams.
			* This affects performance (+25%). I don't see best solution right now.
			*/
			return utils.stream.merge(works);
		}
		FastGlob$1.stream = stream$3;
		function generateTasks(source, options) {
			assertPatternsInput$1(source);
			const patterns = [].concat(source);
			const settings = new settings_1.default(options);
			return taskManager.generate(patterns, settings);
		}
		FastGlob$1.generateTasks = generateTasks;
		function isDynamicPattern$1(source, options) {
			assertPatternsInput$1(source);
			const settings = new settings_1.default(options);
			return utils.pattern.isDynamicPattern(source, settings);
		}
		FastGlob$1.isDynamicPattern = isDynamicPattern$1;
		function escapePath(source) {
			assertPatternsInput$1(source);
			return utils.path.escape(source);
		}
		FastGlob$1.escapePath = escapePath;
		function convertPathToPattern(source) {
			assertPatternsInput$1(source);
			return utils.path.convertPathToPattern(source);
		}
		FastGlob$1.convertPathToPattern = convertPathToPattern;
		let posix;
		(function(posix$1) {
			function escapePath$1(source) {
				assertPatternsInput$1(source);
				return utils.path.escapePosixPath(source);
			}
			posix$1.escapePath = escapePath$1;
			function convertPathToPattern$1(source) {
				assertPatternsInput$1(source);
				return utils.path.convertPosixPathToPattern(source);
			}
			posix$1.convertPathToPattern = convertPathToPattern$1;
		})(posix = FastGlob$1.posix || (FastGlob$1.posix = {}));
		let win32$1;
		(function(win32$2) {
			function escapePath$1(source) {
				assertPatternsInput$1(source);
				return utils.path.escapeWindowsPath(source);
			}
			win32$2.escapePath = escapePath$1;
			function convertPathToPattern$1(source) {
				assertPatternsInput$1(source);
				return utils.path.convertWindowsPathToPattern(source);
			}
			win32$2.convertPathToPattern = convertPathToPattern$1;
		})(win32$1 = FastGlob$1.win32 || (FastGlob$1.win32 = {}));
	})(FastGlob || (FastGlob = {}));
	function getWorks(source, _Provider, options) {
		const patterns = [].concat(source);
		const settings = new settings_1.default(options);
		const tasks = taskManager.generate(patterns, settings);
		const provider = new _Provider(settings);
		return tasks.map(provider.read, provider);
	}
	function assertPatternsInput$1(input) {
		const source = [].concat(input);
		const isValidSource = source.every((item) => utils.string.isString(item) && !utils.string.isEmpty(item));
		if (!isValidSource) throw new TypeError("Patterns must be a string (non empty) or an array of strings");
	}
	module.exports = FastGlob;
} });

//#endregion
//#region ../node_modules/.pnpm/path-type@4.0.0/node_modules/path-type/index.js
var require_path_type = __commonJS({ "../node_modules/.pnpm/path-type@4.0.0/node_modules/path-type/index.js"(exports) {
	const { promisify: promisify$4 } = require("util");
	const fs$16 = require("fs");
	async function isType(fsStatType, statsMethodName, filePath) {
		if (typeof filePath !== "string") throw new TypeError(`Expected a string, got ${typeof filePath}`);
		try {
			const stats = await promisify$4(fs$16[fsStatType])(filePath);
			return stats[statsMethodName]();
		} catch (error$2) {
			if (error$2.code === "ENOENT") return false;
			throw error$2;
		}
	}
	function isTypeSync(fsStatType, statsMethodName, filePath) {
		if (typeof filePath !== "string") throw new TypeError(`Expected a string, got ${typeof filePath}`);
		try {
			return fs$16[fsStatType](filePath)[statsMethodName]();
		} catch (error$2) {
			if (error$2.code === "ENOENT") return false;
			throw error$2;
		}
	}
	exports.isFile = isType.bind(null, "stat", "isFile");
	exports.isDirectory = isType.bind(null, "stat", "isDirectory");
	exports.isSymlink = isType.bind(null, "lstat", "isSymbolicLink");
	exports.isFileSync = isTypeSync.bind(null, "statSync", "isFile");
	exports.isDirectorySync = isTypeSync.bind(null, "statSync", "isDirectory");
	exports.isSymlinkSync = isTypeSync.bind(null, "lstatSync", "isSymbolicLink");
} });

//#endregion
//#region ../node_modules/.pnpm/dir-glob@3.0.1/node_modules/dir-glob/index.js
var require_dir_glob = __commonJS({ "../node_modules/.pnpm/dir-glob@3.0.1/node_modules/dir-glob/index.js"(exports, module) {
	const path$18 = require("path");
	const pathType = require_path_type();
	const getExtensions = (extensions) => extensions.length > 1 ? `{${extensions.join(",")}}` : extensions[0];
	const getPath = (filepath, cwd$1) => {
		const pth = filepath[0] === "!" ? filepath.slice(1) : filepath;
		return path$18.isAbsolute(pth) ? pth : path$18.join(cwd$1, pth);
	};
	const addExtensions = (file$2, extensions) => {
		if (path$18.extname(file$2)) return `**/${file$2}`;
		return `**/${file$2}.${getExtensions(extensions)}`;
	};
	const getGlob = (directory, options) => {
		if (options.files && !Array.isArray(options.files)) throw new TypeError(`Expected \`files\` to be of type \`Array\` but received type \`${typeof options.files}\``);
		if (options.extensions && !Array.isArray(options.extensions)) throw new TypeError(`Expected \`extensions\` to be of type \`Array\` but received type \`${typeof options.extensions}\``);
		if (options.files && options.extensions) return options.files.map((x) => path$18.posix.join(directory, addExtensions(x, options.extensions)));
		if (options.files) return options.files.map((x) => path$18.posix.join(directory, `**/${x}`));
		if (options.extensions) return [path$18.posix.join(directory, `**/*.${getExtensions(options.extensions)}`)];
		return [path$18.posix.join(directory, "**")];
	};
	module.exports = async (input, options) => {
		options = {
			cwd: process.cwd(),
			...options
		};
		if (typeof options.cwd !== "string") throw new TypeError(`Expected \`cwd\` to be of type \`string\` but received type \`${typeof options.cwd}\``);
		const globs = await Promise.all([].concat(input).map(async (x) => {
			const isDirectory$1 = await pathType.isDirectory(getPath(x, options.cwd));
			return isDirectory$1 ? getGlob(x, options) : x;
		}));
		return [].concat.apply([], globs);
	};
	module.exports.sync = (input, options) => {
		options = {
			cwd: process.cwd(),
			...options
		};
		if (typeof options.cwd !== "string") throw new TypeError(`Expected \`cwd\` to be of type \`string\` but received type \`${typeof options.cwd}\``);
		const globs = [].concat(input).map((x) => pathType.isDirectorySync(getPath(x, options.cwd)) ? getGlob(x, options) : x);
		return [].concat.apply([], globs);
	};
} });

//#endregion
//#region ../node_modules/.pnpm/ignore@5.3.2/node_modules/ignore/index.js
var require_ignore = __commonJS({ "../node_modules/.pnpm/ignore@5.3.2/node_modules/ignore/index.js"(exports, module) {
	function makeArray(subject) {
		return Array.isArray(subject) ? subject : [subject];
	}
	const EMPTY = "";
	const SPACE = " ";
	const ESCAPE = "\\";
	const REGEX_TEST_BLANK_LINE = /^\s+$/;
	const REGEX_INVALID_TRAILING_BACKSLASH = /(?:[^\\]|^)\\$/;
	const REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION = /^\\!/;
	const REGEX_REPLACE_LEADING_EXCAPED_HASH = /^\\#/;
	const REGEX_SPLITALL_CRLF = /\r?\n/g;
	const REGEX_TEST_INVALID_PATH = /^\.*\/|^\.+$/;
	const SLASH = "/";
	let TMP_KEY_IGNORE = "node-ignore";
	if (typeof Symbol !== "undefined") TMP_KEY_IGNORE = Symbol.for("node-ignore");
	const KEY_IGNORE = TMP_KEY_IGNORE;
	const define$1 = (object, key, value) => Object.defineProperty(object, key, { value });
	const REGEX_REGEXP_RANGE = /([0-z])-([0-z])/g;
	const RETURN_FALSE = () => false;
	const sanitizeRange = (range) => range.replace(REGEX_REGEXP_RANGE, (match, from, to) => from.charCodeAt(0) <= to.charCodeAt(0) ? match : EMPTY);
	const cleanRangeBackSlash = (slashes) => {
		const { length } = slashes;
		return slashes.slice(0, length - length % 2);
	};
	const REPLACERS = [
		[/^\uFEFF/, () => EMPTY],
		[/((?:\\\\)*?)(\\?\s+)$/, (_, m1, m2) => m1 + (m2.indexOf("\\") === 0 ? SPACE : EMPTY)],
		[/(\\+?)\s/g, (_, m1) => {
			const { length } = m1;
			return m1.slice(0, length - length % 2) + SPACE;
		}],
		[/[\\$.|*+(){^]/g, (match) => `\\${match}`],
		[/(?!\\)\?/g, () => "[^/]"],
		[/^\//, () => "^"],
		[/\//g, () => "\\/"],
		[/^\^*\\\*\\\*\\\//, () => "^(?:.*\\/)?"],
		[/^(?=[^^])/, function startingReplacer() {
			return !/\/(?!$)/.test(this) ? "(?:^|\\/)" : "^";
		}],
		[/\\\/\\\*\\\*(?=\\\/|$)/g, (_, index$1, str) => index$1 + 6 < str.length ? "(?:\\/[^\\/]+)*" : "\\/.+"],
		[/(^|[^\\]+)(\\\*)+(?=.+)/g, (_, p1, p2) => {
			const unescaped = p2.replace(/\\\*/g, "[^\\/]*");
			return p1 + unescaped;
		}],
		[/\\\\\\(?=[$.|*+(){^])/g, () => ESCAPE],
		[/\\\\/g, () => ESCAPE],
		[/(\\)?\[([^\]/]*?)(\\*)($|\])/g, (match, leadEscape, range, endEscape, close) => leadEscape === ESCAPE ? `\\[${range}${cleanRangeBackSlash(endEscape)}${close}` : close === "]" ? endEscape.length % 2 === 0 ? `[${sanitizeRange(range)}${endEscape}]` : "[]" : "[]"],
		[/(?:[^*])$/, (match) => /\/$/.test(match) ? `${match}$` : `${match}(?=$|\\/$)`],
		[/(\^|\\\/)?\\\*$/, (_, p1) => {
			const prefix$1 = p1 ? `${p1}[^/]+` : "[^/]*";
			return `${prefix$1}(?=$|\\/$)`;
		}]
	];
	const regexCache = Object.create(null);
	const makeRegex = (pattern$1, ignoreCase) => {
		let source = regexCache[pattern$1];
		if (!source) {
			source = REPLACERS.reduce((prev, [matcher, replacer]) => prev.replace(matcher, replacer.bind(pattern$1)), pattern$1);
			regexCache[pattern$1] = source;
		}
		return ignoreCase ? new RegExp(source, "i") : new RegExp(source);
	};
	const isString = (subject) => typeof subject === "string";
	const checkPattern = (pattern$1) => pattern$1 && isString(pattern$1) && !REGEX_TEST_BLANK_LINE.test(pattern$1) && !REGEX_INVALID_TRAILING_BACKSLASH.test(pattern$1) && pattern$1.indexOf("#") !== 0;
	const splitPattern = (pattern$1) => pattern$1.split(REGEX_SPLITALL_CRLF);
	var IgnoreRule = class {
		constructor(origin, pattern$1, negative, regex) {
			this.origin = origin;
			this.pattern = pattern$1;
			this.negative = negative;
			this.regex = regex;
		}
	};
	const createRule = (pattern$1, ignoreCase) => {
		const origin = pattern$1;
		let negative = false;
		if (pattern$1.indexOf("!") === 0) {
			negative = true;
			pattern$1 = pattern$1.substr(1);
		}
		pattern$1 = pattern$1.replace(REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION, "!").replace(REGEX_REPLACE_LEADING_EXCAPED_HASH, "#");
		const regex = makeRegex(pattern$1, ignoreCase);
		return new IgnoreRule(origin, pattern$1, negative, regex);
	};
	const throwError$1 = (message, Ctor) => {
		throw new Ctor(message);
	};
	const checkPath = (path$72, originalPath, doThrow) => {
		if (!isString(path$72)) return doThrow(`path must be a string, but got \`${originalPath}\``, TypeError);
		if (!path$72) return doThrow(`path must not be empty`, TypeError);
		if (checkPath.isNotRelative(path$72)) {
			const r = "`path.relative()`d";
			return doThrow(`path should be a ${r} string, but got "${originalPath}"`, RangeError);
		}
		return true;
	};
	const isNotRelative = (path$72) => REGEX_TEST_INVALID_PATH.test(path$72);
	checkPath.isNotRelative = isNotRelative;
	checkPath.convert = (p) => p;
	var Ignore = class {
		constructor({ ignorecase = true, ignoreCase = ignorecase, allowRelativePaths = false } = {}) {
			define$1(this, KEY_IGNORE, true);
			this._rules = [];
			this._ignoreCase = ignoreCase;
			this._allowRelativePaths = allowRelativePaths;
			this._initCache();
		}
		_initCache() {
			this._ignoreCache = Object.create(null);
			this._testCache = Object.create(null);
		}
		_addPattern(pattern$1) {
			if (pattern$1 && pattern$1[KEY_IGNORE]) {
				this._rules = this._rules.concat(pattern$1._rules);
				this._added = true;
				return;
			}
			if (checkPattern(pattern$1)) {
				const rule = createRule(pattern$1, this._ignoreCase);
				this._added = true;
				this._rules.push(rule);
			}
		}
		add(pattern$1) {
			this._added = false;
			makeArray(isString(pattern$1) ? splitPattern(pattern$1) : pattern$1).forEach(this._addPattern, this);
			if (this._added) this._initCache();
			return this;
		}
		addPattern(pattern$1) {
			return this.add(pattern$1);
		}
		_testOne(path$72, checkUnignored) {
			let ignored = false;
			let unignored = false;
			this._rules.forEach((rule) => {
				const { negative } = rule;
				if (unignored === negative && ignored !== unignored || negative && !ignored && !unignored && !checkUnignored) return;
				const matched = rule.regex.test(path$72);
				if (matched) {
					ignored = !negative;
					unignored = negative;
				}
			});
			return {
				ignored,
				unignored
			};
		}
		_test(originalPath, cache$1, checkUnignored, slices) {
			const path$72 = originalPath && checkPath.convert(originalPath);
			checkPath(path$72, originalPath, this._allowRelativePaths ? RETURN_FALSE : throwError$1);
			return this._t(path$72, cache$1, checkUnignored, slices);
		}
		_t(path$72, cache$1, checkUnignored, slices) {
			if (path$72 in cache$1) return cache$1[path$72];
			if (!slices) slices = path$72.split(SLASH);
			slices.pop();
			if (!slices.length) return cache$1[path$72] = this._testOne(path$72, checkUnignored);
			const parent = this._t(slices.join(SLASH) + SLASH, cache$1, checkUnignored, slices);
			return cache$1[path$72] = parent.ignored ? parent : this._testOne(path$72, checkUnignored);
		}
		ignores(path$72) {
			return this._test(path$72, this._ignoreCache, false).ignored;
		}
		createFilter() {
			return (path$72) => !this.ignores(path$72);
		}
		filter(paths) {
			return makeArray(paths).filter(this.createFilter());
		}
		test(path$72) {
			return this._test(path$72, this._testCache, true);
		}
	};
	const factory = (options) => new Ignore(options);
	const isPathValid = (path$72) => checkPath(path$72 && checkPath.convert(path$72), path$72, RETURN_FALSE);
	factory.isPathValid = isPathValid;
	factory.default = factory;
	module.exports = factory;
	if (typeof process !== "undefined" && (process.env && process.env.IGNORE_TEST_WIN32 || process.platform === "win32")) {
		const makePosix = (str) => /^\\\\\?\\/.test(str) || /["<>|\u0000-\u001F]+/u.test(str) ? str : str.replace(/\\/g, "/");
		checkPath.convert = makePosix;
		const REGIX_IS_WINDOWS_PATH_ABSOLUTE = /^[a-z]:\//i;
		checkPath.isNotRelative = (path$72) => REGIX_IS_WINDOWS_PATH_ABSOLUTE.test(path$72) || isNotRelative(path$72);
	}
} });

//#endregion
//#region ../node_modules/.pnpm/slash@3.0.0/node_modules/slash/index.js
var require_slash = __commonJS({ "../node_modules/.pnpm/slash@3.0.0/node_modules/slash/index.js"(exports, module) {
	module.exports = (path$72) => {
		const isExtendedLengthPath = /^\\\\\?\\/.test(path$72);
		const hasNonAscii = /[^\u0000-\u0080]+/.test(path$72);
		if (isExtendedLengthPath || hasNonAscii) return path$72;
		return path$72.replace(/\\/g, "/");
	};
} });

//#endregion
//#region ../node_modules/.pnpm/globby@11.1.0/node_modules/globby/gitignore.js
var require_gitignore = __commonJS({ "../node_modules/.pnpm/globby@11.1.0/node_modules/globby/gitignore.js"(exports, module) {
	const { promisify: promisify$3 } = require("util");
	const fs$15 = require("fs");
	const path$17 = require("path");
	const fastGlob$1 = require_out();
	const gitIgnore = require_ignore();
	const slash = require_slash();
	const DEFAULT_IGNORE = [
		"**/node_modules/**",
		"**/flow-typed/**",
		"**/coverage/**",
		"**/.git"
	];
	const readFileP = promisify$3(fs$15.readFile);
	const mapGitIgnorePatternTo = (base) => (ignore) => {
		if (ignore.startsWith("!")) return "!" + path$17.posix.join(base, ignore.slice(1));
		return path$17.posix.join(base, ignore);
	};
	const parseGitIgnore = (content$2, options) => {
		const base = slash(path$17.relative(options.cwd, path$17.dirname(options.fileName)));
		return content$2.split(/\r?\n/).filter(Boolean).filter((line) => !line.startsWith("#")).map(mapGitIgnorePatternTo(base));
	};
	const reduceIgnore = (files) => {
		const ignores = gitIgnore();
		for (const file$2 of files) ignores.add(parseGitIgnore(file$2.content, {
			cwd: file$2.cwd,
			fileName: file$2.filePath
		}));
		return ignores;
	};
	const ensureAbsolutePathForCwd = (cwd$1, p) => {
		cwd$1 = slash(cwd$1);
		if (path$17.isAbsolute(p)) {
			if (slash(p).startsWith(cwd$1)) return p;
			throw new Error(`Path ${p} is not in cwd ${cwd$1}`);
		}
		return path$17.join(cwd$1, p);
	};
	const getIsIgnoredPredecate = (ignores, cwd$1) => {
		return (p) => ignores.ignores(slash(path$17.relative(cwd$1, ensureAbsolutePathForCwd(cwd$1, p.path || p))));
	};
	const getFile = async (file$2, cwd$1) => {
		const filePath = path$17.join(cwd$1, file$2);
		const content$2 = await readFileP(filePath, "utf8");
		return {
			cwd: cwd$1,
			filePath,
			content: content$2
		};
	};
	const getFileSync = (file$2, cwd$1) => {
		const filePath = path$17.join(cwd$1, file$2);
		const content$2 = fs$15.readFileSync(filePath, "utf8");
		return {
			cwd: cwd$1,
			filePath,
			content: content$2
		};
	};
	const normalizeOptions = ({ ignore = [], cwd: cwd$1 = slash(process.cwd()) } = {}) => {
		return {
			ignore,
			cwd: cwd$1
		};
	};
	module.exports = async (options) => {
		options = normalizeOptions(options);
		const paths = await fastGlob$1("**/.gitignore", {
			ignore: DEFAULT_IGNORE.concat(options.ignore),
			cwd: options.cwd
		});
		const files = await Promise.all(paths.map((file$2) => getFile(file$2, options.cwd)));
		const ignores = reduceIgnore(files);
		return getIsIgnoredPredecate(ignores, options.cwd);
	};
	module.exports.sync = (options) => {
		options = normalizeOptions(options);
		const paths = fastGlob$1.sync("**/.gitignore", {
			ignore: DEFAULT_IGNORE.concat(options.ignore),
			cwd: options.cwd
		});
		const files = paths.map((file$2) => getFileSync(file$2, options.cwd));
		const ignores = reduceIgnore(files);
		return getIsIgnoredPredecate(ignores, options.cwd);
	};
} });

//#endregion
//#region ../node_modules/.pnpm/globby@11.1.0/node_modules/globby/stream-utils.js
var require_stream_utils = __commonJS({ "../node_modules/.pnpm/globby@11.1.0/node_modules/globby/stream-utils.js"(exports, module) {
	const { Transform } = require("stream");
	var ObjectTransform = class extends Transform {
		constructor() {
			super({ objectMode: true });
		}
	};
	var FilterStream$1 = class extends ObjectTransform {
		constructor(filter) {
			super();
			this._filter = filter;
		}
		_transform(data, encoding, callback) {
			if (this._filter(data)) this.push(data);
			callback();
		}
	};
	var UniqueStream$1 = class extends ObjectTransform {
		constructor() {
			super();
			this._pushed = new Set();
		}
		_transform(data, encoding, callback) {
			if (!this._pushed.has(data)) {
				this.push(data);
				this._pushed.add(data);
			}
			callback();
		}
	};
	module.exports = {
		FilterStream: FilterStream$1,
		UniqueStream: UniqueStream$1
	};
} });

//#endregion
//#region ../node_modules/.pnpm/globby@11.1.0/node_modules/globby/index.js
var require_globby = __commonJS({ "../node_modules/.pnpm/globby@11.1.0/node_modules/globby/index.js"(exports, module) {
	const fs$14 = require("fs");
	const arrayUnion = require_array_union();
	const merge2 = require_merge2();
	const fastGlob = require_out();
	const dirGlob = require_dir_glob();
	const gitignore = require_gitignore();
	const { FilterStream, UniqueStream } = require_stream_utils();
	const DEFAULT_FILTER = () => false;
	const isNegative = (pattern$1) => pattern$1[0] === "!";
	const assertPatternsInput = (patterns) => {
		if (!patterns.every((pattern$1) => typeof pattern$1 === "string")) throw new TypeError("Patterns must be a string or an array of strings");
	};
	const checkCwdOption = (options = {}) => {
		if (!options.cwd) return;
		let stat$5;
		try {
			stat$5 = fs$14.statSync(options.cwd);
		} catch {
			return;
		}
		if (!stat$5.isDirectory()) throw new Error("The `cwd` option must be a path to a directory");
	};
	const getPathString = (p) => p.stats instanceof fs$14.Stats ? p.path : p;
	const generateGlobTasks = (patterns, taskOptions) => {
		patterns = arrayUnion([].concat(patterns));
		assertPatternsInput(patterns);
		checkCwdOption(taskOptions);
		const globTasks = [];
		taskOptions = {
			ignore: [],
			expandDirectories: true,
			...taskOptions
		};
		for (const [index$1, pattern$1] of patterns.entries()) {
			if (isNegative(pattern$1)) continue;
			const ignore = patterns.slice(index$1).filter((pattern$2) => isNegative(pattern$2)).map((pattern$2) => pattern$2.slice(1));
			const options = {
				...taskOptions,
				ignore: taskOptions.ignore.concat(ignore)
			};
			globTasks.push({
				pattern: pattern$1,
				options
			});
		}
		return globTasks;
	};
	const globDirs = (task, fn) => {
		let options = {};
		if (task.options.cwd) options.cwd = task.options.cwd;
		if (Array.isArray(task.options.expandDirectories)) options = {
			...options,
			files: task.options.expandDirectories
		};
else if (typeof task.options.expandDirectories === "object") options = {
			...options,
			...task.options.expandDirectories
		};
		return fn(task.pattern, options);
	};
	const getPattern = (task, fn) => task.options.expandDirectories ? globDirs(task, fn) : [task.pattern];
	const getFilterSync = (options) => {
		return options && options.gitignore ? gitignore.sync({
			cwd: options.cwd,
			ignore: options.ignore
		}) : DEFAULT_FILTER;
	};
	const globToTask = (task) => (glob$2) => {
		const { options } = task;
		if (options.ignore && Array.isArray(options.ignore) && options.expandDirectories) options.ignore = dirGlob.sync(options.ignore);
		return {
			pattern: glob$2,
			options
		};
	};
	module.exports = async (patterns, options) => {
		const globTasks = generateGlobTasks(patterns, options);
		const getFilter = async () => {
			return options && options.gitignore ? gitignore({
				cwd: options.cwd,
				ignore: options.ignore
			}) : DEFAULT_FILTER;
		};
		const getTasks = async () => {
			const tasks$1 = await Promise.all(globTasks.map(async (task) => {
				const globs = await getPattern(task, dirGlob);
				return Promise.all(globs.map(globToTask(task)));
			}));
			return arrayUnion(...tasks$1);
		};
		const [filter, tasks] = await Promise.all([getFilter(), getTasks()]);
		const paths = await Promise.all(tasks.map((task) => fastGlob(task.pattern, task.options)));
		return arrayUnion(...paths).filter((path_) => !filter(getPathString(path_)));
	};
	module.exports.sync = (patterns, options) => {
		const globTasks = generateGlobTasks(patterns, options);
		const tasks = [];
		for (const task of globTasks) {
			const newTask = getPattern(task, dirGlob.sync).map(globToTask(task));
			tasks.push(...newTask);
		}
		const filter = getFilterSync(options);
		let matches = [];
		for (const task of tasks) matches = arrayUnion(matches, fastGlob.sync(task.pattern, task.options));
		return matches.filter((path_) => !filter(path_));
	};
	module.exports.stream = (patterns, options) => {
		const globTasks = generateGlobTasks(patterns, options);
		const tasks = [];
		for (const task of globTasks) {
			const newTask = getPattern(task, dirGlob.sync).map(globToTask(task));
			tasks.push(...newTask);
		}
		const filter = getFilterSync(options);
		const filterStream = new FilterStream((p) => !filter(p));
		const uniqueStream = new UniqueStream();
		return merge2(tasks.map((task) => fastGlob.stream(task.pattern, task.options))).pipe(filterStream).pipe(uniqueStream);
	};
	module.exports.generateGlobTasks = generateGlobTasks;
	module.exports.hasMagic = (patterns, options) => [].concat(patterns).some((pattern$1) => fastGlob.isDynamicPattern(pattern$1, options));
	module.exports.gitignore = gitignore;
} });

//#endregion
//#region ../node_modules/.pnpm/pify@4.0.1/node_modules/pify/index.js
var require_pify = __commonJS({ "../node_modules/.pnpm/pify@4.0.1/node_modules/pify/index.js"(exports, module) {
	const processFn = (fn, options) => function(...args) {
		const P = options.promiseModule;
		return new P((resolve$1, reject) => {
			if (options.multiArgs) args.push((...result) => {
				if (options.errorFirst) if (result[0]) reject(result);
else {
					result.shift();
					resolve$1(result);
				}
else resolve$1(result);
			});
else if (options.errorFirst) args.push((error$2, result) => {
				if (error$2) reject(error$2);
else resolve$1(result);
			});
else args.push(resolve$1);
			fn.apply(this, args);
		});
	};
	module.exports = (input, options) => {
		options = Object.assign({
			exclude: [/.+(Sync|Stream)$/],
			errorFirst: true,
			promiseModule: Promise
		}, options);
		const objType = typeof input;
		if (!(input !== null && (objType === "object" || objType === "function"))) throw new TypeError(`Expected \`input\` to be a \`Function\` or \`Object\`, got \`${input === null ? "null" : objType}\``);
		const filter = (key) => {
			const match = (pattern$1) => typeof pattern$1 === "string" ? key === pattern$1 : pattern$1.test(key);
			return options.include ? options.include.some(match) : !options.exclude.some(match);
		};
		let ret;
		if (objType === "function") ret = function(...args) {
			return options.excludeMain ? input(...args) : processFn(input, options).apply(this, args);
		};
else ret = Object.create(Object.getPrototypeOf(input));
		for (const key in input) {
			const property = input[key];
			ret[key] = typeof property === "function" && filter(key) ? processFn(property, options) : property;
		}
		return ret;
	};
} });

//#endregion
//#region ../node_modules/.pnpm/strip-bom@3.0.0/node_modules/strip-bom/index.js
var require_strip_bom = __commonJS({ "../node_modules/.pnpm/strip-bom@3.0.0/node_modules/strip-bom/index.js"(exports, module) {
	module.exports = (x) => {
		if (typeof x !== "string") throw new TypeError("Expected a string, got " + typeof x);
		if (x.charCodeAt(0) === 65279) return x.slice(1);
		return x;
	};
} });

//#endregion
//#region ../node_modules/.pnpm/read-yaml-file@1.1.0/node_modules/read-yaml-file/index.js
var require_read_yaml_file = __commonJS({ "../node_modules/.pnpm/read-yaml-file@1.1.0/node_modules/read-yaml-file/index.js"(exports, module) {
	const fs$13 = require_graceful_fs();
	const pify = require_pify();
	const stripBom = require_strip_bom();
	const yaml$2 = require_js_yaml$1();
	const parse$10 = (data) => yaml$2.safeLoad(stripBom(data));
	const readYamlFile$4 = (fp) => pify(fs$13.readFile)(fp, "utf8").then((data) => parse$10(data));
	module.exports = readYamlFile$4;
	module.exports.default = readYamlFile$4;
	module.exports.sync = (fp) => parse$10(fs$13.readFileSync(fp, "utf8"));
} });

//#endregion
//#region ../node_modules/.pnpm/p-try@2.2.0/node_modules/p-try/index.js
var require_p_try = __commonJS({ "../node_modules/.pnpm/p-try@2.2.0/node_modules/p-try/index.js"(exports, module) {
	const pTry$1 = (fn, ...arguments_) => new Promise((resolve$1) => {
		resolve$1(fn(...arguments_));
	});
	module.exports = pTry$1;
	module.exports.default = pTry$1;
} });

//#endregion
//#region ../node_modules/.pnpm/p-limit@2.3.0/node_modules/p-limit/index.js
var require_p_limit = __commonJS({ "../node_modules/.pnpm/p-limit@2.3.0/node_modules/p-limit/index.js"(exports, module) {
	const pTry = require_p_try();
	const pLimit$1 = (concurrency) => {
		if (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) return Promise.reject(new TypeError("Expected `concurrency` to be a number from 1 and up"));
		const queue$1 = [];
		let activeCount = 0;
		const next = () => {
			activeCount--;
			if (queue$1.length > 0) queue$1.shift()();
		};
		const run$1 = (fn, resolve$1, ...args) => {
			activeCount++;
			const result = pTry(fn, ...args);
			resolve$1(result);
			result.then(next, next);
		};
		const enqueue$1 = (fn, resolve$1, ...args) => {
			if (activeCount < concurrency) run$1(fn, resolve$1, ...args);
else queue$1.push(run$1.bind(null, fn, resolve$1, ...args));
		};
		const generator = (fn, ...args) => new Promise((resolve$1) => enqueue$1(fn, resolve$1, ...args));
		Object.defineProperties(generator, {
			activeCount: { get: () => activeCount },
			pendingCount: { get: () => queue$1.length },
			clearQueue: { value: () => {
				queue$1.length = 0;
			} }
		});
		return generator;
	};
	module.exports = pLimit$1;
	module.exports.default = pLimit$1;
} });

//#endregion
//#region ../node_modules/.pnpm/p-locate@4.1.0/node_modules/p-locate/index.js
var require_p_locate = __commonJS({ "../node_modules/.pnpm/p-locate@4.1.0/node_modules/p-locate/index.js"(exports, module) {
	const pLimit = require_p_limit();
	var EndError = class extends Error {
		constructor(value) {
			super();
			this.value = value;
		}
	};
	const testElement = async (element, tester) => tester(await element);
	const finder = async (element) => {
		const values = await Promise.all(element);
		if (values[1] === true) throw new EndError(values[0]);
		return false;
	};
	const pLocate$1 = async (iterable, tester, options) => {
		options = {
			concurrency: Infinity,
			preserveOrder: true,
			...options
		};
		const limit = pLimit(options.concurrency);
		const items = [...iterable].map((element) => [element, limit(testElement, element, tester)]);
		const checkLimit = pLimit(options.preserveOrder ? 1 : Infinity);
		try {
			await Promise.all(items.map((element) => checkLimit(finder, element)));
		} catch (error$2) {
			if (error$2 instanceof EndError) return error$2.value;
			throw error$2;
		}
	};
	module.exports = pLocate$1;
	module.exports.default = pLocate$1;
} });

//#endregion
//#region ../node_modules/.pnpm/locate-path@5.0.0/node_modules/locate-path/index.js
var require_locate_path = __commonJS({ "../node_modules/.pnpm/locate-path@5.0.0/node_modules/locate-path/index.js"(exports, module) {
	const path$16 = require("path");
	const fs$12 = require("fs");
	const { promisify: promisify$2 } = require("util");
	const pLocate = require_p_locate();
	const fsStat = promisify$2(fs$12.stat);
	const fsLStat = promisify$2(fs$12.lstat);
	const typeMappings = {
		directory: "isDirectory",
		file: "isFile"
	};
	function checkType({ type }) {
		if (type in typeMappings) return;
		throw new Error(`Invalid type specified: ${type}`);
	}
	const matchType = (type, stat$5) => type === undefined || stat$5[typeMappings[type]]();
	module.exports = async (paths, options) => {
		options = {
			cwd: process.cwd(),
			type: "file",
			allowSymlinks: true,
			...options
		};
		checkType(options);
		const statFn = options.allowSymlinks ? fsStat : fsLStat;
		return pLocate(paths, async (path_) => {
			try {
				const stat$5 = await statFn(path$16.resolve(options.cwd, path_));
				return matchType(options.type, stat$5);
			} catch (_) {
				return false;
			}
		}, options);
	};
	module.exports.sync = (paths, options) => {
		options = {
			cwd: process.cwd(),
			allowSymlinks: true,
			type: "file",
			...options
		};
		checkType(options);
		const statFn = options.allowSymlinks ? fs$12.statSync : fs$12.lstatSync;
		for (const path_ of paths) try {
			const stat$5 = statFn(path$16.resolve(options.cwd, path_));
			if (matchType(options.type, stat$5)) return path_;
		} catch (_) {}
	};
} });

//#endregion
//#region ../node_modules/.pnpm/path-exists@4.0.0/node_modules/path-exists/index.js
var require_path_exists = __commonJS({ "../node_modules/.pnpm/path-exists@4.0.0/node_modules/path-exists/index.js"(exports, module) {
	const fs$11 = require("fs");
	const { promisify: promisify$1 } = require("util");
	const pAccess = promisify$1(fs$11.access);
	module.exports = async (path$72) => {
		try {
			await pAccess(path$72);
			return true;
		} catch (_) {
			return false;
		}
	};
	module.exports.sync = (path$72) => {
		try {
			fs$11.accessSync(path$72);
			return true;
		} catch (_) {
			return false;
		}
	};
} });

//#endregion
//#region ../node_modules/.pnpm/find-up@4.1.0/node_modules/find-up/index.js
var require_find_up = __commonJS({ "../node_modules/.pnpm/find-up@4.1.0/node_modules/find-up/index.js"(exports, module) {
	const path$15 = require("path");
	const locatePath = require_locate_path();
	const pathExists = require_path_exists();
	const stop = Symbol("findUp.stop");
	module.exports = async (name, options = {}) => {
		let directory = path$15.resolve(options.cwd || "");
		const { root: root$1 } = path$15.parse(directory);
		const paths = [].concat(name);
		const runMatcher = async (locateOptions) => {
			if (typeof name !== "function") return locatePath(paths, locateOptions);
			const foundPath = await name(locateOptions.cwd);
			if (typeof foundPath === "string") return locatePath([foundPath], locateOptions);
			return foundPath;
		};
		while (true) {
			const foundPath = await runMatcher({
				...options,
				cwd: directory
			});
			if (foundPath === stop) return;
			if (foundPath) return path$15.resolve(directory, foundPath);
			if (directory === root$1) return;
			directory = path$15.dirname(directory);
		}
	};
	module.exports.sync = (name, options = {}) => {
		let directory = path$15.resolve(options.cwd || "");
		const { root: root$1 } = path$15.parse(directory);
		const paths = [].concat(name);
		const runMatcher = (locateOptions) => {
			if (typeof name !== "function") return locatePath.sync(paths, locateOptions);
			const foundPath = name(locateOptions.cwd);
			if (typeof foundPath === "string") return locatePath.sync([foundPath], locateOptions);
			return foundPath;
		};
		while (true) {
			const foundPath = runMatcher({
				...options,
				cwd: directory
			});
			if (foundPath === stop) return;
			if (foundPath) return path$15.resolve(directory, foundPath);
			if (directory === root$1) return;
			directory = path$15.dirname(directory);
		}
	};
	module.exports.exists = pathExists;
	module.exports.sync.exists = pathExists.sync;
	module.exports.stop = stop;
} });

//#endregion
//#region ../node_modules/.pnpm/@manypkg+find-root@1.1.0/node_modules/@manypkg/find-root/dist/find-root.cjs.prod.js
var require_find_root_cjs_prod = __commonJS({ "../node_modules/.pnpm/@manypkg+find-root@1.1.0/node_modules/@manypkg/find-root/dist/find-root.cjs.prod.js"(exports) {
	function _interopDefault$13(ex) {
		return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
	}
	Object.defineProperty(exports, "__esModule", { value: !0 });
	var _regeneratorRuntime$3 = _interopDefault$13(require_regenerator()), _asyncToGenerator$3 = _interopDefault$13(require_asyncToGenerator()), _classCallCheck$3 = _interopDefault$13(require_classCallCheck()), _possibleConstructorReturn$3 = _interopDefault$13(require_possibleConstructorReturn()), _getPrototypeOf$3 = _interopDefault$13(require_getPrototypeOf()), _inherits$3 = _interopDefault$13(require_inherits()), _wrapNativeSuper$3 = _interopDefault$13(require_wrapNativeSuper()), findUp$3 = require_find_up(), findUp__default$1 = _interopDefault$13(findUp$3), path$14 = _interopDefault$13(require("path")), fs$10 = _interopDefault$13(require_lib()), NoPkgJsonFound$3 = function(_Error) {
		function NoPkgJsonFound$4(directory) {
			var _this;
			return _classCallCheck$3(this, NoPkgJsonFound$4), (_this = _possibleConstructorReturn$3(this, _getPrototypeOf$3(NoPkgJsonFound$4).call(this, "No package.json could be found upwards from the directory ".concat(directory)))).directory = directory, _this;
		}
		return _inherits$3(NoPkgJsonFound$4, _Error), NoPkgJsonFound$4;
	}(_wrapNativeSuper$3(Error));
	function hasWorkspacesConfiguredViaPkgJson$1(_x, _x2) {
		return _hasWorkspacesConfiguredViaPkgJson$1.apply(this, arguments);
	}
	function _hasWorkspacesConfiguredViaPkgJson$1() {
		return (_hasWorkspacesConfiguredViaPkgJson$1 = _asyncToGenerator$3(_regeneratorRuntime$3.mark(function _callee(directory, firstPkgJsonDirRef) {
			var pkgJson;
			return _regeneratorRuntime$3.wrap(function(_context) {
				for (;;) switch (_context.prev = _context.next) {
					case 0: return _context.prev = 0, _context.next = 3, fs$10.readJson(path$14.join(directory, "package.json"));
					case 3:
						if (pkgJson = _context.sent, void 0 === firstPkgJsonDirRef.current && (firstPkgJsonDirRef.current = directory), !pkgJson.workspaces && !pkgJson.bolt) {
							_context.next = 7;
							break;
						}
						return _context.abrupt("return", directory);
					case 7:
						_context.next = 13;
						break;
					case 9:
						if (_context.prev = 9, _context.t0 = _context.catch(0), "ENOENT" === _context.t0.code) {
							_context.next = 13;
							break;
						}
						throw _context.t0;
					case 13:
					case "end": return _context.stop();
				}
			}, _callee, null, [[0, 9]]);
		}))).apply(this, arguments);
	}
	function hasWorkspacesConfiguredViaLerna$1(_x3) {
		return _hasWorkspacesConfiguredViaLerna$1.apply(this, arguments);
	}
	function _hasWorkspacesConfiguredViaLerna$1() {
		return (_hasWorkspacesConfiguredViaLerna$1 = _asyncToGenerator$3(_regeneratorRuntime$3.mark(function _callee2(directory) {
			return _regeneratorRuntime$3.wrap(function(_context2) {
				for (;;) switch (_context2.prev = _context2.next) {
					case 0: return _context2.prev = 0, _context2.next = 3, fs$10.readJson(path$14.join(directory, "lerna.json"));
					case 3:
						if (!0 === _context2.sent.useWorkspaces) {
							_context2.next = 6;
							break;
						}
						return _context2.abrupt("return", directory);
					case 6:
						_context2.next = 12;
						break;
					case 8:
						if (_context2.prev = 8, _context2.t0 = _context2.catch(0), "ENOENT" === _context2.t0.code) {
							_context2.next = 12;
							break;
						}
						throw _context2.t0;
					case 12:
					case "end": return _context2.stop();
				}
			}, _callee2, null, [[0, 8]]);
		}))).apply(this, arguments);
	}
	function hasWorkspacesConfiguredViaPnpm$1(_x4) {
		return _hasWorkspacesConfiguredViaPnpm$1.apply(this, arguments);
	}
	function _hasWorkspacesConfiguredViaPnpm$1() {
		return (_hasWorkspacesConfiguredViaPnpm$1 = _asyncToGenerator$3(_regeneratorRuntime$3.mark(function _callee3(directory) {
			return _regeneratorRuntime$3.wrap(function(_context3) {
				for (;;) switch (_context3.prev = _context3.next) {
					case 0: return _context3.next = 2, fs$10.exists(path$14.join(directory, "pnpm-workspace.yaml"));
					case 2:
						if (!_context3.sent) {
							_context3.next = 5;
							break;
						}
						return _context3.abrupt("return", directory);
					case 5:
					case "end": return _context3.stop();
				}
			}, _callee3);
		}))).apply(this, arguments);
	}
	function findRoot$7(_x5) {
		return _findRoot$1.apply(this, arguments);
	}
	function _findRoot$1() {
		return (_findRoot$1 = _asyncToGenerator$3(_regeneratorRuntime$3.mark(function _callee4(cwd$1) {
			var firstPkgJsonDirRef, dir;
			return _regeneratorRuntime$3.wrap(function(_context4) {
				for (;;) switch (_context4.prev = _context4.next) {
					case 0: return firstPkgJsonDirRef = { current: void 0 }, _context4.next = 3, findUp__default$1(function(directory) {
						return Promise.all([
							hasWorkspacesConfiguredViaLerna$1(directory),
							hasWorkspacesConfiguredViaPkgJson$1(directory, firstPkgJsonDirRef),
							hasWorkspacesConfiguredViaPnpm$1(directory)
						]).then(function(x) {
							return x.find(function(dir$1) {
								return dir$1;
							});
						});
					}, {
						cwd: cwd$1,
						type: "directory"
					});
					case 3:
						if (dir = _context4.sent, void 0 !== firstPkgJsonDirRef.current) {
							_context4.next = 6;
							break;
						}
						throw new NoPkgJsonFound$3(cwd$1);
					case 6:
						if (void 0 !== dir) {
							_context4.next = 8;
							break;
						}
						return _context4.abrupt("return", firstPkgJsonDirRef.current);
					case 8: return _context4.abrupt("return", dir);
					case 9:
					case "end": return _context4.stop();
				}
			}, _callee4);
		}))).apply(this, arguments);
	}
	function hasWorkspacesConfiguredViaPkgJsonSync$1(directory, firstPkgJsonDirRef) {
		try {
			var pkgJson = fs$10.readJsonSync(path$14.join(directory, "package.json"));
			if (void 0 === firstPkgJsonDirRef.current && (firstPkgJsonDirRef.current = directory), pkgJson.workspaces || pkgJson.bolt) return directory;
		} catch (err) {
			if ("ENOENT" !== err.code) throw err;
		}
	}
	function hasWorkspacesConfiguredViaLernaSync$1(directory) {
		try {
			if (!0 !== fs$10.readJsonSync(path$14.join(directory, "lerna.json")).useWorkspaces) return directory;
		} catch (err) {
			if ("ENOENT" !== err.code) throw err;
		}
	}
	function hasWorkspacesConfiguredViaPnpmSync$1(directory) {
		if (fs$10.existsSync(path$14.join(directory, "pnpm-workspace.yaml"))) return directory;
	}
	function findRootSync$3(cwd$1) {
		var firstPkgJsonDirRef = { current: void 0 }, dir = findUp$3.sync(function(directory) {
			return [
				hasWorkspacesConfiguredViaLernaSync$1(directory),
				hasWorkspacesConfiguredViaPkgJsonSync$1(directory, firstPkgJsonDirRef),
				hasWorkspacesConfiguredViaPnpmSync$1(directory)
			].find(function(dir$1) {
				return dir$1;
			});
		}, {
			cwd: cwd$1,
			type: "directory"
		});
		if (void 0 === firstPkgJsonDirRef.current) throw new NoPkgJsonFound$3(cwd$1);
		return void 0 === dir ? firstPkgJsonDirRef.current : dir;
	}
	exports.NoPkgJsonFound = NoPkgJsonFound$3, exports.findRoot = findRoot$7, exports.findRootSync = findRootSync$3;
} });

//#endregion
//#region ../node_modules/.pnpm/@manypkg+find-root@1.1.0/node_modules/@manypkg/find-root/dist/find-root.cjs.dev.js
var require_find_root_cjs_dev = __commonJS({ "../node_modules/.pnpm/@manypkg+find-root@1.1.0/node_modules/@manypkg/find-root/dist/find-root.cjs.dev.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	function _interopDefault$12(ex) {
		return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
	}
	var _regeneratorRuntime$2 = _interopDefault$12(require_regenerator());
	var _asyncToGenerator$2 = _interopDefault$12(require_asyncToGenerator());
	var _classCallCheck$2 = _interopDefault$12(require_classCallCheck());
	var _possibleConstructorReturn$2 = _interopDefault$12(require_possibleConstructorReturn());
	var _getPrototypeOf$2 = _interopDefault$12(require_getPrototypeOf());
	var _inherits$2 = _interopDefault$12(require_inherits());
	var _wrapNativeSuper$2 = _interopDefault$12(require_wrapNativeSuper());
	var findUp$2 = require_find_up();
	var findUp__default = _interopDefault$12(findUp$2);
	var path$13 = _interopDefault$12(require("path"));
	var fs$9 = _interopDefault$12(require_lib());
	var NoPkgJsonFound$2 = /*#__PURE__*/ function(_Error) {
		_inherits$2(NoPkgJsonFound$4, _Error);
		function NoPkgJsonFound$4(directory) {
			var _this;
			_classCallCheck$2(this, NoPkgJsonFound$4);
			_this = _possibleConstructorReturn$2(this, _getPrototypeOf$2(NoPkgJsonFound$4).call(this, "No package.json could be found upwards from the directory ".concat(directory)));
			_this.directory = directory;
			return _this;
		}
		return NoPkgJsonFound$4;
	}(_wrapNativeSuper$2(Error));
	function hasWorkspacesConfiguredViaPkgJson(_x, _x2) {
		return _hasWorkspacesConfiguredViaPkgJson.apply(this, arguments);
	}
	function _hasWorkspacesConfiguredViaPkgJson() {
		_hasWorkspacesConfiguredViaPkgJson = _asyncToGenerator$2(
			/*#__PURE__*/ _regeneratorRuntime$2.mark(function _callee(directory, firstPkgJsonDirRef) {
				var pkgJson;
				return _regeneratorRuntime$2.wrap(function _callee$(_context) {
					while (1) switch (_context.prev = _context.next) {
						case 0:
							_context.prev = 0;
							_context.next = 3;
							return fs$9.readJson(path$13.join(directory, "package.json"));
						case 3:
							pkgJson = _context.sent;
							if (firstPkgJsonDirRef.current === undefined) firstPkgJsonDirRef.current = directory;
							if (!(pkgJson.workspaces || pkgJson.bolt)) {
								_context.next = 7;
								break;
							}
							return _context.abrupt("return", directory);
						case 7:
							_context.next = 13;
							break;
						case 9:
							_context.prev = 9;
							_context.t0 = _context["catch"](0);
							if (_context.t0.code === "ENOENT") {
								_context.next = 13;
								break;
							}
							throw _context.t0;
						case 13:
						case "end": return _context.stop();
					}
				}, _callee, null, [[0, 9]]);
			})
);
		return _hasWorkspacesConfiguredViaPkgJson.apply(this, arguments);
	}
	function hasWorkspacesConfiguredViaLerna(_x3) {
		return _hasWorkspacesConfiguredViaLerna.apply(this, arguments);
	}
	function _hasWorkspacesConfiguredViaLerna() {
		_hasWorkspacesConfiguredViaLerna = _asyncToGenerator$2(
			/*#__PURE__*/ _regeneratorRuntime$2.mark(function _callee2(directory) {
				var lernaJson;
				return _regeneratorRuntime$2.wrap(function _callee2$(_context2) {
					while (1) switch (_context2.prev = _context2.next) {
						case 0:
							_context2.prev = 0;
							_context2.next = 3;
							return fs$9.readJson(path$13.join(directory, "lerna.json"));
						case 3:
							lernaJson = _context2.sent;
							if (lernaJson.useWorkspaces === true) {
								_context2.next = 6;
								break;
							}
							return _context2.abrupt("return", directory);
						case 6:
							_context2.next = 12;
							break;
						case 8:
							_context2.prev = 8;
							_context2.t0 = _context2["catch"](0);
							if (_context2.t0.code === "ENOENT") {
								_context2.next = 12;
								break;
							}
							throw _context2.t0;
						case 12:
						case "end": return _context2.stop();
					}
				}, _callee2, null, [[0, 8]]);
			})
);
		return _hasWorkspacesConfiguredViaLerna.apply(this, arguments);
	}
	function hasWorkspacesConfiguredViaPnpm(_x4) {
		return _hasWorkspacesConfiguredViaPnpm.apply(this, arguments);
	}
	function _hasWorkspacesConfiguredViaPnpm() {
		_hasWorkspacesConfiguredViaPnpm = _asyncToGenerator$2(
			/*#__PURE__*/ _regeneratorRuntime$2.mark(function _callee3(directory) {
				var pnpmWorkspacesFileExists;
				return _regeneratorRuntime$2.wrap(function _callee3$(_context3) {
					while (1) switch (_context3.prev = _context3.next) {
						case 0:
							_context3.next = 2;
							return fs$9.exists(path$13.join(directory, "pnpm-workspace.yaml"));
						case 2:
							pnpmWorkspacesFileExists = _context3.sent;
							if (!pnpmWorkspacesFileExists) {
								_context3.next = 5;
								break;
							}
							return _context3.abrupt("return", directory);
						case 5:
						case "end": return _context3.stop();
					}
				}, _callee3);
			})
);
		return _hasWorkspacesConfiguredViaPnpm.apply(this, arguments);
	}
	function findRoot$6(_x5) {
		return _findRoot.apply(this, arguments);
	}
	function _findRoot() {
		_findRoot = _asyncToGenerator$2(
			/*#__PURE__*/ _regeneratorRuntime$2.mark(function _callee4(cwd$1) {
				var firstPkgJsonDirRef, dir;
				return _regeneratorRuntime$2.wrap(function _callee4$(_context4) {
					while (1) switch (_context4.prev = _context4.next) {
						case 0:
							firstPkgJsonDirRef = { current: undefined };
							_context4.next = 3;
							return findUp__default(function(directory) {
								return Promise.all([
									hasWorkspacesConfiguredViaLerna(directory),
									hasWorkspacesConfiguredViaPkgJson(directory, firstPkgJsonDirRef),
									hasWorkspacesConfiguredViaPnpm(directory)
								]).then(function(x) {
									return x.find(function(dir$1) {
										return dir$1;
									});
								});
							}, {
								cwd: cwd$1,
								type: "directory"
							});
						case 3:
							dir = _context4.sent;
							if (firstPkgJsonDirRef.current !== undefined) {
								_context4.next = 6;
								break;
							}
							throw new NoPkgJsonFound$2(cwd$1);
						case 6:
							if (dir !== undefined) {
								_context4.next = 8;
								break;
							}
							return _context4.abrupt("return", firstPkgJsonDirRef.current);
						case 8: return _context4.abrupt("return", dir);
						case 9:
						case "end": return _context4.stop();
					}
				}, _callee4);
			})
);
		return _findRoot.apply(this, arguments);
	}
	function hasWorkspacesConfiguredViaPkgJsonSync(directory, firstPkgJsonDirRef) {
		try {
			var pkgJson = fs$9.readJsonSync(path$13.join(directory, "package.json"));
			if (firstPkgJsonDirRef.current === undefined) firstPkgJsonDirRef.current = directory;
			if (pkgJson.workspaces || pkgJson.bolt) return directory;
		} catch (err) {
			if (err.code !== "ENOENT") throw err;
		}
	}
	function hasWorkspacesConfiguredViaLernaSync(directory) {
		try {
			var lernaJson = fs$9.readJsonSync(path$13.join(directory, "lerna.json"));
			if (lernaJson.useWorkspaces !== true) return directory;
		} catch (err) {
			if (err.code !== "ENOENT") throw err;
		}
	}
	function hasWorkspacesConfiguredViaPnpmSync(directory) {
		var pnpmWorkspacesFileExists = fs$9.existsSync(path$13.join(directory, "pnpm-workspace.yaml"));
		if (pnpmWorkspacesFileExists) return directory;
	}
	function findRootSync$2(cwd$1) {
		var firstPkgJsonDirRef = { current: undefined };
		var dir = findUp$2.sync(function(directory) {
			return [
				hasWorkspacesConfiguredViaLernaSync(directory),
				hasWorkspacesConfiguredViaPkgJsonSync(directory, firstPkgJsonDirRef),
				hasWorkspacesConfiguredViaPnpmSync(directory)
			].find(function(dir$1) {
				return dir$1;
			});
		}, {
			cwd: cwd$1,
			type: "directory"
		});
		if (firstPkgJsonDirRef.current === undefined) throw new NoPkgJsonFound$2(cwd$1);
		if (dir === undefined) return firstPkgJsonDirRef.current;
		return dir;
	}
	exports.NoPkgJsonFound = NoPkgJsonFound$2;
	exports.findRoot = findRoot$6;
	exports.findRootSync = findRootSync$2;
} });

//#endregion
//#region ../node_modules/.pnpm/@manypkg+find-root@1.1.0/node_modules/@manypkg/find-root/dist/find-root.cjs.js
var require_find_root_cjs = __commonJS({ "../node_modules/.pnpm/@manypkg+find-root@1.1.0/node_modules/@manypkg/find-root/dist/find-root.cjs.js"(exports, module) {
	if (process.env.NODE_ENV === "production") module.exports = require_find_root_cjs_prod();
else module.exports = require_find_root_cjs_dev();
} });

//#endregion
//#region ../node_modules/.pnpm/@manypkg+get-packages@1.1.3/node_modules/@manypkg/get-packages/dist/get-packages.cjs.prod.js
var require_get_packages_cjs_prod = __commonJS({ "../node_modules/.pnpm/@manypkg+get-packages@1.1.3/node_modules/@manypkg/get-packages/dist/get-packages.cjs.prod.js"(exports) {
	function _interopDefault$11(ex) {
		return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
	}
	Object.defineProperty(exports, "__esModule", { value: !0 });
	var _regeneratorRuntime$1 = _interopDefault$11(require_regenerator()), _asyncToGenerator$1 = _interopDefault$11(require_asyncToGenerator()), _classCallCheck$1 = _interopDefault$11(require_classCallCheck()), _possibleConstructorReturn$1 = _interopDefault$11(require_possibleConstructorReturn()), _getPrototypeOf$1 = _interopDefault$11(require_getPrototypeOf()), _inherits$1 = _interopDefault$11(require_inherits()), _wrapNativeSuper$1 = _interopDefault$11(require_wrapNativeSuper()), fs$8 = _interopDefault$11(require_lib()), path$12 = _interopDefault$11(require("path")), globby$1 = require_globby(), globby__default$1 = _interopDefault$11(globby$1), readYamlFile$3 = require_read_yaml_file(), readYamlFile__default$1 = _interopDefault$11(readYamlFile$3), findRoot$5 = require_find_root_cjs(), PackageJsonMissingNameError$3 = function(_Error) {
		function PackageJsonMissingNameError$4(directories) {
			var _this;
			return _classCallCheck$1(this, PackageJsonMissingNameError$4), (_this = _possibleConstructorReturn$1(this, _getPrototypeOf$1(PackageJsonMissingNameError$4).call(this, "The following package.jsons are missing the \"name\" field:\n".concat(directories.join("\n"))))).directories = directories, _this;
		}
		return _inherits$1(PackageJsonMissingNameError$4, _Error), PackageJsonMissingNameError$4;
	}(_wrapNativeSuper$1(Error));
	function getPackages$7(_x) {
		return _getPackages$1.apply(this, arguments);
	}
	function _getPackages$1() {
		return (_getPackages$1 = _asyncToGenerator$1(_regeneratorRuntime$1.mark(function _callee(dir) {
			var cwd$1, pkg, tool, manifest, lernaJson, root$1, relativeDirectories, directories, pkgJsonsMissingNameField, results;
			return _regeneratorRuntime$1.wrap(function(_context) {
				for (;;) switch (_context.prev = _context.next) {
					case 0: return _context.next = 2, findRoot$5.findRoot(dir);
					case 2: return cwd$1 = _context.sent, _context.next = 5, fs$8.readJson(path$12.join(cwd$1, "package.json"));
					case 5:
						if (!(pkg = _context.sent).workspaces) {
							_context.next = 10;
							break;
						}
						Array.isArray(pkg.workspaces) ? tool = {
							type: "yarn",
							packageGlobs: pkg.workspaces
						} : pkg.workspaces.packages && (tool = {
							type: "yarn",
							packageGlobs: pkg.workspaces.packages
						}), _context.next = 37;
						break;
					case 10:
						if (!pkg.bolt || !pkg.bolt.workspaces) {
							_context.next = 14;
							break;
						}
						tool = {
							type: "bolt",
							packageGlobs: pkg.bolt.workspaces
						}, _context.next = 37;
						break;
					case 14: return _context.prev = 14, _context.next = 17, readYamlFile__default$1(path$12.join(cwd$1, "pnpm-workspace.yaml"));
					case 17:
						(manifest = _context.sent) && manifest.packages && (tool = {
							type: "pnpm",
							packageGlobs: manifest.packages
						}), _context.next = 25;
						break;
					case 21:
						if (_context.prev = 21, _context.t0 = _context.catch(14), "ENOENT" === _context.t0.code) {
							_context.next = 25;
							break;
						}
						throw _context.t0;
					case 25:
						if (tool) {
							_context.next = 37;
							break;
						}
						return _context.prev = 26, _context.next = 29, fs$8.readJson(path$12.join(cwd$1, "lerna.json"));
					case 29:
						(lernaJson = _context.sent) && (tool = {
							type: "lerna",
							packageGlobs: lernaJson.packages || ["packages/*"]
						}), _context.next = 37;
						break;
					case 33:
						if (_context.prev = 33, _context.t1 = _context.catch(26), "ENOENT" === _context.t1.code) {
							_context.next = 37;
							break;
						}
						throw _context.t1;
					case 37:
						if (tool) {
							_context.next = 42;
							break;
						}
						if (root$1 = {
							dir: cwd$1,
							packageJson: pkg
						}, pkg.name) {
							_context.next = 41;
							break;
						}
						throw new PackageJsonMissingNameError$3(["package.json"]);
					case 41: return _context.abrupt("return", {
						tool: "root",
						root: root$1,
						packages: [root$1]
					});
					case 42: return _context.next = 44, globby__default$1(tool.packageGlobs, {
						cwd: cwd$1,
						onlyDirectories: !0,
						expandDirectories: !1,
						ignore: ["**/node_modules"]
					});
					case 44: return relativeDirectories = _context.sent, directories = relativeDirectories.map(function(p) {
						return path$12.resolve(cwd$1, p);
					}), pkgJsonsMissingNameField = [], _context.next = 49, Promise.all(directories.sort().map(function(dir$1) {
						return fs$8.readJson(path$12.join(dir$1, "package.json")).then(function(packageJson) {
							return packageJson.name || pkgJsonsMissingNameField.push(path$12.relative(cwd$1, path$12.join(dir$1, "package.json"))), {
								packageJson,
								dir: dir$1
							};
						}).catch(function(err) {
							if ("ENOENT" === err.code) return null;
							throw err;
						});
					}));
					case 49:
						if (_context.t2 = function(x) {
							return x;
						}, results = _context.sent.filter(_context.t2), 0 === pkgJsonsMissingNameField.length) {
							_context.next = 54;
							break;
						}
						throw pkgJsonsMissingNameField.sort(), new PackageJsonMissingNameError$3(pkgJsonsMissingNameField);
					case 54: return _context.abrupt("return", {
						tool: tool.type,
						root: {
							dir: cwd$1,
							packageJson: pkg
						},
						packages: results
					});
					case 55:
					case "end": return _context.stop();
				}
			}, _callee, null, [[14, 21], [26, 33]]);
		}))).apply(this, arguments);
	}
	function getPackagesSync$3(dir) {
		var tool, cwd$1 = findRoot$5.findRootSync(dir), pkg = fs$8.readJsonSync(path$12.join(cwd$1, "package.json"));
		if (pkg.workspaces) Array.isArray(pkg.workspaces) ? tool = {
			type: "yarn",
			packageGlobs: pkg.workspaces
		} : pkg.workspaces.packages && (tool = {
			type: "yarn",
			packageGlobs: pkg.workspaces.packages
		});
else if (pkg.bolt && pkg.bolt.workspaces) tool = {
			type: "bolt",
			packageGlobs: pkg.bolt.workspaces
		};
else {
			try {
				var manifest = readYamlFile$3.sync(path$12.join(cwd$1, "pnpm-workspace.yaml"));
				manifest && manifest.packages && (tool = {
					type: "pnpm",
					packageGlobs: manifest.packages
				});
			} catch (err) {
				if ("ENOENT" !== err.code) throw err;
			}
			if (!tool) try {
				var lernaJson = fs$8.readJsonSync(path$12.join(cwd$1, "lerna.json"));
				lernaJson && (tool = {
					type: "lerna",
					packageGlobs: lernaJson.packages || ["packages/*"]
				});
			} catch (err) {
				if ("ENOENT" !== err.code) throw err;
			}
		}
		if (!tool) {
			var root$1 = {
				dir: cwd$1,
				packageJson: pkg
			};
			if (!pkg.name) throw new PackageJsonMissingNameError$3(["package.json"]);
			return {
				tool: "root",
				root: root$1,
				packages: [root$1]
			};
		}
		var directories = globby$1.sync(tool.packageGlobs, {
			cwd: cwd$1,
			onlyDirectories: !0,
			expandDirectories: !1,
			ignore: ["**/node_modules"]
		}).map(function(p) {
			return path$12.resolve(cwd$1, p);
		}), pkgJsonsMissingNameField = [], results = directories.sort().map(function(dir$1) {
			try {
				var packageJson = fs$8.readJsonSync(path$12.join(dir$1, "package.json"));
				return packageJson.name || pkgJsonsMissingNameField.push(path$12.relative(cwd$1, path$12.join(dir$1, "package.json"))), {
					packageJson,
					dir: dir$1
				};
			} catch (err) {
				if ("ENOENT" === err.code) return null;
				throw err;
			}
		}).filter(function(x) {
			return x;
		});
		if (0 !== pkgJsonsMissingNameField.length) throw pkgJsonsMissingNameField.sort(), new PackageJsonMissingNameError$3(pkgJsonsMissingNameField);
		return {
			tool: tool.type,
			root: {
				dir: cwd$1,
				packageJson: pkg
			},
			packages: results
		};
	}
	exports.PackageJsonMissingNameError = PackageJsonMissingNameError$3, exports.getPackages = getPackages$7, exports.getPackagesSync = getPackagesSync$3;
} });

//#endregion
//#region ../node_modules/.pnpm/@manypkg+get-packages@1.1.3/node_modules/@manypkg/get-packages/dist/get-packages.cjs.dev.js
var require_get_packages_cjs_dev = __commonJS({ "../node_modules/.pnpm/@manypkg+get-packages@1.1.3/node_modules/@manypkg/get-packages/dist/get-packages.cjs.dev.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	function _interopDefault$10(ex) {
		return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
	}
	var _regeneratorRuntime = _interopDefault$10(require_regenerator());
	var _asyncToGenerator = _interopDefault$10(require_asyncToGenerator());
	var _classCallCheck = _interopDefault$10(require_classCallCheck());
	var _possibleConstructorReturn = _interopDefault$10(require_possibleConstructorReturn());
	var _getPrototypeOf = _interopDefault$10(require_getPrototypeOf());
	var _inherits = _interopDefault$10(require_inherits());
	var _wrapNativeSuper = _interopDefault$10(require_wrapNativeSuper());
	var fs$7 = _interopDefault$10(require_lib());
	var path$11 = _interopDefault$10(require("path"));
	var globby = require_globby();
	var globby__default = _interopDefault$10(globby);
	var readYamlFile$2 = require_read_yaml_file();
	var readYamlFile__default = _interopDefault$10(readYamlFile$2);
	var findRoot$4 = require_find_root_cjs();
	var PackageJsonMissingNameError$2 = /*#__PURE__*/ function(_Error) {
		_inherits(PackageJsonMissingNameError$4, _Error);
		function PackageJsonMissingNameError$4(directories) {
			var _this;
			_classCallCheck(this, PackageJsonMissingNameError$4);
			_this = _possibleConstructorReturn(this, _getPrototypeOf(PackageJsonMissingNameError$4).call(this, "The following package.jsons are missing the \"name\" field:\n".concat(directories.join("\n"))));
			_this.directories = directories;
			return _this;
		}
		return PackageJsonMissingNameError$4;
	}(_wrapNativeSuper(Error));
	function getPackages$6(_x) {
		return _getPackages.apply(this, arguments);
	}
	function _getPackages() {
		_getPackages = _asyncToGenerator(
			/*#__PURE__*/ _regeneratorRuntime.mark(function _callee(dir) {
				var cwd$1, pkg, tool, manifest, lernaJson, root$1, relativeDirectories, directories, pkgJsonsMissingNameField, results;
				return _regeneratorRuntime.wrap(function _callee$(_context) {
					while (1) switch (_context.prev = _context.next) {
						case 0:
							_context.next = 2;
							return findRoot$4.findRoot(dir);
						case 2:
							cwd$1 = _context.sent;
							_context.next = 5;
							return fs$7.readJson(path$11.join(cwd$1, "package.json"));
						case 5:
							pkg = _context.sent;
							if (!pkg.workspaces) {
								_context.next = 10;
								break;
							}
							if (Array.isArray(pkg.workspaces)) tool = {
								type: "yarn",
								packageGlobs: pkg.workspaces
							};
else if (pkg.workspaces.packages) tool = {
								type: "yarn",
								packageGlobs: pkg.workspaces.packages
							};
							_context.next = 37;
							break;
						case 10:
							if (!(pkg.bolt && pkg.bolt.workspaces)) {
								_context.next = 14;
								break;
							}
							tool = {
								type: "bolt",
								packageGlobs: pkg.bolt.workspaces
							};
							_context.next = 37;
							break;
						case 14:
							_context.prev = 14;
							_context.next = 17;
							return readYamlFile__default(path$11.join(cwd$1, "pnpm-workspace.yaml"));
						case 17:
							manifest = _context.sent;
							if (manifest && manifest.packages) tool = {
								type: "pnpm",
								packageGlobs: manifest.packages
							};
							_context.next = 25;
							break;
						case 21:
							_context.prev = 21;
							_context.t0 = _context["catch"](14);
							if (_context.t0.code === "ENOENT") {
								_context.next = 25;
								break;
							}
							throw _context.t0;
						case 25:
							if (tool) {
								_context.next = 37;
								break;
							}
							_context.prev = 26;
							_context.next = 29;
							return fs$7.readJson(path$11.join(cwd$1, "lerna.json"));
						case 29:
							lernaJson = _context.sent;
							if (lernaJson) tool = {
								type: "lerna",
								packageGlobs: lernaJson.packages || ["packages/*"]
							};
							_context.next = 37;
							break;
						case 33:
							_context.prev = 33;
							_context.t1 = _context["catch"](26);
							if (_context.t1.code === "ENOENT") {
								_context.next = 37;
								break;
							}
							throw _context.t1;
						case 37:
							if (tool) {
								_context.next = 42;
								break;
							}
							root$1 = {
								dir: cwd$1,
								packageJson: pkg
							};
							if (pkg.name) {
								_context.next = 41;
								break;
							}
							throw new PackageJsonMissingNameError$2(["package.json"]);
						case 41: return _context.abrupt("return", {
							tool: "root",
							root: root$1,
							packages: [root$1]
						});
						case 42:
							_context.next = 44;
							return globby__default(tool.packageGlobs, {
								cwd: cwd$1,
								onlyDirectories: true,
								expandDirectories: false,
								ignore: ["**/node_modules"]
							});
						case 44:
							relativeDirectories = _context.sent;
							directories = relativeDirectories.map(function(p) {
								return path$11.resolve(cwd$1, p);
							});
							pkgJsonsMissingNameField = [];
							_context.next = 49;
							return Promise.all(directories.sort().map(function(dir$1) {
								return fs$7.readJson(path$11.join(dir$1, "package.json")).then(function(packageJson) {
									if (!packageJson.name) pkgJsonsMissingNameField.push(path$11.relative(cwd$1, path$11.join(dir$1, "package.json")));
									return {
										packageJson,
										dir: dir$1
									};
								})["catch"](function(err) {
									if (err.code === "ENOENT") return null;
									throw err;
								});
							}));
						case 49:
							_context.t2 = function(x) {
								return x;
							};
							results = _context.sent.filter(_context.t2);
							if (pkgJsonsMissingNameField.length === 0) {
								_context.next = 54;
								break;
							}
							pkgJsonsMissingNameField.sort();
							throw new PackageJsonMissingNameError$2(pkgJsonsMissingNameField);
						case 54: return _context.abrupt("return", {
							tool: tool.type,
							root: {
								dir: cwd$1,
								packageJson: pkg
							},
							packages: results
						});
						case 55:
						case "end": return _context.stop();
					}
				}, _callee, null, [[14, 21], [26, 33]]);
			})
);
		return _getPackages.apply(this, arguments);
	}
	function getPackagesSync$2(dir) {
		var cwd$1 = findRoot$4.findRootSync(dir);
		var pkg = fs$7.readJsonSync(path$11.join(cwd$1, "package.json"));
		var tool;
		if (pkg.workspaces) {
			if (Array.isArray(pkg.workspaces)) tool = {
				type: "yarn",
				packageGlobs: pkg.workspaces
			};
else if (pkg.workspaces.packages) tool = {
				type: "yarn",
				packageGlobs: pkg.workspaces.packages
			};
		} else if (pkg.bolt && pkg.bolt.workspaces) tool = {
			type: "bolt",
			packageGlobs: pkg.bolt.workspaces
		};
else {
			try {
				var manifest = readYamlFile$2.sync(path$11.join(cwd$1, "pnpm-workspace.yaml"));
				if (manifest && manifest.packages) tool = {
					type: "pnpm",
					packageGlobs: manifest.packages
				};
			} catch (err) {
				if (err.code !== "ENOENT") throw err;
			}
			if (!tool) try {
				var lernaJson = fs$7.readJsonSync(path$11.join(cwd$1, "lerna.json"));
				if (lernaJson) tool = {
					type: "lerna",
					packageGlobs: lernaJson.packages || ["packages/*"]
				};
			} catch (err) {
				if (err.code !== "ENOENT") throw err;
			}
		}
		if (!tool) {
			var root$1 = {
				dir: cwd$1,
				packageJson: pkg
			};
			if (!pkg.name) throw new PackageJsonMissingNameError$2(["package.json"]);
			return {
				tool: "root",
				root: root$1,
				packages: [root$1]
			};
		}
		var relativeDirectories = globby.sync(tool.packageGlobs, {
			cwd: cwd$1,
			onlyDirectories: true,
			expandDirectories: false,
			ignore: ["**/node_modules"]
		});
		var directories = relativeDirectories.map(function(p) {
			return path$11.resolve(cwd$1, p);
		});
		var pkgJsonsMissingNameField = [];
		var results = directories.sort().map(function(dir$1) {
			try {
				var packageJson = fs$7.readJsonSync(path$11.join(dir$1, "package.json"));
				if (!packageJson.name) pkgJsonsMissingNameField.push(path$11.relative(cwd$1, path$11.join(dir$1, "package.json")));
				return {
					packageJson,
					dir: dir$1
				};
			} catch (err) {
				if (err.code === "ENOENT") return null;
				throw err;
			}
		}).filter(function(x) {
			return x;
		});
		if (pkgJsonsMissingNameField.length !== 0) {
			pkgJsonsMissingNameField.sort();
			throw new PackageJsonMissingNameError$2(pkgJsonsMissingNameField);
		}
		return {
			tool: tool.type,
			root: {
				dir: cwd$1,
				packageJson: pkg
			},
			packages: results
		};
	}
	exports.PackageJsonMissingNameError = PackageJsonMissingNameError$2;
	exports.getPackages = getPackages$6;
	exports.getPackagesSync = getPackagesSync$2;
} });

//#endregion
//#region ../node_modules/.pnpm/@manypkg+get-packages@1.1.3/node_modules/@manypkg/get-packages/dist/get-packages.cjs.js
var require_get_packages_cjs = __commonJS({ "../node_modules/.pnpm/@manypkg+get-packages@1.1.3/node_modules/@manypkg/get-packages/dist/get-packages.cjs.js"(exports, module) {
	if (process.env.NODE_ENV === "production") module.exports = require_get_packages_cjs_prod();
else module.exports = require_get_packages_cjs_dev();
} });

//#endregion
//#region ../node_modules/.pnpm/extendable-error@0.1.7/node_modules/extendable-error/bld/index.js
var require_bld = __commonJS({ "../node_modules/.pnpm/extendable-error@0.1.7/node_modules/extendable-error/bld/index.js"(exports) {
	var __extends = this && this.__extends || function() {
		var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
			d.__proto__ = b;
		} || function(d, b) {
			for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
		};
		return function(d, b) {
			extendStatics(d, b);
			function __() {
				this.constructor = d;
			}
			d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
		};
	}();
	Object.defineProperty(exports, "__esModule", { value: true });
	var ExtendableError$1 = function(_super) {
		__extends(ExtendableError$2, _super);
		function ExtendableError$2(message) {
			var _newTarget = this.constructor;
			if (message === void 0) message = "";
			var _this = _super.call(this, message) || this;
			_this.message = message;
			Object.setPrototypeOf(_this, _newTarget.prototype);
			delete _this.stack;
			_this.name = _newTarget.name;
			_this._error = new Error();
			return _this;
		}
		Object.defineProperty(ExtendableError$2.prototype, "stack", {
			get: function() {
				if (this._stack) return this._stack;
				var prototype = Object.getPrototypeOf(this);
				var depth$1 = 1;
				loop: while (prototype) {
					switch (prototype) {
						case ExtendableError$2.prototype: break loop;
						case Object.prototype:
							depth$1 = 1;
							break loop;
						default:
							depth$1++;
							break;
					}
					prototype = Object.getPrototypeOf(prototype);
				}
				var stackLines = (this._error.stack || "").match(/.+/g) || [];
				var nameLine = this.name;
				if (this.message) nameLine += ": " + this.message;
				stackLines.splice(0, depth$1 + 1, nameLine);
				return this._stack = stackLines.join("\n");
			},
			enumerable: true,
			configurable: true
		});
		return ExtendableError$2;
	}(Error);
	exports.ExtendableError = ExtendableError$1;
	exports.default = ExtendableError$1;
} });

//#endregion
//#region ../node_modules/.pnpm/@changesets+errors@0.2.0/node_modules/@changesets/errors/dist/changesets-errors.cjs.js
var require_changesets_errors_cjs = __commonJS({ "../node_modules/.pnpm/@changesets+errors@0.2.0/node_modules/@changesets/errors/dist/changesets-errors.cjs.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var ExtendableError = require_bld();
	function _interopDefault$9(e) {
		return e && e.__esModule ? e : { "default": e };
	}
	var ExtendableError__default = /*#__PURE__*/ _interopDefault$9(ExtendableError);
	var GitError = class extends ExtendableError__default["default"] {
		constructor(code$1, message) {
			super(`${message}, exit code: ${code$1}`);
			this.code = code$1;
		}
	};
	var ValidationError = class extends ExtendableError__default["default"] {};
	var ExitError = class extends ExtendableError__default["default"] {
		constructor(code$1) {
			super(`The process exited with code: ${code$1}`);
			this.code = code$1;
		}
	};
	var PreExitButNotInPreModeError = class extends ExtendableError__default["default"] {
		constructor() {
			super("pre mode cannot be exited when not in pre mode");
		}
	};
	var PreEnterButInPreModeError = class extends ExtendableError__default["default"] {
		constructor() {
			super("pre mode cannot be entered when in pre mode");
		}
	};
	var InternalError = class extends ExtendableError__default["default"] {
		constructor(message) {
			super(message);
		}
	};
	exports.ExitError = ExitError;
	exports.GitError = GitError;
	exports.InternalError = InternalError;
	exports.PreEnterButInPreModeError = PreEnterButInPreModeError;
	exports.PreExitButNotInPreModeError = PreExitButNotInPreModeError;
	exports.ValidationError = ValidationError;
} });

//#endregion
//#region ../node_modules/.pnpm/is-windows@1.0.2/node_modules/is-windows/index.js
var require_is_windows = __commonJS({ "../node_modules/.pnpm/is-windows@1.0.2/node_modules/is-windows/index.js"(exports, module) {
	/*!
	* is-windows <https://github.com/jonschlinkert/is-windows>
	*
	* Copyright © 2015-2018, Jon Schlinkert.
	* Released under the MIT License.
	*/
	(function(factory$1) {
		if (exports && typeof exports === "object" && typeof module !== "undefined") module.exports = factory$1();
else if (typeof define === "function" && define.amd) define([], factory$1);
else if (typeof window !== "undefined") window.isWindows = factory$1();
else if (typeof global !== "undefined") global.isWindows = factory$1();
else if (typeof self !== "undefined") self.isWindows = factory$1();
else this.isWindows = factory$1();
	})(function() {
		"use strict";
		return function isWindows$4() {
			return process && (process.platform === "win32" || /^(msys|cygwin)$/.test(process.env.OSTYPE));
		};
	});
} });

//#endregion
//#region ../node_modules/.pnpm/better-path-resolve@1.0.0/node_modules/better-path-resolve/index.js
var require_better_path_resolve = __commonJS({ "../node_modules/.pnpm/better-path-resolve@1.0.0/node_modules/better-path-resolve/index.js"(exports, module) {
	const path$10 = require("path");
	const isWindows = require_is_windows();
	module.exports = isWindows() ? winResolve : path$10.resolve;
	function winResolve(p) {
		if (arguments.length === 0) return path$10.resolve();
		if (typeof p !== "string") return path$10.resolve(p);
		if (p[1] === ":") {
			const cc = p[0].charCodeAt();
			if (cc < 65 || cc > 90) p = `${p[0].toUpperCase()}${p.substr(1)}`;
		}
		if (p.endsWith(":")) return p;
		return path$10.resolve(p);
	}
} });

//#endregion
//#region ../node_modules/.pnpm/is-subdir@1.2.0/node_modules/is-subdir/index.js
var require_is_subdir = __commonJS({ "../node_modules/.pnpm/is-subdir@1.2.0/node_modules/is-subdir/index.js"(exports, module) {
	const betterPathResolve = require_better_path_resolve();
	const path$9 = require("path");
	function isSubdir$1(parentDir, subdir) {
		const rParent = `${betterPathResolve(parentDir)}${path$9.sep}`;
		const rDir = `${betterPathResolve(subdir)}${path$9.sep}`;
		return rDir.startsWith(rParent);
	}
	isSubdir$1.strict = function isSubdirStrict(parentDir, subdir) {
		const rParent = `${betterPathResolve(parentDir)}${path$9.sep}`;
		const rDir = `${betterPathResolve(subdir)}${path$9.sep}`;
		return rDir !== rParent && rDir.startsWith(rParent);
	};
	module.exports = isSubdir$1;
} });

//#endregion
//#region ../node_modules/.pnpm/@changesets+git@3.0.2/node_modules/@changesets/git/dist/changesets-git.cjs.js
var require_changesets_git_cjs = __commonJS({ "../node_modules/.pnpm/@changesets+git@3.0.2/node_modules/@changesets/git/dist/changesets-git.cjs.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var spawn = require_spawndamnit();
	var fs$6 = require("fs");
	var path$8 = require("path");
	var getPackages$5 = require_get_packages_cjs();
	var errors = require_changesets_errors_cjs();
	var isSubdir = require_is_subdir();
	var micromatch = require_micromatch();
	function _interopDefault$8(e) {
		return e && e.__esModule ? e : { "default": e };
	}
	var spawn__default = /*#__PURE__*/ _interopDefault$8(spawn);
	var fs__default$4 = /*#__PURE__*/ _interopDefault$8(fs$6);
	var path__default$7 = /*#__PURE__*/ _interopDefault$8(path$8);
	var isSubdir__default = /*#__PURE__*/ _interopDefault$8(isSubdir);
	var micromatch__default = /*#__PURE__*/ _interopDefault$8(micromatch);
	async function add(pathToFile, cwd$1) {
		const gitCmd = await spawn__default["default"]("git", ["add", pathToFile], { cwd: cwd$1 });
		if (gitCmd.code !== 0) console.log(pathToFile, gitCmd.stderr.toString());
		return gitCmd.code === 0;
	}
	async function commit$1(message, cwd$1) {
		const gitCmd = await spawn__default["default"]("git", [
			"commit",
			"-m",
			message,
			"--allow-empty"
		], { cwd: cwd$1 });
		return gitCmd.code === 0;
	}
	async function getAllTags(cwd$1) {
		const gitCmd = await spawn__default["default"]("git", ["tag"], { cwd: cwd$1 });
		if (gitCmd.code !== 0) throw new Error(gitCmd.stderr.toString());
		const tags = gitCmd.stdout.toString().trim().split("\n");
		return new Set(tags);
	}
	async function tag$1(tagStr, cwd$1) {
		const gitCmd = await spawn__default["default"]("git", [
			"tag",
			tagStr,
			"-m",
			tagStr
		], { cwd: cwd$1 });
		return gitCmd.code === 0;
	}
	async function getDivergedCommit(cwd$1, ref) {
		const cmd = await spawn__default["default"]("git", [
			"merge-base",
			ref,
			"HEAD"
		], { cwd: cwd$1 });
		if (cmd.code !== 0) throw new Error(`Failed to find where HEAD diverged from "${ref}". Does "${ref}" exist and it's synced with remote?`);
		return cmd.stdout.toString().trim();
	}
	/**
	* Get the SHAs for the commits that added files, including automatically
	* extending a shallow clone if necessary to determine any commits.
	* @param gitPaths - Paths to fetch
	* @param options - `cwd` and `short`
	*/
	async function getCommitsThatAddFiles(gitPaths, { cwd: cwd$1, short = false }) {
		const map$3 = new Map();
		let remaining = gitPaths;
		do {
			const commitInfos = await Promise.all(remaining.map(async (gitPath) => {
				const [commitSha, parentSha] = (await spawn__default["default"]("git", [
					"log",
					"--diff-filter=A",
					"--max-count=1",
					short ? "--pretty=format:%h:%p" : "--pretty=format:%H:%p",
					gitPath
				], { cwd: cwd$1 })).stdout.toString().split(":");
				return {
					path: gitPath,
					commitSha,
					parentSha
				};
			}));
			let commitsWithMissingParents = [];
			for (const info$2 of commitInfos) if (info$2.commitSha) if (info$2.parentSha) map$3.set(info$2.path, info$2.commitSha);
else commitsWithMissingParents.push(info$2);
			if (commitsWithMissingParents.length === 0) break;
			if (await isRepoShallow({ cwd: cwd$1 })) {
				await deepenCloneBy({
					by: 50,
					cwd: cwd$1
				});
				remaining = commitsWithMissingParents.map((p) => p.path);
			} else {
				for (const unresolved of commitsWithMissingParents) map$3.set(unresolved.path, unresolved.commitSha);
				break;
			}
		} while (true);
		return gitPaths.map((p) => map$3.get(p));
	}
	async function isRepoShallow({ cwd: cwd$1 }) {
		const isShallowRepoOutput = (await spawn__default["default"]("git", ["rev-parse", "--is-shallow-repository"], { cwd: cwd$1 })).stdout.toString().trim();
		if (isShallowRepoOutput === "--is-shallow-repository") {
			const gitDir = (await spawn__default["default"]("git", ["rev-parse", "--git-dir"], { cwd: cwd$1 })).stdout.toString().trim();
			const fullGitDir = path__default$7["default"].resolve(cwd$1, gitDir);
			return fs__default$4["default"].existsSync(path__default$7["default"].join(fullGitDir, "shallow"));
		} else return isShallowRepoOutput === "true";
	}
	async function deepenCloneBy({ by, cwd: cwd$1 }) {
		await spawn__default["default"]("git", ["fetch", `--deepen=${by}`], { cwd: cwd$1 });
	}
	async function getRepoRoot({ cwd: cwd$1 }) {
		const { stdout, code: code$1, stderr } = await spawn__default["default"]("git", ["rev-parse", "--show-toplevel"], { cwd: cwd$1 });
		if (code$1 !== 0) throw new Error(stderr.toString());
		return stdout.toString().trim().replace(/\n|\r/g, "");
	}
	async function getChangedFilesSince({ cwd: cwd$1, ref, fullPath = false }) {
		const divergedAt = await getDivergedCommit(cwd$1, ref);
		const cmd = await spawn__default["default"]("git", [
			"diff",
			"--name-only",
			divergedAt
		], { cwd: cwd$1 });
		if (cmd.code !== 0) throw new Error(`Failed to diff against ${divergedAt}. Is ${divergedAt} a valid ref?`);
		const files = cmd.stdout.toString().trim().split("\n").filter((a) => a);
		if (!fullPath) return files;
		const repoRoot = await getRepoRoot({ cwd: cwd$1 });
		return files.map((file$2) => path__default$7["default"].resolve(repoRoot, file$2));
	}
	async function getChangedChangesetFilesSinceRef({ cwd: cwd$1, ref }) {
		try {
			const divergedAt = await getDivergedCommit(cwd$1, ref);
			const cmd = await spawn__default["default"]("git", [
				"diff",
				"--name-only",
				"--diff-filter=d",
				divergedAt
			], { cwd: cwd$1 });
			let tester = /.changeset\/[^/]+\.md$/;
			const files = cmd.stdout.toString().trim().split("\n").filter((file$2) => tester.test(file$2));
			return files;
		} catch (err) {
			if (err instanceof errors.GitError) return [];
			throw err;
		}
	}
	async function getChangedPackagesSinceRef({ cwd: cwd$1, ref, changedFilePatterns = ["**"] }) {
		const changedFiles = await getChangedFilesSince({
			ref,
			cwd: cwd$1,
			fullPath: true
		});
		return [...(await getPackages$5.getPackages(cwd$1)).packages].sort((pkgA, pkgB) => pkgB.dir.length - pkgA.dir.length).filter((pkg) => {
			const changedPackageFiles = [];
			for (let i$2 = changedFiles.length - 1; i$2 >= 0; i$2--) {
				const file$2 = changedFiles[i$2];
				if (isSubdir__default["default"](pkg.dir, file$2)) {
					changedFiles.splice(i$2, 1);
					const relativeFile = file$2.slice(pkg.dir.length + 1);
					changedPackageFiles.push(relativeFile);
				}
			}
			return changedPackageFiles.length > 0 && micromatch__default["default"](changedPackageFiles, changedFilePatterns).length > 0;
		});
	}
	async function tagExists(tagStr, cwd$1) {
		const gitCmd = await spawn__default["default"]("git", [
			"tag",
			"-l",
			tagStr
		], { cwd: cwd$1 });
		const output = gitCmd.stdout.toString().trim();
		const tagExists$1 = !!output;
		return tagExists$1;
	}
	async function getCurrentCommitId({ cwd: cwd$1, short = false }) {
		return (await spawn__default["default"]("git", [
			"rev-parse",
			short && "--short",
			"HEAD"
		].filter(Boolean), { cwd: cwd$1 })).stdout.toString().trim();
	}
	async function remoteTagExists(tagStr) {
		const gitCmd = await spawn__default["default"]("git", [
			"ls-remote",
			"--tags",
			"origin",
			"-l",
			tagStr
		]);
		const output = gitCmd.stdout.toString().trim();
		const tagExists$1 = !!output;
		return tagExists$1;
	}
	exports.add = add;
	exports.commit = commit$1;
	exports.deepenCloneBy = deepenCloneBy;
	exports.getAllTags = getAllTags;
	exports.getChangedChangesetFilesSinceRef = getChangedChangesetFilesSinceRef;
	exports.getChangedFilesSince = getChangedFilesSince;
	exports.getChangedPackagesSinceRef = getChangedPackagesSinceRef;
	exports.getCommitsThatAddFiles = getCommitsThatAddFiles;
	exports.getCurrentCommitId = getCurrentCommitId;
	exports.getDivergedCommit = getDivergedCommit;
	exports.isRepoShallow = isRepoShallow;
	exports.remoteTagExists = remoteTagExists;
	exports.tag = tag$1;
	exports.tagExists = tagExists;
} });

//#endregion
//#region ../node_modules/.pnpm/picocolors@1.1.0/node_modules/picocolors/picocolors.js
var require_picocolors = __commonJS({ "../node_modules/.pnpm/picocolors@1.1.0/node_modules/picocolors/picocolors.js"(exports, module) {
	let argv = process.argv || [], env = process.env;
	let isColorSupported = !("NO_COLOR" in env || argv.includes("--no-color")) && ("FORCE_COLOR" in env || argv.includes("--color") || process.platform === "win32" || require != null && require("tty").isatty(1) && env.TERM !== "dumb" || "CI" in env);
	let formatter = (open, close, replace = open) => (input) => {
		let string$3 = "" + input;
		let index$1 = string$3.indexOf(close, open.length);
		return ~index$1 ? open + replaceClose(string$3, close, replace, index$1) + close : open + string$3 + close;
	};
	let replaceClose = (string$3, close, replace, index$1) => {
		let result = "";
		let cursor = 0;
		do {
			result += string$3.substring(cursor, index$1) + replace;
			cursor = index$1 + close.length;
			index$1 = string$3.indexOf(close, cursor);
		} while (~index$1);
		return result + string$3.substring(cursor);
	};
	let createColors = (enabled = isColorSupported) => {
		let init = enabled ? formatter : () => String;
		return {
			isColorSupported: enabled,
			reset: init("\x1B[0m", "\x1B[0m"),
			bold: init("\x1B[1m", "\x1B[22m", "\x1B[22m\x1B[1m"),
			dim: init("\x1B[2m", "\x1B[22m", "\x1B[22m\x1B[2m"),
			italic: init("\x1B[3m", "\x1B[23m"),
			underline: init("\x1B[4m", "\x1B[24m"),
			inverse: init("\x1B[7m", "\x1B[27m"),
			hidden: init("\x1B[8m", "\x1B[28m"),
			strikethrough: init("\x1B[9m", "\x1B[29m"),
			black: init("\x1B[30m", "\x1B[39m"),
			red: init("\x1B[31m", "\x1B[39m"),
			green: init("\x1B[32m", "\x1B[39m"),
			yellow: init("\x1B[33m", "\x1B[39m"),
			blue: init("\x1B[34m", "\x1B[39m"),
			magenta: init("\x1B[35m", "\x1B[39m"),
			cyan: init("\x1B[36m", "\x1B[39m"),
			white: init("\x1B[37m", "\x1B[39m"),
			gray: init("\x1B[90m", "\x1B[39m"),
			bgBlack: init("\x1B[40m", "\x1B[49m"),
			bgRed: init("\x1B[41m", "\x1B[49m"),
			bgGreen: init("\x1B[42m", "\x1B[49m"),
			bgYellow: init("\x1B[43m", "\x1B[49m"),
			bgBlue: init("\x1B[44m", "\x1B[49m"),
			bgMagenta: init("\x1B[45m", "\x1B[49m"),
			bgCyan: init("\x1B[46m", "\x1B[49m"),
			bgWhite: init("\x1B[47m", "\x1B[49m"),
			blackBright: init("\x1B[90m", "\x1B[39m"),
			redBright: init("\x1B[91m", "\x1B[39m"),
			greenBright: init("\x1B[92m", "\x1B[39m"),
			yellowBright: init("\x1B[93m", "\x1B[39m"),
			blueBright: init("\x1B[94m", "\x1B[39m"),
			magentaBright: init("\x1B[95m", "\x1B[39m"),
			cyanBright: init("\x1B[96m", "\x1B[39m"),
			whiteBright: init("\x1B[97m", "\x1B[39m"),
			bgBlackBright: init("\x1B[100m", "\x1B[49m"),
			bgRedBright: init("\x1B[101m", "\x1B[49m"),
			bgGreenBright: init("\x1B[102m", "\x1B[49m"),
			bgYellowBright: init("\x1B[103m", "\x1B[49m"),
			bgBlueBright: init("\x1B[104m", "\x1B[49m"),
			bgMagentaBright: init("\x1B[105m", "\x1B[49m"),
			bgCyanBright: init("\x1B[106m", "\x1B[49m"),
			bgWhiteBright: init("\x1B[107m", "\x1B[49m")
		};
	};
	module.exports = createColors();
	module.exports.createColors = createColors;
} });

//#endregion
//#region ../node_modules/.pnpm/p-map@2.1.0/node_modules/p-map/index.js
var require_p_map = __commonJS({ "../node_modules/.pnpm/p-map@2.1.0/node_modules/p-map/index.js"(exports, module) {
	const pMap$1 = (iterable, mapper, options) => new Promise((resolve$1, reject) => {
		options = Object.assign({ concurrency: Infinity }, options);
		if (typeof mapper !== "function") throw new TypeError("Mapper function is required");
		const { concurrency } = options;
		if (!(typeof concurrency === "number" && concurrency >= 1)) throw new TypeError(`Expected \`concurrency\` to be a number from 1 and up, got \`${concurrency}\` (${typeof concurrency})`);
		const ret = [];
		const iterator$1 = iterable[Symbol.iterator]();
		let isRejected = false;
		let isIterableDone = false;
		let resolvingCount = 0;
		let currentIndex = 0;
		const next = () => {
			if (isRejected) return;
			const nextItem = iterator$1.next();
			const i$2 = currentIndex;
			currentIndex++;
			if (nextItem.done) {
				isIterableDone = true;
				if (resolvingCount === 0) resolve$1(ret);
				return;
			}
			resolvingCount++;
			Promise.resolve(nextItem.value).then((element) => mapper(element, i$2)).then((value) => {
				ret[i$2] = value;
				resolvingCount--;
				next();
			}, (error$2) => {
				isRejected = true;
				reject(error$2);
			});
		};
		for (let i$2 = 0; i$2 < concurrency; i$2++) {
			next();
			if (isIterableDone) break;
		}
	});
	module.exports = pMap$1;
	module.exports.default = pMap$1;
} });

//#endregion
//#region ../node_modules/.pnpm/p-filter@2.1.0/node_modules/p-filter/index.js
var require_p_filter = __commonJS({ "../node_modules/.pnpm/p-filter@2.1.0/node_modules/p-filter/index.js"(exports, module) {
	const pMap = require_p_map();
	const pFilter$1 = async (iterable, filterer, options) => {
		const values = await pMap(iterable, (element, index$1) => Promise.all([filterer(element, index$1), element]), options);
		return values.filter((value) => Boolean(value[0])).map((value) => value[1]);
	};
	module.exports = pFilter$1;
	module.exports.default = pFilter$1;
} });

//#endregion
//#region ../node_modules/.pnpm/@changesets+logger@0.1.1/node_modules/@changesets/logger/dist/changesets-logger.cjs.js
var require_changesets_logger_cjs = __commonJS({ "../node_modules/.pnpm/@changesets+logger@0.1.1/node_modules/@changesets/logger/dist/changesets-logger.cjs.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var pc$1 = require_picocolors();
	var util = require("util");
	function _interopDefault$7(e) {
		return e && e.__esModule ? e : { "default": e };
	}
	var pc__default$1 = /*#__PURE__*/ _interopDefault$7(pc$1);
	var util__default = /*#__PURE__*/ _interopDefault$7(util);
	let prefix = "🦋 ";
	function format(args, customPrefix) {
		let fullPrefix = prefix + (customPrefix === undefined ? "" : " " + customPrefix);
		return fullPrefix + util__default["default"].format("", ...args).split("\n").join("\n" + fullPrefix + " ");
	}
	function error(...args) {
		console.error(format(args, pc__default$1["default"].red("error")));
	}
	function info(...args) {
		console.info(format(args, pc__default$1["default"].cyan("info")));
	}
	function log(...args) {
		console.log(format(args));
	}
	function success(...args) {
		console.log(format(args, pc__default$1["default"].green("success")));
	}
	function warn(...args) {
		console.warn(format(args, pc__default$1["default"].yellow("warn")));
	}
	exports.error = error;
	exports.info = info;
	exports.log = log;
	exports.prefix = prefix;
	exports.success = success;
	exports.warn = warn;
} });

//#endregion
//#region ../node_modules/.pnpm/@changesets+read@0.6.2/node_modules/@changesets/read/dist/changesets-read.cjs.js
var require_changesets_read_cjs = __commonJS({ "../node_modules/.pnpm/@changesets+read@0.6.2/node_modules/@changesets/read/dist/changesets-read.cjs.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var fs$5 = require_lib$1();
	var path$7 = require("path");
	var parse$9 = require_changesets_parse_cjs();
	var git = require_changesets_git_cjs();
	var pc = require_picocolors();
	var pFilter = require_p_filter();
	var logger = require_changesets_logger_cjs();
	function _interopDefault$6(e) {
		return e && e.__esModule ? e : { "default": e };
	}
	function _interopNamespace(e) {
		if (e && e.__esModule) return e;
		var n = Object.create(null);
		if (e) Object.keys(e).forEach(function(k) {
			if (k !== "default") {
				var d = Object.getOwnPropertyDescriptor(e, k);
				Object.defineProperty(n, k, d.get ? d : {
					enumerable: true,
					get: function() {
						return e[k];
					}
				});
			}
		});
		n["default"] = e;
		return Object.freeze(n);
	}
	var fs__namespace = /*#__PURE__*/ _interopNamespace(fs$5);
	var path__default$6 = /*#__PURE__*/ _interopDefault$6(path$7);
	var parse__default = /*#__PURE__*/ _interopDefault$6(parse$9);
	var git__namespace = /*#__PURE__*/ _interopNamespace(git);
	var pc__default = /*#__PURE__*/ _interopDefault$6(pc);
	var pFilter__default = /*#__PURE__*/ _interopDefault$6(pFilter);
	function _defineProperty(obj, key, value) {
		if (key in obj) Object.defineProperty(obj, key, {
			value,
			enumerable: true,
			configurable: true,
			writable: true
		});
else obj[key] = value;
		return obj;
	}
	function ownKeys(object, enumerableOnly) {
		var keys = Object.keys(object);
		if (Object.getOwnPropertySymbols) {
			var symbols = Object.getOwnPropertySymbols(object);
			if (enumerableOnly) symbols = symbols.filter(function(sym) {
				return Object.getOwnPropertyDescriptor(object, sym).enumerable;
			});
			keys.push.apply(keys, symbols);
		}
		return keys;
	}
	function _objectSpread2(target) {
		for (var i$2 = 1; i$2 < arguments.length; i$2++) {
			var source = arguments[i$2] != null ? arguments[i$2] : {};
			if (i$2 % 2) ownKeys(Object(source), true).forEach(function(key) {
				_defineProperty(target, key, source[key]);
			});
else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
else ownKeys(Object(source)).forEach(function(key) {
				Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
			});
		}
		return target;
	}
	let importantSeparator = pc__default["default"].red("===============================IMPORTANT!===============================");
	let importantEnd = pc__default["default"].red("----------------------------------------------------------------------");
	async function getOldChangesets(changesetBase, dirs) {
		let changesets = await pFilter__default["default"](dirs, async (dir) => (await fs__namespace.lstat(path__default$6["default"].join(changesetBase, dir))).isDirectory());
		const changesetContents = changesets.map(async (changesetDir) => {
			const jsonPath = path__default$6["default"].join(changesetBase, changesetDir, "changes.json");
			const [summary, json] = await Promise.all([fs__namespace.readFile(path__default$6["default"].join(changesetBase, changesetDir, "changes.md"), "utf-8"), fs__namespace.readJson(jsonPath)]);
			return {
				releases: json.releases,
				summary,
				id: changesetDir
			};
		});
		return Promise.all(changesetContents);
	}
	async function getOldChangesetsAndWarn(changesetBase, dirs) {
		let oldChangesets = await getOldChangesets(changesetBase, dirs);
		if (oldChangesets.length === 0) return [];
		logger.warn(importantSeparator);
		logger.warn("There were old changesets from version 1 found");
		logger.warn("These are being applied now but the dependents graph may have changed");
		logger.warn("Make sure you validate all your dependencies");
		logger.warn("In a future major version, we will no longer apply these old changesets, and will instead throw here");
		logger.warn(importantEnd);
		return oldChangesets;
	}
	async function filterChangesetsSinceRef(changesets, changesetBase, sinceRef) {
		const newChangesets = await git__namespace.getChangedChangesetFilesSinceRef({
			cwd: changesetBase,
			ref: sinceRef
		});
		const newHashes = newChangesets.map((c) => c.split("/")[1]);
		return changesets.filter((dir) => newHashes.includes(dir));
	}
	async function getChangesets(cwd$1, sinceRef) {
		let changesetBase = path__default$6["default"].join(cwd$1, ".changeset");
		let contents;
		try {
			contents = await fs__namespace["default"].readdir(changesetBase);
		} catch (err) {
			if (err.code === "ENOENT") throw new Error("There is no .changeset directory in this project");
			throw err;
		}
		if (sinceRef !== undefined) contents = await filterChangesetsSinceRef(contents, changesetBase, sinceRef);
		let oldChangesetsPromise = getOldChangesetsAndWarn(changesetBase, contents);
		let changesets = contents.filter((file$2) => !file$2.startsWith(".") && file$2.endsWith(".md") && !/^README\.md$/i.test(file$2));
		const changesetContents = changesets.map(async (file$2) => {
			const changeset = await fs__namespace["default"].readFile(path__default$6["default"].join(changesetBase, file$2), "utf-8");
			return _objectSpread2(_objectSpread2({}, parse__default["default"](changeset)), {}, { id: file$2.replace(".md", "") });
		});
		return [...await oldChangesetsPromise, ...await Promise.all(changesetContents)];
	}
	exports["default"] = getChangesets;
} });

//#endregion
//#region ../node_modules/.pnpm/@changesets+read@0.6.2/node_modules/@changesets/read/dist/changesets-read.cjs.default.js
var require_changesets_read_cjs_default = __commonJS({ "../node_modules/.pnpm/@changesets+read@0.6.2/node_modules/@changesets/read/dist/changesets-read.cjs.default.js"(exports) {
	exports._default = require_changesets_read_cjs().default;
} });

//#endregion
//#region ../node_modules/.pnpm/@changesets+read@0.6.2/node_modules/@changesets/read/dist/changesets-read.cjs.mjs
var import_changesets_read_cjs = __toESM$1(require_changesets_read_cjs());
var import_changesets_read_cjs_default = __toESM$1(require_changesets_read_cjs_default());

//#endregion
//#region ../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/common.js
var require_common = __commonJS({ "../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/common.js"(exports, module) {
	function isNothing(subject) {
		return typeof subject === "undefined" || subject === null;
	}
	function isObject$1(subject) {
		return typeof subject === "object" && subject !== null;
	}
	function toArray(sequence) {
		if (Array.isArray(sequence)) return sequence;
else if (isNothing(sequence)) return [];
		return [sequence];
	}
	function extend$1(target, source) {
		var index$1, length, key, sourceKeys;
		if (source) {
			sourceKeys = Object.keys(source);
			for (index$1 = 0, length = sourceKeys.length; index$1 < length; index$1 += 1) {
				key = sourceKeys[index$1];
				target[key] = source[key];
			}
		}
		return target;
	}
	function repeat(string$3, count) {
		var result = "", cycle;
		for (cycle = 0; cycle < count; cycle += 1) result += string$3;
		return result;
	}
	function isNegativeZero(number) {
		return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;
	}
	module.exports.isNothing = isNothing;
	module.exports.isObject = isObject$1;
	module.exports.toArray = toArray;
	module.exports.repeat = repeat;
	module.exports.isNegativeZero = isNegativeZero;
	module.exports.extend = extend$1;
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/exception.js
var require_exception = __commonJS({ "../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/exception.js"(exports, module) {
	function formatError$1(exception, compact) {
		var where = "", message = exception.reason || "(unknown reason)";
		if (!exception.mark) return message;
		if (exception.mark.name) where += "in \"" + exception.mark.name + "\" ";
		where += "(" + (exception.mark.line + 1) + ":" + (exception.mark.column + 1) + ")";
		if (!compact && exception.mark.snippet) where += "\n\n" + exception.mark.snippet;
		return message + " " + where;
	}
	function YAMLException$4(reason, mark) {
		Error.call(this);
		this.name = "YAMLException";
		this.reason = reason;
		this.mark = mark;
		this.message = formatError$1(this, false);
		if (Error.captureStackTrace) Error.captureStackTrace(this, this.constructor);
else this.stack = new Error().stack || "";
	}
	YAMLException$4.prototype = Object.create(Error.prototype);
	YAMLException$4.prototype.constructor = YAMLException$4;
	YAMLException$4.prototype.toString = function toString$1(compact) {
		return this.name + ": " + formatError$1(this, compact);
	};
	module.exports = YAMLException$4;
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/snippet.js
var require_snippet = __commonJS({ "../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/snippet.js"(exports, module) {
	var common$4 = require_common();
	function getLine(buffer$1, lineStart, lineEnd, position$1, maxLineLength) {
		var head = "";
		var tail = "";
		var maxHalfLength = Math.floor(maxLineLength / 2) - 1;
		if (position$1 - lineStart > maxHalfLength) {
			head = " ... ";
			lineStart = position$1 - maxHalfLength + head.length;
		}
		if (lineEnd - position$1 > maxHalfLength) {
			tail = " ...";
			lineEnd = position$1 + maxHalfLength - tail.length;
		}
		return {
			str: head + buffer$1.slice(lineStart, lineEnd).replace(/\t/g, "→") + tail,
			pos: position$1 - lineStart + head.length
		};
	}
	function padStart(string$3, max) {
		return common$4.repeat(" ", max - string$3.length) + string$3;
	}
	function makeSnippet$1(mark, options) {
		options = Object.create(options || null);
		if (!mark.buffer) return null;
		if (!options.maxLength) options.maxLength = 79;
		if (typeof options.indent !== "number") options.indent = 1;
		if (typeof options.linesBefore !== "number") options.linesBefore = 3;
		if (typeof options.linesAfter !== "number") options.linesAfter = 2;
		var re$5 = /\r?\n|\r|\0/g;
		var lineStarts = [0];
		var lineEnds = [];
		var match;
		var foundLineNo = -1;
		while (match = re$5.exec(mark.buffer)) {
			lineEnds.push(match.index);
			lineStarts.push(match.index + match[0].length);
			if (mark.position <= match.index && foundLineNo < 0) foundLineNo = lineStarts.length - 2;
		}
		if (foundLineNo < 0) foundLineNo = lineStarts.length - 1;
		var result = "", i$2, line;
		var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;
		var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);
		for (i$2 = 1; i$2 <= options.linesBefore; i$2++) {
			if (foundLineNo - i$2 < 0) break;
			line = getLine(mark.buffer, lineStarts[foundLineNo - i$2], lineEnds[foundLineNo - i$2], mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i$2]), maxLineLength);
			result = common$4.repeat(" ", options.indent) + padStart((mark.line - i$2 + 1).toString(), lineNoLength) + " | " + line.str + "\n" + result;
		}
		line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);
		result += common$4.repeat(" ", options.indent) + padStart((mark.line + 1).toString(), lineNoLength) + " | " + line.str + "\n";
		result += common$4.repeat("-", options.indent + lineNoLength + 3 + line.pos) + "^" + "\n";
		for (i$2 = 1; i$2 <= options.linesAfter; i$2++) {
			if (foundLineNo + i$2 >= lineEnds.length) break;
			line = getLine(mark.buffer, lineStarts[foundLineNo + i$2], lineEnds[foundLineNo + i$2], mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i$2]), maxLineLength);
			result += common$4.repeat(" ", options.indent) + padStart((mark.line + i$2 + 1).toString(), lineNoLength) + " | " + line.str + "\n";
		}
		return result.replace(/\n$/, "");
	}
	module.exports = makeSnippet$1;
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type.js
var require_type = __commonJS({ "../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type.js"(exports, module) {
	var YAMLException$3 = require_exception();
	var TYPE_CONSTRUCTOR_OPTIONS = [
		"kind",
		"multi",
		"resolve",
		"construct",
		"instanceOf",
		"predicate",
		"represent",
		"representName",
		"defaultStyle",
		"styleAliases"
	];
	var YAML_NODE_KINDS = [
		"scalar",
		"sequence",
		"mapping"
	];
	function compileStyleAliases(map$3) {
		var result = {};
		if (map$3 !== null) Object.keys(map$3).forEach(function(style) {
			map$3[style].forEach(function(alias) {
				result[String(alias)] = style;
			});
		});
		return result;
	}
	function Type$14(tag$2, options) {
		options = options || {};
		Object.keys(options).forEach(function(name) {
			if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) throw new YAMLException$3("Unknown option \"" + name + "\" is met in definition of \"" + tag$2 + "\" YAML type.");
		});
		this.options = options;
		this.tag = tag$2;
		this.kind = options["kind"] || null;
		this.resolve = options["resolve"] || function() {
			return true;
		};
		this.construct = options["construct"] || function(data) {
			return data;
		};
		this.instanceOf = options["instanceOf"] || null;
		this.predicate = options["predicate"] || null;
		this.represent = options["represent"] || null;
		this.representName = options["representName"] || null;
		this.defaultStyle = options["defaultStyle"] || null;
		this.multi = options["multi"] || false;
		this.styleAliases = compileStyleAliases(options["styleAliases"] || null);
		if (YAML_NODE_KINDS.indexOf(this.kind) === -1) throw new YAMLException$3("Unknown kind \"" + this.kind + "\" is specified for \"" + tag$2 + "\" YAML type.");
	}
	module.exports = Type$14;
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/schema.js
var require_schema = __commonJS({ "../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/schema.js"(exports, module) {
	var YAMLException$2 = require_exception();
	var Type$13 = require_type();
	function compileList(schema, name) {
		var result = [];
		schema[name].forEach(function(currentType) {
			var newIndex = result.length;
			result.forEach(function(previousType, previousIndex) {
				if (previousType.tag === currentType.tag && previousType.kind === currentType.kind && previousType.multi === currentType.multi) newIndex = previousIndex;
			});
			result[newIndex] = currentType;
		});
		return result;
	}
	function compileMap() {
		var result = {
			scalar: {},
			sequence: {},
			mapping: {},
			fallback: {},
			multi: {
				scalar: [],
				sequence: [],
				mapping: [],
				fallback: []
			}
		}, index$1, length;
		function collectType(type) {
			if (type.multi) {
				result.multi[type.kind].push(type);
				result.multi["fallback"].push(type);
			} else result[type.kind][type.tag] = result["fallback"][type.tag] = type;
		}
		for (index$1 = 0, length = arguments.length; index$1 < length; index$1 += 1) arguments[index$1].forEach(collectType);
		return result;
	}
	function Schema$1(definition$2) {
		return this.extend(definition$2);
	}
	Schema$1.prototype.extend = function extend$3(definition$2) {
		var implicit = [];
		var explicit = [];
		if (definition$2 instanceof Type$13) explicit.push(definition$2);
else if (Array.isArray(definition$2)) explicit = explicit.concat(definition$2);
else if (definition$2 && (Array.isArray(definition$2.implicit) || Array.isArray(definition$2.explicit))) {
			if (definition$2.implicit) implicit = implicit.concat(definition$2.implicit);
			if (definition$2.explicit) explicit = explicit.concat(definition$2.explicit);
		} else throw new YAMLException$2("Schema.extend argument should be a Type, [ Type ], or a schema definition ({ implicit: [...], explicit: [...] })");
		implicit.forEach(function(type) {
			if (!(type instanceof Type$13)) throw new YAMLException$2("Specified list of YAML types (or a single Type object) contains a non-Type object.");
			if (type.loadKind && type.loadKind !== "scalar") throw new YAMLException$2("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");
			if (type.multi) throw new YAMLException$2("There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.");
		});
		explicit.forEach(function(type) {
			if (!(type instanceof Type$13)) throw new YAMLException$2("Specified list of YAML types (or a single Type object) contains a non-Type object.");
		});
		var result = Object.create(Schema$1.prototype);
		result.implicit = (this.implicit || []).concat(implicit);
		result.explicit = (this.explicit || []).concat(explicit);
		result.compiledImplicit = compileList(result, "implicit");
		result.compiledExplicit = compileList(result, "explicit");
		result.compiledTypeMap = compileMap(result.compiledImplicit, result.compiledExplicit);
		return result;
	};
	module.exports = Schema$1;
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/str.js
var require_str = __commonJS({ "../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/str.js"(exports, module) {
	var Type$12 = require_type();
	module.exports = new Type$12("tag:yaml.org,2002:str", {
		kind: "scalar",
		construct: function(data) {
			return data !== null ? data : "";
		}
	});
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/seq.js
var require_seq = __commonJS({ "../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/seq.js"(exports, module) {
	var Type$11 = require_type();
	module.exports = new Type$11("tag:yaml.org,2002:seq", {
		kind: "sequence",
		construct: function(data) {
			return data !== null ? data : [];
		}
	});
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/map.js
var require_map = __commonJS({ "../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/map.js"(exports, module) {
	var Type$10 = require_type();
	module.exports = new Type$10("tag:yaml.org,2002:map", {
		kind: "mapping",
		construct: function(data) {
			return data !== null ? data : {};
		}
	});
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/schema/failsafe.js
var require_failsafe = __commonJS({ "../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/schema/failsafe.js"(exports, module) {
	var Schema = require_schema();
	module.exports = new Schema({ explicit: [
		require_str(),
		require_seq(),
		require_map()
	] });
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/null.js
var require_null = __commonJS({ "../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/null.js"(exports, module) {
	var Type$9 = require_type();
	function resolveYamlNull(data) {
		if (data === null) return true;
		var max = data.length;
		return max === 1 && data === "~" || max === 4 && (data === "null" || data === "Null" || data === "NULL");
	}
	function constructYamlNull() {
		return null;
	}
	function isNull(object) {
		return object === null;
	}
	module.exports = new Type$9("tag:yaml.org,2002:null", {
		kind: "scalar",
		resolve: resolveYamlNull,
		construct: constructYamlNull,
		predicate: isNull,
		represent: {
			canonical: function() {
				return "~";
			},
			lowercase: function() {
				return "null";
			},
			uppercase: function() {
				return "NULL";
			},
			camelcase: function() {
				return "Null";
			},
			empty: function() {
				return "";
			}
		},
		defaultStyle: "lowercase"
	});
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/bool.js
var require_bool = __commonJS({ "../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/bool.js"(exports, module) {
	var Type$8 = require_type();
	function resolveYamlBoolean(data) {
		if (data === null) return false;
		var max = data.length;
		return max === 4 && (data === "true" || data === "True" || data === "TRUE") || max === 5 && (data === "false" || data === "False" || data === "FALSE");
	}
	function constructYamlBoolean(data) {
		return data === "true" || data === "True" || data === "TRUE";
	}
	function isBoolean(object) {
		return Object.prototype.toString.call(object) === "[object Boolean]";
	}
	module.exports = new Type$8("tag:yaml.org,2002:bool", {
		kind: "scalar",
		resolve: resolveYamlBoolean,
		construct: constructYamlBoolean,
		predicate: isBoolean,
		represent: {
			lowercase: function(object) {
				return object ? "true" : "false";
			},
			uppercase: function(object) {
				return object ? "TRUE" : "FALSE";
			},
			camelcase: function(object) {
				return object ? "True" : "False";
			}
		},
		defaultStyle: "lowercase"
	});
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/int.js
var require_int = __commonJS({ "../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/int.js"(exports, module) {
	var common$3 = require_common();
	var Type$7 = require_type();
	function isHexCode(c) {
		return 48 <= c && c <= 57 || 65 <= c && c <= 70 || 97 <= c && c <= 102;
	}
	function isOctCode(c) {
		return 48 <= c && c <= 55;
	}
	function isDecCode(c) {
		return 48 <= c && c <= 57;
	}
	function resolveYamlInteger(data) {
		if (data === null) return false;
		var max = data.length, index$1 = 0, hasDigits = false, ch;
		if (!max) return false;
		ch = data[index$1];
		if (ch === "-" || ch === "+") ch = data[++index$1];
		if (ch === "0") {
			if (index$1 + 1 === max) return true;
			ch = data[++index$1];
			if (ch === "b") {
				index$1++;
				for (; index$1 < max; index$1++) {
					ch = data[index$1];
					if (ch === "_") continue;
					if (ch !== "0" && ch !== "1") return false;
					hasDigits = true;
				}
				return hasDigits && ch !== "_";
			}
			if (ch === "x") {
				index$1++;
				for (; index$1 < max; index$1++) {
					ch = data[index$1];
					if (ch === "_") continue;
					if (!isHexCode(data.charCodeAt(index$1))) return false;
					hasDigits = true;
				}
				return hasDigits && ch !== "_";
			}
			if (ch === "o") {
				index$1++;
				for (; index$1 < max; index$1++) {
					ch = data[index$1];
					if (ch === "_") continue;
					if (!isOctCode(data.charCodeAt(index$1))) return false;
					hasDigits = true;
				}
				return hasDigits && ch !== "_";
			}
		}
		if (ch === "_") return false;
		for (; index$1 < max; index$1++) {
			ch = data[index$1];
			if (ch === "_") continue;
			if (!isDecCode(data.charCodeAt(index$1))) return false;
			hasDigits = true;
		}
		if (!hasDigits || ch === "_") return false;
		return true;
	}
	function constructYamlInteger(data) {
		var value = data, sign = 1, ch;
		if (value.indexOf("_") !== -1) value = value.replace(/_/g, "");
		ch = value[0];
		if (ch === "-" || ch === "+") {
			if (ch === "-") sign = -1;
			value = value.slice(1);
			ch = value[0];
		}
		if (value === "0") return 0;
		if (ch === "0") {
			if (value[1] === "b") return sign * parseInt(value.slice(2), 2);
			if (value[1] === "x") return sign * parseInt(value.slice(2), 16);
			if (value[1] === "o") return sign * parseInt(value.slice(2), 8);
		}
		return sign * parseInt(value, 10);
	}
	function isInteger(object) {
		return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 === 0 && !common$3.isNegativeZero(object));
	}
	module.exports = new Type$7("tag:yaml.org,2002:int", {
		kind: "scalar",
		resolve: resolveYamlInteger,
		construct: constructYamlInteger,
		predicate: isInteger,
		represent: {
			binary: function(obj) {
				return obj >= 0 ? "0b" + obj.toString(2) : "-0b" + obj.toString(2).slice(1);
			},
			octal: function(obj) {
				return obj >= 0 ? "0o" + obj.toString(8) : "-0o" + obj.toString(8).slice(1);
			},
			decimal: function(obj) {
				return obj.toString(10);
			},
			hexadecimal: function(obj) {
				return obj >= 0 ? "0x" + obj.toString(16).toUpperCase() : "-0x" + obj.toString(16).toUpperCase().slice(1);
			}
		},
		defaultStyle: "decimal",
		styleAliases: {
			binary: [2, "bin"],
			octal: [8, "oct"],
			decimal: [10, "dec"],
			hexadecimal: [16, "hex"]
		}
	});
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/float.js
var require_float = __commonJS({ "../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/float.js"(exports, module) {
	var common$2 = require_common();
	var Type$6 = require_type();
	var YAML_FLOAT_PATTERN = new RegExp(
		// 2.5e4, 2.5 and integers
		"^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$"
);
	function resolveYamlFloat(data) {
		if (data === null) return false;
		if (!YAML_FLOAT_PATTERN.test(data) || data[data.length - 1] === "_") return false;
		return true;
	}
	function constructYamlFloat(data) {
		var value, sign;
		value = data.replace(/_/g, "").toLowerCase();
		sign = value[0] === "-" ? -1 : 1;
		if ("+-".indexOf(value[0]) >= 0) value = value.slice(1);
		if (value === ".inf") return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
else if (value === ".nan") return NaN;
		return sign * parseFloat(value, 10);
	}
	var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;
	function representYamlFloat(object, style) {
		var res;
		if (isNaN(object)) switch (style) {
			case "lowercase": return ".nan";
			case "uppercase": return ".NAN";
			case "camelcase": return ".NaN";
		}
else if (Number.POSITIVE_INFINITY === object) switch (style) {
			case "lowercase": return ".inf";
			case "uppercase": return ".INF";
			case "camelcase": return ".Inf";
		}
else if (Number.NEGATIVE_INFINITY === object) switch (style) {
			case "lowercase": return "-.inf";
			case "uppercase": return "-.INF";
			case "camelcase": return "-.Inf";
		}
else if (common$2.isNegativeZero(object)) return "-0.0";
		res = object.toString(10);
		return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace("e", ".e") : res;
	}
	function isFloat(object) {
		return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 !== 0 || common$2.isNegativeZero(object));
	}
	module.exports = new Type$6("tag:yaml.org,2002:float", {
		kind: "scalar",
		resolve: resolveYamlFloat,
		construct: constructYamlFloat,
		predicate: isFloat,
		represent: representYamlFloat,
		defaultStyle: "lowercase"
	});
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/schema/json.js
var require_json = __commonJS({ "../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/schema/json.js"(exports, module) {
	module.exports = require_failsafe().extend({ implicit: [
		require_null(),
		require_bool(),
		require_int(),
		require_float()
	] });
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/schema/core.js
var require_core = __commonJS({ "../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/schema/core.js"(exports, module) {
	module.exports = require_json();
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/timestamp.js
var require_timestamp = __commonJS({ "../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/timestamp.js"(exports, module) {
	var Type$5 = require_type();
	var YAML_DATE_REGEXP = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$");
	var YAML_TIMESTAMP_REGEXP = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$");
	function resolveYamlTimestamp(data) {
		if (data === null) return false;
		if (YAML_DATE_REGEXP.exec(data) !== null) return true;
		if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;
		return false;
	}
	function constructYamlTimestamp(data) {
		var match, year, month, day, hour, minute, second, fraction = 0, delta = null, tz_hour, tz_minute, date;
		match = YAML_DATE_REGEXP.exec(data);
		if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);
		if (match === null) throw new Error("Date resolve error");
		year = +match[1];
		month = +match[2] - 1;
		day = +match[3];
		if (!match[4]) return new Date(Date.UTC(year, month, day));
		hour = +match[4];
		minute = +match[5];
		second = +match[6];
		if (match[7]) {
			fraction = match[7].slice(0, 3);
			while (fraction.length < 3) fraction += "0";
			fraction = +fraction;
		}
		if (match[9]) {
			tz_hour = +match[10];
			tz_minute = +(match[11] || 0);
			delta = (tz_hour * 60 + tz_minute) * 6e4;
			if (match[9] === "-") delta = -delta;
		}
		date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
		if (delta) date.setTime(date.getTime() - delta);
		return date;
	}
	function representYamlTimestamp(object) {
		return object.toISOString();
	}
	module.exports = new Type$5("tag:yaml.org,2002:timestamp", {
		kind: "scalar",
		resolve: resolveYamlTimestamp,
		construct: constructYamlTimestamp,
		instanceOf: Date,
		represent: representYamlTimestamp
	});
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/merge.js
var require_merge = __commonJS({ "../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/merge.js"(exports, module) {
	var Type$4 = require_type();
	function resolveYamlMerge(data) {
		return data === "<<" || data === null;
	}
	module.exports = new Type$4("tag:yaml.org,2002:merge", {
		kind: "scalar",
		resolve: resolveYamlMerge
	});
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/binary.js
var require_binary = __commonJS({ "../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/binary.js"(exports, module) {
	var Type$3 = require_type();
	var BASE64_MAP = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";
	function resolveYamlBinary(data) {
		if (data === null) return false;
		var code$1, idx, bitlen = 0, max = data.length, map$3 = BASE64_MAP;
		for (idx = 0; idx < max; idx++) {
			code$1 = map$3.indexOf(data.charAt(idx));
			if (code$1 > 64) continue;
			if (code$1 < 0) return false;
			bitlen += 6;
		}
		return bitlen % 8 === 0;
	}
	function constructYamlBinary(data) {
		var idx, tailbits, input = data.replace(/[\r\n=]/g, ""), max = input.length, map$3 = BASE64_MAP, bits = 0, result = [];
		for (idx = 0; idx < max; idx++) {
			if (idx % 4 === 0 && idx) {
				result.push(bits >> 16 & 255);
				result.push(bits >> 8 & 255);
				result.push(bits & 255);
			}
			bits = bits << 6 | map$3.indexOf(input.charAt(idx));
		}
		tailbits = max % 4 * 6;
		if (tailbits === 0) {
			result.push(bits >> 16 & 255);
			result.push(bits >> 8 & 255);
			result.push(bits & 255);
		} else if (tailbits === 18) {
			result.push(bits >> 10 & 255);
			result.push(bits >> 2 & 255);
		} else if (tailbits === 12) result.push(bits >> 4 & 255);
		return new Uint8Array(result);
	}
	function representYamlBinary(object) {
		var result = "", bits = 0, idx, tail, max = object.length, map$3 = BASE64_MAP;
		for (idx = 0; idx < max; idx++) {
			if (idx % 3 === 0 && idx) {
				result += map$3[bits >> 18 & 63];
				result += map$3[bits >> 12 & 63];
				result += map$3[bits >> 6 & 63];
				result += map$3[bits & 63];
			}
			bits = (bits << 8) + object[idx];
		}
		tail = max % 3;
		if (tail === 0) {
			result += map$3[bits >> 18 & 63];
			result += map$3[bits >> 12 & 63];
			result += map$3[bits >> 6 & 63];
			result += map$3[bits & 63];
		} else if (tail === 2) {
			result += map$3[bits >> 10 & 63];
			result += map$3[bits >> 4 & 63];
			result += map$3[bits << 2 & 63];
			result += map$3[64];
		} else if (tail === 1) {
			result += map$3[bits >> 2 & 63];
			result += map$3[bits << 4 & 63];
			result += map$3[64];
			result += map$3[64];
		}
		return result;
	}
	function isBinary(obj) {
		return Object.prototype.toString.call(obj) === "[object Uint8Array]";
	}
	module.exports = new Type$3("tag:yaml.org,2002:binary", {
		kind: "scalar",
		resolve: resolveYamlBinary,
		construct: constructYamlBinary,
		predicate: isBinary,
		represent: representYamlBinary
	});
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/omap.js
var require_omap = __commonJS({ "../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/omap.js"(exports, module) {
	var Type$2 = require_type();
	var _hasOwnProperty$3 = Object.prototype.hasOwnProperty;
	var _toString$2 = Object.prototype.toString;
	function resolveYamlOmap(data) {
		if (data === null) return true;
		var objectKeys = [], index$1, length, pair, pairKey, pairHasKey, object = data;
		for (index$1 = 0, length = object.length; index$1 < length; index$1 += 1) {
			pair = object[index$1];
			pairHasKey = false;
			if (_toString$2.call(pair) !== "[object Object]") return false;
			for (pairKey in pair) if (_hasOwnProperty$3.call(pair, pairKey)) if (!pairHasKey) pairHasKey = true;
else return false;
			if (!pairHasKey) return false;
			if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);
else return false;
		}
		return true;
	}
	function constructYamlOmap(data) {
		return data !== null ? data : [];
	}
	module.exports = new Type$2("tag:yaml.org,2002:omap", {
		kind: "sequence",
		resolve: resolveYamlOmap,
		construct: constructYamlOmap
	});
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/pairs.js
var require_pairs = __commonJS({ "../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/pairs.js"(exports, module) {
	var Type$1 = require_type();
	var _toString$1 = Object.prototype.toString;
	function resolveYamlPairs(data) {
		if (data === null) return true;
		var index$1, length, pair, keys, result, object = data;
		result = new Array(object.length);
		for (index$1 = 0, length = object.length; index$1 < length; index$1 += 1) {
			pair = object[index$1];
			if (_toString$1.call(pair) !== "[object Object]") return false;
			keys = Object.keys(pair);
			if (keys.length !== 1) return false;
			result[index$1] = [keys[0], pair[keys[0]]];
		}
		return true;
	}
	function constructYamlPairs(data) {
		if (data === null) return [];
		var index$1, length, pair, keys, result, object = data;
		result = new Array(object.length);
		for (index$1 = 0, length = object.length; index$1 < length; index$1 += 1) {
			pair = object[index$1];
			keys = Object.keys(pair);
			result[index$1] = [keys[0], pair[keys[0]]];
		}
		return result;
	}
	module.exports = new Type$1("tag:yaml.org,2002:pairs", {
		kind: "sequence",
		resolve: resolveYamlPairs,
		construct: constructYamlPairs
	});
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/set.js
var require_set = __commonJS({ "../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/set.js"(exports, module) {
	var Type = require_type();
	var _hasOwnProperty$2 = Object.prototype.hasOwnProperty;
	function resolveYamlSet(data) {
		if (data === null) return true;
		var key, object = data;
		for (key in object) if (_hasOwnProperty$2.call(object, key)) {
			if (object[key] !== null) return false;
		}
		return true;
	}
	function constructYamlSet(data) {
		return data !== null ? data : {};
	}
	module.exports = new Type("tag:yaml.org,2002:set", {
		kind: "mapping",
		resolve: resolveYamlSet,
		construct: constructYamlSet
	});
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/schema/default.js
var require_default = __commonJS({ "../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/schema/default.js"(exports, module) {
	module.exports = require_core().extend({
		implicit: [require_timestamp(), require_merge()],
		explicit: [
			require_binary(),
			require_omap(),
			require_pairs(),
			require_set()
		]
	});
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/loader.js
var require_loader = __commonJS({ "../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/loader.js"(exports, module) {
	var common$1 = require_common();
	var YAMLException$1 = require_exception();
	var makeSnippet = require_snippet();
	var DEFAULT_SCHEMA$1 = require_default();
	var _hasOwnProperty$1 = Object.prototype.hasOwnProperty;
	var CONTEXT_FLOW_IN = 1;
	var CONTEXT_FLOW_OUT = 2;
	var CONTEXT_BLOCK_IN = 3;
	var CONTEXT_BLOCK_OUT = 4;
	var CHOMPING_CLIP = 1;
	var CHOMPING_STRIP = 2;
	var CHOMPING_KEEP = 3;
	var PATTERN_NON_PRINTABLE = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
	var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
	var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
	var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
	var PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
	function _class(obj) {
		return Object.prototype.toString.call(obj);
	}
	function is_EOL(c) {
		return c === 10 || c === 13;
	}
	function is_WHITE_SPACE(c) {
		return c === 9 || c === 32;
	}
	function is_WS_OR_EOL(c) {
		return c === 9 || c === 32 || c === 10 || c === 13;
	}
	function is_FLOW_INDICATOR(c) {
		return c === 44 || c === 91 || c === 93 || c === 123 || c === 125;
	}
	function fromHexCode(c) {
		var lc;
		if (48 <= c && c <= 57) return c - 48;
		lc = c | 32;
		if (97 <= lc && lc <= 102) return lc - 97 + 10;
		return -1;
	}
	function escapedHexLen(c) {
		if (c === 120) return 2;
		if (c === 117) return 4;
		if (c === 85) return 8;
		return 0;
	}
	function fromDecimalCode(c) {
		if (48 <= c && c <= 57) return c - 48;
		return -1;
	}
	function simpleEscapeSequence(c) {
		return c === 48 ? "\0" : c === 97 ? "\x07" : c === 98 ? "\b" : c === 116 ? "	" : c === 9 ? "	" : c === 110 ? "\n" : c === 118 ? "\v" : c === 102 ? "\f" : c === 114 ? "\r" : c === 101 ? "\x1B" : c === 32 ? " " : c === 34 ? "\"" : c === 47 ? "/" : c === 92 ? "\\" : c === 78 ? "" : c === 95 ? "\xA0" : c === 76 ? "\u2028" : c === 80 ? "\u2029" : "";
	}
	function charFromCodepoint(c) {
		if (c <= 65535) return String.fromCharCode(c);
		return String.fromCharCode((c - 65536 >> 10) + 55296, (c - 65536 & 1023) + 56320);
	}
	var simpleEscapeCheck = new Array(256);
	var simpleEscapeMap = new Array(256);
	for (var i = 0; i < 256; i++) {
		simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
		simpleEscapeMap[i] = simpleEscapeSequence(i);
	}
	function State$1(input, options) {
		this.input = input;
		this.filename = options["filename"] || null;
		this.schema = options["schema"] || DEFAULT_SCHEMA$1;
		this.onWarning = options["onWarning"] || null;
		this.legacy = options["legacy"] || false;
		this.json = options["json"] || false;
		this.listener = options["listener"] || null;
		this.implicitTypes = this.schema.compiledImplicit;
		this.typeMap = this.schema.compiledTypeMap;
		this.length = input.length;
		this.position = 0;
		this.line = 0;
		this.lineStart = 0;
		this.lineIndent = 0;
		this.firstTabInLine = -1;
		this.documents = [];
	}
	function generateError(state, message) {
		var mark = {
			name: state.filename,
			buffer: state.input.slice(0, -1),
			position: state.position,
			line: state.line,
			column: state.position - state.lineStart
		};
		mark.snippet = makeSnippet(mark);
		return new YAMLException$1(message, mark);
	}
	function throwError(state, message) {
		throw generateError(state, message);
	}
	function throwWarning(state, message) {
		if (state.onWarning) state.onWarning.call(null, generateError(state, message));
	}
	var directiveHandlers = {
		YAML: function handleYamlDirective(state, name, args) {
			var match, major$2, minor$2;
			if (state.version !== null) throwError(state, "duplication of %YAML directive");
			if (args.length !== 1) throwError(state, "YAML directive accepts exactly one argument");
			match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);
			if (match === null) throwError(state, "ill-formed argument of the YAML directive");
			major$2 = parseInt(match[1], 10);
			minor$2 = parseInt(match[2], 10);
			if (major$2 !== 1) throwError(state, "unacceptable YAML version of the document");
			state.version = args[0];
			state.checkLineBreaks = minor$2 < 2;
			if (minor$2 !== 1 && minor$2 !== 2) throwWarning(state, "unsupported YAML version of the document");
		},
		TAG: function handleTagDirective(state, name, args) {
			var handle$1, prefix$1;
			if (args.length !== 2) throwError(state, "TAG directive accepts exactly two arguments");
			handle$1 = args[0];
			prefix$1 = args[1];
			if (!PATTERN_TAG_HANDLE.test(handle$1)) throwError(state, "ill-formed tag handle (first argument) of the TAG directive");
			if (_hasOwnProperty$1.call(state.tagMap, handle$1)) throwError(state, "there is a previously declared suffix for \"" + handle$1 + "\" tag handle");
			if (!PATTERN_TAG_URI.test(prefix$1)) throwError(state, "ill-formed tag prefix (second argument) of the TAG directive");
			try {
				prefix$1 = decodeURIComponent(prefix$1);
			} catch (err) {
				throwError(state, "tag prefix is malformed: " + prefix$1);
			}
			state.tagMap[handle$1] = prefix$1;
		}
	};
	function captureSegment(state, start, end, checkJson) {
		var _position, _length, _character, _result;
		if (start < end) {
			_result = state.input.slice(start, end);
			if (checkJson) for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
				_character = _result.charCodeAt(_position);
				if (!(_character === 9 || 32 <= _character && _character <= 1114111)) throwError(state, "expected valid JSON character");
			}
else if (PATTERN_NON_PRINTABLE.test(_result)) throwError(state, "the stream contains non-printable characters");
			state.result += _result;
		}
	}
	function mergeMappings(state, destination, source, overridableKeys) {
		var sourceKeys, key, index$1, quantity;
		if (!common$1.isObject(source)) throwError(state, "cannot merge mappings; the provided source object is unacceptable");
		sourceKeys = Object.keys(source);
		for (index$1 = 0, quantity = sourceKeys.length; index$1 < quantity; index$1 += 1) {
			key = sourceKeys[index$1];
			if (!_hasOwnProperty$1.call(destination, key)) {
				destination[key] = source[key];
				overridableKeys[key] = true;
			}
		}
	}
	function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startLineStart, startPos) {
		var index$1, quantity;
		if (Array.isArray(keyNode)) {
			keyNode = Array.prototype.slice.call(keyNode);
			for (index$1 = 0, quantity = keyNode.length; index$1 < quantity; index$1 += 1) {
				if (Array.isArray(keyNode[index$1])) throwError(state, "nested arrays are not supported inside keys");
				if (typeof keyNode === "object" && _class(keyNode[index$1]) === "[object Object]") keyNode[index$1] = "[object Object]";
			}
		}
		if (typeof keyNode === "object" && _class(keyNode) === "[object Object]") keyNode = "[object Object]";
		keyNode = String(keyNode);
		if (_result === null) _result = {};
		if (keyTag === "tag:yaml.org,2002:merge") if (Array.isArray(valueNode)) for (index$1 = 0, quantity = valueNode.length; index$1 < quantity; index$1 += 1) mergeMappings(state, _result, valueNode[index$1], overridableKeys);
else mergeMappings(state, _result, valueNode, overridableKeys);
else {
			if (!state.json && !_hasOwnProperty$1.call(overridableKeys, keyNode) && _hasOwnProperty$1.call(_result, keyNode)) {
				state.line = startLine || state.line;
				state.lineStart = startLineStart || state.lineStart;
				state.position = startPos || state.position;
				throwError(state, "duplicated mapping key");
			}
			if (keyNode === "__proto__") Object.defineProperty(_result, keyNode, {
				configurable: true,
				enumerable: true,
				writable: true,
				value: valueNode
			});
else _result[keyNode] = valueNode;
			delete overridableKeys[keyNode];
		}
		return _result;
	}
	function readLineBreak(state) {
		var ch;
		ch = state.input.charCodeAt(state.position);
		if (ch === 10) state.position++;
else if (ch === 13) {
			state.position++;
			if (state.input.charCodeAt(state.position) === 10) state.position++;
		} else throwError(state, "a line break is expected");
		state.line += 1;
		state.lineStart = state.position;
		state.firstTabInLine = -1;
	}
	function skipSeparationSpace(state, allowComments, checkIndent) {
		var lineBreaks = 0, ch = state.input.charCodeAt(state.position);
		while (ch !== 0) {
			while (is_WHITE_SPACE(ch)) {
				if (ch === 9 && state.firstTabInLine === -1) state.firstTabInLine = state.position;
				ch = state.input.charCodeAt(++state.position);
			}
			if (allowComments && ch === 35) do 
				ch = state.input.charCodeAt(++state.position);
			while (ch !== 10 && ch !== 13 && ch !== 0);
			if (is_EOL(ch)) {
				readLineBreak(state);
				ch = state.input.charCodeAt(state.position);
				lineBreaks++;
				state.lineIndent = 0;
				while (ch === 32) {
					state.lineIndent++;
					ch = state.input.charCodeAt(++state.position);
				}
			} else break;
		}
		if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) throwWarning(state, "deficient indentation");
		return lineBreaks;
	}
	function testDocumentSeparator(state) {
		var _position = state.position, ch;
		ch = state.input.charCodeAt(_position);
		if ((ch === 45 || ch === 46) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {
			_position += 3;
			ch = state.input.charCodeAt(_position);
			if (ch === 0 || is_WS_OR_EOL(ch)) return true;
		}
		return false;
	}
	function writeFoldedLines(state, count) {
		if (count === 1) state.result += " ";
else if (count > 1) state.result += common$1.repeat("\n", count - 1);
	}
	function readPlainScalar(state, nodeIndent, withinFlowCollection) {
		var preceding, following, captureStart, captureEnd, hasPendingContent, _line, _lineStart, _lineIndent, _kind = state.kind, _result = state.result, ch;
		ch = state.input.charCodeAt(state.position);
		if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 35 || ch === 38 || ch === 42 || ch === 33 || ch === 124 || ch === 62 || ch === 39 || ch === 34 || ch === 37 || ch === 64 || ch === 96) return false;
		if (ch === 63 || ch === 45) {
			following = state.input.charCodeAt(state.position + 1);
			if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) return false;
		}
		state.kind = "scalar";
		state.result = "";
		captureStart = captureEnd = state.position;
		hasPendingContent = false;
		while (ch !== 0) {
			if (ch === 58) {
				following = state.input.charCodeAt(state.position + 1);
				if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) break;
			} else if (ch === 35) {
				preceding = state.input.charCodeAt(state.position - 1);
				if (is_WS_OR_EOL(preceding)) break;
			} else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) break;
else if (is_EOL(ch)) {
				_line = state.line;
				_lineStart = state.lineStart;
				_lineIndent = state.lineIndent;
				skipSeparationSpace(state, false, -1);
				if (state.lineIndent >= nodeIndent) {
					hasPendingContent = true;
					ch = state.input.charCodeAt(state.position);
					continue;
				} else {
					state.position = captureEnd;
					state.line = _line;
					state.lineStart = _lineStart;
					state.lineIndent = _lineIndent;
					break;
				}
			}
			if (hasPendingContent) {
				captureSegment(state, captureStart, captureEnd, false);
				writeFoldedLines(state, state.line - _line);
				captureStart = captureEnd = state.position;
				hasPendingContent = false;
			}
			if (!is_WHITE_SPACE(ch)) captureEnd = state.position + 1;
			ch = state.input.charCodeAt(++state.position);
		}
		captureSegment(state, captureStart, captureEnd, false);
		if (state.result) return true;
		state.kind = _kind;
		state.result = _result;
		return false;
	}
	function readSingleQuotedScalar(state, nodeIndent) {
		var ch, captureStart, captureEnd;
		ch = state.input.charCodeAt(state.position);
		if (ch !== 39) return false;
		state.kind = "scalar";
		state.result = "";
		state.position++;
		captureStart = captureEnd = state.position;
		while ((ch = state.input.charCodeAt(state.position)) !== 0) if (ch === 39) {
			captureSegment(state, captureStart, state.position, true);
			ch = state.input.charCodeAt(++state.position);
			if (ch === 39) {
				captureStart = state.position;
				state.position++;
				captureEnd = state.position;
			} else return true;
		} else if (is_EOL(ch)) {
			captureSegment(state, captureStart, captureEnd, true);
			writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
			captureStart = captureEnd = state.position;
		} else if (state.position === state.lineStart && testDocumentSeparator(state)) throwError(state, "unexpected end of the document within a single quoted scalar");
else {
			state.position++;
			captureEnd = state.position;
		}
		throwError(state, "unexpected end of the stream within a single quoted scalar");
	}
	function readDoubleQuotedScalar(state, nodeIndent) {
		var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
		ch = state.input.charCodeAt(state.position);
		if (ch !== 34) return false;
		state.kind = "scalar";
		state.result = "";
		state.position++;
		captureStart = captureEnd = state.position;
		while ((ch = state.input.charCodeAt(state.position)) !== 0) if (ch === 34) {
			captureSegment(state, captureStart, state.position, true);
			state.position++;
			return true;
		} else if (ch === 92) {
			captureSegment(state, captureStart, state.position, true);
			ch = state.input.charCodeAt(++state.position);
			if (is_EOL(ch)) skipSeparationSpace(state, false, nodeIndent);
else if (ch < 256 && simpleEscapeCheck[ch]) {
				state.result += simpleEscapeMap[ch];
				state.position++;
			} else if ((tmp = escapedHexLen(ch)) > 0) {
				hexLength = tmp;
				hexResult = 0;
				for (; hexLength > 0; hexLength--) {
					ch = state.input.charCodeAt(++state.position);
					if ((tmp = fromHexCode(ch)) >= 0) hexResult = (hexResult << 4) + tmp;
else throwError(state, "expected hexadecimal character");
				}
				state.result += charFromCodepoint(hexResult);
				state.position++;
			} else throwError(state, "unknown escape sequence");
			captureStart = captureEnd = state.position;
		} else if (is_EOL(ch)) {
			captureSegment(state, captureStart, captureEnd, true);
			writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
			captureStart = captureEnd = state.position;
		} else if (state.position === state.lineStart && testDocumentSeparator(state)) throwError(state, "unexpected end of the document within a double quoted scalar");
else {
			state.position++;
			captureEnd = state.position;
		}
		throwError(state, "unexpected end of the stream within a double quoted scalar");
	}
	function readFlowCollection(state, nodeIndent) {
		var readNext = true, _line, _lineStart, _pos, _tag = state.tag, _result, _anchor = state.anchor, following, terminator, isPair, isExplicitPair, isMapping, overridableKeys = Object.create(null), keyNode, keyTag, valueNode, ch;
		ch = state.input.charCodeAt(state.position);
		if (ch === 91) {
			terminator = 93;
			isMapping = false;
			_result = [];
		} else if (ch === 123) {
			terminator = 125;
			isMapping = true;
			_result = {};
		} else return false;
		if (state.anchor !== null) state.anchorMap[state.anchor] = _result;
		ch = state.input.charCodeAt(++state.position);
		while (ch !== 0) {
			skipSeparationSpace(state, true, nodeIndent);
			ch = state.input.charCodeAt(state.position);
			if (ch === terminator) {
				state.position++;
				state.tag = _tag;
				state.anchor = _anchor;
				state.kind = isMapping ? "mapping" : "sequence";
				state.result = _result;
				return true;
			} else if (!readNext) throwError(state, "missed comma between flow collection entries");
else if (ch === 44) throwError(state, "expected the node content, but found ','");
			keyTag = keyNode = valueNode = null;
			isPair = isExplicitPair = false;
			if (ch === 63) {
				following = state.input.charCodeAt(state.position + 1);
				if (is_WS_OR_EOL(following)) {
					isPair = isExplicitPair = true;
					state.position++;
					skipSeparationSpace(state, true, nodeIndent);
				}
			}
			_line = state.line;
			_lineStart = state.lineStart;
			_pos = state.position;
			composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
			keyTag = state.tag;
			keyNode = state.result;
			skipSeparationSpace(state, true, nodeIndent);
			ch = state.input.charCodeAt(state.position);
			if ((isExplicitPair || state.line === _line) && ch === 58) {
				isPair = true;
				ch = state.input.charCodeAt(++state.position);
				skipSeparationSpace(state, true, nodeIndent);
				composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
				valueNode = state.result;
			}
			if (isMapping) storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos);
else if (isPair) _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos));
else _result.push(keyNode);
			skipSeparationSpace(state, true, nodeIndent);
			ch = state.input.charCodeAt(state.position);
			if (ch === 44) {
				readNext = true;
				ch = state.input.charCodeAt(++state.position);
			} else readNext = false;
		}
		throwError(state, "unexpected end of the stream within a flow collection");
	}
	function readBlockScalar(state, nodeIndent) {
		var captureStart, folding, chomping = CHOMPING_CLIP, didReadContent = false, detectedIndent = false, textIndent = nodeIndent, emptyLines = 0, atMoreIndented = false, tmp, ch;
		ch = state.input.charCodeAt(state.position);
		if (ch === 124) folding = false;
else if (ch === 62) folding = true;
else return false;
		state.kind = "scalar";
		state.result = "";
		while (ch !== 0) {
			ch = state.input.charCodeAt(++state.position);
			if (ch === 43 || ch === 45) if (CHOMPING_CLIP === chomping) chomping = ch === 43 ? CHOMPING_KEEP : CHOMPING_STRIP;
else throwError(state, "repeat of a chomping mode identifier");
else if ((tmp = fromDecimalCode(ch)) >= 0) if (tmp === 0) throwError(state, "bad explicit indentation width of a block scalar; it cannot be less than one");
else if (!detectedIndent) {
				textIndent = nodeIndent + tmp - 1;
				detectedIndent = true;
			} else throwError(state, "repeat of an indentation width identifier");
else break;
		}
		if (is_WHITE_SPACE(ch)) {
			do 
				ch = state.input.charCodeAt(++state.position);
			while (is_WHITE_SPACE(ch));
			if (ch === 35) do 
				ch = state.input.charCodeAt(++state.position);
			while (!is_EOL(ch) && ch !== 0);
		}
		while (ch !== 0) {
			readLineBreak(state);
			state.lineIndent = 0;
			ch = state.input.charCodeAt(state.position);
			while ((!detectedIndent || state.lineIndent < textIndent) && ch === 32) {
				state.lineIndent++;
				ch = state.input.charCodeAt(++state.position);
			}
			if (!detectedIndent && state.lineIndent > textIndent) textIndent = state.lineIndent;
			if (is_EOL(ch)) {
				emptyLines++;
				continue;
			}
			if (state.lineIndent < textIndent) {
				if (chomping === CHOMPING_KEEP) state.result += common$1.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
else if (chomping === CHOMPING_CLIP) {
					if (didReadContent) state.result += "\n";
				}
				break;
			}
			if (folding) if (is_WHITE_SPACE(ch)) {
				atMoreIndented = true;
				state.result += common$1.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
			} else if (atMoreIndented) {
				atMoreIndented = false;
				state.result += common$1.repeat("\n", emptyLines + 1);
			} else if (emptyLines === 0) {
				if (didReadContent) state.result += " ";
			} else state.result += common$1.repeat("\n", emptyLines);
else state.result += common$1.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
			didReadContent = true;
			detectedIndent = true;
			emptyLines = 0;
			captureStart = state.position;
			while (!is_EOL(ch) && ch !== 0) ch = state.input.charCodeAt(++state.position);
			captureSegment(state, captureStart, state.position, false);
		}
		return true;
	}
	function readBlockSequence(state, nodeIndent) {
		var _line, _tag = state.tag, _anchor = state.anchor, _result = [], following, detected = false, ch;
		if (state.firstTabInLine !== -1) return false;
		if (state.anchor !== null) state.anchorMap[state.anchor] = _result;
		ch = state.input.charCodeAt(state.position);
		while (ch !== 0) {
			if (state.firstTabInLine !== -1) {
				state.position = state.firstTabInLine;
				throwError(state, "tab characters must not be used in indentation");
			}
			if (ch !== 45) break;
			following = state.input.charCodeAt(state.position + 1);
			if (!is_WS_OR_EOL(following)) break;
			detected = true;
			state.position++;
			if (skipSeparationSpace(state, true, -1)) {
				if (state.lineIndent <= nodeIndent) {
					_result.push(null);
					ch = state.input.charCodeAt(state.position);
					continue;
				}
			}
			_line = state.line;
			composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
			_result.push(state.result);
			skipSeparationSpace(state, true, -1);
			ch = state.input.charCodeAt(state.position);
			if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) throwError(state, "bad indentation of a sequence entry");
else if (state.lineIndent < nodeIndent) break;
		}
		if (detected) {
			state.tag = _tag;
			state.anchor = _anchor;
			state.kind = "sequence";
			state.result = _result;
			return true;
		}
		return false;
	}
	function readBlockMapping(state, nodeIndent, flowIndent) {
		var following, allowCompact, _line, _keyLine, _keyLineStart, _keyPos, _tag = state.tag, _anchor = state.anchor, _result = {}, overridableKeys = Object.create(null), keyTag = null, keyNode = null, valueNode = null, atExplicitKey = false, detected = false, ch;
		if (state.firstTabInLine !== -1) return false;
		if (state.anchor !== null) state.anchorMap[state.anchor] = _result;
		ch = state.input.charCodeAt(state.position);
		while (ch !== 0) {
			if (!atExplicitKey && state.firstTabInLine !== -1) {
				state.position = state.firstTabInLine;
				throwError(state, "tab characters must not be used in indentation");
			}
			following = state.input.charCodeAt(state.position + 1);
			_line = state.line;
			if ((ch === 63 || ch === 58) && is_WS_OR_EOL(following)) {
				if (ch === 63) {
					if (atExplicitKey) {
						storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
						keyTag = keyNode = valueNode = null;
					}
					detected = true;
					atExplicitKey = true;
					allowCompact = true;
				} else if (atExplicitKey) {
					atExplicitKey = false;
					allowCompact = true;
				} else throwError(state, "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line");
				state.position += 1;
				ch = following;
			} else {
				_keyLine = state.line;
				_keyLineStart = state.lineStart;
				_keyPos = state.position;
				if (!composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) break;
				if (state.line === _line) {
					ch = state.input.charCodeAt(state.position);
					while (is_WHITE_SPACE(ch)) ch = state.input.charCodeAt(++state.position);
					if (ch === 58) {
						ch = state.input.charCodeAt(++state.position);
						if (!is_WS_OR_EOL(ch)) throwError(state, "a whitespace character is expected after the key-value separator within a block mapping");
						if (atExplicitKey) {
							storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
							keyTag = keyNode = valueNode = null;
						}
						detected = true;
						atExplicitKey = false;
						allowCompact = false;
						keyTag = state.tag;
						keyNode = state.result;
					} else if (detected) throwError(state, "can not read an implicit mapping pair; a colon is missed");
else {
						state.tag = _tag;
						state.anchor = _anchor;
						return true;
					}
				} else if (detected) throwError(state, "can not read a block mapping entry; a multiline key may not be an implicit key");
else {
					state.tag = _tag;
					state.anchor = _anchor;
					return true;
				}
			}
			if (state.line === _line || state.lineIndent > nodeIndent) {
				if (atExplicitKey) {
					_keyLine = state.line;
					_keyLineStart = state.lineStart;
					_keyPos = state.position;
				}
				if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) if (atExplicitKey) keyNode = state.result;
else valueNode = state.result;
				if (!atExplicitKey) {
					storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _keyLine, _keyLineStart, _keyPos);
					keyTag = keyNode = valueNode = null;
				}
				skipSeparationSpace(state, true, -1);
				ch = state.input.charCodeAt(state.position);
			}
			if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) throwError(state, "bad indentation of a mapping entry");
else if (state.lineIndent < nodeIndent) break;
		}
		if (atExplicitKey) storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
		if (detected) {
			state.tag = _tag;
			state.anchor = _anchor;
			state.kind = "mapping";
			state.result = _result;
		}
		return detected;
	}
	function readTagProperty(state) {
		var _position, isVerbatim = false, isNamed = false, tagHandle, tagName, ch;
		ch = state.input.charCodeAt(state.position);
		if (ch !== 33) return false;
		if (state.tag !== null) throwError(state, "duplication of a tag property");
		ch = state.input.charCodeAt(++state.position);
		if (ch === 60) {
			isVerbatim = true;
			ch = state.input.charCodeAt(++state.position);
		} else if (ch === 33) {
			isNamed = true;
			tagHandle = "!!";
			ch = state.input.charCodeAt(++state.position);
		} else tagHandle = "!";
		_position = state.position;
		if (isVerbatim) {
			do 
				ch = state.input.charCodeAt(++state.position);
			while (ch !== 0 && ch !== 62);
			if (state.position < state.length) {
				tagName = state.input.slice(_position, state.position);
				ch = state.input.charCodeAt(++state.position);
			} else throwError(state, "unexpected end of the stream within a verbatim tag");
		} else {
			while (ch !== 0 && !is_WS_OR_EOL(ch)) {
				if (ch === 33) if (!isNamed) {
					tagHandle = state.input.slice(_position - 1, state.position + 1);
					if (!PATTERN_TAG_HANDLE.test(tagHandle)) throwError(state, "named tag handle cannot contain such characters");
					isNamed = true;
					_position = state.position + 1;
				} else throwError(state, "tag suffix cannot contain exclamation marks");
				ch = state.input.charCodeAt(++state.position);
			}
			tagName = state.input.slice(_position, state.position);
			if (PATTERN_FLOW_INDICATORS.test(tagName)) throwError(state, "tag suffix cannot contain flow indicator characters");
		}
		if (tagName && !PATTERN_TAG_URI.test(tagName)) throwError(state, "tag name cannot contain such characters: " + tagName);
		try {
			tagName = decodeURIComponent(tagName);
		} catch (err) {
			throwError(state, "tag name is malformed: " + tagName);
		}
		if (isVerbatim) state.tag = tagName;
else if (_hasOwnProperty$1.call(state.tagMap, tagHandle)) state.tag = state.tagMap[tagHandle] + tagName;
else if (tagHandle === "!") state.tag = "!" + tagName;
else if (tagHandle === "!!") state.tag = "tag:yaml.org,2002:" + tagName;
else throwError(state, "undeclared tag handle \"" + tagHandle + "\"");
		return true;
	}
	function readAnchorProperty(state) {
		var _position, ch;
		ch = state.input.charCodeAt(state.position);
		if (ch !== 38) return false;
		if (state.anchor !== null) throwError(state, "duplication of an anchor property");
		ch = state.input.charCodeAt(++state.position);
		_position = state.position;
		while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) ch = state.input.charCodeAt(++state.position);
		if (state.position === _position) throwError(state, "name of an anchor node must contain at least one character");
		state.anchor = state.input.slice(_position, state.position);
		return true;
	}
	function readAlias(state) {
		var _position, alias, ch;
		ch = state.input.charCodeAt(state.position);
		if (ch !== 42) return false;
		ch = state.input.charCodeAt(++state.position);
		_position = state.position;
		while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) ch = state.input.charCodeAt(++state.position);
		if (state.position === _position) throwError(state, "name of an alias node must contain at least one character");
		alias = state.input.slice(_position, state.position);
		if (!_hasOwnProperty$1.call(state.anchorMap, alias)) throwError(state, "unidentified alias \"" + alias + "\"");
		state.result = state.anchorMap[alias];
		skipSeparationSpace(state, true, -1);
		return true;
	}
	function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
		var allowBlockStyles, allowBlockScalars, allowBlockCollections, indentStatus = 1, atNewLine = false, hasContent = false, typeIndex, typeQuantity, typeList, type, flowIndent, blockIndent;
		if (state.listener !== null) state.listener("open", state);
		state.tag = null;
		state.anchor = null;
		state.kind = null;
		state.result = null;
		allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;
		if (allowToSeek) {
			if (skipSeparationSpace(state, true, -1)) {
				atNewLine = true;
				if (state.lineIndent > parentIndent) indentStatus = 1;
else if (state.lineIndent === parentIndent) indentStatus = 0;
else if (state.lineIndent < parentIndent) indentStatus = -1;
			}
		}
		if (indentStatus === 1) while (readTagProperty(state) || readAnchorProperty(state)) if (skipSeparationSpace(state, true, -1)) {
			atNewLine = true;
			allowBlockCollections = allowBlockStyles;
			if (state.lineIndent > parentIndent) indentStatus = 1;
else if (state.lineIndent === parentIndent) indentStatus = 0;
else if (state.lineIndent < parentIndent) indentStatus = -1;
		} else allowBlockCollections = false;
		if (allowBlockCollections) allowBlockCollections = atNewLine || allowCompact;
		if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
			if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) flowIndent = parentIndent;
else flowIndent = parentIndent + 1;
			blockIndent = state.position - state.lineStart;
			if (indentStatus === 1) if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) hasContent = true;
else {
				if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) hasContent = true;
else if (readAlias(state)) {
					hasContent = true;
					if (state.tag !== null || state.anchor !== null) throwError(state, "alias node should not have any properties");
				} else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
					hasContent = true;
					if (state.tag === null) state.tag = "?";
				}
				if (state.anchor !== null) state.anchorMap[state.anchor] = state.result;
			}
else if (indentStatus === 0) hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
		}
		if (state.tag === null) {
			if (state.anchor !== null) state.anchorMap[state.anchor] = state.result;
		} else if (state.tag === "?") {
			if (state.result !== null && state.kind !== "scalar") throwError(state, "unacceptable node kind for !<?> tag; it should be \"scalar\", not \"" + state.kind + "\"");
			for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
				type = state.implicitTypes[typeIndex];
				if (type.resolve(state.result)) {
					state.result = type.construct(state.result);
					state.tag = type.tag;
					if (state.anchor !== null) state.anchorMap[state.anchor] = state.result;
					break;
				}
			}
		} else if (state.tag !== "!") {
			if (_hasOwnProperty$1.call(state.typeMap[state.kind || "fallback"], state.tag)) type = state.typeMap[state.kind || "fallback"][state.tag];
else {
				type = null;
				typeList = state.typeMap.multi[state.kind || "fallback"];
				for (typeIndex = 0, typeQuantity = typeList.length; typeIndex < typeQuantity; typeIndex += 1) if (state.tag.slice(0, typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {
					type = typeList[typeIndex];
					break;
				}
			}
			if (!type) throwError(state, "unknown tag !<" + state.tag + ">");
			if (state.result !== null && type.kind !== state.kind) throwError(state, "unacceptable node kind for !<" + state.tag + "> tag; it should be \"" + type.kind + "\", not \"" + state.kind + "\"");
			if (!type.resolve(state.result, state.tag)) throwError(state, "cannot resolve a node with !<" + state.tag + "> explicit tag");
else {
				state.result = type.construct(state.result, state.tag);
				if (state.anchor !== null) state.anchorMap[state.anchor] = state.result;
			}
		}
		if (state.listener !== null) state.listener("close", state);
		return state.tag !== null || state.anchor !== null || hasContent;
	}
	function readDocument(state) {
		var documentStart = state.position, _position, directiveName, directiveArgs, hasDirectives = false, ch;
		state.version = null;
		state.checkLineBreaks = state.legacy;
		state.tagMap = Object.create(null);
		state.anchorMap = Object.create(null);
		while ((ch = state.input.charCodeAt(state.position)) !== 0) {
			skipSeparationSpace(state, true, -1);
			ch = state.input.charCodeAt(state.position);
			if (state.lineIndent > 0 || ch !== 37) break;
			hasDirectives = true;
			ch = state.input.charCodeAt(++state.position);
			_position = state.position;
			while (ch !== 0 && !is_WS_OR_EOL(ch)) ch = state.input.charCodeAt(++state.position);
			directiveName = state.input.slice(_position, state.position);
			directiveArgs = [];
			if (directiveName.length < 1) throwError(state, "directive name must not be less than one character in length");
			while (ch !== 0) {
				while (is_WHITE_SPACE(ch)) ch = state.input.charCodeAt(++state.position);
				if (ch === 35) {
					do 
						ch = state.input.charCodeAt(++state.position);
					while (ch !== 0 && !is_EOL(ch));
					break;
				}
				if (is_EOL(ch)) break;
				_position = state.position;
				while (ch !== 0 && !is_WS_OR_EOL(ch)) ch = state.input.charCodeAt(++state.position);
				directiveArgs.push(state.input.slice(_position, state.position));
			}
			if (ch !== 0) readLineBreak(state);
			if (_hasOwnProperty$1.call(directiveHandlers, directiveName)) directiveHandlers[directiveName](state, directiveName, directiveArgs);
else throwWarning(state, "unknown document directive \"" + directiveName + "\"");
		}
		skipSeparationSpace(state, true, -1);
		if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 45 && state.input.charCodeAt(state.position + 1) === 45 && state.input.charCodeAt(state.position + 2) === 45) {
			state.position += 3;
			skipSeparationSpace(state, true, -1);
		} else if (hasDirectives) throwError(state, "directives end mark is expected");
		composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
		skipSeparationSpace(state, true, -1);
		if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) throwWarning(state, "non-ASCII line breaks are interpreted as content");
		state.documents.push(state.result);
		if (state.position === state.lineStart && testDocumentSeparator(state)) {
			if (state.input.charCodeAt(state.position) === 46) {
				state.position += 3;
				skipSeparationSpace(state, true, -1);
			}
			return;
		}
		if (state.position < state.length - 1) throwError(state, "end of the stream or a document separator is expected");
else return;
	}
	function loadDocuments(input, options) {
		input = String(input);
		options = options || {};
		if (input.length !== 0) {
			if (input.charCodeAt(input.length - 1) !== 10 && input.charCodeAt(input.length - 1) !== 13) input += "\n";
			if (input.charCodeAt(0) === 65279) input = input.slice(1);
		}
		var state = new State$1(input, options);
		var nullpos = input.indexOf("\0");
		if (nullpos !== -1) {
			state.position = nullpos;
			throwError(state, "null byte is not allowed in input");
		}
		state.input += "\0";
		while (state.input.charCodeAt(state.position) === 32) {
			state.lineIndent += 1;
			state.position += 1;
		}
		while (state.position < state.length - 1) readDocument(state);
		return state.documents;
	}
	function loadAll(input, iterator$1, options) {
		if (iterator$1 !== null && typeof iterator$1 === "object" && typeof options === "undefined") {
			options = iterator$1;
			iterator$1 = null;
		}
		var documents = loadDocuments(input, options);
		if (typeof iterator$1 !== "function") return documents;
		for (var index$1 = 0, length = documents.length; index$1 < length; index$1 += 1) iterator$1(documents[index$1]);
	}
	function load(input, options) {
		var documents = loadDocuments(input, options);
		if (documents.length === 0) return undefined;
else if (documents.length === 1) return documents[0];
		throw new YAMLException$1("expected a single document in the stream, but found more");
	}
	module.exports.loadAll = loadAll;
	module.exports.load = load;
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/dumper.js
var require_dumper = __commonJS({ "../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/dumper.js"(exports, module) {
	var common = require_common();
	var YAMLException = require_exception();
	var DEFAULT_SCHEMA = require_default();
	var _toString = Object.prototype.toString;
	var _hasOwnProperty = Object.prototype.hasOwnProperty;
	var CHAR_BOM = 65279;
	var CHAR_TAB = 9;
	var CHAR_LINE_FEED = 10;
	var CHAR_CARRIAGE_RETURN = 13;
	var CHAR_SPACE = 32;
	var CHAR_EXCLAMATION = 33;
	var CHAR_DOUBLE_QUOTE = 34;
	var CHAR_SHARP = 35;
	var CHAR_PERCENT = 37;
	var CHAR_AMPERSAND = 38;
	var CHAR_SINGLE_QUOTE = 39;
	var CHAR_ASTERISK = 42;
	var CHAR_COMMA = 44;
	var CHAR_MINUS = 45;
	var CHAR_COLON = 58;
	var CHAR_EQUALS = 61;
	var CHAR_GREATER_THAN = 62;
	var CHAR_QUESTION = 63;
	var CHAR_COMMERCIAL_AT = 64;
	var CHAR_LEFT_SQUARE_BRACKET = 91;
	var CHAR_RIGHT_SQUARE_BRACKET = 93;
	var CHAR_GRAVE_ACCENT = 96;
	var CHAR_LEFT_CURLY_BRACKET = 123;
	var CHAR_VERTICAL_LINE = 124;
	var CHAR_RIGHT_CURLY_BRACKET = 125;
	var ESCAPE_SEQUENCES = {};
	ESCAPE_SEQUENCES[0] = "\\0";
	ESCAPE_SEQUENCES[7] = "\\a";
	ESCAPE_SEQUENCES[8] = "\\b";
	ESCAPE_SEQUENCES[9] = "\\t";
	ESCAPE_SEQUENCES[10] = "\\n";
	ESCAPE_SEQUENCES[11] = "\\v";
	ESCAPE_SEQUENCES[12] = "\\f";
	ESCAPE_SEQUENCES[13] = "\\r";
	ESCAPE_SEQUENCES[27] = "\\e";
	ESCAPE_SEQUENCES[34] = "\\\"";
	ESCAPE_SEQUENCES[92] = "\\\\";
	ESCAPE_SEQUENCES[133] = "\\N";
	ESCAPE_SEQUENCES[160] = "\\_";
	ESCAPE_SEQUENCES[8232] = "\\L";
	ESCAPE_SEQUENCES[8233] = "\\P";
	var DEPRECATED_BOOLEANS_SYNTAX = [
		"y",
		"Y",
		"yes",
		"Yes",
		"YES",
		"on",
		"On",
		"ON",
		"n",
		"N",
		"no",
		"No",
		"NO",
		"off",
		"Off",
		"OFF"
	];
	var DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;
	function compileStyleMap(schema, map$3) {
		var result, keys, index$1, length, tag$2, style, type;
		if (map$3 === null) return {};
		result = {};
		keys = Object.keys(map$3);
		for (index$1 = 0, length = keys.length; index$1 < length; index$1 += 1) {
			tag$2 = keys[index$1];
			style = String(map$3[tag$2]);
			if (tag$2.slice(0, 2) === "!!") tag$2 = "tag:yaml.org,2002:" + tag$2.slice(2);
			type = schema.compiledTypeMap["fallback"][tag$2];
			if (type && _hasOwnProperty.call(type.styleAliases, style)) style = type.styleAliases[style];
			result[tag$2] = style;
		}
		return result;
	}
	function encodeHex(character) {
		var string$3, handle$1, length;
		string$3 = character.toString(16).toUpperCase();
		if (character <= 255) {
			handle$1 = "x";
			length = 2;
		} else if (character <= 65535) {
			handle$1 = "u";
			length = 4;
		} else if (character <= 4294967295) {
			handle$1 = "U";
			length = 8;
		} else throw new YAMLException("code point within a string may not be greater than 0xFFFFFFFF");
		return "\\" + handle$1 + common.repeat("0", length - string$3.length) + string$3;
	}
	var QUOTING_TYPE_SINGLE = 1, QUOTING_TYPE_DOUBLE = 2;
	function State(options) {
		this.schema = options["schema"] || DEFAULT_SCHEMA;
		this.indent = Math.max(1, options["indent"] || 2);
		this.noArrayIndent = options["noArrayIndent"] || false;
		this.skipInvalid = options["skipInvalid"] || false;
		this.flowLevel = common.isNothing(options["flowLevel"]) ? -1 : options["flowLevel"];
		this.styleMap = compileStyleMap(this.schema, options["styles"] || null);
		this.sortKeys = options["sortKeys"] || false;
		this.lineWidth = options["lineWidth"] || 80;
		this.noRefs = options["noRefs"] || false;
		this.noCompatMode = options["noCompatMode"] || false;
		this.condenseFlow = options["condenseFlow"] || false;
		this.quotingType = options["quotingType"] === "\"" ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;
		this.forceQuotes = options["forceQuotes"] || false;
		this.replacer = typeof options["replacer"] === "function" ? options["replacer"] : null;
		this.implicitTypes = this.schema.compiledImplicit;
		this.explicitTypes = this.schema.compiledExplicit;
		this.tag = null;
		this.result = "";
		this.duplicates = [];
		this.usedDuplicates = null;
	}
	function indentString(string$3, spaces) {
		var ind = common.repeat(" ", spaces), position$1 = 0, next = -1, result = "", line, length = string$3.length;
		while (position$1 < length) {
			next = string$3.indexOf("\n", position$1);
			if (next === -1) {
				line = string$3.slice(position$1);
				position$1 = length;
			} else {
				line = string$3.slice(position$1, next + 1);
				position$1 = next + 1;
			}
			if (line.length && line !== "\n") result += ind;
			result += line;
		}
		return result;
	}
	function generateNextLine(state, level) {
		return "\n" + common.repeat(" ", state.indent * level);
	}
	function testImplicitResolving(state, str) {
		var index$1, length, type;
		for (index$1 = 0, length = state.implicitTypes.length; index$1 < length; index$1 += 1) {
			type = state.implicitTypes[index$1];
			if (type.resolve(str)) return true;
		}
		return false;
	}
	function isWhitespace(c) {
		return c === CHAR_SPACE || c === CHAR_TAB;
	}
	function isPrintable(c) {
		return 32 <= c && c <= 126 || 161 <= c && c <= 55295 && c !== 8232 && c !== 8233 || 57344 <= c && c <= 65533 && c !== CHAR_BOM || 65536 <= c && c <= 1114111;
	}
	function isNsCharOrWhitespace(c) {
		return isPrintable(c) && c !== CHAR_BOM && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;
	}
	function isPlainSafe(c, prev, inblock) {
		var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c);
		var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c);
		return (inblock ? cIsNsCharOrWhitespace : cIsNsCharOrWhitespace && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET) && c !== CHAR_SHARP && !(prev === CHAR_COLON && !cIsNsChar) || isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c === CHAR_SHARP || prev === CHAR_COLON && cIsNsChar;
	}
	function isPlainSafeFirst(c) {
		return isPrintable(c) && c !== CHAR_BOM && !isWhitespace(c) && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;
	}
	function isPlainSafeLast(c) {
		return !isWhitespace(c) && c !== CHAR_COLON;
	}
	function codePointAt(string$3, pos) {
		var first = string$3.charCodeAt(pos), second;
		if (first >= 55296 && first <= 56319 && pos + 1 < string$3.length) {
			second = string$3.charCodeAt(pos + 1);
			if (second >= 56320 && second <= 57343) return (first - 55296) * 1024 + second - 56320 + 65536;
		}
		return first;
	}
	function needIndentIndicator(string$3) {
		var leadingSpaceRe = /^\n* /;
		return leadingSpaceRe.test(string$3);
	}
	var STYLE_PLAIN = 1, STYLE_SINGLE = 2, STYLE_LITERAL = 3, STYLE_FOLDED = 4, STYLE_DOUBLE = 5;
	function chooseScalarStyle(string$3, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType, quotingType, forceQuotes, inblock) {
		var i$2;
		var char = 0;
		var prevChar = null;
		var hasLineBreak = false;
		var hasFoldableLine = false;
		var shouldTrackWidth = lineWidth !== -1;
		var previousLineBreak = -1;
		var plain = isPlainSafeFirst(codePointAt(string$3, 0)) && isPlainSafeLast(codePointAt(string$3, string$3.length - 1));
		if (singleLineOnly || forceQuotes) for (i$2 = 0; i$2 < string$3.length; char >= 65536 ? i$2 += 2 : i$2++) {
			char = codePointAt(string$3, i$2);
			if (!isPrintable(char)) return STYLE_DOUBLE;
			plain = plain && isPlainSafe(char, prevChar, inblock);
			prevChar = char;
		}
else {
			for (i$2 = 0; i$2 < string$3.length; char >= 65536 ? i$2 += 2 : i$2++) {
				char = codePointAt(string$3, i$2);
				if (char === CHAR_LINE_FEED) {
					hasLineBreak = true;
					if (shouldTrackWidth) {
						hasFoldableLine = hasFoldableLine || i$2 - previousLineBreak - 1 > lineWidth && string$3[previousLineBreak + 1] !== " ";
						previousLineBreak = i$2;
					}
				} else if (!isPrintable(char)) return STYLE_DOUBLE;
				plain = plain && isPlainSafe(char, prevChar, inblock);
				prevChar = char;
			}
			hasFoldableLine = hasFoldableLine || shouldTrackWidth && (i$2 - previousLineBreak - 1 > lineWidth && string$3[previousLineBreak + 1] !== " ");
		}
		if (!hasLineBreak && !hasFoldableLine) {
			if (plain && !forceQuotes && !testAmbiguousType(string$3)) return STYLE_PLAIN;
			return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
		}
		if (indentPerLevel > 9 && needIndentIndicator(string$3)) return STYLE_DOUBLE;
		if (!forceQuotes) return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
		return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
	}
	function writeScalar(state, string$3, level, iskey, inblock) {
		state.dump = function() {
			if (string$3.length === 0) return state.quotingType === QUOTING_TYPE_DOUBLE ? "\"\"" : "''";
			if (!state.noCompatMode) {
				if (DEPRECATED_BOOLEANS_SYNTAX.indexOf(string$3) !== -1 || DEPRECATED_BASE60_SYNTAX.test(string$3)) return state.quotingType === QUOTING_TYPE_DOUBLE ? "\"" + string$3 + "\"" : "'" + string$3 + "'";
			}
			var indent = state.indent * Math.max(1, level);
			var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);
			var singleLineOnly = iskey || state.flowLevel > -1 && level >= state.flowLevel;
			function testAmbiguity(string$4) {
				return testImplicitResolving(state, string$4);
			}
			switch (chooseScalarStyle(string$3, singleLineOnly, state.indent, lineWidth, testAmbiguity, state.quotingType, state.forceQuotes && !iskey, inblock)) {
				case STYLE_PLAIN: return string$3;
				case STYLE_SINGLE: return "'" + string$3.replace(/'/g, "''") + "'";
				case STYLE_LITERAL: return "|" + blockHeader(string$3, state.indent) + dropEndingNewline(indentString(string$3, indent));
				case STYLE_FOLDED: return ">" + blockHeader(string$3, state.indent) + dropEndingNewline(indentString(foldString(string$3, lineWidth), indent));
				case STYLE_DOUBLE: return "\"" + escapeString(string$3, lineWidth) + "\"";
				default: throw new YAMLException("impossible error: invalid scalar style");
			}
		}();
	}
	function blockHeader(string$3, indentPerLevel) {
		var indentIndicator = needIndentIndicator(string$3) ? String(indentPerLevel) : "";
		var clip = string$3[string$3.length - 1] === "\n";
		var keep = clip && (string$3[string$3.length - 2] === "\n" || string$3 === "\n");
		var chomp = keep ? "+" : clip ? "" : "-";
		return indentIndicator + chomp + "\n";
	}
	function dropEndingNewline(string$3) {
		return string$3[string$3.length - 1] === "\n" ? string$3.slice(0, -1) : string$3;
	}
	function foldString(string$3, width) {
		var lineRe = /(\n+)([^\n]*)/g;
		var result = function() {
			var nextLF = string$3.indexOf("\n");
			nextLF = nextLF !== -1 ? nextLF : string$3.length;
			lineRe.lastIndex = nextLF;
			return foldLine(string$3.slice(0, nextLF), width);
		}();
		var prevMoreIndented = string$3[0] === "\n" || string$3[0] === " ";
		var moreIndented;
		var match;
		while (match = lineRe.exec(string$3)) {
			var prefix$1 = match[1], line = match[2];
			moreIndented = line[0] === " ";
			result += prefix$1 + (!prevMoreIndented && !moreIndented && line !== "" ? "\n" : "") + foldLine(line, width);
			prevMoreIndented = moreIndented;
		}
		return result;
	}
	function foldLine(line, width) {
		if (line === "" || line[0] === " ") return line;
		var breakRe = / [^ ]/g;
		var match;
		var start = 0, end, curr = 0, next = 0;
		var result = "";
		while (match = breakRe.exec(line)) {
			next = match.index;
			if (next - start > width) {
				end = curr > start ? curr : next;
				result += "\n" + line.slice(start, end);
				start = end + 1;
			}
			curr = next;
		}
		result += "\n";
		if (line.length - start > width && curr > start) result += line.slice(start, curr) + "\n" + line.slice(curr + 1);
else result += line.slice(start);
		return result.slice(1);
	}
	function escapeString(string$3) {
		var result = "";
		var char = 0;
		var escapeSeq;
		for (var i$2 = 0; i$2 < string$3.length; char >= 65536 ? i$2 += 2 : i$2++) {
			char = codePointAt(string$3, i$2);
			escapeSeq = ESCAPE_SEQUENCES[char];
			if (!escapeSeq && isPrintable(char)) {
				result += string$3[i$2];
				if (char >= 65536) result += string$3[i$2 + 1];
			} else result += escapeSeq || encodeHex(char);
		}
		return result;
	}
	function writeFlowSequence(state, level, object) {
		var _result = "", _tag = state.tag, index$1, length, value;
		for (index$1 = 0, length = object.length; index$1 < length; index$1 += 1) {
			value = object[index$1];
			if (state.replacer) value = state.replacer.call(object, String(index$1), value);
			if (writeNode(state, level, value, false, false) || typeof value === "undefined" && writeNode(state, level, null, false, false)) {
				if (_result !== "") _result += "," + (!state.condenseFlow ? " " : "");
				_result += state.dump;
			}
		}
		state.tag = _tag;
		state.dump = "[" + _result + "]";
	}
	function writeBlockSequence(state, level, object, compact) {
		var _result = "", _tag = state.tag, index$1, length, value;
		for (index$1 = 0, length = object.length; index$1 < length; index$1 += 1) {
			value = object[index$1];
			if (state.replacer) value = state.replacer.call(object, String(index$1), value);
			if (writeNode(state, level + 1, value, true, true, false, true) || typeof value === "undefined" && writeNode(state, level + 1, null, true, true, false, true)) {
				if (!compact || _result !== "") _result += generateNextLine(state, level);
				if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) _result += "-";
else _result += "- ";
				_result += state.dump;
			}
		}
		state.tag = _tag;
		state.dump = _result || "[]";
	}
	function writeFlowMapping(state, level, object) {
		var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index$1, length, objectKey, objectValue, pairBuffer;
		for (index$1 = 0, length = objectKeyList.length; index$1 < length; index$1 += 1) {
			pairBuffer = "";
			if (_result !== "") pairBuffer += ", ";
			if (state.condenseFlow) pairBuffer += "\"";
			objectKey = objectKeyList[index$1];
			objectValue = object[objectKey];
			if (state.replacer) objectValue = state.replacer.call(object, objectKey, objectValue);
			if (!writeNode(state, level, objectKey, false, false)) continue;
			if (state.dump.length > 1024) pairBuffer += "? ";
			pairBuffer += state.dump + (state.condenseFlow ? "\"" : "") + ":" + (state.condenseFlow ? "" : " ");
			if (!writeNode(state, level, objectValue, false, false)) continue;
			pairBuffer += state.dump;
			_result += pairBuffer;
		}
		state.tag = _tag;
		state.dump = "{" + _result + "}";
	}
	function writeBlockMapping(state, level, object, compact) {
		var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index$1, length, objectKey, objectValue, explicitPair, pairBuffer;
		if (state.sortKeys === true) objectKeyList.sort();
else if (typeof state.sortKeys === "function") objectKeyList.sort(state.sortKeys);
else if (state.sortKeys) throw new YAMLException("sortKeys must be a boolean or a function");
		for (index$1 = 0, length = objectKeyList.length; index$1 < length; index$1 += 1) {
			pairBuffer = "";
			if (!compact || _result !== "") pairBuffer += generateNextLine(state, level);
			objectKey = objectKeyList[index$1];
			objectValue = object[objectKey];
			if (state.replacer) objectValue = state.replacer.call(object, objectKey, objectValue);
			if (!writeNode(state, level + 1, objectKey, true, true, true)) continue;
			explicitPair = state.tag !== null && state.tag !== "?" || state.dump && state.dump.length > 1024;
			if (explicitPair) if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) pairBuffer += "?";
else pairBuffer += "? ";
			pairBuffer += state.dump;
			if (explicitPair) pairBuffer += generateNextLine(state, level);
			if (!writeNode(state, level + 1, objectValue, true, explicitPair)) continue;
			if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) pairBuffer += ":";
else pairBuffer += ": ";
			pairBuffer += state.dump;
			_result += pairBuffer;
		}
		state.tag = _tag;
		state.dump = _result || "{}";
	}
	function detectType(state, object, explicit) {
		var _result, typeList, index$1, length, type, style;
		typeList = explicit ? state.explicitTypes : state.implicitTypes;
		for (index$1 = 0, length = typeList.length; index$1 < length; index$1 += 1) {
			type = typeList[index$1];
			if ((type.instanceOf || type.predicate) && (!type.instanceOf || typeof object === "object" && object instanceof type.instanceOf) && (!type.predicate || type.predicate(object))) {
				if (explicit) if (type.multi && type.representName) state.tag = type.representName(object);
else state.tag = type.tag;
else state.tag = "?";
				if (type.represent) {
					style = state.styleMap[type.tag] || type.defaultStyle;
					if (_toString.call(type.represent) === "[object Function]") _result = type.represent(object, style);
else if (_hasOwnProperty.call(type.represent, style)) _result = type.represent[style](object, style);
else throw new YAMLException("!<" + type.tag + "> tag resolver accepts not \"" + style + "\" style");
					state.dump = _result;
				}
				return true;
			}
		}
		return false;
	}
	function writeNode(state, level, object, block, compact, iskey, isblockseq) {
		state.tag = null;
		state.dump = object;
		if (!detectType(state, object, false)) detectType(state, object, true);
		var type = _toString.call(state.dump);
		var inblock = block;
		var tagStr;
		if (block) block = state.flowLevel < 0 || state.flowLevel > level;
		var objectOrArray = type === "[object Object]" || type === "[object Array]", duplicateIndex, duplicate;
		if (objectOrArray) {
			duplicateIndex = state.duplicates.indexOf(object);
			duplicate = duplicateIndex !== -1;
		}
		if (state.tag !== null && state.tag !== "?" || duplicate || state.indent !== 2 && level > 0) compact = false;
		if (duplicate && state.usedDuplicates[duplicateIndex]) state.dump = "*ref_" + duplicateIndex;
else {
			if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) state.usedDuplicates[duplicateIndex] = true;
			if (type === "[object Object]") if (block && Object.keys(state.dump).length !== 0) {
				writeBlockMapping(state, level, state.dump, compact);
				if (duplicate) state.dump = "&ref_" + duplicateIndex + state.dump;
			} else {
				writeFlowMapping(state, level, state.dump);
				if (duplicate) state.dump = "&ref_" + duplicateIndex + " " + state.dump;
			}
else if (type === "[object Array]") if (block && state.dump.length !== 0) {
				if (state.noArrayIndent && !isblockseq && level > 0) writeBlockSequence(state, level - 1, state.dump, compact);
else writeBlockSequence(state, level, state.dump, compact);
				if (duplicate) state.dump = "&ref_" + duplicateIndex + state.dump;
			} else {
				writeFlowSequence(state, level, state.dump);
				if (duplicate) state.dump = "&ref_" + duplicateIndex + " " + state.dump;
			}
else if (type === "[object String]") {
				if (state.tag !== "?") writeScalar(state, state.dump, level, iskey, inblock);
			} else if (type === "[object Undefined]") return false;
else {
				if (state.skipInvalid) return false;
				throw new YAMLException("unacceptable kind of an object to dump " + type);
			}
			if (state.tag !== null && state.tag !== "?") {
				tagStr = encodeURI(state.tag[0] === "!" ? state.tag.slice(1) : state.tag).replace(/!/g, "%21");
				if (state.tag[0] === "!") tagStr = "!" + tagStr;
else if (tagStr.slice(0, 18) === "tag:yaml.org,2002:") tagStr = "!!" + tagStr.slice(18);
else tagStr = "!<" + tagStr + ">";
				state.dump = tagStr + " " + state.dump;
			}
		}
		return true;
	}
	function getDuplicateReferences(object, state) {
		var objects = [], duplicatesIndexes = [], index$1, length;
		inspectNode(object, objects, duplicatesIndexes);
		for (index$1 = 0, length = duplicatesIndexes.length; index$1 < length; index$1 += 1) state.duplicates.push(objects[duplicatesIndexes[index$1]]);
		state.usedDuplicates = new Array(length);
	}
	function inspectNode(object, objects, duplicatesIndexes) {
		var objectKeyList, index$1, length;
		if (object !== null && typeof object === "object") {
			index$1 = objects.indexOf(object);
			if (index$1 !== -1) {
				if (duplicatesIndexes.indexOf(index$1) === -1) duplicatesIndexes.push(index$1);
			} else {
				objects.push(object);
				if (Array.isArray(object)) for (index$1 = 0, length = object.length; index$1 < length; index$1 += 1) inspectNode(object[index$1], objects, duplicatesIndexes);
else {
					objectKeyList = Object.keys(object);
					for (index$1 = 0, length = objectKeyList.length; index$1 < length; index$1 += 1) inspectNode(object[objectKeyList[index$1]], objects, duplicatesIndexes);
				}
			}
		}
	}
	function dump(input, options) {
		options = options || {};
		var state = new State(options);
		if (!state.noRefs) getDuplicateReferences(input, state);
		var value = input;
		if (state.replacer) value = state.replacer.call({ "": value }, "", value);
		if (writeNode(state, 0, value, true, true)) return state.dump + "\n";
		return "";
	}
	module.exports.dump = dump;
} });

//#endregion
//#region ../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/index.js
var require_js_yaml = __commonJS({ "../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/index.js"(exports, module) {
	var loader = require_loader();
	var dumper = require_dumper();
	function renamed(from, to) {
		return function() {
			throw new Error("Function yaml." + from + " is removed in js-yaml 4. " + "Use yaml." + to + " instead, which is now safe by default.");
		};
	}
	module.exports.Type = require_type();
	module.exports.Schema = require_schema();
	module.exports.FAILSAFE_SCHEMA = require_failsafe();
	module.exports.JSON_SCHEMA = require_json();
	module.exports.CORE_SCHEMA = require_core();
	module.exports.DEFAULT_SCHEMA = require_default();
	module.exports.load = loader.load;
	module.exports.loadAll = loader.loadAll;
	module.exports.dump = dumper.dump;
	module.exports.YAMLException = require_exception();
	module.exports.types = {
		binary: require_binary(),
		float: require_float(),
		map: require_map(),
		null: require_null(),
		pairs: require_pairs(),
		set: require_set(),
		timestamp: require_timestamp(),
		bool: require_bool(),
		int: require_int(),
		merge: require_merge(),
		omap: require_omap(),
		seq: require_seq(),
		str: require_str()
	};
	module.exports.safeLoad = renamed("safeLoad", "load");
	module.exports.safeLoadAll = renamed("safeLoadAll", "loadAll");
	module.exports.safeDump = renamed("safeDump", "dump");
} });

//#endregion
//#region ../node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/unicode.js
var require_unicode = __commonJS({ "../node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/unicode.js"(exports, module) {
	var Uni$2 = module.exports;
	module.exports.isWhiteSpace = function isWhiteSpace(x) {
		return x === " " || x === "\xA0" || x === "﻿" || x >= "	" && x <= "\r" || x === " " || x >= " " && x <= " " || x === "\u2028" || x === "\u2029" || x === " " || x === " " || x === "　";
	};
	module.exports.isWhiteSpaceJSON = function isWhiteSpaceJSON(x) {
		return x === " " || x === "	" || x === "\n" || x === "\r";
	};
	module.exports.isLineTerminator = function isLineTerminator(x) {
		return x === "\n" || x === "\r" || x === "\u2028" || x === "\u2029";
	};
	module.exports.isLineTerminatorJSON = function isLineTerminatorJSON(x) {
		return x === "\n" || x === "\r";
	};
	module.exports.isIdentifierStart = function isIdentifierStart(x) {
		return x === "$" || x === "_" || x >= "A" && x <= "Z" || x >= "a" && x <= "z" || x >= "" && Uni$2.NonAsciiIdentifierStart.test(x);
	};
	module.exports.isIdentifierPart = function isIdentifierPart(x) {
		return x === "$" || x === "_" || x >= "A" && x <= "Z" || x >= "a" && x <= "z" || x >= "0" && x <= "9" || x >= "" && Uni$2.NonAsciiIdentifierPart.test(x);
	};
	module.exports.NonAsciiIdentifierStart = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F0\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/;
	module.exports.NonAsciiIdentifierPart = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0\u08A2-\u08AC\u08E4-\u08FE\u0900-\u0963\u0966-\u096F\u0971-\u0977\u0979-\u097F\u0981-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C01-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C82\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D02\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F0\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191C\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1D00-\u1DE6\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA697\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A\uAA7B\uAA80-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE26\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/;
} });

//#endregion
//#region ../node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/parse.js
var require_parse$1 = __commonJS({ "../node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/parse.js"(exports, module) {
	var Uni$1 = require_unicode();
	function isHexDigit(x) {
		return x >= "0" && x <= "9" || x >= "A" && x <= "F" || x >= "a" && x <= "f";
	}
	function isOctDigit(x) {
		return x >= "0" && x <= "7";
	}
	function isDecDigit(x) {
		return x >= "0" && x <= "9";
	}
	var unescapeMap = {
		"'": "'",
		"\"": "\"",
		"\\": "\\",
		"b": "\b",
		"f": "\f",
		"n": "\n",
		"r": "\r",
		"t": "	",
		"v": "\v",
		"/": "/"
	};
	function formatError(input, msg, position$1, lineno, column, json5) {
		var result = msg + " at " + (lineno + 1) + ":" + (column + 1), tmppos = position$1 - column - 1, srcline = "", underline = "";
		var isLineTerminator = json5 ? Uni$1.isLineTerminator : Uni$1.isLineTerminatorJSON;
		if (tmppos < position$1 - 70) tmppos = position$1 - 70;
		while (1) {
			var chr = input[++tmppos];
			if (isLineTerminator(chr) || tmppos === input.length) {
				if (position$1 >= tmppos) underline += "^";
				break;
			}
			srcline += chr;
			if (position$1 === tmppos) underline += "^";
else if (position$1 > tmppos) underline += input[tmppos] === "	" ? "	" : " ";
			if (srcline.length > 78) break;
		}
		return result + "\n" + srcline + "\n" + underline;
	}
	function parse$8(input, options) {
		var json5 = false;
		var cjson = false;
		if (options.legacy || options.mode === "json") {} else if (options.mode === "cjson") cjson = true;
else if (options.mode === "json5") json5 = true;
else json5 = true;
		var isLineTerminator = json5 ? Uni$1.isLineTerminator : Uni$1.isLineTerminatorJSON;
		var isWhiteSpace = json5 ? Uni$1.isWhiteSpace : Uni$1.isWhiteSpaceJSON;
		var length = input.length, lineno = 0, linestart = 0, position$1 = 0, stack = [];
		var tokenStart = function() {};
		var tokenEnd = function(v) {
			return v;
		};
		if (options._tokenize) (function() {
			var start = null;
			tokenStart = function() {
				if (start !== null) throw Error("internal error, token overlap");
				start = position$1;
			};
			tokenEnd = function(v, type) {
				if (start != position$1) {
					var hash = {
						raw: input.substr(start, position$1 - start),
						type,
						stack: stack.slice(0)
					};
					if (v !== undefined) hash.value = v;
					options._tokenize.call(null, hash);
				}
				start = null;
				return v;
			};
		})();
		function fail(msg) {
			var column = position$1 - linestart;
			if (!msg) {
				if (position$1 < length) {
					var token = "'" + JSON.stringify(input[position$1]).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, "\"") + "'";
					if (!msg) msg = "Unexpected token " + token;
				} else if (!msg) msg = "Unexpected end of input";
			}
			var error$2 = SyntaxError(formatError(input, msg, position$1, lineno, column, json5));
			error$2.row = lineno + 1;
			error$2.column = column + 1;
			throw error$2;
		}
		function newline(chr) {
			if (chr === "\r" && input[position$1] === "\n") position$1++;
			linestart = position$1;
			lineno++;
		}
		function parseGeneric() {
			var result;
			while (position$1 < length) {
				tokenStart();
				var chr = input[position$1++];
				if (chr === "\"" || chr === "'" && json5) return tokenEnd(parseString(chr), "literal");
else if (chr === "{") {
					tokenEnd(undefined, "separator");
					return parseObject();
				} else if (chr === "[") {
					tokenEnd(undefined, "separator");
					return parseArray();
				} else if (chr === "-" || chr === "." || isDecDigit(chr) || json5 && (chr === "+" || chr === "I" || chr === "N")) return tokenEnd(parseNumber(), "literal");
else if (chr === "n") {
					parseKeyword("null");
					return tokenEnd(null, "literal");
				} else if (chr === "t") {
					parseKeyword("true");
					return tokenEnd(true, "literal");
				} else if (chr === "f") {
					parseKeyword("false");
					return tokenEnd(false, "literal");
				} else {
					position$1--;
					return tokenEnd(undefined);
				}
			}
		}
		function parseKey() {
			var result;
			while (position$1 < length) {
				tokenStart();
				var chr = input[position$1++];
				if (chr === "\"" || chr === "'" && json5) return tokenEnd(parseString(chr), "key");
else if (chr === "{") {
					tokenEnd(undefined, "separator");
					return parseObject();
				} else if (chr === "[") {
					tokenEnd(undefined, "separator");
					return parseArray();
				} else if (chr === "." || isDecDigit(chr)) return tokenEnd(parseNumber(true), "key");
else if (json5 && Uni$1.isIdentifierStart(chr) || chr === "\\" && input[position$1] === "u") {
					var rollback = position$1 - 1;
					var result = parseIdentifier();
					if (result === undefined) {
						position$1 = rollback;
						return tokenEnd(undefined);
					} else return tokenEnd(result, "key");
				} else {
					position$1--;
					return tokenEnd(undefined);
				}
			}
		}
		function skipWhiteSpace() {
			tokenStart();
			while (position$1 < length) {
				var chr = input[position$1++];
				if (isLineTerminator(chr)) {
					position$1--;
					tokenEnd(undefined, "whitespace");
					tokenStart();
					position$1++;
					newline(chr);
					tokenEnd(undefined, "newline");
					tokenStart();
				} else if (isWhiteSpace(chr)) {} else if (chr === "/" && (json5 || cjson) && (input[position$1] === "/" || input[position$1] === "*")) {
					position$1--;
					tokenEnd(undefined, "whitespace");
					tokenStart();
					position$1++;
					skipComment(input[position$1++] === "*");
					tokenEnd(undefined, "comment");
					tokenStart();
				} else {
					position$1--;
					break;
				}
			}
			return tokenEnd(undefined, "whitespace");
		}
		function skipComment(multi) {
			while (position$1 < length) {
				var chr = input[position$1++];
				if (isLineTerminator(chr)) {
					if (!multi) {
						position$1--;
						return;
					}
					newline(chr);
				} else if (chr === "*" && multi) {
					if (input[position$1] === "/") {
						position$1++;
						return;
					}
				} else {}
			}
			if (multi) fail("Unclosed multiline comment");
		}
		function parseKeyword(keyword) {
			var _pos = position$1;
			var len = keyword.length;
			for (var i$2 = 1; i$2 < len; i$2++) {
				if (position$1 >= length || keyword[i$2] != input[position$1]) {
					position$1 = _pos - 1;
					fail();
				}
				position$1++;
			}
		}
		function parseObject() {
			var result = options.null_prototype ? Object.create(null) : {}, empty_object = {}, is_non_empty = false;
			while (position$1 < length) {
				skipWhiteSpace();
				var item1 = parseKey();
				skipWhiteSpace();
				tokenStart();
				var chr = input[position$1++];
				tokenEnd(undefined, "separator");
				if (chr === "}" && item1 === undefined) {
					if (!json5 && is_non_empty) {
						position$1--;
						fail("Trailing comma in object");
					}
					return result;
				} else if (chr === ":" && item1 !== undefined) {
					skipWhiteSpace();
					stack.push(item1);
					var item2 = parseGeneric();
					stack.pop();
					if (item2 === undefined) fail("No value found for key " + item1);
					if (typeof item1 !== "string") {
						if (!json5 || typeof item1 !== "number") fail("Wrong key type: " + item1);
					}
					if ((item1 in empty_object || empty_object[item1] != null) && options.reserved_keys !== "replace") if (options.reserved_keys === "throw") fail("Reserved key: " + item1);
else {}
else {
						if (typeof options.reviver === "function") item2 = options.reviver.call(null, item1, item2);
						if (item2 !== undefined) {
							is_non_empty = true;
							Object.defineProperty(result, item1, {
								value: item2,
								enumerable: true,
								configurable: true,
								writable: true
							});
						}
					}
					skipWhiteSpace();
					tokenStart();
					var chr = input[position$1++];
					tokenEnd(undefined, "separator");
					if (chr === ",") continue;
else if (chr === "}") return result;
else fail();
				} else {
					position$1--;
					fail();
				}
			}
			fail();
		}
		function parseArray() {
			var result = [];
			while (position$1 < length) {
				skipWhiteSpace();
				stack.push(result.length);
				var item = parseGeneric();
				stack.pop();
				skipWhiteSpace();
				tokenStart();
				var chr = input[position$1++];
				tokenEnd(undefined, "separator");
				if (item !== undefined) {
					if (typeof options.reviver === "function") item = options.reviver.call(null, String(result.length), item);
					if (item === undefined) {
						result.length++;
						item = true;
					} else result.push(item);
				}
				if (chr === ",") {
					if (item === undefined) fail("Elisions are not supported");
				} else if (chr === "]") {
					if (!json5 && item === undefined && result.length) {
						position$1--;
						fail("Trailing comma in array");
					}
					return result;
				} else {
					position$1--;
					fail();
				}
			}
		}
		function parseNumber() {
			position$1--;
			var start = position$1, chr = input[position$1++], t$5;
			var to_num = function(is_octal$1) {
				var str = input.substr(start, position$1 - start);
				if (is_octal$1) {
					var result = parseInt(str.replace(/^0o?/, ""), 8);
				} else {
					var result = Number(str);
				}
				if (Number.isNaN(result)) {
					position$1--;
					fail("Bad numeric literal - \"" + input.substr(start, position$1 - start + 1) + "\"");
				} else if (!json5 && !str.match(/^-?(0|[1-9][0-9]*)(\.[0-9]+)?(e[+-]?[0-9]+)?$/i)) {
					position$1--;
					fail("Non-json numeric literal - \"" + input.substr(start, position$1 - start + 1) + "\"");
				} else return result;
			};
			if (chr === "-" || chr === "+" && json5) chr = input[position$1++];
			if (chr === "N" && json5) {
				parseKeyword("NaN");
				return NaN;
			}
			if (chr === "I" && json5) {
				parseKeyword("Infinity");
				return to_num();
			}
			if (chr >= "1" && chr <= "9") {
				while (position$1 < length && isDecDigit(input[position$1])) position$1++;
				chr = input[position$1++];
			}
			if (chr === "0") {
				chr = input[position$1++];
				var is_octal = chr === "o" || chr === "O" || isOctDigit(chr);
				var is_hex = chr === "x" || chr === "X";
				if (json5 && (is_octal || is_hex)) {
					while (position$1 < length && (is_hex ? isHexDigit : isOctDigit)(input[position$1])) position$1++;
					var sign = 1;
					if (input[start] === "-") {
						sign = -1;
						start++;
					} else if (input[start] === "+") start++;
					return sign * to_num(is_octal);
				}
			}
			if (chr === ".") {
				while (position$1 < length && isDecDigit(input[position$1])) position$1++;
				chr = input[position$1++];
			}
			if (chr === "e" || chr === "E") {
				chr = input[position$1++];
				if (chr === "-" || chr === "+") position$1++;
				while (position$1 < length && isDecDigit(input[position$1])) position$1++;
				chr = input[position$1++];
			}
			position$1--;
			return to_num();
		}
		function parseIdentifier() {
			position$1--;
			var result = "";
			while (position$1 < length) {
				var chr = input[position$1++];
				if (chr === "\\" && input[position$1] === "u" && isHexDigit(input[position$1 + 1]) && isHexDigit(input[position$1 + 2]) && isHexDigit(input[position$1 + 3]) && isHexDigit(input[position$1 + 4])) {
					chr = String.fromCharCode(parseInt(input.substr(position$1 + 1, 4), 16));
					position$1 += 5;
				}
				if (result.length) if (Uni$1.isIdentifierPart(chr)) result += chr;
else {
					position$1--;
					return result;
				}
else if (Uni$1.isIdentifierStart(chr)) result += chr;
else return undefined;
			}
			fail();
		}
		function parseString(endChar) {
			var result = "";
			while (position$1 < length) {
				var chr = input[position$1++];
				if (chr === endChar) return result;
else if (chr === "\\") {
					if (position$1 >= length) fail();
					chr = input[position$1++];
					if (unescapeMap[chr] && (json5 || chr != "v" && chr != "'")) result += unescapeMap[chr];
else if (json5 && isLineTerminator(chr)) newline(chr);
else if (chr === "u" || chr === "x" && json5) {
						var off = chr === "u" ? 4 : 2;
						for (var i$2 = 0; i$2 < off; i$2++) {
							if (position$1 >= length) fail();
							if (!isHexDigit(input[position$1])) fail("Bad escape sequence");
							position$1++;
						}
						result += String.fromCharCode(parseInt(input.substr(position$1 - off, off), 16));
					} else if (json5 && isOctDigit(chr)) {
						if (chr < "4" && isOctDigit(input[position$1]) && isOctDigit(input[position$1 + 1])) {
							var digits = 3;
						} else if (isOctDigit(input[position$1])) {
							var digits = 2;
						} else {
							var digits = 1;
						}
						position$1 += digits - 1;
						result += String.fromCharCode(parseInt(input.substr(position$1 - digits, digits), 8));
					} else if (json5) result += chr;
else {
						position$1--;
						fail();
					}
				} else if (isLineTerminator(chr)) fail();
else {
					if (!json5 && chr.charCodeAt(0) < 32) {
						position$1--;
						fail("Unexpected control character");
					}
					result += chr;
				}
			}
			fail();
		}
		skipWhiteSpace();
		var return_value = parseGeneric();
		if (return_value !== undefined || position$1 < length) {
			skipWhiteSpace();
			if (position$1 >= length) {
				if (typeof options.reviver === "function") return_value = options.reviver.call(null, "", return_value);
				return return_value;
			} else fail();
		} else if (position$1) fail("No data, only a whitespace");
else fail("No data, empty input");
	}
	module.exports.parse = function parseJSON(input, options) {
		if (typeof options === "function") options = { reviver: options };
		if (input === undefined) return undefined;
		if (typeof input !== "string") input = String(input);
		if (options == null) options = {};
		if (options.reserved_keys == null) options.reserved_keys = "ignore";
		if (options.reserved_keys === "throw" || options.reserved_keys === "ignore") {
			if (options.null_prototype == null) options.null_prototype = true;
		}
		try {
			return parse$8(input, options);
		} catch (err) {
			if (err instanceof SyntaxError && err.row != null && err.column != null) {
				var old_err = err;
				err = SyntaxError(old_err.message);
				err.column = old_err.column;
				err.row = old_err.row;
			}
			throw err;
		}
	};
	module.exports.tokenize = function tokenizeJSON(input, options) {
		if (options == null) options = {};
		options._tokenize = function(smth) {
			if (options._addstack) smth.stack.unshift.apply(smth.stack, options._addstack);
			tokens.push(smth);
		};
		var tokens = [];
		tokens.data = module.exports.parse(input, options);
		return tokens;
	};
} });

//#endregion
//#region ../node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/stringify.js
var require_stringify = __commonJS({ "../node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/stringify.js"(exports, module) {
	var Uni = require_unicode();
	if (!function f() {}.name) Object.defineProperty(function() {}.constructor.prototype, "name", { get: function() {
		var name = this.toString().match(/^\s*function\s*(\S*)\s*\(/)[1];
		Object.defineProperty(this, "name", { value: name });
		return name;
	} });
	var special_chars = {
		0: "\\0",
		8: "\\b",
		9: "\\t",
		10: "\\n",
		11: "\\v",
		12: "\\f",
		13: "\\r",
		92: "\\\\"
	};
	var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
	var escapable = /[\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/;
	function _stringify(object, options, recursiveLvl, currentKey) {
		var json5 = options.mode === "json5" || !options.mode;
		function indent(str$1, add$1) {
			var prefix$1 = options._prefix ? options._prefix : "";
			if (!options.indent) return prefix$1 + str$1;
			var result = "";
			var count = recursiveLvl + (add$1 || 0);
			for (var i$2 = 0; i$2 < count; i$2++) result += options.indent;
			return prefix$1 + result + str$1 + (add$1 ? "\n" : "");
		}
		function _stringify_key(key) {
			if (options.quote_keys) return _stringify_str(key);
			if (String(Number(key)) == key && key[0] != "-") return key;
			if (key == "") return _stringify_str(key);
			var result = "";
			for (var i$2 = 0; i$2 < key.length; i$2++) {
				if (i$2 > 0) {
					if (!Uni.isIdentifierPart(key[i$2])) return _stringify_str(key);
				} else if (!Uni.isIdentifierStart(key[i$2])) return _stringify_str(key);
				var chr = key.charCodeAt(i$2);
				if (options.ascii) if (chr < 128) result += key[i$2];
else result += "\\u" + ("0000" + chr.toString(16)).slice(-4);
else if (escapable.exec(key[i$2])) result += "\\u" + ("0000" + chr.toString(16)).slice(-4);
else result += key[i$2];
			}
			return result;
		}
		function _stringify_str(key) {
			var quote = options.quote;
			var quoteChr = quote.charCodeAt(0);
			var result = "";
			for (var i$2 = 0; i$2 < key.length; i$2++) {
				var chr = key.charCodeAt(i$2);
				if (chr < 16) if (chr === 0 && json5) result += "\\0";
else if (chr >= 8 && chr <= 13 && (json5 || chr !== 11)) result += special_chars[chr];
else if (json5) result += "\\x0" + chr.toString(16);
else result += "\\u000" + chr.toString(16);
else if (chr < 32) if (json5) result += "\\x" + chr.toString(16);
else result += "\\u00" + chr.toString(16);
else if (chr >= 32 && chr < 128) if (chr === 47 && i$2 && key[i$2 - 1] === "<") result += "\\" + key[i$2];
else if (chr === 92) result += "\\\\";
else if (chr === quoteChr) result += "\\" + quote;
else result += key[i$2];
else if (options.ascii || Uni.isLineTerminator(key[i$2]) || escapable.exec(key[i$2])) if (chr < 256) if (json5) result += "\\x" + chr.toString(16);
else result += "\\u00" + chr.toString(16);
else if (chr < 4096) result += "\\u0" + chr.toString(16);
else if (chr < 65536) result += "\\u" + chr.toString(16);
else throw Error("weird codepoint");
else result += key[i$2];
			}
			return quote + result + quote;
		}
		function _stringify_object() {
			if (object === null) return "null";
			var result = [], len = 0, braces$2;
			if (Array.isArray(object)) {
				braces$2 = "[]";
				for (var i$2 = 0; i$2 < object.length; i$2++) {
					var s = _stringify(object[i$2], options, recursiveLvl + 1, String(i$2));
					if (s === undefined) s = "null";
					len += s.length + 2;
					result.push(s + ",");
				}
			} else {
				braces$2 = "{}";
				var fn = function(key) {
					var t$5 = _stringify(object[key], options, recursiveLvl + 1, key);
					if (t$5 !== undefined) {
						t$5 = _stringify_key(key) + ":" + (options.indent ? " " : "") + t$5 + ",";
						len += t$5.length + 1;
						result.push(t$5);
					}
				};
				if (Array.isArray(options.replacer)) {
					for (var i$2 = 0; i$2 < options.replacer.length; i$2++) if (hasOwnProperty$1.call(object, options.replacer[i$2])) fn(options.replacer[i$2]);
				} else {
					var keys = Object.keys(object);
					if (options.sort_keys) keys = keys.sort(typeof options.sort_keys === "function" ? options.sort_keys : undefined);
					keys.forEach(fn);
				}
			}
			len -= 2;
			if (options.indent && (len > options._splitMax - recursiveLvl * options.indent.length || len > options._splitMin)) {
				if (options.no_trailing_comma && result.length) result[result.length - 1] = result[result.length - 1].substring(0, result[result.length - 1].length - 1);
				var innerStuff = result.map(function(x) {
					return indent(x, 1);
				}).join("");
				return braces$2[0] + (options.indent ? "\n" : "") + innerStuff + indent(braces$2[1]);
			} else {
				if (result.length) result[result.length - 1] = result[result.length - 1].substring(0, result[result.length - 1].length - 1);
				var innerStuff = result.join(options.indent ? " " : "");
				return braces$2[0] + innerStuff + braces$2[1];
			}
		}
		function _stringify_nonobject(object$1) {
			if (typeof options.replacer === "function") object$1 = options.replacer.call(null, currentKey, object$1);
			switch (typeof object$1) {
				case "string": return _stringify_str(object$1);
				case "number":
					if (object$1 === 0 && 1 / object$1 < 0) return "-0";
					if (!json5 && !Number.isFinite(object$1)) return "null";
					return object$1.toString();
				case "boolean": return object$1.toString();
				case "undefined": return undefined;
				case "function":
				default: return JSON.stringify(object$1);
			}
		}
		if (options._stringify_key) return _stringify_key(object);
		if (typeof object === "object") {
			if (object === null) return "null";
			var str;
			if (typeof (str = object.toJSON5) === "function" && options.mode !== "json") object = str.call(object, currentKey);
else if (typeof (str = object.toJSON) === "function") object = str.call(object, currentKey);
			if (object === null) return "null";
			if (typeof object !== "object") return _stringify_nonobject(object);
			if (object.constructor === Number || object.constructor === Boolean || object.constructor === String) {
				object = object.valueOf();
				return _stringify_nonobject(object);
			} else if (object.constructor === Date) return _stringify_nonobject(object.toISOString());
else {
				if (typeof options.replacer === "function") {
					object = options.replacer.call(null, currentKey, object);
					if (typeof object !== "object") return _stringify_nonobject(object);
				}
				return _stringify_object(object);
			}
		} else return _stringify_nonobject(object);
	}
	module.exports.stringify = function stringifyJSON(object, options, _space) {
		if (typeof options === "function" || Array.isArray(options)) options = { replacer: options };
else if (typeof options === "object" && options !== null) {} else options = {};
		if (_space != null) options.indent = _space;
		if (options.indent == null) options.indent = "	";
		if (options.quote == null) options.quote = "'";
		if (options.ascii == null) options.ascii = false;
		if (options.mode == null) options.mode = "json5";
		if (options.mode === "json" || options.mode === "cjson") {
			options.quote = "\"";
			options.no_trailing_comma = true;
			options.quote_keys = true;
		}
		if (typeof options.indent === "object") {
			if (options.indent.constructor === Number || options.indent.constructor === Boolean || options.indent.constructor === String) options.indent = options.indent.valueOf();
		}
		if (typeof options.indent === "number") if (options.indent >= 0) options.indent = Array(Math.min(~~options.indent, 10) + 1).join(" ");
else options.indent = false;
else if (typeof options.indent === "string") options.indent = options.indent.substr(0, 10);
		if (options._splitMin == null) options._splitMin = 50;
		if (options._splitMax == null) options._splitMax = 70;
		return _stringify(object, options, 0, "");
	};
} });

//#endregion
//#region ../node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/analyze.js
var require_analyze = __commonJS({ "../node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/analyze.js"(exports, module) {
	var tokenize$1 = require_parse$1().tokenize;
	module.exports.analyze = function analyzeJSON(input, options) {
		if (options == null) options = {};
		if (!Array.isArray(input)) input = tokenize$1(input, options);
		var result = {
			has_whitespace: false,
			has_comments: false,
			has_newlines: false,
			has_trailing_comma: false,
			indent: "",
			newline: "\n",
			quote: "\"",
			quote_keys: true
		};
		var stats = {
			indent: {},
			newline: {},
			quote: {}
		};
		for (var i$2 = 0; i$2 < input.length; i$2++) {
			if (input[i$2].type === "newline") {
				if (input[i$2 + 1] && input[i$2 + 1].type === "whitespace") {
					if (input[i$2 + 1].raw[0] === "	") stats.indent["	"] = (stats.indent["	"] || 0) + 1;
					if (input[i$2 + 1].raw.match(/^\x20+$/)) {
						var ws_len = input[i$2 + 1].raw.length;
						var indent_len = input[i$2 + 1].stack.length + 1;
						if (ws_len % indent_len === 0) {
							var t$5 = Array(ws_len / indent_len + 1).join(" ");
							stats.indent[t$5] = (stats.indent[t$5] || 0) + 1;
						}
					}
				}
				stats.newline[input[i$2].raw] = (stats.newline[input[i$2].raw] || 0) + 1;
			}
			if (input[i$2].type === "newline") result.has_newlines = true;
			if (input[i$2].type === "whitespace") result.has_whitespace = true;
			if (input[i$2].type === "comment") result.has_comments = true;
			if (input[i$2].type === "key") {
				if (input[i$2].raw[0] !== "\"" && input[i$2].raw[0] !== "'") result.quote_keys = false;
			}
			if (input[i$2].type === "key" || input[i$2].type === "literal") {
				if (input[i$2].raw[0] === "\"" || input[i$2].raw[0] === "'") stats.quote[input[i$2].raw[0]] = (stats.quote[input[i$2].raw[0]] || 0) + 1;
			}
			if (input[i$2].type === "separator" && input[i$2].raw === ",") for (var j = i$2 + 1; j < input.length; j++) {
				if (input[j].type === "literal" || input[j].type === "key") break;
				if (input[j].type === "separator") result.has_trailing_comma = true;
			}
		}
		for (var k in stats) if (Object.keys(stats[k]).length) result[k] = Object.keys(stats[k]).reduce(function(a, b) {
			return stats[k][a] > stats[k][b] ? a : b;
		});
		return result;
	};
} });

//#endregion
//#region ../node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/document.js
var require_document = __commonJS({ "../node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/document.js"(exports, module) {
	var assert = require("assert");
	var tokenize = require_parse$1().tokenize;
	var stringify = require_stringify().stringify;
	var analyze = require_analyze().analyze;
	function isObject(x) {
		return typeof x === "object" && x !== null;
	}
	function value_to_tokenlist(value, stack, options, is_key, indent) {
		options = Object.create(options);
		options._stringify_key = !!is_key;
		if (indent) options._prefix = indent.prefix.map(function(x) {
			return x.raw;
		}).join("");
		if (options._splitMin == null) options._splitMin = 0;
		if (options._splitMax == null) options._splitMax = 0;
		var stringified = stringify(value, options);
		if (is_key) return [{
			raw: stringified,
			type: "key",
			stack,
			value
		}];
		options._addstack = stack;
		var result = tokenize(stringified, { _addstack: stack });
		result.data = null;
		return result;
	}
	function arg_to_path(path$72) {
		if (typeof path$72 === "number") path$72 = String(path$72);
		if (path$72 === "") path$72 = [];
		if (typeof path$72 === "string") path$72 = path$72.split(".");
		if (!Array.isArray(path$72)) throw Error("Invalid path type, string or array expected");
		return path$72;
	}
	function find_element_in_tokenlist(element, lvl, tokens, begin, end) {
		while (tokens[begin].stack[lvl] != element) if (begin++ >= end) return false;
		while (tokens[end].stack[lvl] != element) if (end-- < begin) return false;
		return [begin, end];
	}
	function is_whitespace(token_type) {
		return token_type === "whitespace" || token_type === "newline" || token_type === "comment";
	}
	function find_first_non_ws_token(tokens, begin, end) {
		while (is_whitespace(tokens[begin].type)) if (begin++ >= end) return false;
		return begin;
	}
	function find_last_non_ws_token(tokens, begin, end) {
		while (is_whitespace(tokens[end].type)) if (end-- < begin) return false;
		return end;
	}
	function detect_indent_style(tokens, is_array, begin, end, level) {
		var result = {
			sep1: [],
			sep2: [],
			suffix: [],
			prefix: [],
			newline: []
		};
		if (tokens[end].type === "separator" && tokens[end].stack.length !== level + 1 && tokens[end].raw !== ",") return result;
		if (tokens[end].type === "separator") end = find_last_non_ws_token(tokens, begin, end - 1);
		if (end === false) return result;
		while (tokens[end].stack.length > level) end--;
		if (!is_array) {
			while (is_whitespace(tokens[end].type)) {
				if (end < begin) return result;
				if (tokens[end].type === "whitespace") result.sep2.unshift(tokens[end]);
else return result;
				end--;
			}
			assert.equal(tokens[end].type, "separator");
			assert.equal(tokens[end].raw, ":");
			while (is_whitespace(tokens[--end].type)) {
				if (end < begin) return result;
				if (tokens[end].type === "whitespace") result.sep1.unshift(tokens[end]);
else return result;
			}
			assert.equal(tokens[end].type, "key");
			end--;
		}
		while (is_whitespace(tokens[end].type)) {
			if (end < begin) return result;
			if (tokens[end].type === "whitespace") result.prefix.unshift(tokens[end]);
else if (tokens[end].type === "newline") {
				result.newline.unshift(tokens[end]);
				return result;
			} else return result;
			end--;
		}
		return result;
	}
	function Document(text$3, options) {
		var self$1 = Object.create(Document.prototype);
		if (options == null) options = {};
		var tokens = self$1._tokens = tokenize(text$3, options);
		self$1._data = tokens.data;
		tokens.data = null;
		self$1._options = options;
		var stats = analyze(text$3, options);
		if (options.indent == null) options.indent = stats.indent;
		if (options.quote == null) options.quote = stats.quote;
		if (options.quote_keys == null) options.quote_keys = stats.quote_keys;
		if (options.no_trailing_comma == null) options.no_trailing_comma = !stats.has_trailing_comma;
		return self$1;
	}
	function check_if_can_be_placed(key, object, is_unset) {
		function error$2(add$1) {
			return Error("You can't " + (is_unset ? "unset" : "set") + " key '" + key + "'" + add$1);
		}
		if (!isObject(object)) throw error$2(" of an non-object");
		if (Array.isArray(object)) if (String(key).match(/^\d+$/)) {
			key = Number(String(key));
			if (object.length < key || is_unset && object.length === key) throw error$2(", out of bounds");
else if (is_unset && object.length !== key + 1) throw error$2(" in the middle of an array");
else return true;
		} else throw error$2(" of an array");
else return true;
	}
	Document.prototype.set = function(path$72, value) {
		path$72 = arg_to_path(path$72);
		if (path$72.length === 0) {
			if (value === undefined) throw Error("can't remove root document");
			this._data = value;
			var new_key = false;
		} else {
			var data = this._data;
			for (var i$2 = 0; i$2 < path$72.length - 1; i$2++) {
				check_if_can_be_placed(path$72[i$2], data, false);
				data = data[path$72[i$2]];
			}
			if (i$2 === path$72.length - 1) check_if_can_be_placed(path$72[i$2], data, value === undefined);
			var new_key = !(path$72[i$2] in data);
			if (value === undefined) if (Array.isArray(data)) data.pop();
else delete data[path$72[i$2]];
else data[path$72[i$2]] = value;
		}
		if (!this._tokens.length) this._tokens = [{
			raw: "",
			type: "literal",
			stack: [],
			value: undefined
		}];
		var position$1 = [find_first_non_ws_token(this._tokens, 0, this._tokens.length - 1), find_last_non_ws_token(this._tokens, 0, this._tokens.length - 1)];
		for (var i$2 = 0; i$2 < path$72.length - 1; i$2++) {
			position$1 = find_element_in_tokenlist(path$72[i$2], i$2, this._tokens, position$1[0], position$1[1]);
			if (position$1 == false) throw Error("internal error, please report this");
		}
		if (path$72.length === 0) {
			var newtokens = value_to_tokenlist(value, path$72, this._options);
		} else if (!new_key) {
			var pos_old = position$1;
			position$1 = find_element_in_tokenlist(path$72[i$2], i$2, this._tokens, position$1[0], position$1[1]);
			if (value === undefined && position$1 !== false) {
				var newtokens = [];
				if (!Array.isArray(data)) {
					var pos2 = find_last_non_ws_token(this._tokens, pos_old[0], position$1[0] - 1);
					assert.equal(this._tokens[pos2].type, "separator");
					assert.equal(this._tokens[pos2].raw, ":");
					position$1[0] = pos2;
					var pos2 = find_last_non_ws_token(this._tokens, pos_old[0], position$1[0] - 1);
					assert.equal(this._tokens[pos2].type, "key");
					assert.equal(this._tokens[pos2].value, path$72[path$72.length - 1]);
					position$1[0] = pos2;
				}
				var pos2 = find_last_non_ws_token(this._tokens, pos_old[0], position$1[0] - 1);
				assert.equal(this._tokens[pos2].type, "separator");
				if (this._tokens[pos2].raw === ",") position$1[0] = pos2;
else {
					pos2 = find_first_non_ws_token(this._tokens, position$1[1] + 1, pos_old[1]);
					assert.equal(this._tokens[pos2].type, "separator");
					if (this._tokens[pos2].raw === ",") position$1[1] = pos2;
				}
			} else {
				var indent = pos2 !== false ? detect_indent_style(this._tokens, Array.isArray(data), pos_old[0], position$1[1] - 1, i$2) : {};
				var newtokens = value_to_tokenlist(value, path$72, this._options, false, indent);
			}
		} else {
			var path_1 = path$72.slice(0, i$2);
			var pos2 = find_last_non_ws_token(this._tokens, position$1[0] + 1, position$1[1] - 1);
			assert(pos2 !== false);
			var indent = pos2 !== false ? detect_indent_style(this._tokens, Array.isArray(data), position$1[0] + 1, pos2, i$2) : {};
			var newtokens = value_to_tokenlist(value, path$72, this._options, false, indent);
			var prefix$1 = [];
			if (indent.newline && indent.newline.length) prefix$1 = prefix$1.concat(indent.newline);
			if (indent.prefix && indent.prefix.length) prefix$1 = prefix$1.concat(indent.prefix);
			if (!Array.isArray(data)) {
				prefix$1 = prefix$1.concat(value_to_tokenlist(path$72[path$72.length - 1], path_1, this._options, true));
				if (indent.sep1 && indent.sep1.length) prefix$1 = prefix$1.concat(indent.sep1);
				prefix$1.push({
					raw: ":",
					type: "separator",
					stack: path_1
				});
				if (indent.sep2 && indent.sep2.length) prefix$1 = prefix$1.concat(indent.sep2);
			}
			newtokens.unshift.apply(newtokens, prefix$1);
			if (this._tokens[pos2].type === "separator" && this._tokens[pos2].stack.length === path$72.length - 1) {
				if (this._tokens[pos2].raw === ",") newtokens.push({
					raw: ",",
					type: "separator",
					stack: path_1
				});
			} else newtokens.unshift({
				raw: ",",
				type: "separator",
				stack: path_1
			});
			if (indent.suffix && indent.suffix.length) newtokens.push.apply(newtokens, indent.suffix);
			assert.equal(this._tokens[position$1[1]].type, "separator");
			position$1[0] = pos2 + 1;
			position$1[1] = pos2;
		}
		newtokens.unshift(position$1[1] - position$1[0] + 1);
		newtokens.unshift(position$1[0]);
		this._tokens.splice.apply(this._tokens, newtokens);
		return this;
	};
	Document.prototype.unset = function(path$72) {
		return this.set(path$72, undefined);
	};
	Document.prototype.get = function(path$72) {
		path$72 = arg_to_path(path$72);
		var data = this._data;
		for (var i$2 = 0; i$2 < path$72.length; i$2++) {
			if (!isObject(data)) return undefined;
			data = data[path$72[i$2]];
		}
		return data;
	};
	Document.prototype.has = function(path$72) {
		path$72 = arg_to_path(path$72);
		var data = this._data;
		for (var i$2 = 0; i$2 < path$72.length; i$2++) {
			if (!isObject(data)) return false;
			data = data[path$72[i$2]];
		}
		return data !== undefined;
	};
	Document.prototype.update = function(value) {
		var self$1 = this;
		change([], self$1._data, value);
		return self$1;
		function change(path$72, old_data, new_data) {
			if (!isObject(new_data) || !isObject(old_data)) {
				if (new_data !== old_data) self$1.set(path$72, new_data);
			} else if (Array.isArray(new_data) != Array.isArray(old_data)) self$1.set(path$72, new_data);
else if (Array.isArray(new_data)) if (new_data.length > old_data.length) for (var i$2 = 0; i$2 < new_data.length; i$2++) {
				path$72.push(String(i$2));
				change(path$72, old_data[i$2], new_data[i$2]);
				path$72.pop();
			}
else for (var i$2 = old_data.length - 1; i$2 >= 0; i$2--) {
				path$72.push(String(i$2));
				change(path$72, old_data[i$2], new_data[i$2]);
				path$72.pop();
			}
else {
				for (var i$2 in new_data) {
					path$72.push(String(i$2));
					change(path$72, old_data[i$2], new_data[i$2]);
					path$72.pop();
				}
				for (var i$2 in old_data) {
					if (i$2 in new_data) continue;
					path$72.push(String(i$2));
					change(path$72, old_data[i$2], new_data[i$2]);
					path$72.pop();
				}
			}
		}
	};
	Document.prototype.toString = function() {
		return this._tokens.map(function(x) {
			return x.raw;
		}).join("");
	};
	module.exports.Document = Document;
	module.exports.update = function updateJSON(source, new_value, options) {
		return Document(source, options).update(new_value).toString();
	};
} });

//#endregion
//#region ../node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/utils.js
var require_utils = __commonJS({ "../node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/utils.js"(exports, module) {
	var FS = require("fs");
	var jju$2 = require_jju();
	module.exports.register = function() {
		var r = require, e = "extensions";
		r[e][".json5"] = function(m, f) {
			m.exports = jju$2.parse(FS.readFileSync(f, "utf8"));
		};
	};
	module.exports.patch_JSON_parse = function() {
		var _parse = JSON.parse;
		JSON.parse = function(text$3, rev) {
			try {
				return _parse(text$3, rev);
			} catch (err) {
				require_jju().parse(text$3, {
					mode: "json",
					legacy: true,
					reviver: rev,
					reserved_keys: "replace",
					null_prototype: false
				});
				throw err;
			}
		};
	};
	module.exports.middleware = function() {
		return function(req, res, next) {
			throw Error("this function is removed, use express-json5 instead");
		};
	};
} });

//#endregion
//#region ../node_modules/.pnpm/jju@1.4.0/node_modules/jju/index.js
var require_jju = __commonJS({ "../node_modules/.pnpm/jju@1.4.0/node_modules/jju/index.js"(exports, module) {
	module.exports.__defineGetter__("parse", function() {
		return require_parse$1().parse;
	});
	module.exports.__defineGetter__("stringify", function() {
		return require_stringify().stringify;
	});
	module.exports.__defineGetter__("tokenize", function() {
		return require_parse$1().tokenize;
	});
	module.exports.__defineGetter__("update", function() {
		return require_document().update;
	});
	module.exports.__defineGetter__("analyze", function() {
		return require_analyze().analyze;
	});
	module.exports.__defineGetter__("utils", function() {
		return require_utils();
	});
} });

//#endregion
//#region ../node_modules/.pnpm/@manypkg+tools@1.1.2/node_modules/@manypkg/tools/dist/manypkg-tools.cjs.prod.js
var require_manypkg_tools_cjs_prod = __commonJS({ "../node_modules/.pnpm/@manypkg+tools@1.1.2/node_modules/@manypkg/tools/dist/manypkg-tools.cjs.prod.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var path$6 = require("path");
	var fsp$3 = require("fs/promises");
	var glob$1 = require_out();
	var fs$4 = require("fs");
	var yaml$1 = require_js_yaml();
	var jju$1 = require_jju();
	function _interopDefault$5(e) {
		return e && e.__esModule ? e : { "default": e };
	}
	var path__default$5 = /*#__PURE__*/ _interopDefault$5(path$6);
	var fsp__default$3 = /*#__PURE__*/ _interopDefault$5(fsp$3);
	var glob__default$1 = /*#__PURE__*/ _interopDefault$5(glob$1);
	var fs__default$3 = /*#__PURE__*/ _interopDefault$5(fs$4);
	var yaml__default$1 = /*#__PURE__*/ _interopDefault$5(yaml$1);
	var jju__default$1 = /*#__PURE__*/ _interopDefault$5(jju$1);
	var InvalidMonorepoError$1 = class extends Error {};
	/**
	* A monorepo tool is a specific implementation of monorepos, whether provided built-in
	* by a package manager or via some other wrapper.
	*
	* Each tool defines a common interface for detecting whether a directory is
	* a valid instance of this type of monorepo, how to retrieve the packages, etc.
	*/
	const readJson$1 = async (directory, file$2) => JSON.parse(await fsp__default$3["default"].readFile(path__default$5["default"].join(directory, file$2), "utf-8"));
	const readJsonSync$1 = (directory, file$2) => JSON.parse(fs__default$3["default"].readFileSync(path__default$5["default"].join(directory, file$2), "utf-8"));
	/**
	* This internal method takes a list of one or more directory globs and the absolute path
	* to the root directory, and returns a list of all matching relative directories that
	* contain a `package.json` file.
	*/
	async function expandPackageGlobs$1(packageGlobs, directory) {
		const relativeDirectories = await glob__default$1["default"](packageGlobs, {
			cwd: directory,
			onlyDirectories: true,
			ignore: ["**/node_modules"]
		});
		const directories = relativeDirectories.map((p) => path__default$5["default"].resolve(directory, p)).sort();
		const discoveredPackages = await Promise.all(directories.map((dir) => fsp__default$3["default"].readFile(path__default$5["default"].join(dir, "package.json"), "utf-8").catch((err) => {
			if (err && err.code === "ENOENT") return undefined;
			throw err;
		}).then((result) => {
			if (result) return {
				dir: path__default$5["default"].resolve(dir),
				relativeDir: path__default$5["default"].relative(directory, dir),
				packageJson: JSON.parse(result)
			};
		})));
		return discoveredPackages.filter((pkg) => pkg);
	}
	/**
	* A synchronous version of {@link expandPackagesGlobs}.
	*/
	function expandPackageGlobsSync$1(packageGlobs, directory) {
		const relativeDirectories = glob__default$1["default"].sync(packageGlobs, {
			cwd: directory,
			onlyDirectories: true,
			ignore: ["**/node_modules"]
		});
		const directories = relativeDirectories.map((p) => path__default$5["default"].resolve(directory, p)).sort();
		const discoveredPackages = directories.map((dir) => {
			try {
				const packageJson = readJsonSync$1(dir, "package.json");
				return {
					dir: path__default$5["default"].resolve(dir),
					relativeDir: path__default$5["default"].relative(directory, dir),
					packageJson
				};
			} catch (err) {
				if (err && err.code === "ENOENT") return undefined;
				throw err;
			}
		});
		return discoveredPackages.filter((pkg) => pkg);
	}
	const BoltTool$1 = {
		type: "bolt",
		async isMonorepoRoot(directory) {
			try {
				const pkgJson = await readJson$1(directory, "package.json");
				if (pkgJson.bolt && pkgJson.bolt.workspaces) return true;
			} catch (err) {
				if (err && err.code === "ENOENT") return false;
				throw err;
			}
			return false;
		},
		isMonorepoRootSync(directory) {
			try {
				const pkgJson = readJsonSync$1(directory, "package.json");
				if (pkgJson.bolt && pkgJson.bolt.workspaces) return true;
			} catch (err) {
				if (err && err.code === "ENOENT") return false;
				throw err;
			}
			return false;
		},
		async getPackages(directory) {
			const rootDir = path__default$5["default"].resolve(directory);
			try {
				const pkgJson = await readJson$1(rootDir, "package.json");
				if (!pkgJson.bolt || !pkgJson.bolt.workspaces) throw new InvalidMonorepoError$1(`Directory ${rootDir} is not a valid ${BoltTool$1.type} monorepo root: missing bolt.workspaces entry`);
				const packageGlobs = pkgJson.bolt.workspaces;
				return {
					tool: BoltTool$1,
					packages: await expandPackageGlobs$1(packageGlobs, rootDir),
					rootPackage: {
						dir: rootDir,
						relativeDir: ".",
						packageJson: pkgJson
					},
					rootDir
				};
			} catch (err) {
				if (err && err.code === "ENOENT") throw new InvalidMonorepoError$1(`Directory ${rootDir} is not a valid ${BoltTool$1.type} monorepo root: missing package.json`);
				throw err;
			}
		},
		getPackagesSync(directory) {
			const rootDir = path__default$5["default"].resolve(directory);
			try {
				const pkgJson = readJsonSync$1(rootDir, "package.json");
				if (!pkgJson.bolt || !pkgJson.bolt.workspaces) throw new InvalidMonorepoError$1(`Directory ${directory} is not a valid ${BoltTool$1.type} monorepo root: missing bolt.workspaces entry`);
				const packageGlobs = pkgJson.bolt.workspaces;
				return {
					tool: BoltTool$1,
					packages: expandPackageGlobsSync$1(packageGlobs, rootDir),
					rootPackage: {
						dir: rootDir,
						relativeDir: ".",
						packageJson: pkgJson
					},
					rootDir
				};
			} catch (err) {
				if (err && err.code === "ENOENT") throw new InvalidMonorepoError$1(`Directory ${rootDir} is not a valid ${BoltTool$1.type} monorepo root: missing package.json`);
				throw err;
			}
		}
	};
	const LernaTool$1 = {
		type: "lerna",
		async isMonorepoRoot(directory) {
			try {
				const lernaJson = await readJson$1(directory, "lerna.json");
				if (lernaJson.useWorkspaces !== true) return true;
			} catch (err) {
				if (err && err.code === "ENOENT") return false;
				throw err;
			}
			return false;
		},
		isMonorepoRootSync(directory) {
			try {
				const lernaJson = readJsonSync$1(directory, "lerna.json");
				if (lernaJson.useWorkspaces !== true) return true;
			} catch (err) {
				if (err && err.code === "ENOENT") return false;
				throw err;
			}
			return false;
		},
		async getPackages(directory) {
			const rootDir = path__default$5["default"].resolve(directory);
			try {
				const lernaJson = await readJson$1(rootDir, "lerna.json");
				const pkgJson = await readJson$1(rootDir, "package.json");
				const packageGlobs = lernaJson.packages || ["packages/*"];
				return {
					tool: LernaTool$1,
					packages: await expandPackageGlobs$1(packageGlobs, rootDir),
					rootPackage: {
						dir: rootDir,
						relativeDir: ".",
						packageJson: pkgJson
					},
					rootDir
				};
			} catch (err) {
				if (err && err.code === "ENOENT") throw new InvalidMonorepoError$1(`Directory ${rootDir} is not a valid ${LernaTool$1.type} monorepo root: missing lerna.json and/or package.json`);
				throw err;
			}
		},
		getPackagesSync(directory) {
			const rootDir = path__default$5["default"].resolve(directory);
			try {
				const lernaJson = readJsonSync$1(rootDir, "lerna.json");
				const pkgJson = readJsonSync$1(rootDir, "package.json");
				const packageGlobs = lernaJson.packages || ["packages/*"];
				return {
					tool: LernaTool$1,
					packages: expandPackageGlobsSync$1(packageGlobs, rootDir),
					rootPackage: {
						dir: rootDir,
						relativeDir: ".",
						packageJson: pkgJson
					},
					rootDir
				};
			} catch (err) {
				if (err && err.code === "ENOENT") throw new InvalidMonorepoError$1(`Directory ${rootDir} is not a valid ${LernaTool$1.type} monorepo root: missing lerna.json and/or package.json`);
				throw err;
			}
		}
	};
	async function readYamlFile$1(path$72) {
		return fsp__default$3["default"].readFile(path$72, "utf8").then((data) => yaml__default$1["default"].load(data));
	}
	function readYamlFileSync$1(path$72) {
		return yaml__default$1["default"].load(fs__default$3["default"].readFileSync(path$72, "utf8"));
	}
	const PnpmTool$1 = {
		type: "pnpm",
		async isMonorepoRoot(directory) {
			try {
				const manifest = await readYamlFile$1(path__default$5["default"].join(directory, "pnpm-workspace.yaml"));
				if (manifest.packages) return true;
			} catch (err) {
				if (err && err.code === "ENOENT") return false;
				throw err;
			}
			return false;
		},
		isMonorepoRootSync(directory) {
			try {
				const manifest = readYamlFileSync$1(path__default$5["default"].join(directory, "pnpm-workspace.yaml"));
				if (manifest.packages) return true;
			} catch (err) {
				if (err && err.code === "ENOENT") return false;
				throw err;
			}
			return false;
		},
		async getPackages(directory) {
			const rootDir = path__default$5["default"].resolve(directory);
			try {
				const manifest = await readYamlFile$1(path__default$5["default"].join(rootDir, "pnpm-workspace.yaml"));
				const pkgJson = await readJson$1(rootDir, "package.json");
				const packageGlobs = manifest.packages;
				return {
					tool: PnpmTool$1,
					packages: await expandPackageGlobs$1(packageGlobs, rootDir),
					rootPackage: {
						dir: rootDir,
						relativeDir: ".",
						packageJson: pkgJson
					},
					rootDir
				};
			} catch (err) {
				if (err && err.code === "ENOENT") throw new InvalidMonorepoError$1(`Directory ${rootDir} is not a valid ${PnpmTool$1.type} monorepo root: missing pnpm-workspace.yaml and/or package.json`);
				throw err;
			}
		},
		getPackagesSync(directory) {
			const rootDir = path__default$5["default"].resolve(directory);
			try {
				const manifest = readYamlFileSync$1(path__default$5["default"].join(rootDir, "pnpm-workspace.yaml"));
				const pkgJson = readJsonSync$1(rootDir, "package.json");
				const packageGlobs = manifest.packages;
				return {
					tool: PnpmTool$1,
					packages: expandPackageGlobsSync$1(packageGlobs, rootDir),
					rootPackage: {
						dir: rootDir,
						relativeDir: ".",
						packageJson: pkgJson
					},
					rootDir
				};
			} catch (err) {
				if (err && err.code === "ENOENT") throw new InvalidMonorepoError$1(`Directory ${rootDir} is not a valid ${PnpmTool$1.type} monorepo root: missing pnpm-workspace.yaml and/or package.json`);
				throw err;
			}
		}
	};
	const RootTool$1 = {
		type: "root",
		async isMonorepoRoot(directory) {
			return false;
		},
		isMonorepoRootSync(directory) {
			return false;
		},
		async getPackages(directory) {
			const rootDir = path__default$5["default"].resolve(directory);
			try {
				const pkgJson = await readJson$1(rootDir, "package.json");
				const pkg = {
					dir: rootDir,
					relativeDir: ".",
					packageJson: pkgJson
				};
				return {
					tool: RootTool$1,
					packages: [pkg],
					rootPackage: pkg,
					rootDir
				};
			} catch (err) {
				if (err && err.code === "ENOENT") throw new InvalidMonorepoError$1(`Directory ${rootDir} is not a valid ${RootTool$1.type} monorepo root`);
				throw err;
			}
		},
		getPackagesSync(directory) {
			const rootDir = path__default$5["default"].resolve(directory);
			try {
				const pkgJson = readJsonSync$1(rootDir, "package.json");
				const pkg = {
					dir: rootDir,
					relativeDir: ".",
					packageJson: pkgJson
				};
				return {
					tool: RootTool$1,
					packages: [pkg],
					rootPackage: pkg,
					rootDir
				};
			} catch (err) {
				if (err && err.code === "ENOENT") throw new InvalidMonorepoError$1(`Directory ${rootDir} is not a valid ${RootTool$1.type} monorepo root`);
				throw err;
			}
		}
	};
	const RushTool$1 = {
		type: "rush",
		async isMonorepoRoot(directory) {
			try {
				await fsp__default$3["default"].readFile(path__default$5["default"].join(directory, "rush.json"), "utf8");
				return true;
			} catch (err) {
				if (err && err.code === "ENOENT") return false;
				throw err;
			}
		},
		isMonorepoRootSync(directory) {
			try {
				fs__default$3["default"].readFileSync(path__default$5["default"].join(directory, "rush.json"), "utf8");
				return true;
			} catch (err) {
				if (err && err.code === "ENOENT") return false;
				throw err;
			}
		},
		async getPackages(directory) {
			const rootDir = path__default$5["default"].resolve(directory);
			try {
				const rushText = await fsp__default$3["default"].readFile(path__default$5["default"].join(rootDir, "rush.json"), "utf8");
				const rushJson = jju__default$1["default"].parse(rushText);
				const directories = rushJson.projects.map((project) => path__default$5["default"].resolve(rootDir, project.projectFolder));
				const packages = await Promise.all(directories.map(async (dir) => {
					return {
						dir,
						relativeDir: path__default$5["default"].relative(directory, dir),
						packageJson: await readJson$1(dir, "package.json")
					};
				}));
				return {
					tool: RushTool$1,
					packages,
					rootDir
				};
			} catch (err) {
				if (err && err.code === "ENOENT") throw new InvalidMonorepoError$1(`Directory ${rootDir} is not a valid ${RushTool$1.type} monorepo root: missing rush.json`);
				throw err;
			}
		},
		getPackagesSync(directory) {
			const rootDir = path__default$5["default"].resolve(directory);
			try {
				const rushText = fs__default$3["default"].readFileSync(path__default$5["default"].join(rootDir, "rush.json"), "utf8");
				const rushJson = jju__default$1["default"].parse(rushText);
				const directories = rushJson.projects.map((project) => path__default$5["default"].resolve(rootDir, project.projectFolder));
				const packages = directories.map((dir) => {
					const packageJson = readJsonSync$1(dir, "package.json");
					return {
						dir,
						relativeDir: path__default$5["default"].relative(directory, dir),
						packageJson
					};
				});
				return {
					tool: RushTool$1,
					packages,
					rootDir
				};
			} catch (err) {
				if (err && err.code === "ENOENT") throw new InvalidMonorepoError$1(`Directory ${rootDir} is not a valid ${RushTool$1.type} monorepo root: missing rush.json`);
				throw err;
			}
		}
	};
	const YarnTool$1 = {
		type: "yarn",
		async isMonorepoRoot(directory) {
			try {
				const pkgJson = await readJson$1(directory, "package.json");
				if (pkgJson.workspaces) {
					if (Array.isArray(pkgJson.workspaces) || Array.isArray(pkgJson.workspaces.packages)) return true;
				}
			} catch (err) {
				if (err && err.code === "ENOENT") return false;
				throw err;
			}
			return false;
		},
		isMonorepoRootSync(directory) {
			try {
				const pkgJson = readJsonSync$1(directory, "package.json");
				if (pkgJson.workspaces) {
					if (Array.isArray(pkgJson.workspaces) || Array.isArray(pkgJson.workspaces.packages)) return true;
				}
			} catch (err) {
				if (err && err.code === "ENOENT") return false;
				throw err;
			}
			return false;
		},
		async getPackages(directory) {
			const rootDir = path__default$5["default"].resolve(directory);
			try {
				const pkgJson = await readJson$1(rootDir, "package.json");
				const packageGlobs = Array.isArray(pkgJson.workspaces) ? pkgJson.workspaces : pkgJson.workspaces.packages;
				return {
					tool: YarnTool$1,
					packages: await expandPackageGlobs$1(packageGlobs, rootDir),
					rootPackage: {
						dir: rootDir,
						relativeDir: ".",
						packageJson: pkgJson
					},
					rootDir
				};
			} catch (err) {
				if (err && err.code === "ENOENT") throw new InvalidMonorepoError$1(`Directory ${rootDir} is not a valid ${YarnTool$1.type} monorepo root`);
				throw err;
			}
		},
		getPackagesSync(directory) {
			const rootDir = path__default$5["default"].resolve(directory);
			try {
				const pkgJson = readJsonSync$1(rootDir, "package.json");
				const packageGlobs = Array.isArray(pkgJson.workspaces) ? pkgJson.workspaces : pkgJson.workspaces.packages;
				return {
					tool: YarnTool$1,
					packages: expandPackageGlobsSync$1(packageGlobs, rootDir),
					rootPackage: {
						dir: rootDir,
						relativeDir: ".",
						packageJson: pkgJson
					},
					rootDir
				};
			} catch (err) {
				if (err && err.code === "ENOENT") throw new InvalidMonorepoError$1(`Directory ${rootDir} is not a valid ${YarnTool$1.type} monorepo root`);
				throw err;
			}
		}
	};
	exports.BoltTool = BoltTool$1;
	exports.InvalidMonorepoError = InvalidMonorepoError$1;
	exports.LernaTool = LernaTool$1;
	exports.PnpmTool = PnpmTool$1;
	exports.RootTool = RootTool$1;
	exports.RushTool = RushTool$1;
	exports.YarnTool = YarnTool$1;
} });

//#endregion
//#region ../node_modules/.pnpm/@manypkg+tools@1.1.2/node_modules/@manypkg/tools/dist/manypkg-tools.cjs.dev.js
var require_manypkg_tools_cjs_dev = __commonJS({ "../node_modules/.pnpm/@manypkg+tools@1.1.2/node_modules/@manypkg/tools/dist/manypkg-tools.cjs.dev.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var path$5 = require("path");
	var fsp$2 = require("fs/promises");
	var glob = require_out();
	var fs$3 = require("fs");
	var yaml = require_js_yaml();
	var jju = require_jju();
	function _interopDefault$4(e) {
		return e && e.__esModule ? e : { "default": e };
	}
	var path__default$4 = /*#__PURE__*/ _interopDefault$4(path$5);
	var fsp__default$2 = /*#__PURE__*/ _interopDefault$4(fsp$2);
	var glob__default = /*#__PURE__*/ _interopDefault$4(glob);
	var fs__default$2 = /*#__PURE__*/ _interopDefault$4(fs$3);
	var yaml__default = /*#__PURE__*/ _interopDefault$4(yaml);
	var jju__default = /*#__PURE__*/ _interopDefault$4(jju);
	var InvalidMonorepoError = class extends Error {};
	/**
	* A monorepo tool is a specific implementation of monorepos, whether provided built-in
	* by a package manager or via some other wrapper.
	*
	* Each tool defines a common interface for detecting whether a directory is
	* a valid instance of this type of monorepo, how to retrieve the packages, etc.
	*/
	const readJson = async (directory, file$2) => JSON.parse(await fsp__default$2["default"].readFile(path__default$4["default"].join(directory, file$2), "utf-8"));
	const readJsonSync = (directory, file$2) => JSON.parse(fs__default$2["default"].readFileSync(path__default$4["default"].join(directory, file$2), "utf-8"));
	/**
	* This internal method takes a list of one or more directory globs and the absolute path
	* to the root directory, and returns a list of all matching relative directories that
	* contain a `package.json` file.
	*/
	async function expandPackageGlobs(packageGlobs, directory) {
		const relativeDirectories = await glob__default["default"](packageGlobs, {
			cwd: directory,
			onlyDirectories: true,
			ignore: ["**/node_modules"]
		});
		const directories = relativeDirectories.map((p) => path__default$4["default"].resolve(directory, p)).sort();
		const discoveredPackages = await Promise.all(directories.map((dir) => fsp__default$2["default"].readFile(path__default$4["default"].join(dir, "package.json"), "utf-8").catch((err) => {
			if (err && err.code === "ENOENT") return undefined;
			throw err;
		}).then((result) => {
			if (result) return {
				dir: path__default$4["default"].resolve(dir),
				relativeDir: path__default$4["default"].relative(directory, dir),
				packageJson: JSON.parse(result)
			};
		})));
		return discoveredPackages.filter((pkg) => pkg);
	}
	/**
	* A synchronous version of {@link expandPackagesGlobs}.
	*/
	function expandPackageGlobsSync(packageGlobs, directory) {
		const relativeDirectories = glob__default["default"].sync(packageGlobs, {
			cwd: directory,
			onlyDirectories: true,
			ignore: ["**/node_modules"]
		});
		const directories = relativeDirectories.map((p) => path__default$4["default"].resolve(directory, p)).sort();
		const discoveredPackages = directories.map((dir) => {
			try {
				const packageJson = readJsonSync(dir, "package.json");
				return {
					dir: path__default$4["default"].resolve(dir),
					relativeDir: path__default$4["default"].relative(directory, dir),
					packageJson
				};
			} catch (err) {
				if (err && err.code === "ENOENT") return undefined;
				throw err;
			}
		});
		return discoveredPackages.filter((pkg) => pkg);
	}
	const BoltTool = {
		type: "bolt",
		async isMonorepoRoot(directory) {
			try {
				const pkgJson = await readJson(directory, "package.json");
				if (pkgJson.bolt && pkgJson.bolt.workspaces) return true;
			} catch (err) {
				if (err && err.code === "ENOENT") return false;
				throw err;
			}
			return false;
		},
		isMonorepoRootSync(directory) {
			try {
				const pkgJson = readJsonSync(directory, "package.json");
				if (pkgJson.bolt && pkgJson.bolt.workspaces) return true;
			} catch (err) {
				if (err && err.code === "ENOENT") return false;
				throw err;
			}
			return false;
		},
		async getPackages(directory) {
			const rootDir = path__default$4["default"].resolve(directory);
			try {
				const pkgJson = await readJson(rootDir, "package.json");
				if (!pkgJson.bolt || !pkgJson.bolt.workspaces) throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${BoltTool.type} monorepo root: missing bolt.workspaces entry`);
				const packageGlobs = pkgJson.bolt.workspaces;
				return {
					tool: BoltTool,
					packages: await expandPackageGlobs(packageGlobs, rootDir),
					rootPackage: {
						dir: rootDir,
						relativeDir: ".",
						packageJson: pkgJson
					},
					rootDir
				};
			} catch (err) {
				if (err && err.code === "ENOENT") throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${BoltTool.type} monorepo root: missing package.json`);
				throw err;
			}
		},
		getPackagesSync(directory) {
			const rootDir = path__default$4["default"].resolve(directory);
			try {
				const pkgJson = readJsonSync(rootDir, "package.json");
				if (!pkgJson.bolt || !pkgJson.bolt.workspaces) throw new InvalidMonorepoError(`Directory ${directory} is not a valid ${BoltTool.type} monorepo root: missing bolt.workspaces entry`);
				const packageGlobs = pkgJson.bolt.workspaces;
				return {
					tool: BoltTool,
					packages: expandPackageGlobsSync(packageGlobs, rootDir),
					rootPackage: {
						dir: rootDir,
						relativeDir: ".",
						packageJson: pkgJson
					},
					rootDir
				};
			} catch (err) {
				if (err && err.code === "ENOENT") throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${BoltTool.type} monorepo root: missing package.json`);
				throw err;
			}
		}
	};
	const LernaTool = {
		type: "lerna",
		async isMonorepoRoot(directory) {
			try {
				const lernaJson = await readJson(directory, "lerna.json");
				if (lernaJson.useWorkspaces !== true) return true;
			} catch (err) {
				if (err && err.code === "ENOENT") return false;
				throw err;
			}
			return false;
		},
		isMonorepoRootSync(directory) {
			try {
				const lernaJson = readJsonSync(directory, "lerna.json");
				if (lernaJson.useWorkspaces !== true) return true;
			} catch (err) {
				if (err && err.code === "ENOENT") return false;
				throw err;
			}
			return false;
		},
		async getPackages(directory) {
			const rootDir = path__default$4["default"].resolve(directory);
			try {
				const lernaJson = await readJson(rootDir, "lerna.json");
				const pkgJson = await readJson(rootDir, "package.json");
				const packageGlobs = lernaJson.packages || ["packages/*"];
				return {
					tool: LernaTool,
					packages: await expandPackageGlobs(packageGlobs, rootDir),
					rootPackage: {
						dir: rootDir,
						relativeDir: ".",
						packageJson: pkgJson
					},
					rootDir
				};
			} catch (err) {
				if (err && err.code === "ENOENT") throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${LernaTool.type} monorepo root: missing lerna.json and/or package.json`);
				throw err;
			}
		},
		getPackagesSync(directory) {
			const rootDir = path__default$4["default"].resolve(directory);
			try {
				const lernaJson = readJsonSync(rootDir, "lerna.json");
				const pkgJson = readJsonSync(rootDir, "package.json");
				const packageGlobs = lernaJson.packages || ["packages/*"];
				return {
					tool: LernaTool,
					packages: expandPackageGlobsSync(packageGlobs, rootDir),
					rootPackage: {
						dir: rootDir,
						relativeDir: ".",
						packageJson: pkgJson
					},
					rootDir
				};
			} catch (err) {
				if (err && err.code === "ENOENT") throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${LernaTool.type} monorepo root: missing lerna.json and/or package.json`);
				throw err;
			}
		}
	};
	async function readYamlFile(path$72) {
		return fsp__default$2["default"].readFile(path$72, "utf8").then((data) => yaml__default["default"].load(data));
	}
	function readYamlFileSync(path$72) {
		return yaml__default["default"].load(fs__default$2["default"].readFileSync(path$72, "utf8"));
	}
	const PnpmTool = {
		type: "pnpm",
		async isMonorepoRoot(directory) {
			try {
				const manifest = await readYamlFile(path__default$4["default"].join(directory, "pnpm-workspace.yaml"));
				if (manifest.packages) return true;
			} catch (err) {
				if (err && err.code === "ENOENT") return false;
				throw err;
			}
			return false;
		},
		isMonorepoRootSync(directory) {
			try {
				const manifest = readYamlFileSync(path__default$4["default"].join(directory, "pnpm-workspace.yaml"));
				if (manifest.packages) return true;
			} catch (err) {
				if (err && err.code === "ENOENT") return false;
				throw err;
			}
			return false;
		},
		async getPackages(directory) {
			const rootDir = path__default$4["default"].resolve(directory);
			try {
				const manifest = await readYamlFile(path__default$4["default"].join(rootDir, "pnpm-workspace.yaml"));
				const pkgJson = await readJson(rootDir, "package.json");
				const packageGlobs = manifest.packages;
				return {
					tool: PnpmTool,
					packages: await expandPackageGlobs(packageGlobs, rootDir),
					rootPackage: {
						dir: rootDir,
						relativeDir: ".",
						packageJson: pkgJson
					},
					rootDir
				};
			} catch (err) {
				if (err && err.code === "ENOENT") throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${PnpmTool.type} monorepo root: missing pnpm-workspace.yaml and/or package.json`);
				throw err;
			}
		},
		getPackagesSync(directory) {
			const rootDir = path__default$4["default"].resolve(directory);
			try {
				const manifest = readYamlFileSync(path__default$4["default"].join(rootDir, "pnpm-workspace.yaml"));
				const pkgJson = readJsonSync(rootDir, "package.json");
				const packageGlobs = manifest.packages;
				return {
					tool: PnpmTool,
					packages: expandPackageGlobsSync(packageGlobs, rootDir),
					rootPackage: {
						dir: rootDir,
						relativeDir: ".",
						packageJson: pkgJson
					},
					rootDir
				};
			} catch (err) {
				if (err && err.code === "ENOENT") throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${PnpmTool.type} monorepo root: missing pnpm-workspace.yaml and/or package.json`);
				throw err;
			}
		}
	};
	const RootTool = {
		type: "root",
		async isMonorepoRoot(directory) {
			return false;
		},
		isMonorepoRootSync(directory) {
			return false;
		},
		async getPackages(directory) {
			const rootDir = path__default$4["default"].resolve(directory);
			try {
				const pkgJson = await readJson(rootDir, "package.json");
				const pkg = {
					dir: rootDir,
					relativeDir: ".",
					packageJson: pkgJson
				};
				return {
					tool: RootTool,
					packages: [pkg],
					rootPackage: pkg,
					rootDir
				};
			} catch (err) {
				if (err && err.code === "ENOENT") throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${RootTool.type} monorepo root`);
				throw err;
			}
		},
		getPackagesSync(directory) {
			const rootDir = path__default$4["default"].resolve(directory);
			try {
				const pkgJson = readJsonSync(rootDir, "package.json");
				const pkg = {
					dir: rootDir,
					relativeDir: ".",
					packageJson: pkgJson
				};
				return {
					tool: RootTool,
					packages: [pkg],
					rootPackage: pkg,
					rootDir
				};
			} catch (err) {
				if (err && err.code === "ENOENT") throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${RootTool.type} monorepo root`);
				throw err;
			}
		}
	};
	const RushTool = {
		type: "rush",
		async isMonorepoRoot(directory) {
			try {
				await fsp__default$2["default"].readFile(path__default$4["default"].join(directory, "rush.json"), "utf8");
				return true;
			} catch (err) {
				if (err && err.code === "ENOENT") return false;
				throw err;
			}
		},
		isMonorepoRootSync(directory) {
			try {
				fs__default$2["default"].readFileSync(path__default$4["default"].join(directory, "rush.json"), "utf8");
				return true;
			} catch (err) {
				if (err && err.code === "ENOENT") return false;
				throw err;
			}
		},
		async getPackages(directory) {
			const rootDir = path__default$4["default"].resolve(directory);
			try {
				const rushText = await fsp__default$2["default"].readFile(path__default$4["default"].join(rootDir, "rush.json"), "utf8");
				const rushJson = jju__default["default"].parse(rushText);
				const directories = rushJson.projects.map((project) => path__default$4["default"].resolve(rootDir, project.projectFolder));
				const packages = await Promise.all(directories.map(async (dir) => {
					return {
						dir,
						relativeDir: path__default$4["default"].relative(directory, dir),
						packageJson: await readJson(dir, "package.json")
					};
				}));
				return {
					tool: RushTool,
					packages,
					rootDir
				};
			} catch (err) {
				if (err && err.code === "ENOENT") throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${RushTool.type} monorepo root: missing rush.json`);
				throw err;
			}
		},
		getPackagesSync(directory) {
			const rootDir = path__default$4["default"].resolve(directory);
			try {
				const rushText = fs__default$2["default"].readFileSync(path__default$4["default"].join(rootDir, "rush.json"), "utf8");
				const rushJson = jju__default["default"].parse(rushText);
				const directories = rushJson.projects.map((project) => path__default$4["default"].resolve(rootDir, project.projectFolder));
				const packages = directories.map((dir) => {
					const packageJson = readJsonSync(dir, "package.json");
					return {
						dir,
						relativeDir: path__default$4["default"].relative(directory, dir),
						packageJson
					};
				});
				return {
					tool: RushTool,
					packages,
					rootDir
				};
			} catch (err) {
				if (err && err.code === "ENOENT") throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${RushTool.type} monorepo root: missing rush.json`);
				throw err;
			}
		}
	};
	const YarnTool = {
		type: "yarn",
		async isMonorepoRoot(directory) {
			try {
				const pkgJson = await readJson(directory, "package.json");
				if (pkgJson.workspaces) {
					if (Array.isArray(pkgJson.workspaces) || Array.isArray(pkgJson.workspaces.packages)) return true;
				}
			} catch (err) {
				if (err && err.code === "ENOENT") return false;
				throw err;
			}
			return false;
		},
		isMonorepoRootSync(directory) {
			try {
				const pkgJson = readJsonSync(directory, "package.json");
				if (pkgJson.workspaces) {
					if (Array.isArray(pkgJson.workspaces) || Array.isArray(pkgJson.workspaces.packages)) return true;
				}
			} catch (err) {
				if (err && err.code === "ENOENT") return false;
				throw err;
			}
			return false;
		},
		async getPackages(directory) {
			const rootDir = path__default$4["default"].resolve(directory);
			try {
				const pkgJson = await readJson(rootDir, "package.json");
				const packageGlobs = Array.isArray(pkgJson.workspaces) ? pkgJson.workspaces : pkgJson.workspaces.packages;
				return {
					tool: YarnTool,
					packages: await expandPackageGlobs(packageGlobs, rootDir),
					rootPackage: {
						dir: rootDir,
						relativeDir: ".",
						packageJson: pkgJson
					},
					rootDir
				};
			} catch (err) {
				if (err && err.code === "ENOENT") throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${YarnTool.type} monorepo root`);
				throw err;
			}
		},
		getPackagesSync(directory) {
			const rootDir = path__default$4["default"].resolve(directory);
			try {
				const pkgJson = readJsonSync(rootDir, "package.json");
				const packageGlobs = Array.isArray(pkgJson.workspaces) ? pkgJson.workspaces : pkgJson.workspaces.packages;
				return {
					tool: YarnTool,
					packages: expandPackageGlobsSync(packageGlobs, rootDir),
					rootPackage: {
						dir: rootDir,
						relativeDir: ".",
						packageJson: pkgJson
					},
					rootDir
				};
			} catch (err) {
				if (err && err.code === "ENOENT") throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${YarnTool.type} monorepo root`);
				throw err;
			}
		}
	};
	exports.BoltTool = BoltTool;
	exports.InvalidMonorepoError = InvalidMonorepoError;
	exports.LernaTool = LernaTool;
	exports.PnpmTool = PnpmTool;
	exports.RootTool = RootTool;
	exports.RushTool = RushTool;
	exports.YarnTool = YarnTool;
} });

//#endregion
//#region ../node_modules/.pnpm/@manypkg+tools@1.1.2/node_modules/@manypkg/tools/dist/manypkg-tools.cjs.js
var require_manypkg_tools_cjs = __commonJS({ "../node_modules/.pnpm/@manypkg+tools@1.1.2/node_modules/@manypkg/tools/dist/manypkg-tools.cjs.js"(exports, module) {
	if (process.env.NODE_ENV === "production") module.exports = require_manypkg_tools_cjs_prod();
else module.exports = require_manypkg_tools_cjs_dev();
} });

//#endregion
//#region ../node_modules/.pnpm/@manypkg+find-root@2.2.3/node_modules/@manypkg/find-root/dist/manypkg-find-root.cjs.prod.js
var require_manypkg_find_root_cjs_prod = __commonJS({ "../node_modules/.pnpm/@manypkg+find-root@2.2.3/node_modules/@manypkg/find-root/dist/manypkg-find-root.cjs.prod.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var path$4 = require("path");
	var fs$2 = require("fs");
	var fsp$1 = require("fs/promises");
	var tools$1 = require_manypkg_tools_cjs();
	function _interopDefault$3(e) {
		return e && e.__esModule ? e : { "default": e };
	}
	var path__default$3 = /*#__PURE__*/ _interopDefault$3(path$4);
	var fs__default$1 = /*#__PURE__*/ _interopDefault$3(fs$2);
	var fsp__default$1 = /*#__PURE__*/ _interopDefault$3(fsp$1);
	/**
	* A default ordering for monorepo tool checks.
	*
	* This ordering is designed to check the most typical package.json-based
	* monorepo implementations first, with tools based on custom file schemas
	* checked last.
	*/
	const DEFAULT_TOOLS$1 = [
		tools$1.YarnTool,
		tools$1.PnpmTool,
		tools$1.LernaTool,
		tools$1.RushTool,
		tools$1.BoltTool,
		tools$1.RootTool
	];
	const isNoEntryError$1 = (err) => !!err && typeof err === "object" && ("code" in err) && err.code === "ENOENT";
	var NoPkgJsonFound$1 = class extends Error {
		constructor(directory) {
			super(`No package.json could be found upwards from directory ${directory}`);
			this.directory = directory;
		}
	};
	var NoMatchingMonorepoFound$1 = class extends Error {
		constructor(directory) {
			super(`No monorepo matching the list of supported monorepos could be found upwards from directory ${directory}`);
			this.directory = directory;
		}
	};
	/**
	* Configuration options for `findRoot` and `findRootSync` functions.
	*/
	/**
	* Given a starting folder, search that folder and its parents until a supported monorepo
	* is found, and return a `MonorepoRoot` object with the discovered directory and a
	* corresponding monorepo `Tool` object.
	*
	* By default, all predefined `Tool` implementations are included in the search -- the
	* caller can provide a list of desired tools to restrict the types of monorepos discovered,
	* or to provide a custom tool implementation.
	*/
	async function findRoot$3(cwd$1, options = {}) {
		let monorepoRoot;
		const tools$1$1 = options.tools || DEFAULT_TOOLS$1;
		await findUp$1(async (directory) => {
			return Promise.all(tools$1$1.map(async (tool) => {
				if (await tool.isMonorepoRoot(directory)) return {
					tool,
					rootDir: directory
				};
			})).then((x) => x.find((value) => value)).then((result) => {
				if (result) {
					monorepoRoot = result;
					return directory;
				}
			});
		}, cwd$1);
		if (monorepoRoot) return monorepoRoot;
		if (!tools$1$1.includes(tools$1.RootTool)) throw new NoMatchingMonorepoFound$1(cwd$1);
		let rootDir = await findUp$1(async (directory) => {
			try {
				await fsp__default$1["default"].access(path__default$3["default"].join(directory, "package.json"));
				return directory;
			} catch (err) {
				if (!isNoEntryError$1(err)) throw err;
			}
		}, cwd$1);
		if (!rootDir) throw new NoPkgJsonFound$1(cwd$1);
		return {
			tool: tools$1.RootTool,
			rootDir
		};
	}
	/**
	* A synchronous version of {@link findRoot}.
	*/
	function findRootSync$1(cwd$1, options = {}) {
		let monorepoRoot;
		const tools$1$1 = options.tools || DEFAULT_TOOLS$1;
		findUpSync$1((directory) => {
			for (const tool of tools$1$1) if (tool.isMonorepoRootSync(directory)) {
				monorepoRoot = {
					tool,
					rootDir: directory
				};
				return directory;
			}
		}, cwd$1);
		if (monorepoRoot) return monorepoRoot;
		if (!tools$1$1.includes(tools$1.RootTool)) throw new NoMatchingMonorepoFound$1(cwd$1);
		const rootDir = findUpSync$1((directory) => {
			const exists$1 = fs__default$1["default"].existsSync(path__default$3["default"].join(directory, "package.json"));
			return exists$1 ? directory : undefined;
		}, cwd$1);
		if (!rootDir) throw new NoPkgJsonFound$1(cwd$1);
		return {
			tool: tools$1.RootTool,
			rootDir
		};
	}
	async function findUp$1(matcher, cwd$1) {
		let directory = path__default$3["default"].resolve(cwd$1);
		const { root: root$1 } = path__default$3["default"].parse(directory);
		while (directory && directory !== root$1) {
			const filePath = await matcher(directory);
			if (filePath) return path__default$3["default"].resolve(directory, filePath);
			directory = path__default$3["default"].dirname(directory);
		}
	}
	function findUpSync$1(matcher, cwd$1) {
		let directory = path__default$3["default"].resolve(cwd$1);
		const { root: root$1 } = path__default$3["default"].parse(directory);
		while (directory && directory !== root$1) {
			const filePath = matcher(directory);
			if (filePath) return path__default$3["default"].resolve(directory, filePath);
			directory = path__default$3["default"].dirname(directory);
		}
	}
	exports.NoMatchingMonorepoFound = NoMatchingMonorepoFound$1;
	exports.NoPkgJsonFound = NoPkgJsonFound$1;
	exports.findRoot = findRoot$3;
	exports.findRootSync = findRootSync$1;
} });

//#endregion
//#region ../node_modules/.pnpm/@manypkg+find-root@2.2.3/node_modules/@manypkg/find-root/dist/manypkg-find-root.cjs.dev.js
var require_manypkg_find_root_cjs_dev = __commonJS({ "../node_modules/.pnpm/@manypkg+find-root@2.2.3/node_modules/@manypkg/find-root/dist/manypkg-find-root.cjs.dev.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var path$3 = require("path");
	var fs$1 = require("fs");
	var fsp = require("fs/promises");
	var tools = require_manypkg_tools_cjs();
	function _interopDefault$2(e) {
		return e && e.__esModule ? e : { "default": e };
	}
	var path__default$2 = /*#__PURE__*/ _interopDefault$2(path$3);
	var fs__default = /*#__PURE__*/ _interopDefault$2(fs$1);
	var fsp__default = /*#__PURE__*/ _interopDefault$2(fsp);
	/**
	* A default ordering for monorepo tool checks.
	*
	* This ordering is designed to check the most typical package.json-based
	* monorepo implementations first, with tools based on custom file schemas
	* checked last.
	*/
	const DEFAULT_TOOLS = [
		tools.YarnTool,
		tools.PnpmTool,
		tools.LernaTool,
		tools.RushTool,
		tools.BoltTool,
		tools.RootTool
	];
	const isNoEntryError = (err) => !!err && typeof err === "object" && ("code" in err) && err.code === "ENOENT";
	var NoPkgJsonFound = class extends Error {
		constructor(directory) {
			super(`No package.json could be found upwards from directory ${directory}`);
			this.directory = directory;
		}
	};
	var NoMatchingMonorepoFound = class extends Error {
		constructor(directory) {
			super(`No monorepo matching the list of supported monorepos could be found upwards from directory ${directory}`);
			this.directory = directory;
		}
	};
	/**
	* Configuration options for `findRoot` and `findRootSync` functions.
	*/
	/**
	* Given a starting folder, search that folder and its parents until a supported monorepo
	* is found, and return a `MonorepoRoot` object with the discovered directory and a
	* corresponding monorepo `Tool` object.
	*
	* By default, all predefined `Tool` implementations are included in the search -- the
	* caller can provide a list of desired tools to restrict the types of monorepos discovered,
	* or to provide a custom tool implementation.
	*/
	async function findRoot$2(cwd$1, options = {}) {
		let monorepoRoot;
		const tools$1$1 = options.tools || DEFAULT_TOOLS;
		await findUp(async (directory) => {
			return Promise.all(tools$1$1.map(async (tool) => {
				if (await tool.isMonorepoRoot(directory)) return {
					tool,
					rootDir: directory
				};
			})).then((x) => x.find((value) => value)).then((result) => {
				if (result) {
					monorepoRoot = result;
					return directory;
				}
			});
		}, cwd$1);
		if (monorepoRoot) return monorepoRoot;
		if (!tools$1$1.includes(tools.RootTool)) throw new NoMatchingMonorepoFound(cwd$1);
		let rootDir = await findUp(async (directory) => {
			try {
				await fsp__default["default"].access(path__default$2["default"].join(directory, "package.json"));
				return directory;
			} catch (err) {
				if (!isNoEntryError(err)) throw err;
			}
		}, cwd$1);
		if (!rootDir) throw new NoPkgJsonFound(cwd$1);
		return {
			tool: tools.RootTool,
			rootDir
		};
	}
	/**
	* A synchronous version of {@link findRoot}.
	*/
	function findRootSync(cwd$1, options = {}) {
		let monorepoRoot;
		const tools$1$1 = options.tools || DEFAULT_TOOLS;
		findUpSync((directory) => {
			for (const tool of tools$1$1) if (tool.isMonorepoRootSync(directory)) {
				monorepoRoot = {
					tool,
					rootDir: directory
				};
				return directory;
			}
		}, cwd$1);
		if (monorepoRoot) return monorepoRoot;
		if (!tools$1$1.includes(tools.RootTool)) throw new NoMatchingMonorepoFound(cwd$1);
		const rootDir = findUpSync((directory) => {
			const exists$1 = fs__default["default"].existsSync(path__default$2["default"].join(directory, "package.json"));
			return exists$1 ? directory : undefined;
		}, cwd$1);
		if (!rootDir) throw new NoPkgJsonFound(cwd$1);
		return {
			tool: tools.RootTool,
			rootDir
		};
	}
	async function findUp(matcher, cwd$1) {
		let directory = path__default$2["default"].resolve(cwd$1);
		const { root: root$1 } = path__default$2["default"].parse(directory);
		while (directory && directory !== root$1) {
			const filePath = await matcher(directory);
			if (filePath) return path__default$2["default"].resolve(directory, filePath);
			directory = path__default$2["default"].dirname(directory);
		}
	}
	function findUpSync(matcher, cwd$1) {
		let directory = path__default$2["default"].resolve(cwd$1);
		const { root: root$1 } = path__default$2["default"].parse(directory);
		while (directory && directory !== root$1) {
			const filePath = matcher(directory);
			if (filePath) return path__default$2["default"].resolve(directory, filePath);
			directory = path__default$2["default"].dirname(directory);
		}
	}
	exports.NoMatchingMonorepoFound = NoMatchingMonorepoFound;
	exports.NoPkgJsonFound = NoPkgJsonFound;
	exports.findRoot = findRoot$2;
	exports.findRootSync = findRootSync;
} });

//#endregion
//#region ../node_modules/.pnpm/@manypkg+find-root@2.2.3/node_modules/@manypkg/find-root/dist/manypkg-find-root.cjs.js
var require_manypkg_find_root_cjs = __commonJS({ "../node_modules/.pnpm/@manypkg+find-root@2.2.3/node_modules/@manypkg/find-root/dist/manypkg-find-root.cjs.js"(exports, module) {
	if (process.env.NODE_ENV === "production") module.exports = require_manypkg_find_root_cjs_prod();
else module.exports = require_manypkg_find_root_cjs_dev();
} });

//#endregion
//#region ../node_modules/.pnpm/@manypkg+get-packages@2.2.2/node_modules/@manypkg/get-packages/dist/manypkg-get-packages.cjs.prod.js
var require_manypkg_get_packages_cjs_prod = __commonJS({ "../node_modules/.pnpm/@manypkg+get-packages@2.2.2/node_modules/@manypkg/get-packages/dist/manypkg-get-packages.cjs.prod.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var path$2 = require("path");
	var findRoot$1 = require_manypkg_find_root_cjs();
	function _interopDefault$1(e) {
		return e && e.__esModule ? e : { "default": e };
	}
	var path__default$1 = /*#__PURE__*/ _interopDefault$1(path$2);
	var PackageJsonMissingNameError$1 = class extends Error {
		constructor(directories) {
			super(`The following package.jsons are missing the "name" field:\n${directories.join("\n")}`);
			this.directories = directories;
		}
	};
	/**
	* Configuration options for `getPackages` and `getPackagesSync` functions.
	*/
	/**
	* Given a starting folder, search that folder and its parents until a supported monorepo
	* is found, and return the collection of packages and a corresponding monorepo `Tool`
	* object.
	*
	* By default, all predefined `Tool` implementations are included in the search -- the
	* caller can provide a list of desired tools to restrict the types of monorepos discovered,
	* or to provide a custom tool implementation.
	*/
	async function getPackages$4(dir, options) {
		const monorepoRoot = await findRoot$1.findRoot(dir, options);
		const packages = await monorepoRoot.tool.getPackages(monorepoRoot.rootDir);
		validatePackages$1(packages);
		return packages;
	}
	/**
	* A synchronous version of {@link getPackages}.
	*/
	function getPackagesSync$1(dir, options) {
		const monorepoRoot = findRoot$1.findRootSync(dir, options);
		const packages = monorepoRoot.tool.getPackagesSync(monorepoRoot.rootDir);
		validatePackages$1(packages);
		return packages;
	}
	function validatePackages$1(packages) {
		const pkgJsonsMissingNameField = [];
		for (const pkg of packages.packages) if (!pkg.packageJson.name) pkgJsonsMissingNameField.push(path__default$1["default"].join(pkg.relativeDir, "package.json"));
		if (pkgJsonsMissingNameField.length > 0) {
			pkgJsonsMissingNameField.sort();
			throw new PackageJsonMissingNameError$1(pkgJsonsMissingNameField);
		}
	}
	exports.PackageJsonMissingNameError = PackageJsonMissingNameError$1;
	exports.getPackages = getPackages$4;
	exports.getPackagesSync = getPackagesSync$1;
} });

//#endregion
//#region ../node_modules/.pnpm/@manypkg+get-packages@2.2.2/node_modules/@manypkg/get-packages/dist/manypkg-get-packages.cjs.dev.js
var require_manypkg_get_packages_cjs_dev = __commonJS({ "../node_modules/.pnpm/@manypkg+get-packages@2.2.2/node_modules/@manypkg/get-packages/dist/manypkg-get-packages.cjs.dev.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var path$1 = require("path");
	var findRoot = require_manypkg_find_root_cjs();
	function _interopDefault(e) {
		return e && e.__esModule ? e : { "default": e };
	}
	var path__default = /*#__PURE__*/ _interopDefault(path$1);
	var PackageJsonMissingNameError = class extends Error {
		constructor(directories) {
			super(`The following package.jsons are missing the "name" field:\n${directories.join("\n")}`);
			this.directories = directories;
		}
	};
	/**
	* Configuration options for `getPackages` and `getPackagesSync` functions.
	*/
	/**
	* Given a starting folder, search that folder and its parents until a supported monorepo
	* is found, and return the collection of packages and a corresponding monorepo `Tool`
	* object.
	*
	* By default, all predefined `Tool` implementations are included in the search -- the
	* caller can provide a list of desired tools to restrict the types of monorepos discovered,
	* or to provide a custom tool implementation.
	*/
	async function getPackages$3(dir, options) {
		const monorepoRoot = await findRoot.findRoot(dir, options);
		const packages = await monorepoRoot.tool.getPackages(monorepoRoot.rootDir);
		validatePackages(packages);
		return packages;
	}
	/**
	* A synchronous version of {@link getPackages}.
	*/
	function getPackagesSync(dir, options) {
		const monorepoRoot = findRoot.findRootSync(dir, options);
		const packages = monorepoRoot.tool.getPackagesSync(monorepoRoot.rootDir);
		validatePackages(packages);
		return packages;
	}
	function validatePackages(packages) {
		const pkgJsonsMissingNameField = [];
		for (const pkg of packages.packages) if (!pkg.packageJson.name) pkgJsonsMissingNameField.push(path__default["default"].join(pkg.relativeDir, "package.json"));
		if (pkgJsonsMissingNameField.length > 0) {
			pkgJsonsMissingNameField.sort();
			throw new PackageJsonMissingNameError(pkgJsonsMissingNameField);
		}
	}
	exports.PackageJsonMissingNameError = PackageJsonMissingNameError;
	exports.getPackages = getPackages$3;
	exports.getPackagesSync = getPackagesSync;
} });

//#endregion
//#region ../node_modules/.pnpm/@manypkg+get-packages@2.2.2/node_modules/@manypkg/get-packages/dist/manypkg-get-packages.cjs.js
var require_manypkg_get_packages_cjs = __commonJS({ "../node_modules/.pnpm/@manypkg+get-packages@2.2.2/node_modules/@manypkg/get-packages/dist/manypkg-get-packages.cjs.js"(exports, module) {
	if (process.env.NODE_ENV === "production") module.exports = require_manypkg_get_packages_cjs_prod();
else module.exports = require_manypkg_get_packages_cjs_dev();
} });

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-string@4.0.0/node_modules/mdast-util-to-string/lib/index.js
/**
* @typedef {import('mdast').Nodes} Nodes
*
* @typedef Options
*   Configuration (optional).
* @property {boolean | null | undefined} [includeImageAlt=true]
*   Whether to use `alt` for `image`s (default: `true`).
* @property {boolean | null | undefined} [includeHtml=true]
*   Whether to use `value` of HTML (default: `true`).
*/
/** @type {Options} */
const emptyOptions = {};
function toString(value, options) {
	const settings = options || emptyOptions;
	const includeImageAlt = typeof settings.includeImageAlt === "boolean" ? settings.includeImageAlt : true;
	const includeHtml = typeof settings.includeHtml === "boolean" ? settings.includeHtml : true;
	return one(value, includeImageAlt, includeHtml);
}
/**
* One node or several nodes.
*
* @param {unknown} value
*   Thing to serialize.
* @param {boolean} includeImageAlt
*   Include image `alt`s.
* @param {boolean} includeHtml
*   Include HTML.
* @returns {string}
*   Serialized node.
*/
function one(value, includeImageAlt, includeHtml) {
	if (node(value)) {
		if ("value" in value) return value.type === "html" && !includeHtml ? "" : value.value;
		if (includeImageAlt && "alt" in value && value.alt) return value.alt;
		if ("children" in value) return all(value.children, includeImageAlt, includeHtml);
	}
	if (Array.isArray(value)) return all(value, includeImageAlt, includeHtml);
	return "";
}
/**
* Serialize a list of nodes.
*
* @param {Array<unknown>} values
*   Thing to serialize.
* @param {boolean} includeImageAlt
*   Include image `alt`s.
* @param {boolean} includeHtml
*   Include HTML.
* @returns {string}
*   Serialized nodes.
*/
function all(values, includeImageAlt, includeHtml) {
	/** @type {Array<string>} */
	const result = [];
	let index$1 = -1;
	while (++index$1 < values.length) result[index$1] = one(values[index$1], includeImageAlt, includeHtml);
	return result.join("");
}
/**
* Check if `value` looks like a node.
*
* @param {unknown} value
*   Thing.
* @returns {value is Nodes}
*   Whether `value` is a node.
*/
function node(value) {
	return Boolean(value && typeof value === "object");
}

//#endregion
//#region ../node_modules/.pnpm/character-entities@2.0.2/node_modules/character-entities/index.js
const characterEntities = {
	AElig: "Æ",
	AMP: "&",
	Aacute: "Á",
	Abreve: "Ă",
	Acirc: "Â",
	Acy: "А",
	Afr: "𝔄",
	Agrave: "À",
	Alpha: "Α",
	Amacr: "Ā",
	And: "⩓",
	Aogon: "Ą",
	Aopf: "𝔸",
	ApplyFunction: "⁡",
	Aring: "Å",
	Ascr: "𝒜",
	Assign: "≔",
	Atilde: "Ã",
	Auml: "Ä",
	Backslash: "∖",
	Barv: "⫧",
	Barwed: "⌆",
	Bcy: "Б",
	Because: "∵",
	Bernoullis: "ℬ",
	Beta: "Β",
	Bfr: "𝔅",
	Bopf: "𝔹",
	Breve: "˘",
	Bscr: "ℬ",
	Bumpeq: "≎",
	CHcy: "Ч",
	COPY: "©",
	Cacute: "Ć",
	Cap: "⋒",
	CapitalDifferentialD: "ⅅ",
	Cayleys: "ℭ",
	Ccaron: "Č",
	Ccedil: "Ç",
	Ccirc: "Ĉ",
	Cconint: "∰",
	Cdot: "Ċ",
	Cedilla: "¸",
	CenterDot: "·",
	Cfr: "ℭ",
	Chi: "Χ",
	CircleDot: "⊙",
	CircleMinus: "⊖",
	CirclePlus: "⊕",
	CircleTimes: "⊗",
	ClockwiseContourIntegral: "∲",
	CloseCurlyDoubleQuote: "”",
	CloseCurlyQuote: "’",
	Colon: "∷",
	Colone: "⩴",
	Congruent: "≡",
	Conint: "∯",
	ContourIntegral: "∮",
	Copf: "ℂ",
	Coproduct: "∐",
	CounterClockwiseContourIntegral: "∳",
	Cross: "⨯",
	Cscr: "𝒞",
	Cup: "⋓",
	CupCap: "≍",
	DD: "ⅅ",
	DDotrahd: "⤑",
	DJcy: "Ђ",
	DScy: "Ѕ",
	DZcy: "Џ",
	Dagger: "‡",
	Darr: "↡",
	Dashv: "⫤",
	Dcaron: "Ď",
	Dcy: "Д",
	Del: "∇",
	Delta: "Δ",
	Dfr: "𝔇",
	DiacriticalAcute: "´",
	DiacriticalDot: "˙",
	DiacriticalDoubleAcute: "˝",
	DiacriticalGrave: "`",
	DiacriticalTilde: "˜",
	Diamond: "⋄",
	DifferentialD: "ⅆ",
	Dopf: "𝔻",
	Dot: "¨",
	DotDot: "⃜",
	DotEqual: "≐",
	DoubleContourIntegral: "∯",
	DoubleDot: "¨",
	DoubleDownArrow: "⇓",
	DoubleLeftArrow: "⇐",
	DoubleLeftRightArrow: "⇔",
	DoubleLeftTee: "⫤",
	DoubleLongLeftArrow: "⟸",
	DoubleLongLeftRightArrow: "⟺",
	DoubleLongRightArrow: "⟹",
	DoubleRightArrow: "⇒",
	DoubleRightTee: "⊨",
	DoubleUpArrow: "⇑",
	DoubleUpDownArrow: "⇕",
	DoubleVerticalBar: "∥",
	DownArrow: "↓",
	DownArrowBar: "⤓",
	DownArrowUpArrow: "⇵",
	DownBreve: "̑",
	DownLeftRightVector: "⥐",
	DownLeftTeeVector: "⥞",
	DownLeftVector: "↽",
	DownLeftVectorBar: "⥖",
	DownRightTeeVector: "⥟",
	DownRightVector: "⇁",
	DownRightVectorBar: "⥗",
	DownTee: "⊤",
	DownTeeArrow: "↧",
	Downarrow: "⇓",
	Dscr: "𝒟",
	Dstrok: "Đ",
	ENG: "Ŋ",
	ETH: "Ð",
	Eacute: "É",
	Ecaron: "Ě",
	Ecirc: "Ê",
	Ecy: "Э",
	Edot: "Ė",
	Efr: "𝔈",
	Egrave: "È",
	Element: "∈",
	Emacr: "Ē",
	EmptySmallSquare: "◻",
	EmptyVerySmallSquare: "▫",
	Eogon: "Ę",
	Eopf: "𝔼",
	Epsilon: "Ε",
	Equal: "⩵",
	EqualTilde: "≂",
	Equilibrium: "⇌",
	Escr: "ℰ",
	Esim: "⩳",
	Eta: "Η",
	Euml: "Ë",
	Exists: "∃",
	ExponentialE: "ⅇ",
	Fcy: "Ф",
	Ffr: "𝔉",
	FilledSmallSquare: "◼",
	FilledVerySmallSquare: "▪",
	Fopf: "𝔽",
	ForAll: "∀",
	Fouriertrf: "ℱ",
	Fscr: "ℱ",
	GJcy: "Ѓ",
	GT: ">",
	Gamma: "Γ",
	Gammad: "Ϝ",
	Gbreve: "Ğ",
	Gcedil: "Ģ",
	Gcirc: "Ĝ",
	Gcy: "Г",
	Gdot: "Ġ",
	Gfr: "𝔊",
	Gg: "⋙",
	Gopf: "𝔾",
	GreaterEqual: "≥",
	GreaterEqualLess: "⋛",
	GreaterFullEqual: "≧",
	GreaterGreater: "⪢",
	GreaterLess: "≷",
	GreaterSlantEqual: "⩾",
	GreaterTilde: "≳",
	Gscr: "𝒢",
	Gt: "≫",
	HARDcy: "Ъ",
	Hacek: "ˇ",
	Hat: "^",
	Hcirc: "Ĥ",
	Hfr: "ℌ",
	HilbertSpace: "ℋ",
	Hopf: "ℍ",
	HorizontalLine: "─",
	Hscr: "ℋ",
	Hstrok: "Ħ",
	HumpDownHump: "≎",
	HumpEqual: "≏",
	IEcy: "Е",
	IJlig: "Ĳ",
	IOcy: "Ё",
	Iacute: "Í",
	Icirc: "Î",
	Icy: "И",
	Idot: "İ",
	Ifr: "ℑ",
	Igrave: "Ì",
	Im: "ℑ",
	Imacr: "Ī",
	ImaginaryI: "ⅈ",
	Implies: "⇒",
	Int: "∬",
	Integral: "∫",
	Intersection: "⋂",
	InvisibleComma: "⁣",
	InvisibleTimes: "⁢",
	Iogon: "Į",
	Iopf: "𝕀",
	Iota: "Ι",
	Iscr: "ℐ",
	Itilde: "Ĩ",
	Iukcy: "І",
	Iuml: "Ï",
	Jcirc: "Ĵ",
	Jcy: "Й",
	Jfr: "𝔍",
	Jopf: "𝕁",
	Jscr: "𝒥",
	Jsercy: "Ј",
	Jukcy: "Є",
	KHcy: "Х",
	KJcy: "Ќ",
	Kappa: "Κ",
	Kcedil: "Ķ",
	Kcy: "К",
	Kfr: "𝔎",
	Kopf: "𝕂",
	Kscr: "𝒦",
	LJcy: "Љ",
	LT: "<",
	Lacute: "Ĺ",
	Lambda: "Λ",
	Lang: "⟪",
	Laplacetrf: "ℒ",
	Larr: "↞",
	Lcaron: "Ľ",
	Lcedil: "Ļ",
	Lcy: "Л",
	LeftAngleBracket: "⟨",
	LeftArrow: "←",
	LeftArrowBar: "⇤",
	LeftArrowRightArrow: "⇆",
	LeftCeiling: "⌈",
	LeftDoubleBracket: "⟦",
	LeftDownTeeVector: "⥡",
	LeftDownVector: "⇃",
	LeftDownVectorBar: "⥙",
	LeftFloor: "⌊",
	LeftRightArrow: "↔",
	LeftRightVector: "⥎",
	LeftTee: "⊣",
	LeftTeeArrow: "↤",
	LeftTeeVector: "⥚",
	LeftTriangle: "⊲",
	LeftTriangleBar: "⧏",
	LeftTriangleEqual: "⊴",
	LeftUpDownVector: "⥑",
	LeftUpTeeVector: "⥠",
	LeftUpVector: "↿",
	LeftUpVectorBar: "⥘",
	LeftVector: "↼",
	LeftVectorBar: "⥒",
	Leftarrow: "⇐",
	Leftrightarrow: "⇔",
	LessEqualGreater: "⋚",
	LessFullEqual: "≦",
	LessGreater: "≶",
	LessLess: "⪡",
	LessSlantEqual: "⩽",
	LessTilde: "≲",
	Lfr: "𝔏",
	Ll: "⋘",
	Lleftarrow: "⇚",
	Lmidot: "Ŀ",
	LongLeftArrow: "⟵",
	LongLeftRightArrow: "⟷",
	LongRightArrow: "⟶",
	Longleftarrow: "⟸",
	Longleftrightarrow: "⟺",
	Longrightarrow: "⟹",
	Lopf: "𝕃",
	LowerLeftArrow: "↙",
	LowerRightArrow: "↘",
	Lscr: "ℒ",
	Lsh: "↰",
	Lstrok: "Ł",
	Lt: "≪",
	Map: "⤅",
	Mcy: "М",
	MediumSpace: " ",
	Mellintrf: "ℳ",
	Mfr: "𝔐",
	MinusPlus: "∓",
	Mopf: "𝕄",
	Mscr: "ℳ",
	Mu: "Μ",
	NJcy: "Њ",
	Nacute: "Ń",
	Ncaron: "Ň",
	Ncedil: "Ņ",
	Ncy: "Н",
	NegativeMediumSpace: "​",
	NegativeThickSpace: "​",
	NegativeThinSpace: "​",
	NegativeVeryThinSpace: "​",
	NestedGreaterGreater: "≫",
	NestedLessLess: "≪",
	NewLine: "\n",
	Nfr: "𝔑",
	NoBreak: "⁠",
	NonBreakingSpace: "\xA0",
	Nopf: "ℕ",
	Not: "⫬",
	NotCongruent: "≢",
	NotCupCap: "≭",
	NotDoubleVerticalBar: "∦",
	NotElement: "∉",
	NotEqual: "≠",
	NotEqualTilde: "≂̸",
	NotExists: "∄",
	NotGreater: "≯",
	NotGreaterEqual: "≱",
	NotGreaterFullEqual: "≧̸",
	NotGreaterGreater: "≫̸",
	NotGreaterLess: "≹",
	NotGreaterSlantEqual: "⩾̸",
	NotGreaterTilde: "≵",
	NotHumpDownHump: "≎̸",
	NotHumpEqual: "≏̸",
	NotLeftTriangle: "⋪",
	NotLeftTriangleBar: "⧏̸",
	NotLeftTriangleEqual: "⋬",
	NotLess: "≮",
	NotLessEqual: "≰",
	NotLessGreater: "≸",
	NotLessLess: "≪̸",
	NotLessSlantEqual: "⩽̸",
	NotLessTilde: "≴",
	NotNestedGreaterGreater: "⪢̸",
	NotNestedLessLess: "⪡̸",
	NotPrecedes: "⊀",
	NotPrecedesEqual: "⪯̸",
	NotPrecedesSlantEqual: "⋠",
	NotReverseElement: "∌",
	NotRightTriangle: "⋫",
	NotRightTriangleBar: "⧐̸",
	NotRightTriangleEqual: "⋭",
	NotSquareSubset: "⊏̸",
	NotSquareSubsetEqual: "⋢",
	NotSquareSuperset: "⊐̸",
	NotSquareSupersetEqual: "⋣",
	NotSubset: "⊂⃒",
	NotSubsetEqual: "⊈",
	NotSucceeds: "⊁",
	NotSucceedsEqual: "⪰̸",
	NotSucceedsSlantEqual: "⋡",
	NotSucceedsTilde: "≿̸",
	NotSuperset: "⊃⃒",
	NotSupersetEqual: "⊉",
	NotTilde: "≁",
	NotTildeEqual: "≄",
	NotTildeFullEqual: "≇",
	NotTildeTilde: "≉",
	NotVerticalBar: "∤",
	Nscr: "𝒩",
	Ntilde: "Ñ",
	Nu: "Ν",
	OElig: "Œ",
	Oacute: "Ó",
	Ocirc: "Ô",
	Ocy: "О",
	Odblac: "Ő",
	Ofr: "𝔒",
	Ograve: "Ò",
	Omacr: "Ō",
	Omega: "Ω",
	Omicron: "Ο",
	Oopf: "𝕆",
	OpenCurlyDoubleQuote: "“",
	OpenCurlyQuote: "‘",
	Or: "⩔",
	Oscr: "𝒪",
	Oslash: "Ø",
	Otilde: "Õ",
	Otimes: "⨷",
	Ouml: "Ö",
	OverBar: "‾",
	OverBrace: "⏞",
	OverBracket: "⎴",
	OverParenthesis: "⏜",
	PartialD: "∂",
	Pcy: "П",
	Pfr: "𝔓",
	Phi: "Φ",
	Pi: "Π",
	PlusMinus: "±",
	Poincareplane: "ℌ",
	Popf: "ℙ",
	Pr: "⪻",
	Precedes: "≺",
	PrecedesEqual: "⪯",
	PrecedesSlantEqual: "≼",
	PrecedesTilde: "≾",
	Prime: "″",
	Product: "∏",
	Proportion: "∷",
	Proportional: "∝",
	Pscr: "𝒫",
	Psi: "Ψ",
	QUOT: "\"",
	Qfr: "𝔔",
	Qopf: "ℚ",
	Qscr: "𝒬",
	RBarr: "⤐",
	REG: "®",
	Racute: "Ŕ",
	Rang: "⟫",
	Rarr: "↠",
	Rarrtl: "⤖",
	Rcaron: "Ř",
	Rcedil: "Ŗ",
	Rcy: "Р",
	Re: "ℜ",
	ReverseElement: "∋",
	ReverseEquilibrium: "⇋",
	ReverseUpEquilibrium: "⥯",
	Rfr: "ℜ",
	Rho: "Ρ",
	RightAngleBracket: "⟩",
	RightArrow: "→",
	RightArrowBar: "⇥",
	RightArrowLeftArrow: "⇄",
	RightCeiling: "⌉",
	RightDoubleBracket: "⟧",
	RightDownTeeVector: "⥝",
	RightDownVector: "⇂",
	RightDownVectorBar: "⥕",
	RightFloor: "⌋",
	RightTee: "⊢",
	RightTeeArrow: "↦",
	RightTeeVector: "⥛",
	RightTriangle: "⊳",
	RightTriangleBar: "⧐",
	RightTriangleEqual: "⊵",
	RightUpDownVector: "⥏",
	RightUpTeeVector: "⥜",
	RightUpVector: "↾",
	RightUpVectorBar: "⥔",
	RightVector: "⇀",
	RightVectorBar: "⥓",
	Rightarrow: "⇒",
	Ropf: "ℝ",
	RoundImplies: "⥰",
	Rrightarrow: "⇛",
	Rscr: "ℛ",
	Rsh: "↱",
	RuleDelayed: "⧴",
	SHCHcy: "Щ",
	SHcy: "Ш",
	SOFTcy: "Ь",
	Sacute: "Ś",
	Sc: "⪼",
	Scaron: "Š",
	Scedil: "Ş",
	Scirc: "Ŝ",
	Scy: "С",
	Sfr: "𝔖",
	ShortDownArrow: "↓",
	ShortLeftArrow: "←",
	ShortRightArrow: "→",
	ShortUpArrow: "↑",
	Sigma: "Σ",
	SmallCircle: "∘",
	Sopf: "𝕊",
	Sqrt: "√",
	Square: "□",
	SquareIntersection: "⊓",
	SquareSubset: "⊏",
	SquareSubsetEqual: "⊑",
	SquareSuperset: "⊐",
	SquareSupersetEqual: "⊒",
	SquareUnion: "⊔",
	Sscr: "𝒮",
	Star: "⋆",
	Sub: "⋐",
	Subset: "⋐",
	SubsetEqual: "⊆",
	Succeeds: "≻",
	SucceedsEqual: "⪰",
	SucceedsSlantEqual: "≽",
	SucceedsTilde: "≿",
	SuchThat: "∋",
	Sum: "∑",
	Sup: "⋑",
	Superset: "⊃",
	SupersetEqual: "⊇",
	Supset: "⋑",
	THORN: "Þ",
	TRADE: "™",
	TSHcy: "Ћ",
	TScy: "Ц",
	Tab: "	",
	Tau: "Τ",
	Tcaron: "Ť",
	Tcedil: "Ţ",
	Tcy: "Т",
	Tfr: "𝔗",
	Therefore: "∴",
	Theta: "Θ",
	ThickSpace: "  ",
	ThinSpace: " ",
	Tilde: "∼",
	TildeEqual: "≃",
	TildeFullEqual: "≅",
	TildeTilde: "≈",
	Topf: "𝕋",
	TripleDot: "⃛",
	Tscr: "𝒯",
	Tstrok: "Ŧ",
	Uacute: "Ú",
	Uarr: "↟",
	Uarrocir: "⥉",
	Ubrcy: "Ў",
	Ubreve: "Ŭ",
	Ucirc: "Û",
	Ucy: "У",
	Udblac: "Ű",
	Ufr: "𝔘",
	Ugrave: "Ù",
	Umacr: "Ū",
	UnderBar: "_",
	UnderBrace: "⏟",
	UnderBracket: "⎵",
	UnderParenthesis: "⏝",
	Union: "⋃",
	UnionPlus: "⊎",
	Uogon: "Ų",
	Uopf: "𝕌",
	UpArrow: "↑",
	UpArrowBar: "⤒",
	UpArrowDownArrow: "⇅",
	UpDownArrow: "↕",
	UpEquilibrium: "⥮",
	UpTee: "⊥",
	UpTeeArrow: "↥",
	Uparrow: "⇑",
	Updownarrow: "⇕",
	UpperLeftArrow: "↖",
	UpperRightArrow: "↗",
	Upsi: "ϒ",
	Upsilon: "Υ",
	Uring: "Ů",
	Uscr: "𝒰",
	Utilde: "Ũ",
	Uuml: "Ü",
	VDash: "⊫",
	Vbar: "⫫",
	Vcy: "В",
	Vdash: "⊩",
	Vdashl: "⫦",
	Vee: "⋁",
	Verbar: "‖",
	Vert: "‖",
	VerticalBar: "∣",
	VerticalLine: "|",
	VerticalSeparator: "❘",
	VerticalTilde: "≀",
	VeryThinSpace: " ",
	Vfr: "𝔙",
	Vopf: "𝕍",
	Vscr: "𝒱",
	Vvdash: "⊪",
	Wcirc: "Ŵ",
	Wedge: "⋀",
	Wfr: "𝔚",
	Wopf: "𝕎",
	Wscr: "𝒲",
	Xfr: "𝔛",
	Xi: "Ξ",
	Xopf: "𝕏",
	Xscr: "𝒳",
	YAcy: "Я",
	YIcy: "Ї",
	YUcy: "Ю",
	Yacute: "Ý",
	Ycirc: "Ŷ",
	Ycy: "Ы",
	Yfr: "𝔜",
	Yopf: "𝕐",
	Yscr: "𝒴",
	Yuml: "Ÿ",
	ZHcy: "Ж",
	Zacute: "Ź",
	Zcaron: "Ž",
	Zcy: "З",
	Zdot: "Ż",
	ZeroWidthSpace: "​",
	Zeta: "Ζ",
	Zfr: "ℨ",
	Zopf: "ℤ",
	Zscr: "𝒵",
	aacute: "á",
	abreve: "ă",
	ac: "∾",
	acE: "∾̳",
	acd: "∿",
	acirc: "â",
	acute: "´",
	acy: "а",
	aelig: "æ",
	af: "⁡",
	afr: "𝔞",
	agrave: "à",
	alefsym: "ℵ",
	aleph: "ℵ",
	alpha: "α",
	amacr: "ā",
	amalg: "⨿",
	amp: "&",
	and: "∧",
	andand: "⩕",
	andd: "⩜",
	andslope: "⩘",
	andv: "⩚",
	ang: "∠",
	ange: "⦤",
	angle: "∠",
	angmsd: "∡",
	angmsdaa: "⦨",
	angmsdab: "⦩",
	angmsdac: "⦪",
	angmsdad: "⦫",
	angmsdae: "⦬",
	angmsdaf: "⦭",
	angmsdag: "⦮",
	angmsdah: "⦯",
	angrt: "∟",
	angrtvb: "⊾",
	angrtvbd: "⦝",
	angsph: "∢",
	angst: "Å",
	angzarr: "⍼",
	aogon: "ą",
	aopf: "𝕒",
	ap: "≈",
	apE: "⩰",
	apacir: "⩯",
	ape: "≊",
	apid: "≋",
	apos: "'",
	approx: "≈",
	approxeq: "≊",
	aring: "å",
	ascr: "𝒶",
	ast: "*",
	asymp: "≈",
	asympeq: "≍",
	atilde: "ã",
	auml: "ä",
	awconint: "∳",
	awint: "⨑",
	bNot: "⫭",
	backcong: "≌",
	backepsilon: "϶",
	backprime: "‵",
	backsim: "∽",
	backsimeq: "⋍",
	barvee: "⊽",
	barwed: "⌅",
	barwedge: "⌅",
	bbrk: "⎵",
	bbrktbrk: "⎶",
	bcong: "≌",
	bcy: "б",
	bdquo: "„",
	becaus: "∵",
	because: "∵",
	bemptyv: "⦰",
	bepsi: "϶",
	bernou: "ℬ",
	beta: "β",
	beth: "ℶ",
	between: "≬",
	bfr: "𝔟",
	bigcap: "⋂",
	bigcirc: "◯",
	bigcup: "⋃",
	bigodot: "⨀",
	bigoplus: "⨁",
	bigotimes: "⨂",
	bigsqcup: "⨆",
	bigstar: "★",
	bigtriangledown: "▽",
	bigtriangleup: "△",
	biguplus: "⨄",
	bigvee: "⋁",
	bigwedge: "⋀",
	bkarow: "⤍",
	blacklozenge: "⧫",
	blacksquare: "▪",
	blacktriangle: "▴",
	blacktriangledown: "▾",
	blacktriangleleft: "◂",
	blacktriangleright: "▸",
	blank: "␣",
	blk12: "▒",
	blk14: "░",
	blk34: "▓",
	block: "█",
	bne: "=⃥",
	bnequiv: "≡⃥",
	bnot: "⌐",
	bopf: "𝕓",
	bot: "⊥",
	bottom: "⊥",
	bowtie: "⋈",
	boxDL: "╗",
	boxDR: "╔",
	boxDl: "╖",
	boxDr: "╓",
	boxH: "═",
	boxHD: "╦",
	boxHU: "╩",
	boxHd: "╤",
	boxHu: "╧",
	boxUL: "╝",
	boxUR: "╚",
	boxUl: "╜",
	boxUr: "╙",
	boxV: "║",
	boxVH: "╬",
	boxVL: "╣",
	boxVR: "╠",
	boxVh: "╫",
	boxVl: "╢",
	boxVr: "╟",
	boxbox: "⧉",
	boxdL: "╕",
	boxdR: "╒",
	boxdl: "┐",
	boxdr: "┌",
	boxh: "─",
	boxhD: "╥",
	boxhU: "╨",
	boxhd: "┬",
	boxhu: "┴",
	boxminus: "⊟",
	boxplus: "⊞",
	boxtimes: "⊠",
	boxuL: "╛",
	boxuR: "╘",
	boxul: "┘",
	boxur: "└",
	boxv: "│",
	boxvH: "╪",
	boxvL: "╡",
	boxvR: "╞",
	boxvh: "┼",
	boxvl: "┤",
	boxvr: "├",
	bprime: "‵",
	breve: "˘",
	brvbar: "¦",
	bscr: "𝒷",
	bsemi: "⁏",
	bsim: "∽",
	bsime: "⋍",
	bsol: "\\",
	bsolb: "⧅",
	bsolhsub: "⟈",
	bull: "•",
	bullet: "•",
	bump: "≎",
	bumpE: "⪮",
	bumpe: "≏",
	bumpeq: "≏",
	cacute: "ć",
	cap: "∩",
	capand: "⩄",
	capbrcup: "⩉",
	capcap: "⩋",
	capcup: "⩇",
	capdot: "⩀",
	caps: "∩︀",
	caret: "⁁",
	caron: "ˇ",
	ccaps: "⩍",
	ccaron: "č",
	ccedil: "ç",
	ccirc: "ĉ",
	ccups: "⩌",
	ccupssm: "⩐",
	cdot: "ċ",
	cedil: "¸",
	cemptyv: "⦲",
	cent: "¢",
	centerdot: "·",
	cfr: "𝔠",
	chcy: "ч",
	check: "✓",
	checkmark: "✓",
	chi: "χ",
	cir: "○",
	cirE: "⧃",
	circ: "ˆ",
	circeq: "≗",
	circlearrowleft: "↺",
	circlearrowright: "↻",
	circledR: "®",
	circledS: "Ⓢ",
	circledast: "⊛",
	circledcirc: "⊚",
	circleddash: "⊝",
	cire: "≗",
	cirfnint: "⨐",
	cirmid: "⫯",
	cirscir: "⧂",
	clubs: "♣",
	clubsuit: "♣",
	colon: ":",
	colone: "≔",
	coloneq: "≔",
	comma: ",",
	commat: "@",
	comp: "∁",
	compfn: "∘",
	complement: "∁",
	complexes: "ℂ",
	cong: "≅",
	congdot: "⩭",
	conint: "∮",
	copf: "𝕔",
	coprod: "∐",
	copy: "©",
	copysr: "℗",
	crarr: "↵",
	cross: "✗",
	cscr: "𝒸",
	csub: "⫏",
	csube: "⫑",
	csup: "⫐",
	csupe: "⫒",
	ctdot: "⋯",
	cudarrl: "⤸",
	cudarrr: "⤵",
	cuepr: "⋞",
	cuesc: "⋟",
	cularr: "↶",
	cularrp: "⤽",
	cup: "∪",
	cupbrcap: "⩈",
	cupcap: "⩆",
	cupcup: "⩊",
	cupdot: "⊍",
	cupor: "⩅",
	cups: "∪︀",
	curarr: "↷",
	curarrm: "⤼",
	curlyeqprec: "⋞",
	curlyeqsucc: "⋟",
	curlyvee: "⋎",
	curlywedge: "⋏",
	curren: "¤",
	curvearrowleft: "↶",
	curvearrowright: "↷",
	cuvee: "⋎",
	cuwed: "⋏",
	cwconint: "∲",
	cwint: "∱",
	cylcty: "⌭",
	dArr: "⇓",
	dHar: "⥥",
	dagger: "†",
	daleth: "ℸ",
	darr: "↓",
	dash: "‐",
	dashv: "⊣",
	dbkarow: "⤏",
	dblac: "˝",
	dcaron: "ď",
	dcy: "д",
	dd: "ⅆ",
	ddagger: "‡",
	ddarr: "⇊",
	ddotseq: "⩷",
	deg: "°",
	delta: "δ",
	demptyv: "⦱",
	dfisht: "⥿",
	dfr: "𝔡",
	dharl: "⇃",
	dharr: "⇂",
	diam: "⋄",
	diamond: "⋄",
	diamondsuit: "♦",
	diams: "♦",
	die: "¨",
	digamma: "ϝ",
	disin: "⋲",
	div: "÷",
	divide: "÷",
	divideontimes: "⋇",
	divonx: "⋇",
	djcy: "ђ",
	dlcorn: "⌞",
	dlcrop: "⌍",
	dollar: "$",
	dopf: "𝕕",
	dot: "˙",
	doteq: "≐",
	doteqdot: "≑",
	dotminus: "∸",
	dotplus: "∔",
	dotsquare: "⊡",
	doublebarwedge: "⌆",
	downarrow: "↓",
	downdownarrows: "⇊",
	downharpoonleft: "⇃",
	downharpoonright: "⇂",
	drbkarow: "⤐",
	drcorn: "⌟",
	drcrop: "⌌",
	dscr: "𝒹",
	dscy: "ѕ",
	dsol: "⧶",
	dstrok: "đ",
	dtdot: "⋱",
	dtri: "▿",
	dtrif: "▾",
	duarr: "⇵",
	duhar: "⥯",
	dwangle: "⦦",
	dzcy: "џ",
	dzigrarr: "⟿",
	eDDot: "⩷",
	eDot: "≑",
	eacute: "é",
	easter: "⩮",
	ecaron: "ě",
	ecir: "≖",
	ecirc: "ê",
	ecolon: "≕",
	ecy: "э",
	edot: "ė",
	ee: "ⅇ",
	efDot: "≒",
	efr: "𝔢",
	eg: "⪚",
	egrave: "è",
	egs: "⪖",
	egsdot: "⪘",
	el: "⪙",
	elinters: "⏧",
	ell: "ℓ",
	els: "⪕",
	elsdot: "⪗",
	emacr: "ē",
	empty: "∅",
	emptyset: "∅",
	emptyv: "∅",
	emsp13: " ",
	emsp14: " ",
	emsp: " ",
	eng: "ŋ",
	ensp: " ",
	eogon: "ę",
	eopf: "𝕖",
	epar: "⋕",
	eparsl: "⧣",
	eplus: "⩱",
	epsi: "ε",
	epsilon: "ε",
	epsiv: "ϵ",
	eqcirc: "≖",
	eqcolon: "≕",
	eqsim: "≂",
	eqslantgtr: "⪖",
	eqslantless: "⪕",
	equals: "=",
	equest: "≟",
	equiv: "≡",
	equivDD: "⩸",
	eqvparsl: "⧥",
	erDot: "≓",
	erarr: "⥱",
	escr: "ℯ",
	esdot: "≐",
	esim: "≂",
	eta: "η",
	eth: "ð",
	euml: "ë",
	euro: "€",
	excl: "!",
	exist: "∃",
	expectation: "ℰ",
	exponentiale: "ⅇ",
	fallingdotseq: "≒",
	fcy: "ф",
	female: "♀",
	ffilig: "ﬃ",
	fflig: "ﬀ",
	ffllig: "ﬄ",
	ffr: "𝔣",
	filig: "ﬁ",
	fjlig: "fj",
	flat: "♭",
	fllig: "ﬂ",
	fltns: "▱",
	fnof: "ƒ",
	fopf: "𝕗",
	forall: "∀",
	fork: "⋔",
	forkv: "⫙",
	fpartint: "⨍",
	frac12: "½",
	frac13: "⅓",
	frac14: "¼",
	frac15: "⅕",
	frac16: "⅙",
	frac18: "⅛",
	frac23: "⅔",
	frac25: "⅖",
	frac34: "¾",
	frac35: "⅗",
	frac38: "⅜",
	frac45: "⅘",
	frac56: "⅚",
	frac58: "⅝",
	frac78: "⅞",
	frasl: "⁄",
	frown: "⌢",
	fscr: "𝒻",
	gE: "≧",
	gEl: "⪌",
	gacute: "ǵ",
	gamma: "γ",
	gammad: "ϝ",
	gap: "⪆",
	gbreve: "ğ",
	gcirc: "ĝ",
	gcy: "г",
	gdot: "ġ",
	ge: "≥",
	gel: "⋛",
	geq: "≥",
	geqq: "≧",
	geqslant: "⩾",
	ges: "⩾",
	gescc: "⪩",
	gesdot: "⪀",
	gesdoto: "⪂",
	gesdotol: "⪄",
	gesl: "⋛︀",
	gesles: "⪔",
	gfr: "𝔤",
	gg: "≫",
	ggg: "⋙",
	gimel: "ℷ",
	gjcy: "ѓ",
	gl: "≷",
	glE: "⪒",
	gla: "⪥",
	glj: "⪤",
	gnE: "≩",
	gnap: "⪊",
	gnapprox: "⪊",
	gne: "⪈",
	gneq: "⪈",
	gneqq: "≩",
	gnsim: "⋧",
	gopf: "𝕘",
	grave: "`",
	gscr: "ℊ",
	gsim: "≳",
	gsime: "⪎",
	gsiml: "⪐",
	gt: ">",
	gtcc: "⪧",
	gtcir: "⩺",
	gtdot: "⋗",
	gtlPar: "⦕",
	gtquest: "⩼",
	gtrapprox: "⪆",
	gtrarr: "⥸",
	gtrdot: "⋗",
	gtreqless: "⋛",
	gtreqqless: "⪌",
	gtrless: "≷",
	gtrsim: "≳",
	gvertneqq: "≩︀",
	gvnE: "≩︀",
	hArr: "⇔",
	hairsp: " ",
	half: "½",
	hamilt: "ℋ",
	hardcy: "ъ",
	harr: "↔",
	harrcir: "⥈",
	harrw: "↭",
	hbar: "ℏ",
	hcirc: "ĥ",
	hearts: "♥",
	heartsuit: "♥",
	hellip: "…",
	hercon: "⊹",
	hfr: "𝔥",
	hksearow: "⤥",
	hkswarow: "⤦",
	hoarr: "⇿",
	homtht: "∻",
	hookleftarrow: "↩",
	hookrightarrow: "↪",
	hopf: "𝕙",
	horbar: "―",
	hscr: "𝒽",
	hslash: "ℏ",
	hstrok: "ħ",
	hybull: "⁃",
	hyphen: "‐",
	iacute: "í",
	ic: "⁣",
	icirc: "î",
	icy: "и",
	iecy: "е",
	iexcl: "¡",
	iff: "⇔",
	ifr: "𝔦",
	igrave: "ì",
	ii: "ⅈ",
	iiiint: "⨌",
	iiint: "∭",
	iinfin: "⧜",
	iiota: "℩",
	ijlig: "ĳ",
	imacr: "ī",
	image: "ℑ",
	imagline: "ℐ",
	imagpart: "ℑ",
	imath: "ı",
	imof: "⊷",
	imped: "Ƶ",
	in: "∈",
	incare: "℅",
	infin: "∞",
	infintie: "⧝",
	inodot: "ı",
	int: "∫",
	intcal: "⊺",
	integers: "ℤ",
	intercal: "⊺",
	intlarhk: "⨗",
	intprod: "⨼",
	iocy: "ё",
	iogon: "į",
	iopf: "𝕚",
	iota: "ι",
	iprod: "⨼",
	iquest: "¿",
	iscr: "𝒾",
	isin: "∈",
	isinE: "⋹",
	isindot: "⋵",
	isins: "⋴",
	isinsv: "⋳",
	isinv: "∈",
	it: "⁢",
	itilde: "ĩ",
	iukcy: "і",
	iuml: "ï",
	jcirc: "ĵ",
	jcy: "й",
	jfr: "𝔧",
	jmath: "ȷ",
	jopf: "𝕛",
	jscr: "𝒿",
	jsercy: "ј",
	jukcy: "є",
	kappa: "κ",
	kappav: "ϰ",
	kcedil: "ķ",
	kcy: "к",
	kfr: "𝔨",
	kgreen: "ĸ",
	khcy: "х",
	kjcy: "ќ",
	kopf: "𝕜",
	kscr: "𝓀",
	lAarr: "⇚",
	lArr: "⇐",
	lAtail: "⤛",
	lBarr: "⤎",
	lE: "≦",
	lEg: "⪋",
	lHar: "⥢",
	lacute: "ĺ",
	laemptyv: "⦴",
	lagran: "ℒ",
	lambda: "λ",
	lang: "⟨",
	langd: "⦑",
	langle: "⟨",
	lap: "⪅",
	laquo: "«",
	larr: "←",
	larrb: "⇤",
	larrbfs: "⤟",
	larrfs: "⤝",
	larrhk: "↩",
	larrlp: "↫",
	larrpl: "⤹",
	larrsim: "⥳",
	larrtl: "↢",
	lat: "⪫",
	latail: "⤙",
	late: "⪭",
	lates: "⪭︀",
	lbarr: "⤌",
	lbbrk: "❲",
	lbrace: "{",
	lbrack: "[",
	lbrke: "⦋",
	lbrksld: "⦏",
	lbrkslu: "⦍",
	lcaron: "ľ",
	lcedil: "ļ",
	lceil: "⌈",
	lcub: "{",
	lcy: "л",
	ldca: "⤶",
	ldquo: "“",
	ldquor: "„",
	ldrdhar: "⥧",
	ldrushar: "⥋",
	ldsh: "↲",
	le: "≤",
	leftarrow: "←",
	leftarrowtail: "↢",
	leftharpoondown: "↽",
	leftharpoonup: "↼",
	leftleftarrows: "⇇",
	leftrightarrow: "↔",
	leftrightarrows: "⇆",
	leftrightharpoons: "⇋",
	leftrightsquigarrow: "↭",
	leftthreetimes: "⋋",
	leg: "⋚",
	leq: "≤",
	leqq: "≦",
	leqslant: "⩽",
	les: "⩽",
	lescc: "⪨",
	lesdot: "⩿",
	lesdoto: "⪁",
	lesdotor: "⪃",
	lesg: "⋚︀",
	lesges: "⪓",
	lessapprox: "⪅",
	lessdot: "⋖",
	lesseqgtr: "⋚",
	lesseqqgtr: "⪋",
	lessgtr: "≶",
	lesssim: "≲",
	lfisht: "⥼",
	lfloor: "⌊",
	lfr: "𝔩",
	lg: "≶",
	lgE: "⪑",
	lhard: "↽",
	lharu: "↼",
	lharul: "⥪",
	lhblk: "▄",
	ljcy: "љ",
	ll: "≪",
	llarr: "⇇",
	llcorner: "⌞",
	llhard: "⥫",
	lltri: "◺",
	lmidot: "ŀ",
	lmoust: "⎰",
	lmoustache: "⎰",
	lnE: "≨",
	lnap: "⪉",
	lnapprox: "⪉",
	lne: "⪇",
	lneq: "⪇",
	lneqq: "≨",
	lnsim: "⋦",
	loang: "⟬",
	loarr: "⇽",
	lobrk: "⟦",
	longleftarrow: "⟵",
	longleftrightarrow: "⟷",
	longmapsto: "⟼",
	longrightarrow: "⟶",
	looparrowleft: "↫",
	looparrowright: "↬",
	lopar: "⦅",
	lopf: "𝕝",
	loplus: "⨭",
	lotimes: "⨴",
	lowast: "∗",
	lowbar: "_",
	loz: "◊",
	lozenge: "◊",
	lozf: "⧫",
	lpar: "(",
	lparlt: "⦓",
	lrarr: "⇆",
	lrcorner: "⌟",
	lrhar: "⇋",
	lrhard: "⥭",
	lrm: "‎",
	lrtri: "⊿",
	lsaquo: "‹",
	lscr: "𝓁",
	lsh: "↰",
	lsim: "≲",
	lsime: "⪍",
	lsimg: "⪏",
	lsqb: "[",
	lsquo: "‘",
	lsquor: "‚",
	lstrok: "ł",
	lt: "<",
	ltcc: "⪦",
	ltcir: "⩹",
	ltdot: "⋖",
	lthree: "⋋",
	ltimes: "⋉",
	ltlarr: "⥶",
	ltquest: "⩻",
	ltrPar: "⦖",
	ltri: "◃",
	ltrie: "⊴",
	ltrif: "◂",
	lurdshar: "⥊",
	luruhar: "⥦",
	lvertneqq: "≨︀",
	lvnE: "≨︀",
	mDDot: "∺",
	macr: "¯",
	male: "♂",
	malt: "✠",
	maltese: "✠",
	map: "↦",
	mapsto: "↦",
	mapstodown: "↧",
	mapstoleft: "↤",
	mapstoup: "↥",
	marker: "▮",
	mcomma: "⨩",
	mcy: "м",
	mdash: "—",
	measuredangle: "∡",
	mfr: "𝔪",
	mho: "℧",
	micro: "µ",
	mid: "∣",
	midast: "*",
	midcir: "⫰",
	middot: "·",
	minus: "−",
	minusb: "⊟",
	minusd: "∸",
	minusdu: "⨪",
	mlcp: "⫛",
	mldr: "…",
	mnplus: "∓",
	models: "⊧",
	mopf: "𝕞",
	mp: "∓",
	mscr: "𝓂",
	mstpos: "∾",
	mu: "μ",
	multimap: "⊸",
	mumap: "⊸",
	nGg: "⋙̸",
	nGt: "≫⃒",
	nGtv: "≫̸",
	nLeftarrow: "⇍",
	nLeftrightarrow: "⇎",
	nLl: "⋘̸",
	nLt: "≪⃒",
	nLtv: "≪̸",
	nRightarrow: "⇏",
	nVDash: "⊯",
	nVdash: "⊮",
	nabla: "∇",
	nacute: "ń",
	nang: "∠⃒",
	nap: "≉",
	napE: "⩰̸",
	napid: "≋̸",
	napos: "ŉ",
	napprox: "≉",
	natur: "♮",
	natural: "♮",
	naturals: "ℕ",
	nbsp: "\xA0",
	nbump: "≎̸",
	nbumpe: "≏̸",
	ncap: "⩃",
	ncaron: "ň",
	ncedil: "ņ",
	ncong: "≇",
	ncongdot: "⩭̸",
	ncup: "⩂",
	ncy: "н",
	ndash: "–",
	ne: "≠",
	neArr: "⇗",
	nearhk: "⤤",
	nearr: "↗",
	nearrow: "↗",
	nedot: "≐̸",
	nequiv: "≢",
	nesear: "⤨",
	nesim: "≂̸",
	nexist: "∄",
	nexists: "∄",
	nfr: "𝔫",
	ngE: "≧̸",
	nge: "≱",
	ngeq: "≱",
	ngeqq: "≧̸",
	ngeqslant: "⩾̸",
	nges: "⩾̸",
	ngsim: "≵",
	ngt: "≯",
	ngtr: "≯",
	nhArr: "⇎",
	nharr: "↮",
	nhpar: "⫲",
	ni: "∋",
	nis: "⋼",
	nisd: "⋺",
	niv: "∋",
	njcy: "њ",
	nlArr: "⇍",
	nlE: "≦̸",
	nlarr: "↚",
	nldr: "‥",
	nle: "≰",
	nleftarrow: "↚",
	nleftrightarrow: "↮",
	nleq: "≰",
	nleqq: "≦̸",
	nleqslant: "⩽̸",
	nles: "⩽̸",
	nless: "≮",
	nlsim: "≴",
	nlt: "≮",
	nltri: "⋪",
	nltrie: "⋬",
	nmid: "∤",
	nopf: "𝕟",
	not: "¬",
	notin: "∉",
	notinE: "⋹̸",
	notindot: "⋵̸",
	notinva: "∉",
	notinvb: "⋷",
	notinvc: "⋶",
	notni: "∌",
	notniva: "∌",
	notnivb: "⋾",
	notnivc: "⋽",
	npar: "∦",
	nparallel: "∦",
	nparsl: "⫽⃥",
	npart: "∂̸",
	npolint: "⨔",
	npr: "⊀",
	nprcue: "⋠",
	npre: "⪯̸",
	nprec: "⊀",
	npreceq: "⪯̸",
	nrArr: "⇏",
	nrarr: "↛",
	nrarrc: "⤳̸",
	nrarrw: "↝̸",
	nrightarrow: "↛",
	nrtri: "⋫",
	nrtrie: "⋭",
	nsc: "⊁",
	nsccue: "⋡",
	nsce: "⪰̸",
	nscr: "𝓃",
	nshortmid: "∤",
	nshortparallel: "∦",
	nsim: "≁",
	nsime: "≄",
	nsimeq: "≄",
	nsmid: "∤",
	nspar: "∦",
	nsqsube: "⋢",
	nsqsupe: "⋣",
	nsub: "⊄",
	nsubE: "⫅̸",
	nsube: "⊈",
	nsubset: "⊂⃒",
	nsubseteq: "⊈",
	nsubseteqq: "⫅̸",
	nsucc: "⊁",
	nsucceq: "⪰̸",
	nsup: "⊅",
	nsupE: "⫆̸",
	nsupe: "⊉",
	nsupset: "⊃⃒",
	nsupseteq: "⊉",
	nsupseteqq: "⫆̸",
	ntgl: "≹",
	ntilde: "ñ",
	ntlg: "≸",
	ntriangleleft: "⋪",
	ntrianglelefteq: "⋬",
	ntriangleright: "⋫",
	ntrianglerighteq: "⋭",
	nu: "ν",
	num: "#",
	numero: "№",
	numsp: " ",
	nvDash: "⊭",
	nvHarr: "⤄",
	nvap: "≍⃒",
	nvdash: "⊬",
	nvge: "≥⃒",
	nvgt: ">⃒",
	nvinfin: "⧞",
	nvlArr: "⤂",
	nvle: "≤⃒",
	nvlt: "<⃒",
	nvltrie: "⊴⃒",
	nvrArr: "⤃",
	nvrtrie: "⊵⃒",
	nvsim: "∼⃒",
	nwArr: "⇖",
	nwarhk: "⤣",
	nwarr: "↖",
	nwarrow: "↖",
	nwnear: "⤧",
	oS: "Ⓢ",
	oacute: "ó",
	oast: "⊛",
	ocir: "⊚",
	ocirc: "ô",
	ocy: "о",
	odash: "⊝",
	odblac: "ő",
	odiv: "⨸",
	odot: "⊙",
	odsold: "⦼",
	oelig: "œ",
	ofcir: "⦿",
	ofr: "𝔬",
	ogon: "˛",
	ograve: "ò",
	ogt: "⧁",
	ohbar: "⦵",
	ohm: "Ω",
	oint: "∮",
	olarr: "↺",
	olcir: "⦾",
	olcross: "⦻",
	oline: "‾",
	olt: "⧀",
	omacr: "ō",
	omega: "ω",
	omicron: "ο",
	omid: "⦶",
	ominus: "⊖",
	oopf: "𝕠",
	opar: "⦷",
	operp: "⦹",
	oplus: "⊕",
	or: "∨",
	orarr: "↻",
	ord: "⩝",
	order: "ℴ",
	orderof: "ℴ",
	ordf: "ª",
	ordm: "º",
	origof: "⊶",
	oror: "⩖",
	orslope: "⩗",
	orv: "⩛",
	oscr: "ℴ",
	oslash: "ø",
	osol: "⊘",
	otilde: "õ",
	otimes: "⊗",
	otimesas: "⨶",
	ouml: "ö",
	ovbar: "⌽",
	par: "∥",
	para: "¶",
	parallel: "∥",
	parsim: "⫳",
	parsl: "⫽",
	part: "∂",
	pcy: "п",
	percnt: "%",
	period: ".",
	permil: "‰",
	perp: "⊥",
	pertenk: "‱",
	pfr: "𝔭",
	phi: "φ",
	phiv: "ϕ",
	phmmat: "ℳ",
	phone: "☎",
	pi: "π",
	pitchfork: "⋔",
	piv: "ϖ",
	planck: "ℏ",
	planckh: "ℎ",
	plankv: "ℏ",
	plus: "+",
	plusacir: "⨣",
	plusb: "⊞",
	pluscir: "⨢",
	plusdo: "∔",
	plusdu: "⨥",
	pluse: "⩲",
	plusmn: "±",
	plussim: "⨦",
	plustwo: "⨧",
	pm: "±",
	pointint: "⨕",
	popf: "𝕡",
	pound: "£",
	pr: "≺",
	prE: "⪳",
	prap: "⪷",
	prcue: "≼",
	pre: "⪯",
	prec: "≺",
	precapprox: "⪷",
	preccurlyeq: "≼",
	preceq: "⪯",
	precnapprox: "⪹",
	precneqq: "⪵",
	precnsim: "⋨",
	precsim: "≾",
	prime: "′",
	primes: "ℙ",
	prnE: "⪵",
	prnap: "⪹",
	prnsim: "⋨",
	prod: "∏",
	profalar: "⌮",
	profline: "⌒",
	profsurf: "⌓",
	prop: "∝",
	propto: "∝",
	prsim: "≾",
	prurel: "⊰",
	pscr: "𝓅",
	psi: "ψ",
	puncsp: " ",
	qfr: "𝔮",
	qint: "⨌",
	qopf: "𝕢",
	qprime: "⁗",
	qscr: "𝓆",
	quaternions: "ℍ",
	quatint: "⨖",
	quest: "?",
	questeq: "≟",
	quot: "\"",
	rAarr: "⇛",
	rArr: "⇒",
	rAtail: "⤜",
	rBarr: "⤏",
	rHar: "⥤",
	race: "∽̱",
	racute: "ŕ",
	radic: "√",
	raemptyv: "⦳",
	rang: "⟩",
	rangd: "⦒",
	range: "⦥",
	rangle: "⟩",
	raquo: "»",
	rarr: "→",
	rarrap: "⥵",
	rarrb: "⇥",
	rarrbfs: "⤠",
	rarrc: "⤳",
	rarrfs: "⤞",
	rarrhk: "↪",
	rarrlp: "↬",
	rarrpl: "⥅",
	rarrsim: "⥴",
	rarrtl: "↣",
	rarrw: "↝",
	ratail: "⤚",
	ratio: "∶",
	rationals: "ℚ",
	rbarr: "⤍",
	rbbrk: "❳",
	rbrace: "}",
	rbrack: "]",
	rbrke: "⦌",
	rbrksld: "⦎",
	rbrkslu: "⦐",
	rcaron: "ř",
	rcedil: "ŗ",
	rceil: "⌉",
	rcub: "}",
	rcy: "р",
	rdca: "⤷",
	rdldhar: "⥩",
	rdquo: "”",
	rdquor: "”",
	rdsh: "↳",
	real: "ℜ",
	realine: "ℛ",
	realpart: "ℜ",
	reals: "ℝ",
	rect: "▭",
	reg: "®",
	rfisht: "⥽",
	rfloor: "⌋",
	rfr: "𝔯",
	rhard: "⇁",
	rharu: "⇀",
	rharul: "⥬",
	rho: "ρ",
	rhov: "ϱ",
	rightarrow: "→",
	rightarrowtail: "↣",
	rightharpoondown: "⇁",
	rightharpoonup: "⇀",
	rightleftarrows: "⇄",
	rightleftharpoons: "⇌",
	rightrightarrows: "⇉",
	rightsquigarrow: "↝",
	rightthreetimes: "⋌",
	ring: "˚",
	risingdotseq: "≓",
	rlarr: "⇄",
	rlhar: "⇌",
	rlm: "‏",
	rmoust: "⎱",
	rmoustache: "⎱",
	rnmid: "⫮",
	roang: "⟭",
	roarr: "⇾",
	robrk: "⟧",
	ropar: "⦆",
	ropf: "𝕣",
	roplus: "⨮",
	rotimes: "⨵",
	rpar: ")",
	rpargt: "⦔",
	rppolint: "⨒",
	rrarr: "⇉",
	rsaquo: "›",
	rscr: "𝓇",
	rsh: "↱",
	rsqb: "]",
	rsquo: "’",
	rsquor: "’",
	rthree: "⋌",
	rtimes: "⋊",
	rtri: "▹",
	rtrie: "⊵",
	rtrif: "▸",
	rtriltri: "⧎",
	ruluhar: "⥨",
	rx: "℞",
	sacute: "ś",
	sbquo: "‚",
	sc: "≻",
	scE: "⪴",
	scap: "⪸",
	scaron: "š",
	sccue: "≽",
	sce: "⪰",
	scedil: "ş",
	scirc: "ŝ",
	scnE: "⪶",
	scnap: "⪺",
	scnsim: "⋩",
	scpolint: "⨓",
	scsim: "≿",
	scy: "с",
	sdot: "⋅",
	sdotb: "⊡",
	sdote: "⩦",
	seArr: "⇘",
	searhk: "⤥",
	searr: "↘",
	searrow: "↘",
	sect: "§",
	semi: ";",
	seswar: "⤩",
	setminus: "∖",
	setmn: "∖",
	sext: "✶",
	sfr: "𝔰",
	sfrown: "⌢",
	sharp: "♯",
	shchcy: "щ",
	shcy: "ш",
	shortmid: "∣",
	shortparallel: "∥",
	shy: "­",
	sigma: "σ",
	sigmaf: "ς",
	sigmav: "ς",
	sim: "∼",
	simdot: "⩪",
	sime: "≃",
	simeq: "≃",
	simg: "⪞",
	simgE: "⪠",
	siml: "⪝",
	simlE: "⪟",
	simne: "≆",
	simplus: "⨤",
	simrarr: "⥲",
	slarr: "←",
	smallsetminus: "∖",
	smashp: "⨳",
	smeparsl: "⧤",
	smid: "∣",
	smile: "⌣",
	smt: "⪪",
	smte: "⪬",
	smtes: "⪬︀",
	softcy: "ь",
	sol: "/",
	solb: "⧄",
	solbar: "⌿",
	sopf: "𝕤",
	spades: "♠",
	spadesuit: "♠",
	spar: "∥",
	sqcap: "⊓",
	sqcaps: "⊓︀",
	sqcup: "⊔",
	sqcups: "⊔︀",
	sqsub: "⊏",
	sqsube: "⊑",
	sqsubset: "⊏",
	sqsubseteq: "⊑",
	sqsup: "⊐",
	sqsupe: "⊒",
	sqsupset: "⊐",
	sqsupseteq: "⊒",
	squ: "□",
	square: "□",
	squarf: "▪",
	squf: "▪",
	srarr: "→",
	sscr: "𝓈",
	ssetmn: "∖",
	ssmile: "⌣",
	sstarf: "⋆",
	star: "☆",
	starf: "★",
	straightepsilon: "ϵ",
	straightphi: "ϕ",
	strns: "¯",
	sub: "⊂",
	subE: "⫅",
	subdot: "⪽",
	sube: "⊆",
	subedot: "⫃",
	submult: "⫁",
	subnE: "⫋",
	subne: "⊊",
	subplus: "⪿",
	subrarr: "⥹",
	subset: "⊂",
	subseteq: "⊆",
	subseteqq: "⫅",
	subsetneq: "⊊",
	subsetneqq: "⫋",
	subsim: "⫇",
	subsub: "⫕",
	subsup: "⫓",
	succ: "≻",
	succapprox: "⪸",
	succcurlyeq: "≽",
	succeq: "⪰",
	succnapprox: "⪺",
	succneqq: "⪶",
	succnsim: "⋩",
	succsim: "≿",
	sum: "∑",
	sung: "♪",
	sup1: "¹",
	sup2: "²",
	sup3: "³",
	sup: "⊃",
	supE: "⫆",
	supdot: "⪾",
	supdsub: "⫘",
	supe: "⊇",
	supedot: "⫄",
	suphsol: "⟉",
	suphsub: "⫗",
	suplarr: "⥻",
	supmult: "⫂",
	supnE: "⫌",
	supne: "⊋",
	supplus: "⫀",
	supset: "⊃",
	supseteq: "⊇",
	supseteqq: "⫆",
	supsetneq: "⊋",
	supsetneqq: "⫌",
	supsim: "⫈",
	supsub: "⫔",
	supsup: "⫖",
	swArr: "⇙",
	swarhk: "⤦",
	swarr: "↙",
	swarrow: "↙",
	swnwar: "⤪",
	szlig: "ß",
	target: "⌖",
	tau: "τ",
	tbrk: "⎴",
	tcaron: "ť",
	tcedil: "ţ",
	tcy: "т",
	tdot: "⃛",
	telrec: "⌕",
	tfr: "𝔱",
	there4: "∴",
	therefore: "∴",
	theta: "θ",
	thetasym: "ϑ",
	thetav: "ϑ",
	thickapprox: "≈",
	thicksim: "∼",
	thinsp: " ",
	thkap: "≈",
	thksim: "∼",
	thorn: "þ",
	tilde: "˜",
	times: "×",
	timesb: "⊠",
	timesbar: "⨱",
	timesd: "⨰",
	tint: "∭",
	toea: "⤨",
	top: "⊤",
	topbot: "⌶",
	topcir: "⫱",
	topf: "𝕥",
	topfork: "⫚",
	tosa: "⤩",
	tprime: "‴",
	trade: "™",
	triangle: "▵",
	triangledown: "▿",
	triangleleft: "◃",
	trianglelefteq: "⊴",
	triangleq: "≜",
	triangleright: "▹",
	trianglerighteq: "⊵",
	tridot: "◬",
	trie: "≜",
	triminus: "⨺",
	triplus: "⨹",
	trisb: "⧍",
	tritime: "⨻",
	trpezium: "⏢",
	tscr: "𝓉",
	tscy: "ц",
	tshcy: "ћ",
	tstrok: "ŧ",
	twixt: "≬",
	twoheadleftarrow: "↞",
	twoheadrightarrow: "↠",
	uArr: "⇑",
	uHar: "⥣",
	uacute: "ú",
	uarr: "↑",
	ubrcy: "ў",
	ubreve: "ŭ",
	ucirc: "û",
	ucy: "у",
	udarr: "⇅",
	udblac: "ű",
	udhar: "⥮",
	ufisht: "⥾",
	ufr: "𝔲",
	ugrave: "ù",
	uharl: "↿",
	uharr: "↾",
	uhblk: "▀",
	ulcorn: "⌜",
	ulcorner: "⌜",
	ulcrop: "⌏",
	ultri: "◸",
	umacr: "ū",
	uml: "¨",
	uogon: "ų",
	uopf: "𝕦",
	uparrow: "↑",
	updownarrow: "↕",
	upharpoonleft: "↿",
	upharpoonright: "↾",
	uplus: "⊎",
	upsi: "υ",
	upsih: "ϒ",
	upsilon: "υ",
	upuparrows: "⇈",
	urcorn: "⌝",
	urcorner: "⌝",
	urcrop: "⌎",
	uring: "ů",
	urtri: "◹",
	uscr: "𝓊",
	utdot: "⋰",
	utilde: "ũ",
	utri: "▵",
	utrif: "▴",
	uuarr: "⇈",
	uuml: "ü",
	uwangle: "⦧",
	vArr: "⇕",
	vBar: "⫨",
	vBarv: "⫩",
	vDash: "⊨",
	vangrt: "⦜",
	varepsilon: "ϵ",
	varkappa: "ϰ",
	varnothing: "∅",
	varphi: "ϕ",
	varpi: "ϖ",
	varpropto: "∝",
	varr: "↕",
	varrho: "ϱ",
	varsigma: "ς",
	varsubsetneq: "⊊︀",
	varsubsetneqq: "⫋︀",
	varsupsetneq: "⊋︀",
	varsupsetneqq: "⫌︀",
	vartheta: "ϑ",
	vartriangleleft: "⊲",
	vartriangleright: "⊳",
	vcy: "в",
	vdash: "⊢",
	vee: "∨",
	veebar: "⊻",
	veeeq: "≚",
	vellip: "⋮",
	verbar: "|",
	vert: "|",
	vfr: "𝔳",
	vltri: "⊲",
	vnsub: "⊂⃒",
	vnsup: "⊃⃒",
	vopf: "𝕧",
	vprop: "∝",
	vrtri: "⊳",
	vscr: "𝓋",
	vsubnE: "⫋︀",
	vsubne: "⊊︀",
	vsupnE: "⫌︀",
	vsupne: "⊋︀",
	vzigzag: "⦚",
	wcirc: "ŵ",
	wedbar: "⩟",
	wedge: "∧",
	wedgeq: "≙",
	weierp: "℘",
	wfr: "𝔴",
	wopf: "𝕨",
	wp: "℘",
	wr: "≀",
	wreath: "≀",
	wscr: "𝓌",
	xcap: "⋂",
	xcirc: "◯",
	xcup: "⋃",
	xdtri: "▽",
	xfr: "𝔵",
	xhArr: "⟺",
	xharr: "⟷",
	xi: "ξ",
	xlArr: "⟸",
	xlarr: "⟵",
	xmap: "⟼",
	xnis: "⋻",
	xodot: "⨀",
	xopf: "𝕩",
	xoplus: "⨁",
	xotime: "⨂",
	xrArr: "⟹",
	xrarr: "⟶",
	xscr: "𝓍",
	xsqcup: "⨆",
	xuplus: "⨄",
	xutri: "△",
	xvee: "⋁",
	xwedge: "⋀",
	yacute: "ý",
	yacy: "я",
	ycirc: "ŷ",
	ycy: "ы",
	yen: "¥",
	yfr: "𝔶",
	yicy: "ї",
	yopf: "𝕪",
	yscr: "𝓎",
	yucy: "ю",
	yuml: "ÿ",
	zacute: "ź",
	zcaron: "ž",
	zcy: "з",
	zdot: "ż",
	zeetrf: "ℨ",
	zeta: "ζ",
	zfr: "𝔷",
	zhcy: "ж",
	zigrarr: "⇝",
	zopf: "𝕫",
	zscr: "𝓏",
	zwj: "‍",
	zwnj: "‌"
};

//#endregion
//#region ../node_modules/.pnpm/decode-named-character-reference@1.0.2/node_modules/decode-named-character-reference/index.js
const own$4 = {}.hasOwnProperty;
function decodeNamedCharacterReference(value) {
	return own$4.call(characterEntities, value) ? characterEntities[value] : false;
}

//#endregion
//#region ../node_modules/.pnpm/micromark-util-chunked@2.0.0/node_modules/micromark-util-chunked/index.js
function splice(list$3, start, remove$4, items) {
	const end = list$3.length;
	let chunkStart = 0;
	/** @type {Array<unknown>} */
	let parameters;
	if (start < 0) start = -start > end ? 0 : end + start;
else start = start > end ? end : start;
	remove$4 = remove$4 > 0 ? remove$4 : 0;
	if (items.length < 1e4) {
		parameters = Array.from(items);
		parameters.unshift(start, remove$4);
		list$3.splice(...parameters);
	} else {
		if (remove$4) list$3.splice(start, remove$4);
		while (chunkStart < items.length) {
			parameters = items.slice(chunkStart, chunkStart + 1e4);
			parameters.unshift(start, 0);
			list$3.splice(...parameters);
			chunkStart += 1e4;
			start += 1e4;
		}
	}
}
function push$1(list$3, items) {
	if (list$3.length > 0) {
		splice(list$3, list$3.length, 0, items);
		return list$3;
	}
	return items;
}

//#endregion
//#region ../node_modules/.pnpm/micromark-util-combine-extensions@2.0.0/node_modules/micromark-util-combine-extensions/index.js
const hasOwnProperty = {}.hasOwnProperty;
function combineExtensions(extensions) {
	/** @type {NormalizedExtension} */
	const all$1 = {};
	let index$1 = -1;
	while (++index$1 < extensions.length) syntaxExtension(all$1, extensions[index$1]);
	return all$1;
}
/**
* Merge `extension` into `all`.
*
* @param {NormalizedExtension} all
*   Extension to merge into.
* @param {Extension} extension
*   Extension to merge.
* @returns {undefined}
*/
function syntaxExtension(all$1, extension$1) {
	/** @type {keyof Extension} */
	let hook$1;
	for (hook$1 in extension$1) {
		const maybe = hasOwnProperty.call(all$1, hook$1) ? all$1[hook$1] : undefined;
		/** @type {Record<string, unknown>} */
		const left = maybe || (all$1[hook$1] = {});
		/** @type {Record<string, unknown> | undefined} */
		const right = extension$1[hook$1];
		/** @type {string} */
		let code$1;
		if (right) for (code$1 in right) {
			if (!hasOwnProperty.call(left, code$1)) left[code$1] = [];
			const value = right[code$1];
			constructs(
				// @ts-expect-error Looks like a list.
				left[code$1],
				Array.isArray(value) ? value : value ? [value] : []
);
		}
	}
}
/**
* Merge `list` into `existing` (both lists of constructs).
* Mutates `existing`.
*
* @param {Array<unknown>} existing
* @param {Array<unknown>} list
* @returns {undefined}
*/
function constructs(existing, list$3) {
	let index$1 = -1;
	/** @type {Array<unknown>} */
	const before = [];
	while (++index$1 < list$3.length) (list$3[index$1].add === "after" ? existing : before).push(list$3[index$1]);
	splice(existing, 0, 0, before);
}

//#endregion
//#region ../node_modules/.pnpm/micromark-util-decode-numeric-character-reference@2.0.1/node_modules/micromark-util-decode-numeric-character-reference/index.js
function decodeNumericCharacterReference(value, base) {
	const code$1 = Number.parseInt(value, base);
	if (code$1 < 9 || code$1 === 11 || code$1 > 13 && code$1 < 32 || code$1 > 126 && code$1 < 160 || code$1 > 55295 && code$1 < 57344 || code$1 > 64975 && code$1 < 65008 || (code$1 & 65535) === 65535 || (code$1 & 65535) === 65534 || code$1 > 1114111) return "�";
	return String.fromCodePoint(code$1);
}

//#endregion
//#region ../node_modules/.pnpm/micromark-util-normalize-identifier@2.0.0/node_modules/micromark-util-normalize-identifier/index.js
function normalizeIdentifier(value) {
	return value.replace(/[\t\n\r ]+/g, " ").replace(/^ | $/g, "").toLowerCase().toUpperCase();
}

//#endregion
//#region ../node_modules/.pnpm/micromark-util-character@2.1.0/node_modules/micromark-util-character/index.js
const asciiAlpha = regexCheck(/[A-Za-z]/);
const asciiAlphanumeric = regexCheck(/[\dA-Za-z]/);
const asciiAtext = regexCheck(/[#-'*+\--9=?A-Z^-~]/);
function asciiControl(code$1) {
	return code$1 !== null && (code$1 < 32 || code$1 === 127);
}
const asciiDigit = regexCheck(/\d/);
const asciiHexDigit = regexCheck(/[\dA-Fa-f]/);
const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);
function markdownLineEnding(code$1) {
	return code$1 !== null && code$1 < -2;
}
function markdownLineEndingOrSpace(code$1) {
	return code$1 !== null && (code$1 < 0 || code$1 === 32);
}
function markdownSpace(code$1) {
	return code$1 === -2 || code$1 === -1 || code$1 === 32;
}
const unicodePunctuation = regexCheck(/\p{P}|\p{S}/u);
const unicodeWhitespace = regexCheck(/\s/);
/**
* Create a code check from a regex.
*
* @param {RegExp} regex
* @returns {(code: Code) => boolean}
*/
function regexCheck(regex) {
	return check;
	/**
	* Check whether a code matches the bound regex.
	*
	* @param {Code} code
	*   Character code.
	* @returns {boolean}
	*   Whether the character code matches the bound regex.
	*/
	function check(code$1) {
		return code$1 !== null && code$1 > -1 && regex.test(String.fromCharCode(code$1));
	}
}

//#endregion
//#region ../node_modules/.pnpm/micromark-factory-space@2.0.0/node_modules/micromark-factory-space/index.js
function factorySpace(effects, ok$2, type, max) {
	const limit = max ? max - 1 : Number.POSITIVE_INFINITY;
	let size = 0;
	return start;
	/** @type {State} */
	function start(code$1) {
		if (markdownSpace(code$1)) {
			effects.enter(type);
			return prefix$1(code$1);
		}
		return ok$2(code$1);
	}
	/** @type {State} */
	function prefix$1(code$1) {
		if (markdownSpace(code$1) && size++ < limit) {
			effects.consume(code$1);
			return prefix$1;
		}
		effects.exit(type);
		return ok$2(code$1);
	}
}

//#endregion
//#region ../node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/lib/initialize/content.js
const content$1 = { tokenize: initializeContent };
/**
* @this {TokenizeContext}
* @type {Initializer}
*/
function initializeContent(effects) {
	const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);
	/** @type {Token} */
	let previous$1;
	return contentStart;
	/** @type {State} */
	function afterContentStartConstruct(code$1) {
		if (code$1 === null) {
			effects.consume(code$1);
			return;
		}
		effects.enter("lineEnding");
		effects.consume(code$1);
		effects.exit("lineEnding");
		return factorySpace(effects, contentStart, "linePrefix");
	}
	/** @type {State} */
	function paragraphInitial(code$1) {
		effects.enter("paragraph");
		return lineStart(code$1);
	}
	/** @type {State} */
	function lineStart(code$1) {
		const token = effects.enter("chunkText", {
			contentType: "text",
			previous: previous$1
		});
		if (previous$1) previous$1.next = token;
		previous$1 = token;
		return data(code$1);
	}
	/** @type {State} */
	function data(code$1) {
		if (code$1 === null) {
			effects.exit("chunkText");
			effects.exit("paragraph");
			effects.consume(code$1);
			return;
		}
		if (markdownLineEnding(code$1)) {
			effects.consume(code$1);
			effects.exit("chunkText");
			return lineStart;
		}
		effects.consume(code$1);
		return data;
	}
}

//#endregion
//#region ../node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/lib/initialize/document.js
const document$1 = { tokenize: initializeDocument };
/** @type {Construct} */
const containerConstruct = { tokenize: tokenizeContainer };
/**
* @this {TokenizeContext}
* @type {Initializer}
*/
function initializeDocument(effects) {
	const self$1 = this;
	/** @type {Array<StackItem>} */
	const stack = [];
	let continued = 0;
	/** @type {TokenizeContext | undefined} */
	let childFlow;
	/** @type {Token | undefined} */
	let childToken;
	/** @type {number} */
	let lineStartOffset;
	return start;
	/** @type {State} */
	function start(code$1) {
		if (continued < stack.length) {
			const item = stack[continued];
			self$1.containerState = item[1];
			return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code$1);
		}
		return checkNewContainers(code$1);
	}
	/** @type {State} */
	function documentContinue(code$1) {
		continued++;
		if (self$1.containerState._closeFlow) {
			self$1.containerState._closeFlow = undefined;
			if (childFlow) closeFlow();
			const indexBeforeExits = self$1.events.length;
			let indexBeforeFlow = indexBeforeExits;
			/** @type {Point | undefined} */
			let point$2;
			while (indexBeforeFlow--) if (self$1.events[indexBeforeFlow][0] === "exit" && self$1.events[indexBeforeFlow][1].type === "chunkFlow") {
				point$2 = self$1.events[indexBeforeFlow][1].end;
				break;
			}
			exitContainers(continued);
			let index$1 = indexBeforeExits;
			while (index$1 < self$1.events.length) {
				self$1.events[index$1][1].end = Object.assign({}, point$2);
				index$1++;
			}
			splice(self$1.events, indexBeforeFlow + 1, 0, self$1.events.slice(indexBeforeExits));
			self$1.events.length = index$1;
			return checkNewContainers(code$1);
		}
		return start(code$1);
	}
	/** @type {State} */
	function checkNewContainers(code$1) {
		if (continued === stack.length) {
			if (!childFlow) return documentContinued(code$1);
			if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) return flowStart(code$1);
			self$1.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);
		}
		self$1.containerState = {};
		return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code$1);
	}
	/** @type {State} */
	function thereIsANewContainer(code$1) {
		if (childFlow) closeFlow();
		exitContainers(continued);
		return documentContinued(code$1);
	}
	/** @type {State} */
	function thereIsNoNewContainer(code$1) {
		self$1.parser.lazy[self$1.now().line] = continued !== stack.length;
		lineStartOffset = self$1.now().offset;
		return flowStart(code$1);
	}
	/** @type {State} */
	function documentContinued(code$1) {
		self$1.containerState = {};
		return effects.attempt(containerConstruct, containerContinue, flowStart)(code$1);
	}
	/** @type {State} */
	function containerContinue(code$1) {
		continued++;
		stack.push([self$1.currentConstruct, self$1.containerState]);
		return documentContinued(code$1);
	}
	/** @type {State} */
	function flowStart(code$1) {
		if (code$1 === null) {
			if (childFlow) closeFlow();
			exitContainers(0);
			effects.consume(code$1);
			return;
		}
		childFlow = childFlow || self$1.parser.flow(self$1.now());
		effects.enter("chunkFlow", {
			contentType: "flow",
			previous: childToken,
			_tokenizer: childFlow
		});
		return flowContinue(code$1);
	}
	/** @type {State} */
	function flowContinue(code$1) {
		if (code$1 === null) {
			writeToChild(effects.exit("chunkFlow"), true);
			exitContainers(0);
			effects.consume(code$1);
			return;
		}
		if (markdownLineEnding(code$1)) {
			effects.consume(code$1);
			writeToChild(effects.exit("chunkFlow"));
			continued = 0;
			self$1.interrupt = undefined;
			return start;
		}
		effects.consume(code$1);
		return flowContinue;
	}
	/**
	* @param {Token} token
	* @param {boolean | undefined} [eof]
	* @returns {undefined}
	*/
	function writeToChild(token, eof) {
		const stream$3 = self$1.sliceStream(token);
		if (eof) stream$3.push(null);
		token.previous = childToken;
		if (childToken) childToken.next = token;
		childToken = token;
		childFlow.defineSkip(token.start);
		childFlow.write(stream$3);
		if (self$1.parser.lazy[token.start.line]) {
			let index$1 = childFlow.events.length;
			while (index$1--) if (childFlow.events[index$1][1].start.offset < lineStartOffset && (!childFlow.events[index$1][1].end || childFlow.events[index$1][1].end.offset > lineStartOffset)) return;
			const indexBeforeExits = self$1.events.length;
			let indexBeforeFlow = indexBeforeExits;
			/** @type {boolean | undefined} */
			let seen;
			/** @type {Point | undefined} */
			let point$2;
			while (indexBeforeFlow--) if (self$1.events[indexBeforeFlow][0] === "exit" && self$1.events[indexBeforeFlow][1].type === "chunkFlow") {
				if (seen) {
					point$2 = self$1.events[indexBeforeFlow][1].end;
					break;
				}
				seen = true;
			}
			exitContainers(continued);
			index$1 = indexBeforeExits;
			while (index$1 < self$1.events.length) {
				self$1.events[index$1][1].end = Object.assign({}, point$2);
				index$1++;
			}
			splice(self$1.events, indexBeforeFlow + 1, 0, self$1.events.slice(indexBeforeExits));
			self$1.events.length = index$1;
		}
	}
	/**
	* @param {number} size
	* @returns {undefined}
	*/
	function exitContainers(size) {
		let index$1 = stack.length;
		while (index$1-- > size) {
			const entry = stack[index$1];
			self$1.containerState = entry[1];
			entry[0].exit.call(self$1, effects);
		}
		stack.length = size;
	}
	function closeFlow() {
		childFlow.write([null]);
		childToken = undefined;
		childFlow = undefined;
		self$1.containerState._closeFlow = undefined;
	}
}
/**
* @this {TokenizeContext}
* @type {Tokenizer}
*/
function tokenizeContainer(effects, ok$2, nok) {
	return factorySpace(effects, effects.attempt(this.parser.constructs.document, ok$2, nok), "linePrefix", this.parser.constructs.disable.null.includes("codeIndented") ? undefined : 4);
}

//#endregion
//#region ../node_modules/.pnpm/micromark-util-classify-character@2.0.0/node_modules/micromark-util-classify-character/index.js
function classifyCharacter(code$1) {
	if (code$1 === null || markdownLineEndingOrSpace(code$1) || unicodeWhitespace(code$1)) return 1;
	if (unicodePunctuation(code$1)) return 2;
}

//#endregion
//#region ../node_modules/.pnpm/micromark-util-resolve-all@2.0.0/node_modules/micromark-util-resolve-all/index.js
function resolveAll(constructs$1, events$2, context$1) {
	/** @type {Array<Resolver>} */
	const called = [];
	let index$1 = -1;
	while (++index$1 < constructs$1.length) {
		const resolve$1 = constructs$1[index$1].resolveAll;
		if (resolve$1 && !called.includes(resolve$1)) {
			events$2 = resolve$1(events$2, context$1);
			called.push(resolve$1);
		}
	}
	return events$2;
}

//#endregion
//#region ../node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/attention.js
const attention = {
	name: "attention",
	tokenize: tokenizeAttention,
	resolveAll: resolveAllAttention
};
/**
* Take all events and resolve attention to emphasis or strong.
*
* @type {Resolver}
*/
function resolveAllAttention(events$2, context$1) {
	let index$1 = -1;
	/** @type {number} */
	let open;
	/** @type {Token} */
	let group$1;
	/** @type {Token} */
	let text$3;
	/** @type {Token} */
	let openingSequence;
	/** @type {Token} */
	let closingSequence;
	/** @type {number} */
	let use;
	/** @type {Array<Event>} */
	let nextEvents;
	/** @type {number} */
	let offset;
	while (++index$1 < events$2.length) if (events$2[index$1][0] === "enter" && events$2[index$1][1].type === "attentionSequence" && events$2[index$1][1]._close) {
		open = index$1;
		while (open--) if (events$2[open][0] === "exit" && events$2[open][1].type === "attentionSequence" && events$2[open][1]._open && context$1.sliceSerialize(events$2[open][1]).charCodeAt(0) === context$1.sliceSerialize(events$2[index$1][1]).charCodeAt(0)) {
			if ((events$2[open][1]._close || events$2[index$1][1]._open) && (events$2[index$1][1].end.offset - events$2[index$1][1].start.offset) % 3 && !((events$2[open][1].end.offset - events$2[open][1].start.offset + events$2[index$1][1].end.offset - events$2[index$1][1].start.offset) % 3)) continue;
			use = events$2[open][1].end.offset - events$2[open][1].start.offset > 1 && events$2[index$1][1].end.offset - events$2[index$1][1].start.offset > 1 ? 2 : 1;
			const start = Object.assign({}, events$2[open][1].end);
			const end = Object.assign({}, events$2[index$1][1].start);
			movePoint(start, -use);
			movePoint(end, use);
			openingSequence = {
				type: use > 1 ? "strongSequence" : "emphasisSequence",
				start,
				end: Object.assign({}, events$2[open][1].end)
			};
			closingSequence = {
				type: use > 1 ? "strongSequence" : "emphasisSequence",
				start: Object.assign({}, events$2[index$1][1].start),
				end
			};
			text$3 = {
				type: use > 1 ? "strongText" : "emphasisText",
				start: Object.assign({}, events$2[open][1].end),
				end: Object.assign({}, events$2[index$1][1].start)
			};
			group$1 = {
				type: use > 1 ? "strong" : "emphasis",
				start: Object.assign({}, openingSequence.start),
				end: Object.assign({}, closingSequence.end)
			};
			events$2[open][1].end = Object.assign({}, openingSequence.start);
			events$2[index$1][1].start = Object.assign({}, closingSequence.end);
			nextEvents = [];
			if (events$2[open][1].end.offset - events$2[open][1].start.offset) nextEvents = push$1(nextEvents, [[
				"enter",
				events$2[open][1],
				context$1
			], [
				"exit",
				events$2[open][1],
				context$1
			]]);
			nextEvents = push$1(nextEvents, [
				[
					"enter",
					group$1,
					context$1
				],
				[
					"enter",
					openingSequence,
					context$1
				],
				[
					"exit",
					openingSequence,
					context$1
				],
				[
					"enter",
					text$3,
					context$1
				]
			]);
			nextEvents = push$1(nextEvents, resolveAll(context$1.parser.constructs.insideSpan.null, events$2.slice(open + 1, index$1), context$1));
			nextEvents = push$1(nextEvents, [
				[
					"exit",
					text$3,
					context$1
				],
				[
					"enter",
					closingSequence,
					context$1
				],
				[
					"exit",
					closingSequence,
					context$1
				],
				[
					"exit",
					group$1,
					context$1
				]
			]);
			if (events$2[index$1][1].end.offset - events$2[index$1][1].start.offset) {
				offset = 2;
				nextEvents = push$1(nextEvents, [[
					"enter",
					events$2[index$1][1],
					context$1
				], [
					"exit",
					events$2[index$1][1],
					context$1
				]]);
			} else offset = 0;
			splice(events$2, open - 1, index$1 - open + 3, nextEvents);
			index$1 = open + nextEvents.length - offset - 2;
			break;
		}
	}
	index$1 = -1;
	while (++index$1 < events$2.length) if (events$2[index$1][1].type === "attentionSequence") events$2[index$1][1].type = "data";
	return events$2;
}
/**
* @this {TokenizeContext}
* @type {Tokenizer}
*/
function tokenizeAttention(effects, ok$2) {
	const attentionMarkers$1 = this.parser.constructs.attentionMarkers.null;
	const previous$1 = this.previous;
	const before = classifyCharacter(previous$1);
	/** @type {NonNullable<Code>} */
	let marker;
	return start;
	/**
	* Before a sequence.
	*
	* ```markdown
	* > | **
	*     ^
	* ```
	*
	* @type {State}
	*/
	function start(code$1) {
		marker = code$1;
		effects.enter("attentionSequence");
		return inside(code$1);
	}
	/**
	* In a sequence.
	*
	* ```markdown
	* > | **
	*     ^^
	* ```
	*
	* @type {State}
	*/
	function inside(code$1) {
		if (code$1 === marker) {
			effects.consume(code$1);
			return inside;
		}
		const token = effects.exit("attentionSequence");
		const after = classifyCharacter(code$1);
		const open = !after || after === 2 && before || attentionMarkers$1.includes(code$1);
		const close = !before || before === 2 && after || attentionMarkers$1.includes(previous$1);
		token._open = Boolean(marker === 42 ? open : open && (before || !close));
		token._close = Boolean(marker === 42 ? close : close && (after || !open));
		return ok$2(code$1);
	}
}
/**
* Move a point a bit.
*
* Note: `move` only works inside lines! It’s not possible to move past other
* chunks (replacement characters, tabs, or line endings).
*
* @param {Point} point
* @param {number} offset
* @returns {undefined}
*/
function movePoint(point$2, offset) {
	point$2.column += offset;
	point$2.offset += offset;
	point$2._bufferIndex += offset;
}

//#endregion
//#region ../node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/autolink.js
const autolink = {
	name: "autolink",
	tokenize: tokenizeAutolink
};
/**
* @this {TokenizeContext}
* @type {Tokenizer}
*/
function tokenizeAutolink(effects, ok$2, nok) {
	let size = 0;
	return start;
	/**
	* Start of an autolink.
	*
	* ```markdown
	* > | a<https://example.com>b
	*      ^
	* > | a<user@example.com>b
	*      ^
	* ```
	*
	* @type {State}
	*/
	function start(code$1) {
		effects.enter("autolink");
		effects.enter("autolinkMarker");
		effects.consume(code$1);
		effects.exit("autolinkMarker");
		effects.enter("autolinkProtocol");
		return open;
	}
	/**
	* After `<`, at protocol or atext.
	*
	* ```markdown
	* > | a<https://example.com>b
	*       ^
	* > | a<user@example.com>b
	*       ^
	* ```
	*
	* @type {State}
	*/
	function open(code$1) {
		if (asciiAlpha(code$1)) {
			effects.consume(code$1);
			return schemeOrEmailAtext;
		}
		if (code$1 === 64) return nok(code$1);
		return emailAtext(code$1);
	}
	/**
	* At second byte of protocol or atext.
	*
	* ```markdown
	* > | a<https://example.com>b
	*        ^
	* > | a<user@example.com>b
	*        ^
	* ```
	*
	* @type {State}
	*/
	function schemeOrEmailAtext(code$1) {
		if (code$1 === 43 || code$1 === 45 || code$1 === 46 || asciiAlphanumeric(code$1)) {
			size = 1;
			return schemeInsideOrEmailAtext(code$1);
		}
		return emailAtext(code$1);
	}
	/**
	* In ambiguous protocol or atext.
	*
	* ```markdown
	* > | a<https://example.com>b
	*        ^
	* > | a<user@example.com>b
	*        ^
	* ```
	*
	* @type {State}
	*/
	function schemeInsideOrEmailAtext(code$1) {
		if (code$1 === 58) {
			effects.consume(code$1);
			size = 0;
			return urlInside;
		}
		if ((code$1 === 43 || code$1 === 45 || code$1 === 46 || asciiAlphanumeric(code$1)) && size++ < 32) {
			effects.consume(code$1);
			return schemeInsideOrEmailAtext;
		}
		size = 0;
		return emailAtext(code$1);
	}
	/**
	* After protocol, in URL.
	*
	* ```markdown
	* > | a<https://example.com>b
	*             ^
	* ```
	*
	* @type {State}
	*/
	function urlInside(code$1) {
		if (code$1 === 62) {
			effects.exit("autolinkProtocol");
			effects.enter("autolinkMarker");
			effects.consume(code$1);
			effects.exit("autolinkMarker");
			effects.exit("autolink");
			return ok$2;
		}
		if (code$1 === null || code$1 === 32 || code$1 === 60 || asciiControl(code$1)) return nok(code$1);
		effects.consume(code$1);
		return urlInside;
	}
	/**
	* In email atext.
	*
	* ```markdown
	* > | a<user.name@example.com>b
	*              ^
	* ```
	*
	* @type {State}
	*/
	function emailAtext(code$1) {
		if (code$1 === 64) {
			effects.consume(code$1);
			return emailAtSignOrDot;
		}
		if (asciiAtext(code$1)) {
			effects.consume(code$1);
			return emailAtext;
		}
		return nok(code$1);
	}
	/**
	* In label, after at-sign or dot.
	*
	* ```markdown
	* > | a<user.name@example.com>b
	*                 ^       ^
	* ```
	*
	* @type {State}
	*/
	function emailAtSignOrDot(code$1) {
		return asciiAlphanumeric(code$1) ? emailLabel(code$1) : nok(code$1);
	}
	/**
	* In label, where `.` and `>` are allowed.
	*
	* ```markdown
	* > | a<user.name@example.com>b
	*                   ^
	* ```
	*
	* @type {State}
	*/
	function emailLabel(code$1) {
		if (code$1 === 46) {
			effects.consume(code$1);
			size = 0;
			return emailAtSignOrDot;
		}
		if (code$1 === 62) {
			effects.exit("autolinkProtocol").type = "autolinkEmail";
			effects.enter("autolinkMarker");
			effects.consume(code$1);
			effects.exit("autolinkMarker");
			effects.exit("autolink");
			return ok$2;
		}
		return emailValue(code$1);
	}
	/**
	* In label, where `.` and `>` are *not* allowed.
	*
	* Though, this is also used in `emailLabel` to parse other values.
	*
	* ```markdown
	* > | a<user.name@ex-ample.com>b
	*                    ^
	* ```
	*
	* @type {State}
	*/
	function emailValue(code$1) {
		if ((code$1 === 45 || asciiAlphanumeric(code$1)) && size++ < 63) {
			const next = code$1 === 45 ? emailValue : emailLabel;
			effects.consume(code$1);
			return next;
		}
		return nok(code$1);
	}
}

//#endregion
//#region ../node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/blank-line.js
const blankLine = {
	tokenize: tokenizeBlankLine,
	partial: true
};
/**
* @this {TokenizeContext}
* @type {Tokenizer}
*/
function tokenizeBlankLine(effects, ok$2, nok) {
	return start;
	/**
	* Start of blank line.
	*
	* > 👉 **Note**: `␠` represents a space character.
	*
	* ```markdown
	* > | ␠␠␊
	*     ^
	* > | ␊
	*     ^
	* ```
	*
	* @type {State}
	*/
	function start(code$1) {
		return markdownSpace(code$1) ? factorySpace(effects, after, "linePrefix")(code$1) : after(code$1);
	}
	/**
	* At eof/eol, after optional whitespace.
	*
	* > 👉 **Note**: `␠` represents a space character.
	*
	* ```markdown
	* > | ␠␠␊
	*       ^
	* > | ␊
	*     ^
	* ```
	*
	* @type {State}
	*/
	function after(code$1) {
		return code$1 === null || markdownLineEnding(code$1) ? ok$2(code$1) : nok(code$1);
	}
}

//#endregion
//#region ../node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/block-quote.js
const blockQuote = {
	name: "blockQuote",
	tokenize: tokenizeBlockQuoteStart,
	continuation: { tokenize: tokenizeBlockQuoteContinuation },
	exit
};
/**
* @this {TokenizeContext}
* @type {Tokenizer}
*/
function tokenizeBlockQuoteStart(effects, ok$2, nok) {
	const self$1 = this;
	return start;
	/**
	* Start of block quote.
	*
	* ```markdown
	* > | > a
	*     ^
	* ```
	*
	* @type {State}
	*/
	function start(code$1) {
		if (code$1 === 62) {
			const state = self$1.containerState;
			if (!state.open) {
				effects.enter("blockQuote", { _container: true });
				state.open = true;
			}
			effects.enter("blockQuotePrefix");
			effects.enter("blockQuoteMarker");
			effects.consume(code$1);
			effects.exit("blockQuoteMarker");
			return after;
		}
		return nok(code$1);
	}
	/**
	* After `>`, before optional whitespace.
	*
	* ```markdown
	* > | > a
	*      ^
	* ```
	*
	* @type {State}
	*/
	function after(code$1) {
		if (markdownSpace(code$1)) {
			effects.enter("blockQuotePrefixWhitespace");
			effects.consume(code$1);
			effects.exit("blockQuotePrefixWhitespace");
			effects.exit("blockQuotePrefix");
			return ok$2;
		}
		effects.exit("blockQuotePrefix");
		return ok$2(code$1);
	}
}
/**
* Start of block quote continuation.
*
* ```markdown
*   | > a
* > | > b
*     ^
* ```
*
* @this {TokenizeContext}
* @type {Tokenizer}
*/
function tokenizeBlockQuoteContinuation(effects, ok$2, nok) {
	const self$1 = this;
	return contStart;
	/**
	* Start of block quote continuation.
	*
	* Also used to parse the first block quote opening.
	*
	* ```markdown
	*   | > a
	* > | > b
	*     ^
	* ```
	*
	* @type {State}
	*/
	function contStart(code$1) {
		if (markdownSpace(code$1)) return factorySpace(effects, contBefore, "linePrefix", self$1.parser.constructs.disable.null.includes("codeIndented") ? undefined : 4)(code$1);
		return contBefore(code$1);
	}
	/**
	* At `>`, after optional whitespace.
	*
	* Also used to parse the first block quote opening.
	*
	* ```markdown
	*   | > a
	* > | > b
	*     ^
	* ```
	*
	* @type {State}
	*/
	function contBefore(code$1) {
		return effects.attempt(blockQuote, ok$2, nok)(code$1);
	}
}
/** @type {Exiter} */
function exit(effects) {
	effects.exit("blockQuote");
}

//#endregion
//#region ../node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/character-escape.js
const characterEscape = {
	name: "characterEscape",
	tokenize: tokenizeCharacterEscape
};
/**
* @this {TokenizeContext}
* @type {Tokenizer}
*/
function tokenizeCharacterEscape(effects, ok$2, nok) {
	return start;
	/**
	* Start of character escape.
	*
	* ```markdown
	* > | a\*b
	*      ^
	* ```
	*
	* @type {State}
	*/
	function start(code$1) {
		effects.enter("characterEscape");
		effects.enter("escapeMarker");
		effects.consume(code$1);
		effects.exit("escapeMarker");
		return inside;
	}
	/**
	* After `\`, at punctuation.
	*
	* ```markdown
	* > | a\*b
	*       ^
	* ```
	*
	* @type {State}
	*/
	function inside(code$1) {
		if (asciiPunctuation(code$1)) {
			effects.enter("characterEscapeValue");
			effects.consume(code$1);
			effects.exit("characterEscapeValue");
			effects.exit("characterEscape");
			return ok$2;
		}
		return nok(code$1);
	}
}

//#endregion
//#region ../node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/character-reference.js
const characterReference = {
	name: "characterReference",
	tokenize: tokenizeCharacterReference
};
/**
* @this {TokenizeContext}
* @type {Tokenizer}
*/
function tokenizeCharacterReference(effects, ok$2, nok) {
	const self$1 = this;
	let size = 0;
	/** @type {number} */
	let max;
	/** @type {(code: Code) => boolean} */
	let test;
	return start;
	/**
	* Start of character reference.
	*
	* ```markdown
	* > | a&amp;b
	*      ^
	* > | a&#123;b
	*      ^
	* > | a&#x9;b
	*      ^
	* ```
	*
	* @type {State}
	*/
	function start(code$1) {
		effects.enter("characterReference");
		effects.enter("characterReferenceMarker");
		effects.consume(code$1);
		effects.exit("characterReferenceMarker");
		return open;
	}
	/**
	* After `&`, at `#` for numeric references or alphanumeric for named
	* references.
	*
	* ```markdown
	* > | a&amp;b
	*       ^
	* > | a&#123;b
	*       ^
	* > | a&#x9;b
	*       ^
	* ```
	*
	* @type {State}
	*/
	function open(code$1) {
		if (code$1 === 35) {
			effects.enter("characterReferenceMarkerNumeric");
			effects.consume(code$1);
			effects.exit("characterReferenceMarkerNumeric");
			return numeric$1;
		}
		effects.enter("characterReferenceValue");
		max = 31;
		test = asciiAlphanumeric;
		return value(code$1);
	}
	/**
	* After `#`, at `x` for hexadecimals or digit for decimals.
	*
	* ```markdown
	* > | a&#123;b
	*        ^
	* > | a&#x9;b
	*        ^
	* ```
	*
	* @type {State}
	*/
	function numeric$1(code$1) {
		if (code$1 === 88 || code$1 === 120) {
			effects.enter("characterReferenceMarkerHexadecimal");
			effects.consume(code$1);
			effects.exit("characterReferenceMarkerHexadecimal");
			effects.enter("characterReferenceValue");
			max = 6;
			test = asciiHexDigit;
			return value;
		}
		effects.enter("characterReferenceValue");
		max = 7;
		test = asciiDigit;
		return value(code$1);
	}
	/**
	* After markers (`&#x`, `&#`, or `&`), in value, before `;`.
	*
	* The character reference kind defines what and how many characters are
	* allowed.
	*
	* ```markdown
	* > | a&amp;b
	*       ^^^
	* > | a&#123;b
	*        ^^^
	* > | a&#x9;b
	*         ^
	* ```
	*
	* @type {State}
	*/
	function value(code$1) {
		if (code$1 === 59 && size) {
			const token = effects.exit("characterReferenceValue");
			if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self$1.sliceSerialize(token))) return nok(code$1);
			effects.enter("characterReferenceMarker");
			effects.consume(code$1);
			effects.exit("characterReferenceMarker");
			effects.exit("characterReference");
			return ok$2;
		}
		if (test(code$1) && size++ < max) {
			effects.consume(code$1);
			return value;
		}
		return nok(code$1);
	}
}

//#endregion
//#region ../node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/code-fenced.js
/** @type {Construct} */
const nonLazyContinuation = {
	tokenize: tokenizeNonLazyContinuation,
	partial: true
};
const codeFenced = {
	name: "codeFenced",
	tokenize: tokenizeCodeFenced,
	concrete: true
};
/**
* @this {TokenizeContext}
* @type {Tokenizer}
*/
function tokenizeCodeFenced(effects, ok$2, nok) {
	const self$1 = this;
	/** @type {Construct} */
	const closeStart = {
		tokenize: tokenizeCloseStart,
		partial: true
	};
	let initialPrefix = 0;
	let sizeOpen = 0;
	/** @type {NonNullable<Code>} */
	let marker;
	return start;
	/**
	* Start of code.
	*
	* ```markdown
	* > | ~~~js
	*     ^
	*   | alert(1)
	*   | ~~~
	* ```
	*
	* @type {State}
	*/
	function start(code$1) {
		return beforeSequenceOpen(code$1);
	}
	/**
	* In opening fence, after prefix, at sequence.
	*
	* ```markdown
	* > | ~~~js
	*     ^
	*   | alert(1)
	*   | ~~~
	* ```
	*
	* @type {State}
	*/
	function beforeSequenceOpen(code$1) {
		const tail = self$1.events[self$1.events.length - 1];
		initialPrefix = tail && tail[1].type === "linePrefix" ? tail[2].sliceSerialize(tail[1], true).length : 0;
		marker = code$1;
		effects.enter("codeFenced");
		effects.enter("codeFencedFence");
		effects.enter("codeFencedFenceSequence");
		return sequenceOpen(code$1);
	}
	/**
	* In opening fence sequence.
	*
	* ```markdown
	* > | ~~~js
	*      ^
	*   | alert(1)
	*   | ~~~
	* ```
	*
	* @type {State}
	*/
	function sequenceOpen(code$1) {
		if (code$1 === marker) {
			sizeOpen++;
			effects.consume(code$1);
			return sequenceOpen;
		}
		if (sizeOpen < 3) return nok(code$1);
		effects.exit("codeFencedFenceSequence");
		return markdownSpace(code$1) ? factorySpace(effects, infoBefore, "whitespace")(code$1) : infoBefore(code$1);
	}
	/**
	* In opening fence, after the sequence (and optional whitespace), before info.
	*
	* ```markdown
	* > | ~~~js
	*        ^
	*   | alert(1)
	*   | ~~~
	* ```
	*
	* @type {State}
	*/
	function infoBefore(code$1) {
		if (code$1 === null || markdownLineEnding(code$1)) {
			effects.exit("codeFencedFence");
			return self$1.interrupt ? ok$2(code$1) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code$1);
		}
		effects.enter("codeFencedFenceInfo");
		effects.enter("chunkString", { contentType: "string" });
		return info$2(code$1);
	}
	/**
	* In info.
	*
	* ```markdown
	* > | ~~~js
	*        ^
	*   | alert(1)
	*   | ~~~
	* ```
	*
	* @type {State}
	*/
	function info$2(code$1) {
		if (code$1 === null || markdownLineEnding(code$1)) {
			effects.exit("chunkString");
			effects.exit("codeFencedFenceInfo");
			return infoBefore(code$1);
		}
		if (markdownSpace(code$1)) {
			effects.exit("chunkString");
			effects.exit("codeFencedFenceInfo");
			return factorySpace(effects, metaBefore, "whitespace")(code$1);
		}
		if (code$1 === 96 && code$1 === marker) return nok(code$1);
		effects.consume(code$1);
		return info$2;
	}
	/**
	* In opening fence, after info and whitespace, before meta.
	*
	* ```markdown
	* > | ~~~js eval
	*           ^
	*   | alert(1)
	*   | ~~~
	* ```
	*
	* @type {State}
	*/
	function metaBefore(code$1) {
		if (code$1 === null || markdownLineEnding(code$1)) return infoBefore(code$1);
		effects.enter("codeFencedFenceMeta");
		effects.enter("chunkString", { contentType: "string" });
		return meta(code$1);
	}
	/**
	* In meta.
	*
	* ```markdown
	* > | ~~~js eval
	*           ^
	*   | alert(1)
	*   | ~~~
	* ```
	*
	* @type {State}
	*/
	function meta(code$1) {
		if (code$1 === null || markdownLineEnding(code$1)) {
			effects.exit("chunkString");
			effects.exit("codeFencedFenceMeta");
			return infoBefore(code$1);
		}
		if (code$1 === 96 && code$1 === marker) return nok(code$1);
		effects.consume(code$1);
		return meta;
	}
	/**
	* At eol/eof in code, before a non-lazy closing fence or content.
	*
	* ```markdown
	* > | ~~~js
	*          ^
	* > | alert(1)
	*             ^
	*   | ~~~
	* ```
	*
	* @type {State}
	*/
	function atNonLazyBreak(code$1) {
		return effects.attempt(closeStart, after, contentBefore)(code$1);
	}
	/**
	* Before code content, not a closing fence, at eol.
	*
	* ```markdown
	*   | ~~~js
	* > | alert(1)
	*             ^
	*   | ~~~
	* ```
	*
	* @type {State}
	*/
	function contentBefore(code$1) {
		effects.enter("lineEnding");
		effects.consume(code$1);
		effects.exit("lineEnding");
		return contentStart;
	}
	/**
	* Before code content, not a closing fence.
	*
	* ```markdown
	*   | ~~~js
	* > | alert(1)
	*     ^
	*   | ~~~
	* ```
	*
	* @type {State}
	*/
	function contentStart(code$1) {
		return initialPrefix > 0 && markdownSpace(code$1) ? factorySpace(effects, beforeContentChunk, "linePrefix", initialPrefix + 1)(code$1) : beforeContentChunk(code$1);
	}
	/**
	* Before code content, after optional prefix.
	*
	* ```markdown
	*   | ~~~js
	* > | alert(1)
	*     ^
	*   | ~~~
	* ```
	*
	* @type {State}
	*/
	function beforeContentChunk(code$1) {
		if (code$1 === null || markdownLineEnding(code$1)) return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code$1);
		effects.enter("codeFlowValue");
		return contentChunk(code$1);
	}
	/**
	* In code content.
	*
	* ```markdown
	*   | ~~~js
	* > | alert(1)
	*     ^^^^^^^^
	*   | ~~~
	* ```
	*
	* @type {State}
	*/
	function contentChunk(code$1) {
		if (code$1 === null || markdownLineEnding(code$1)) {
			effects.exit("codeFlowValue");
			return beforeContentChunk(code$1);
		}
		effects.consume(code$1);
		return contentChunk;
	}
	/**
	* After code.
	*
	* ```markdown
	*   | ~~~js
	*   | alert(1)
	* > | ~~~
	*        ^
	* ```
	*
	* @type {State}
	*/
	function after(code$1) {
		effects.exit("codeFenced");
		return ok$2(code$1);
	}
	/**
	* @this {TokenizeContext}
	* @type {Tokenizer}
	*/
	function tokenizeCloseStart(effects$1, ok$3, nok$1) {
		let size = 0;
		return startBefore;
		/**
		*
		*
		* @type {State}
		*/
		function startBefore(code$1) {
			effects$1.enter("lineEnding");
			effects$1.consume(code$1);
			effects$1.exit("lineEnding");
			return start$1;
		}
		/**
		* Before closing fence, at optional whitespace.
		*
		* ```markdown
		*   | ~~~js
		*   | alert(1)
		* > | ~~~
		*     ^
		* ```
		*
		* @type {State}
		*/
		function start$1(code$1) {
			effects$1.enter("codeFencedFence");
			return markdownSpace(code$1) ? factorySpace(effects$1, beforeSequenceClose, "linePrefix", self$1.parser.constructs.disable.null.includes("codeIndented") ? undefined : 4)(code$1) : beforeSequenceClose(code$1);
		}
		/**
		* In closing fence, after optional whitespace, at sequence.
		*
		* ```markdown
		*   | ~~~js
		*   | alert(1)
		* > | ~~~
		*     ^
		* ```
		*
		* @type {State}
		*/
		function beforeSequenceClose(code$1) {
			if (code$1 === marker) {
				effects$1.enter("codeFencedFenceSequence");
				return sequenceClose(code$1);
			}
			return nok$1(code$1);
		}
		/**
		* In closing fence sequence.
		*
		* ```markdown
		*   | ~~~js
		*   | alert(1)
		* > | ~~~
		*     ^
		* ```
		*
		* @type {State}
		*/
		function sequenceClose(code$1) {
			if (code$1 === marker) {
				size++;
				effects$1.consume(code$1);
				return sequenceClose;
			}
			if (size >= sizeOpen) {
				effects$1.exit("codeFencedFenceSequence");
				return markdownSpace(code$1) ? factorySpace(effects$1, sequenceCloseAfter, "whitespace")(code$1) : sequenceCloseAfter(code$1);
			}
			return nok$1(code$1);
		}
		/**
		* After closing fence sequence, after optional whitespace.
		*
		* ```markdown
		*   | ~~~js
		*   | alert(1)
		* > | ~~~
		*        ^
		* ```
		*
		* @type {State}
		*/
		function sequenceCloseAfter(code$1) {
			if (code$1 === null || markdownLineEnding(code$1)) {
				effects$1.exit("codeFencedFence");
				return ok$3(code$1);
			}
			return nok$1(code$1);
		}
	}
}
/**
* @this {TokenizeContext}
* @type {Tokenizer}
*/
function tokenizeNonLazyContinuation(effects, ok$2, nok) {
	const self$1 = this;
	return start;
	/**
	*
	*
	* @type {State}
	*/
	function start(code$1) {
		if (code$1 === null) return nok(code$1);
		effects.enter("lineEnding");
		effects.consume(code$1);
		effects.exit("lineEnding");
		return lineStart;
	}
	/**
	*
	*
	* @type {State}
	*/
	function lineStart(code$1) {
		return self$1.parser.lazy[self$1.now().line] ? nok(code$1) : ok$2(code$1);
	}
}

//#endregion
//#region ../node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/code-indented.js
const codeIndented = {
	name: "codeIndented",
	tokenize: tokenizeCodeIndented
};
/** @type {Construct} */
const furtherStart = {
	tokenize: tokenizeFurtherStart,
	partial: true
};
/**
* @this {TokenizeContext}
* @type {Tokenizer}
*/
function tokenizeCodeIndented(effects, ok$2, nok) {
	const self$1 = this;
	return start;
	/**
	* Start of code (indented).
	*
	* > **Parsing note**: it is not needed to check if this first line is a
	* > filled line (that it has a non-whitespace character), because blank lines
	* > are parsed already, so we never run into that.
	*
	* ```markdown
	* > |     aaa
	*     ^
	* ```
	*
	* @type {State}
	*/
	function start(code$1) {
		effects.enter("codeIndented");
		return factorySpace(effects, afterPrefix, "linePrefix", 5)(code$1);
	}
	/**
	* At start, after 1 or 4 spaces.
	*
	* ```markdown
	* > |     aaa
	*         ^
	* ```
	*
	* @type {State}
	*/
	function afterPrefix(code$1) {
		const tail = self$1.events[self$1.events.length - 1];
		return tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code$1) : nok(code$1);
	}
	/**
	* At a break.
	*
	* ```markdown
	* > |     aaa
	*         ^  ^
	* ```
	*
	* @type {State}
	*/
	function atBreak(code$1) {
		if (code$1 === null) return after(code$1);
		if (markdownLineEnding(code$1)) return effects.attempt(furtherStart, atBreak, after)(code$1);
		effects.enter("codeFlowValue");
		return inside(code$1);
	}
	/**
	* In code content.
	*
	* ```markdown
	* > |     aaa
	*         ^^^^
	* ```
	*
	* @type {State}
	*/
	function inside(code$1) {
		if (code$1 === null || markdownLineEnding(code$1)) {
			effects.exit("codeFlowValue");
			return atBreak(code$1);
		}
		effects.consume(code$1);
		return inside;
	}
	/** @type {State} */
	function after(code$1) {
		effects.exit("codeIndented");
		return ok$2(code$1);
	}
}
/**
* @this {TokenizeContext}
* @type {Tokenizer}
*/
function tokenizeFurtherStart(effects, ok$2, nok) {
	const self$1 = this;
	return furtherStart$1;
	/**
	* At eol, trying to parse another indent.
	*
	* ```markdown
	* > |     aaa
	*            ^
	*   |     bbb
	* ```
	*
	* @type {State}
	*/
	function furtherStart$1(code$1) {
		if (self$1.parser.lazy[self$1.now().line]) return nok(code$1);
		if (markdownLineEnding(code$1)) {
			effects.enter("lineEnding");
			effects.consume(code$1);
			effects.exit("lineEnding");
			return furtherStart$1;
		}
		return factorySpace(effects, afterPrefix, "linePrefix", 5)(code$1);
	}
	/**
	* At start, after 1 or 4 spaces.
	*
	* ```markdown
	* > |     aaa
	*         ^
	* ```
	*
	* @type {State}
	*/
	function afterPrefix(code$1) {
		const tail = self$1.events[self$1.events.length - 1];
		return tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok$2(code$1) : markdownLineEnding(code$1) ? furtherStart$1(code$1) : nok(code$1);
	}
}

//#endregion
//#region ../node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/code-text.js
const codeText = {
	name: "codeText",
	tokenize: tokenizeCodeText,
	resolve: resolveCodeText,
	previous
};
/** @type {Resolver} */
function resolveCodeText(events$2) {
	let tailExitIndex = events$2.length - 4;
	let headEnterIndex = 3;
	/** @type {number} */
	let index$1;
	/** @type {number | undefined} */
	let enter;
	if ((events$2[headEnterIndex][1].type === "lineEnding" || events$2[headEnterIndex][1].type === "space") && (events$2[tailExitIndex][1].type === "lineEnding" || events$2[tailExitIndex][1].type === "space")) {
		index$1 = headEnterIndex;
		while (++index$1 < tailExitIndex) if (events$2[index$1][1].type === "codeTextData") {
			events$2[headEnterIndex][1].type = "codeTextPadding";
			events$2[tailExitIndex][1].type = "codeTextPadding";
			headEnterIndex += 2;
			tailExitIndex -= 2;
			break;
		}
	}
	index$1 = headEnterIndex - 1;
	tailExitIndex++;
	while (++index$1 <= tailExitIndex) if (enter === undefined) {
		if (index$1 !== tailExitIndex && events$2[index$1][1].type !== "lineEnding") enter = index$1;
	} else if (index$1 === tailExitIndex || events$2[index$1][1].type === "lineEnding") {
		events$2[enter][1].type = "codeTextData";
		if (index$1 !== enter + 2) {
			events$2[enter][1].end = events$2[index$1 - 1][1].end;
			events$2.splice(enter + 2, index$1 - enter - 2);
			tailExitIndex -= index$1 - enter - 2;
			index$1 = enter + 2;
		}
		enter = undefined;
	}
	return events$2;
}
/**
* @this {TokenizeContext}
* @type {Previous}
*/
function previous(code$1) {
	return code$1 !== 96 || this.events[this.events.length - 1][1].type === "characterEscape";
}
/**
* @this {TokenizeContext}
* @type {Tokenizer}
*/
function tokenizeCodeText(effects, ok$2, nok) {
	const self$1 = this;
	let sizeOpen = 0;
	/** @type {number} */
	let size;
	/** @type {Token} */
	let token;
	return start;
	/**
	* Start of code (text).
	*
	* ```markdown
	* > | `a`
	*     ^
	* > | \`a`
	*      ^
	* ```
	*
	* @type {State}
	*/
	function start(code$1) {
		effects.enter("codeText");
		effects.enter("codeTextSequence");
		return sequenceOpen(code$1);
	}
	/**
	* In opening sequence.
	*
	* ```markdown
	* > | `a`
	*     ^
	* ```
	*
	* @type {State}
	*/
	function sequenceOpen(code$1) {
		if (code$1 === 96) {
			effects.consume(code$1);
			sizeOpen++;
			return sequenceOpen;
		}
		effects.exit("codeTextSequence");
		return between$1(code$1);
	}
	/**
	* Between something and something else.
	*
	* ```markdown
	* > | `a`
	*      ^^
	* ```
	*
	* @type {State}
	*/
	function between$1(code$1) {
		if (code$1 === null) return nok(code$1);
		if (code$1 === 32) {
			effects.enter("space");
			effects.consume(code$1);
			effects.exit("space");
			return between$1;
		}
		if (code$1 === 96) {
			token = effects.enter("codeTextSequence");
			size = 0;
			return sequenceClose(code$1);
		}
		if (markdownLineEnding(code$1)) {
			effects.enter("lineEnding");
			effects.consume(code$1);
			effects.exit("lineEnding");
			return between$1;
		}
		effects.enter("codeTextData");
		return data(code$1);
	}
	/**
	* In data.
	*
	* ```markdown
	* > | `a`
	*      ^
	* ```
	*
	* @type {State}
	*/
	function data(code$1) {
		if (code$1 === null || code$1 === 32 || code$1 === 96 || markdownLineEnding(code$1)) {
			effects.exit("codeTextData");
			return between$1(code$1);
		}
		effects.consume(code$1);
		return data;
	}
	/**
	* In closing sequence.
	*
	* ```markdown
	* > | `a`
	*       ^
	* ```
	*
	* @type {State}
	*/
	function sequenceClose(code$1) {
		if (code$1 === 96) {
			effects.consume(code$1);
			size++;
			return sequenceClose;
		}
		if (size === sizeOpen) {
			effects.exit("codeTextSequence");
			effects.exit("codeText");
			return ok$2(code$1);
		}
		token.type = "codeTextData";
		return data(code$1);
	}
}

//#endregion
//#region ../node_modules/.pnpm/micromark-util-subtokenize@2.0.1/node_modules/micromark-util-subtokenize/lib/splice-buffer.js
var SpliceBuffer = class {
	/**
	* @param {ReadonlyArray<T> | null | undefined} [initial]
	*   Initial items (optional).
	* @returns
	*   Splice buffer.
	*/
	constructor(initial) {
		/** @type {Array<T>} */
		this.left = initial ? [...initial] : [];
		/** @type {Array<T>} */
		this.right = [];
	}
	/**
	* Array access;
	* does not move the cursor.
	*
	* @param {number} index
	*   Index.
	* @return {T}
	*   Item.
	*/
	get(index$1) {
		if (index$1 < 0 || index$1 >= this.left.length + this.right.length) throw new RangeError("Cannot access index `" + index$1 + "` in a splice buffer of size `" + (this.left.length + this.right.length) + "`");
		if (index$1 < this.left.length) return this.left[index$1];
		return this.right[this.right.length - index$1 + this.left.length - 1];
	}
	/**
	* The length of the splice buffer, one greater than the largest index in the
	* array.
	*/
	get length() {
		return this.left.length + this.right.length;
	}
	/**
	* Remove and return `list[0]`;
	* moves the cursor to `0`.
	*
	* @returns {T | undefined}
	*   Item, optional.
	*/
	shift() {
		this.setCursor(0);
		return this.right.pop();
	}
	/**
	* Slice the buffer to get an array;
	* does not move the cursor.
	*
	* @param {number} start
	*   Start.
	* @param {number | null | undefined} [end]
	*   End (optional).
	* @returns {Array<T>}
	*   Array of items.
	*/
	slice(start, end) {
		/** @type {number} */
		const stop$1 = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;
		if (stop$1 < this.left.length) return this.left.slice(start, stop$1);
		if (start > this.left.length) return this.right.slice(this.right.length - stop$1 + this.left.length, this.right.length - start + this.left.length).reverse();
		return this.left.slice(start).concat(this.right.slice(this.right.length - stop$1 + this.left.length).reverse());
	}
	/**
	* Mimics the behavior of Array.prototype.splice() except for the change of
	* interface necessary to avoid segfaults when patching in very large arrays.
	*
	* This operation moves cursor is moved to `start` and results in the cursor
	* placed after any inserted items.
	*
	* @param {number} start
	*   Start;
	*   zero-based index at which to start changing the array;
	*   negative numbers count backwards from the end of the array and values
	*   that are out-of bounds are clamped to the appropriate end of the array.
	* @param {number | null | undefined} [deleteCount=0]
	*   Delete count (default: `0`);
	*   maximum number of elements to delete, starting from start.
	* @param {Array<T> | null | undefined} [items=[]]
	*   Items to include in place of the deleted items (default: `[]`).
	* @return {Array<T>}
	*   Any removed items.
	*/
	splice(start, deleteCount, items) {
		/** @type {number} */
		const count = deleteCount || 0;
		this.setCursor(Math.trunc(start));
		const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);
		if (items) chunkedPush(this.left, items);
		return removed.reverse();
	}
	/**
	* Remove and return the highest-numbered item in the array, so
	* `list[list.length - 1]`;
	* Moves the cursor to `length`.
	*
	* @returns {T | undefined}
	*   Item, optional.
	*/
	pop() {
		this.setCursor(Number.POSITIVE_INFINITY);
		return this.left.pop();
	}
	/**
	* Inserts a single item to the high-numbered side of the array;
	* moves the cursor to `length`.
	*
	* @param {T} item
	*   Item.
	* @returns {undefined}
	*   Nothing.
	*/
	push(item) {
		this.setCursor(Number.POSITIVE_INFINITY);
		this.left.push(item);
	}
	/**
	* Inserts many items to the high-numbered side of the array.
	* Moves the cursor to `length`.
	*
	* @param {Array<T>} items
	*   Items.
	* @returns {undefined}
	*   Nothing.
	*/
	pushMany(items) {
		this.setCursor(Number.POSITIVE_INFINITY);
		chunkedPush(this.left, items);
	}
	/**
	* Inserts a single item to the low-numbered side of the array;
	* Moves the cursor to `0`.
	*
	* @param {T} item
	*   Item.
	* @returns {undefined}
	*   Nothing.
	*/
	unshift(item) {
		this.setCursor(0);
		this.right.push(item);
	}
	/**
	* Inserts many items to the low-numbered side of the array;
	* moves the cursor to `0`.
	*
	* @param {Array<T>} items
	*   Items.
	* @returns {undefined}
	*   Nothing.
	*/
	unshiftMany(items) {
		this.setCursor(0);
		chunkedPush(this.right, items.reverse());
	}
	/**
	* Move the cursor to a specific position in the array. Requires
	* time proportional to the distance moved.
	*
	* If `n < 0`, the cursor will end up at the beginning.
	* If `n > length`, the cursor will end up at the end.
	*
	* @param {number} n
	*   Position.
	* @return {undefined}
	*   Nothing.
	*/
	setCursor(n) {
		if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;
		if (n < this.left.length) {
			const removed = this.left.splice(n, Number.POSITIVE_INFINITY);
			chunkedPush(this.right, removed.reverse());
		} else {
			const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);
			chunkedPush(this.left, removed.reverse());
		}
	}
};
/**
* Avoid stack overflow by pushing items onto the stack in segments
*
* @template T
*   Item type.
* @param {Array<T>} list
*   List to inject into.
* @param {ReadonlyArray<T>} right
*   Items to inject.
* @return {undefined}
*   Nothing.
*/
function chunkedPush(list$3, right) {
	/** @type {number} */
	let chunkStart = 0;
	if (right.length < 1e4) list$3.push(...right);
else while (chunkStart < right.length) {
		list$3.push(...right.slice(chunkStart, chunkStart + 1e4));
		chunkStart += 1e4;
	}
}

//#endregion
//#region ../node_modules/.pnpm/micromark-util-subtokenize@2.0.1/node_modules/micromark-util-subtokenize/index.js
function subtokenize(eventsArray) {
	/** @type {Record<string, number>} */
	const jumps = {};
	let index$1 = -1;
	/** @type {Event} */
	let event;
	/** @type {number | undefined} */
	let lineIndex;
	/** @type {number} */
	let otherIndex;
	/** @type {Event} */
	let otherEvent;
	/** @type {Array<Event>} */
	let parameters;
	/** @type {Array<Event>} */
	let subevents;
	/** @type {boolean | undefined} */
	let more;
	const events$2 = new SpliceBuffer(eventsArray);
	while (++index$1 < events$2.length) {
		while (index$1 in jumps) index$1 = jumps[index$1];
		event = events$2.get(index$1);
		if (index$1 && event[1].type === "chunkFlow" && events$2.get(index$1 - 1)[1].type === "listItemPrefix") {
			subevents = event[1]._tokenizer.events;
			otherIndex = 0;
			if (otherIndex < subevents.length && subevents[otherIndex][1].type === "lineEndingBlank") otherIndex += 2;
			if (otherIndex < subevents.length && subevents[otherIndex][1].type === "content") while (++otherIndex < subevents.length) {
				if (subevents[otherIndex][1].type === "content") break;
				if (subevents[otherIndex][1].type === "chunkText") {
					subevents[otherIndex][1]._isInFirstContentOfListItem = true;
					otherIndex++;
				}
			}
		}
		if (event[0] === "enter") {
			if (event[1].contentType) {
				Object.assign(jumps, subcontent(events$2, index$1));
				index$1 = jumps[index$1];
				more = true;
			}
		} else if (event[1]._container) {
			otherIndex = index$1;
			lineIndex = undefined;
			while (otherIndex--) {
				otherEvent = events$2.get(otherIndex);
				if (otherEvent[1].type === "lineEnding" || otherEvent[1].type === "lineEndingBlank") {
					if (otherEvent[0] === "enter") {
						if (lineIndex) events$2.get(lineIndex)[1].type = "lineEndingBlank";
						otherEvent[1].type = "lineEnding";
						lineIndex = otherIndex;
					}
				} else break;
			}
			if (lineIndex) {
				event[1].end = Object.assign({}, events$2.get(lineIndex)[1].start);
				parameters = events$2.slice(lineIndex, index$1);
				parameters.unshift(event);
				events$2.splice(lineIndex, index$1 - lineIndex + 1, parameters);
			}
		}
	}
	splice(eventsArray, 0, Number.POSITIVE_INFINITY, events$2.slice(0));
	return !more;
}
/**
* Tokenize embedded tokens.
*
* @param {SpliceBuffer<Event>} events
* @param {number} eventIndex
* @returns {Record<string, number>}
*/
function subcontent(events$2, eventIndex) {
	const token = events$2.get(eventIndex)[1];
	const context$1 = events$2.get(eventIndex)[2];
	let startPosition = eventIndex - 1;
	/** @type {Array<number>} */
	const startPositions = [];
	const tokenizer = token._tokenizer || context$1.parser[token.contentType](token.start);
	const childEvents = tokenizer.events;
	/** @type {Array<[number, number]>} */
	const jumps = [];
	/** @type {Record<string, number>} */
	const gaps = {};
	/** @type {Array<Chunk>} */
	let stream$3;
	/** @type {Token | undefined} */
	let previous$1;
	let index$1 = -1;
	/** @type {Token | undefined} */
	let current = token;
	let adjust = 0;
	let start = 0;
	const breaks = [start];
	while (current) {
		while (events$2.get(++startPosition)[1] !== current);
		startPositions.push(startPosition);
		if (!current._tokenizer) {
			stream$3 = context$1.sliceStream(current);
			if (!current.next) stream$3.push(null);
			if (previous$1) tokenizer.defineSkip(current.start);
			if (current._isInFirstContentOfListItem) tokenizer._gfmTasklistFirstContentOfListItem = true;
			tokenizer.write(stream$3);
			if (current._isInFirstContentOfListItem) tokenizer._gfmTasklistFirstContentOfListItem = undefined;
		}
		previous$1 = current;
		current = current.next;
	}
	current = token;
	while (++index$1 < childEvents.length) if (childEvents[index$1][0] === "exit" && childEvents[index$1 - 1][0] === "enter" && childEvents[index$1][1].type === childEvents[index$1 - 1][1].type && childEvents[index$1][1].start.line !== childEvents[index$1][1].end.line) {
		start = index$1 + 1;
		breaks.push(start);
		current._tokenizer = undefined;
		current.previous = undefined;
		current = current.next;
	}
	tokenizer.events = [];
	if (current) {
		current._tokenizer = undefined;
		current.previous = undefined;
	} else breaks.pop();
	index$1 = breaks.length;
	while (index$1--) {
		const slice$1 = childEvents.slice(breaks[index$1], breaks[index$1 + 1]);
		const start$1 = startPositions.pop();
		jumps.push([start$1, start$1 + slice$1.length - 1]);
		events$2.splice(start$1, 2, slice$1);
	}
	jumps.reverse();
	index$1 = -1;
	while (++index$1 < jumps.length) {
		gaps[adjust + jumps[index$1][0]] = adjust + jumps[index$1][1];
		adjust += jumps[index$1][1] - jumps[index$1][0] - 1;
	}
	return gaps;
}

//#endregion
//#region ../node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/content.js
const content = {
	tokenize: tokenizeContent,
	resolve: resolveContent
};
/** @type {Construct} */
const continuationConstruct = {
	tokenize: tokenizeContinuation,
	partial: true
};
/**
* Content is transparent: it’s parsed right now. That way, definitions are also
* parsed right now: before text in paragraphs (specifically, media) are parsed.
*
* @type {Resolver}
*/
function resolveContent(events$2) {
	subtokenize(events$2);
	return events$2;
}
/**
* @this {TokenizeContext}
* @type {Tokenizer}
*/
function tokenizeContent(effects, ok$2) {
	/** @type {Token | undefined} */
	let previous$1;
	return chunkStart;
	/**
	* Before a content chunk.
	*
	* ```markdown
	* > | abc
	*     ^
	* ```
	*
	* @type {State}
	*/
	function chunkStart(code$1) {
		effects.enter("content");
		previous$1 = effects.enter("chunkContent", { contentType: "content" });
		return chunkInside(code$1);
	}
	/**
	* In a content chunk.
	*
	* ```markdown
	* > | abc
	*     ^^^
	* ```
	*
	* @type {State}
	*/
	function chunkInside(code$1) {
		if (code$1 === null) return contentEnd(code$1);
		if (markdownLineEnding(code$1)) return effects.check(continuationConstruct, contentContinue, contentEnd)(code$1);
		effects.consume(code$1);
		return chunkInside;
	}
	/**
	*
	*
	* @type {State}
	*/
	function contentEnd(code$1) {
		effects.exit("chunkContent");
		effects.exit("content");
		return ok$2(code$1);
	}
	/**
	*
	*
	* @type {State}
	*/
	function contentContinue(code$1) {
		effects.consume(code$1);
		effects.exit("chunkContent");
		previous$1.next = effects.enter("chunkContent", {
			contentType: "content",
			previous: previous$1
		});
		previous$1 = previous$1.next;
		return chunkInside;
	}
}
/**
* @this {TokenizeContext}
* @type {Tokenizer}
*/
function tokenizeContinuation(effects, ok$2, nok) {
	const self$1 = this;
	return startLookahead;
	/**
	*
	*
	* @type {State}
	*/
	function startLookahead(code$1) {
		effects.exit("chunkContent");
		effects.enter("lineEnding");
		effects.consume(code$1);
		effects.exit("lineEnding");
		return factorySpace(effects, prefixed, "linePrefix");
	}
	/**
	*
	*
	* @type {State}
	*/
	function prefixed(code$1) {
		if (code$1 === null || markdownLineEnding(code$1)) return nok(code$1);
		const tail = self$1.events[self$1.events.length - 1];
		if (!self$1.parser.constructs.disable.null.includes("codeIndented") && tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4) return ok$2(code$1);
		return effects.interrupt(self$1.parser.constructs.flow, nok, ok$2)(code$1);
	}
}

//#endregion
//#region ../node_modules/.pnpm/micromark-factory-destination@2.0.0/node_modules/micromark-factory-destination/index.js
function factoryDestination(effects, ok$2, nok, type, literalType, literalMarkerType, rawType, stringType, max) {
	const limit = max || Number.POSITIVE_INFINITY;
	let balance = 0;
	return start;
	/**
	* Start of destination.
	*
	* ```markdown
	* > | <aa>
	*     ^
	* > | aa
	*     ^
	* ```
	*
	* @type {State}
	*/
	function start(code$1) {
		if (code$1 === 60) {
			effects.enter(type);
			effects.enter(literalType);
			effects.enter(literalMarkerType);
			effects.consume(code$1);
			effects.exit(literalMarkerType);
			return enclosedBefore;
		}
		if (code$1 === null || code$1 === 32 || code$1 === 41 || asciiControl(code$1)) return nok(code$1);
		effects.enter(type);
		effects.enter(rawType);
		effects.enter(stringType);
		effects.enter("chunkString", { contentType: "string" });
		return raw(code$1);
	}
	/**
	* After `<`, at an enclosed destination.
	*
	* ```markdown
	* > | <aa>
	*      ^
	* ```
	*
	* @type {State}
	*/
	function enclosedBefore(code$1) {
		if (code$1 === 62) {
			effects.enter(literalMarkerType);
			effects.consume(code$1);
			effects.exit(literalMarkerType);
			effects.exit(literalType);
			effects.exit(type);
			return ok$2;
		}
		effects.enter(stringType);
		effects.enter("chunkString", { contentType: "string" });
		return enclosed(code$1);
	}
	/**
	* In enclosed destination.
	*
	* ```markdown
	* > | <aa>
	*      ^
	* ```
	*
	* @type {State}
	*/
	function enclosed(code$1) {
		if (code$1 === 62) {
			effects.exit("chunkString");
			effects.exit(stringType);
			return enclosedBefore(code$1);
		}
		if (code$1 === null || code$1 === 60 || markdownLineEnding(code$1)) return nok(code$1);
		effects.consume(code$1);
		return code$1 === 92 ? enclosedEscape : enclosed;
	}
	/**
	* After `\`, at a special character.
	*
	* ```markdown
	* > | <a\*a>
	*        ^
	* ```
	*
	* @type {State}
	*/
	function enclosedEscape(code$1) {
		if (code$1 === 60 || code$1 === 62 || code$1 === 92) {
			effects.consume(code$1);
			return enclosed;
		}
		return enclosed(code$1);
	}
	/**
	* In raw destination.
	*
	* ```markdown
	* > | aa
	*     ^
	* ```
	*
	* @type {State}
	*/
	function raw(code$1) {
		if (!balance && (code$1 === null || code$1 === 41 || markdownLineEndingOrSpace(code$1))) {
			effects.exit("chunkString");
			effects.exit(stringType);
			effects.exit(rawType);
			effects.exit(type);
			return ok$2(code$1);
		}
		if (balance < limit && code$1 === 40) {
			effects.consume(code$1);
			balance++;
			return raw;
		}
		if (code$1 === 41) {
			effects.consume(code$1);
			balance--;
			return raw;
		}
		if (code$1 === null || code$1 === 32 || code$1 === 40 || asciiControl(code$1)) return nok(code$1);
		effects.consume(code$1);
		return code$1 === 92 ? rawEscape : raw;
	}
	/**
	* After `\`, at special character.
	*
	* ```markdown
	* > | a\*a
	*       ^
	* ```
	*
	* @type {State}
	*/
	function rawEscape(code$1) {
		if (code$1 === 40 || code$1 === 41 || code$1 === 92) {
			effects.consume(code$1);
			return raw;
		}
		return raw(code$1);
	}
}

//#endregion
//#region ../node_modules/.pnpm/micromark-factory-label@2.0.0/node_modules/micromark-factory-label/index.js
function factoryLabel(effects, ok$2, nok, type, markerType, stringType) {
	const self$1 = this;
	let size = 0;
	/** @type {boolean} */
	let seen;
	return start;
	/**
	* Start of label.
	*
	* ```markdown
	* > | [a]
	*     ^
	* ```
	*
	* @type {State}
	*/
	function start(code$1) {
		effects.enter(type);
		effects.enter(markerType);
		effects.consume(code$1);
		effects.exit(markerType);
		effects.enter(stringType);
		return atBreak;
	}
	/**
	* In label, at something, before something else.
	*
	* ```markdown
	* > | [a]
	*      ^
	* ```
	*
	* @type {State}
	*/
	function atBreak(code$1) {
		if (size > 999 || code$1 === null || code$1 === 91 || code$1 === 93 && !seen || code$1 === 94 && !size && "_hiddenFootnoteSupport" in self$1.parser.constructs) return nok(code$1);
		if (code$1 === 93) {
			effects.exit(stringType);
			effects.enter(markerType);
			effects.consume(code$1);
			effects.exit(markerType);
			effects.exit(type);
			return ok$2;
		}
		if (markdownLineEnding(code$1)) {
			effects.enter("lineEnding");
			effects.consume(code$1);
			effects.exit("lineEnding");
			return atBreak;
		}
		effects.enter("chunkString", { contentType: "string" });
		return labelInside(code$1);
	}
	/**
	* In label, in text.
	*
	* ```markdown
	* > | [a]
	*      ^
	* ```
	*
	* @type {State}
	*/
	function labelInside(code$1) {
		if (code$1 === null || code$1 === 91 || code$1 === 93 || markdownLineEnding(code$1) || size++ > 999) {
			effects.exit("chunkString");
			return atBreak(code$1);
		}
		effects.consume(code$1);
		if (!seen) seen = !markdownSpace(code$1);
		return code$1 === 92 ? labelEscape : labelInside;
	}
	/**
	* After `\`, at a special character.
	*
	* ```markdown
	* > | [a\*a]
	*        ^
	* ```
	*
	* @type {State}
	*/
	function labelEscape(code$1) {
		if (code$1 === 91 || code$1 === 92 || code$1 === 93) {
			effects.consume(code$1);
			size++;
			return labelInside;
		}
		return labelInside(code$1);
	}
}

//#endregion
//#region ../node_modules/.pnpm/micromark-factory-title@2.0.0/node_modules/micromark-factory-title/index.js
function factoryTitle(effects, ok$2, nok, type, markerType, stringType) {
	/** @type {NonNullable<Code>} */
	let marker;
	return start;
	/**
	* Start of title.
	*
	* ```markdown
	* > | "a"
	*     ^
	* ```
	*
	* @type {State}
	*/
	function start(code$1) {
		if (code$1 === 34 || code$1 === 39 || code$1 === 40) {
			effects.enter(type);
			effects.enter(markerType);
			effects.consume(code$1);
			effects.exit(markerType);
			marker = code$1 === 40 ? 41 : code$1;
			return begin;
		}
		return nok(code$1);
	}
	/**
	* After opening marker.
	*
	* This is also used at the closing marker.
	*
	* ```markdown
	* > | "a"
	*      ^
	* ```
	*
	* @type {State}
	*/
	function begin(code$1) {
		if (code$1 === marker) {
			effects.enter(markerType);
			effects.consume(code$1);
			effects.exit(markerType);
			effects.exit(type);
			return ok$2;
		}
		effects.enter(stringType);
		return atBreak(code$1);
	}
	/**
	* At something, before something else.
	*
	* ```markdown
	* > | "a"
	*      ^
	* ```
	*
	* @type {State}
	*/
	function atBreak(code$1) {
		if (code$1 === marker) {
			effects.exit(stringType);
			return begin(marker);
		}
		if (code$1 === null) return nok(code$1);
		if (markdownLineEnding(code$1)) {
			effects.enter("lineEnding");
			effects.consume(code$1);
			effects.exit("lineEnding");
			return factorySpace(effects, atBreak, "linePrefix");
		}
		effects.enter("chunkString", { contentType: "string" });
		return inside(code$1);
	}
	/**
	*
	*
	* @type {State}
	*/
	function inside(code$1) {
		if (code$1 === marker || code$1 === null || markdownLineEnding(code$1)) {
			effects.exit("chunkString");
			return atBreak(code$1);
		}
		effects.consume(code$1);
		return code$1 === 92 ? escape$1 : inside;
	}
	/**
	* After `\`, at a special character.
	*
	* ```markdown
	* > | "a\*b"
	*      ^
	* ```
	*
	* @type {State}
	*/
	function escape$1(code$1) {
		if (code$1 === marker || code$1 === 92) {
			effects.consume(code$1);
			return inside;
		}
		return inside(code$1);
	}
}

//#endregion
//#region ../node_modules/.pnpm/micromark-factory-whitespace@2.0.0/node_modules/micromark-factory-whitespace/index.js
function factoryWhitespace(effects, ok$2) {
	/** @type {boolean} */
	let seen;
	return start;
	/** @type {State} */
	function start(code$1) {
		if (markdownLineEnding(code$1)) {
			effects.enter("lineEnding");
			effects.consume(code$1);
			effects.exit("lineEnding");
			seen = true;
			return start;
		}
		if (markdownSpace(code$1)) return factorySpace(effects, start, seen ? "linePrefix" : "lineSuffix")(code$1);
		return ok$2(code$1);
	}
}

//#endregion
//#region ../node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/definition.js
const definition$1 = {
	name: "definition",
	tokenize: tokenizeDefinition
};
/** @type {Construct} */
const titleBefore = {
	tokenize: tokenizeTitleBefore,
	partial: true
};
/**
* @this {TokenizeContext}
* @type {Tokenizer}
*/
function tokenizeDefinition(effects, ok$2, nok) {
	const self$1 = this;
	/** @type {string} */
	let identifier;
	return start;
	/**
	* At start of a definition.
	*
	* ```markdown
	* > | [a]: b "c"
	*     ^
	* ```
	*
	* @type {State}
	*/
	function start(code$1) {
		effects.enter("definition");
		return before(code$1);
	}
	/**
	* After optional whitespace, at `[`.
	*
	* ```markdown
	* > | [a]: b "c"
	*     ^
	* ```
	*
	* @type {State}
	*/
	function before(code$1) {
		return factoryLabel.call(
			self$1,
			effects,
			labelAfter,
			// Note: we don’t need to reset the way `markdown-rs` does.
			nok,
			"definitionLabel",
			"definitionLabelMarker",
			"definitionLabelString"
)(code$1);
	}
	/**
	* After label.
	*
	* ```markdown
	* > | [a]: b "c"
	*        ^
	* ```
	*
	* @type {State}
	*/
	function labelAfter(code$1) {
		identifier = normalizeIdentifier(self$1.sliceSerialize(self$1.events[self$1.events.length - 1][1]).slice(1, -1));
		if (code$1 === 58) {
			effects.enter("definitionMarker");
			effects.consume(code$1);
			effects.exit("definitionMarker");
			return markerAfter;
		}
		return nok(code$1);
	}
	/**
	* After marker.
	*
	* ```markdown
	* > | [a]: b "c"
	*         ^
	* ```
	*
	* @type {State}
	*/
	function markerAfter(code$1) {
		return markdownLineEndingOrSpace(code$1) ? factoryWhitespace(effects, destinationBefore)(code$1) : destinationBefore(code$1);
	}
	/**
	* Before destination.
	*
	* ```markdown
	* > | [a]: b "c"
	*          ^
	* ```
	*
	* @type {State}
	*/
	function destinationBefore(code$1) {
		return factoryDestination(
			effects,
			destinationAfter,
			// Note: we don’t need to reset the way `markdown-rs` does.
			nok,
			"definitionDestination",
			"definitionDestinationLiteral",
			"definitionDestinationLiteralMarker",
			"definitionDestinationRaw",
			"definitionDestinationString"
)(code$1);
	}
	/**
	* After destination.
	*
	* ```markdown
	* > | [a]: b "c"
	*           ^
	* ```
	*
	* @type {State}
	*/
	function destinationAfter(code$1) {
		return effects.attempt(titleBefore, after, after)(code$1);
	}
	/**
	* After definition.
	*
	* ```markdown
	* > | [a]: b
	*           ^
	* > | [a]: b "c"
	*               ^
	* ```
	*
	* @type {State}
	*/
	function after(code$1) {
		return markdownSpace(code$1) ? factorySpace(effects, afterWhitespace, "whitespace")(code$1) : afterWhitespace(code$1);
	}
	/**
	* After definition, after optional whitespace.
	*
	* ```markdown
	* > | [a]: b
	*           ^
	* > | [a]: b "c"
	*               ^
	* ```
	*
	* @type {State}
	*/
	function afterWhitespace(code$1) {
		if (code$1 === null || markdownLineEnding(code$1)) {
			effects.exit("definition");
			self$1.parser.defined.push(identifier);
			return ok$2(code$1);
		}
		return nok(code$1);
	}
}
/**
* @this {TokenizeContext}
* @type {Tokenizer}
*/
function tokenizeTitleBefore(effects, ok$2, nok) {
	return titleBefore$1;
	/**
	* After destination, at whitespace.
	*
	* ```markdown
	* > | [a]: b
	*           ^
	* > | [a]: b "c"
	*           ^
	* ```
	*
	* @type {State}
	*/
	function titleBefore$1(code$1) {
		return markdownLineEndingOrSpace(code$1) ? factoryWhitespace(effects, beforeMarker)(code$1) : nok(code$1);
	}
	/**
	* At title.
	*
	* ```markdown
	*   | [a]: b
	* > | "c"
	*     ^
	* ```
	*
	* @type {State}
	*/
	function beforeMarker(code$1) {
		return factoryTitle(effects, titleAfter, nok, "definitionTitle", "definitionTitleMarker", "definitionTitleString")(code$1);
	}
	/**
	* After title.
	*
	* ```markdown
	* > | [a]: b "c"
	*               ^
	* ```
	*
	* @type {State}
	*/
	function titleAfter(code$1) {
		return markdownSpace(code$1) ? factorySpace(effects, titleAfterOptionalWhitespace, "whitespace")(code$1) : titleAfterOptionalWhitespace(code$1);
	}
	/**
	* After title, after optional whitespace.
	*
	* ```markdown
	* > | [a]: b "c"
	*               ^
	* ```
	*
	* @type {State}
	*/
	function titleAfterOptionalWhitespace(code$1) {
		return code$1 === null || markdownLineEnding(code$1) ? ok$2(code$1) : nok(code$1);
	}
}

//#endregion
//#region ../node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/hard-break-escape.js
const hardBreakEscape = {
	name: "hardBreakEscape",
	tokenize: tokenizeHardBreakEscape
};
/**
* @this {TokenizeContext}
* @type {Tokenizer}
*/
function tokenizeHardBreakEscape(effects, ok$2, nok) {
	return start;
	/**
	* Start of a hard break (escape).
	*
	* ```markdown
	* > | a\
	*      ^
	*   | b
	* ```
	*
	* @type {State}
	*/
	function start(code$1) {
		effects.enter("hardBreakEscape");
		effects.consume(code$1);
		return after;
	}
	/**
	* After `\`, at eol.
	*
	* ```markdown
	* > | a\
	*       ^
	*   | b
	* ```
	*
	*  @type {State}
	*/
	function after(code$1) {
		if (markdownLineEnding(code$1)) {
			effects.exit("hardBreakEscape");
			return ok$2(code$1);
		}
		return nok(code$1);
	}
}

//#endregion
//#region ../node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/heading-atx.js
const headingAtx = {
	name: "headingAtx",
	tokenize: tokenizeHeadingAtx,
	resolve: resolveHeadingAtx
};
/** @type {Resolver} */
function resolveHeadingAtx(events$2, context$1) {
	let contentEnd = events$2.length - 2;
	let contentStart = 3;
	/** @type {Token} */
	let content$2;
	/** @type {Token} */
	let text$3;
	if (events$2[contentStart][1].type === "whitespace") contentStart += 2;
	if (contentEnd - 2 > contentStart && events$2[contentEnd][1].type === "whitespace") contentEnd -= 2;
	if (events$2[contentEnd][1].type === "atxHeadingSequence" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events$2[contentEnd - 2][1].type === "whitespace")) contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;
	if (contentEnd > contentStart) {
		content$2 = {
			type: "atxHeadingText",
			start: events$2[contentStart][1].start,
			end: events$2[contentEnd][1].end
		};
		text$3 = {
			type: "chunkText",
			start: events$2[contentStart][1].start,
			end: events$2[contentEnd][1].end,
			contentType: "text"
		};
		splice(events$2, contentStart, contentEnd - contentStart + 1, [
			[
				"enter",
				content$2,
				context$1
			],
			[
				"enter",
				text$3,
				context$1
			],
			[
				"exit",
				text$3,
				context$1
			],
			[
				"exit",
				content$2,
				context$1
			]
		]);
	}
	return events$2;
}
/**
* @this {TokenizeContext}
* @type {Tokenizer}
*/
function tokenizeHeadingAtx(effects, ok$2, nok) {
	let size = 0;
	return start;
	/**
	* Start of a heading (atx).
	*
	* ```markdown
	* > | ## aa
	*     ^
	* ```
	*
	* @type {State}
	*/
	function start(code$1) {
		effects.enter("atxHeading");
		return before(code$1);
	}
	/**
	* After optional whitespace, at `#`.
	*
	* ```markdown
	* > | ## aa
	*     ^
	* ```
	*
	* @type {State}
	*/
	function before(code$1) {
		effects.enter("atxHeadingSequence");
		return sequenceOpen(code$1);
	}
	/**
	* In opening sequence.
	*
	* ```markdown
	* > | ## aa
	*     ^
	* ```
	*
	* @type {State}
	*/
	function sequenceOpen(code$1) {
		if (code$1 === 35 && size++ < 6) {
			effects.consume(code$1);
			return sequenceOpen;
		}
		if (code$1 === null || markdownLineEndingOrSpace(code$1)) {
			effects.exit("atxHeadingSequence");
			return atBreak(code$1);
		}
		return nok(code$1);
	}
	/**
	* After something, before something else.
	*
	* ```markdown
	* > | ## aa
	*       ^
	* ```
	*
	* @type {State}
	*/
	function atBreak(code$1) {
		if (code$1 === 35) {
			effects.enter("atxHeadingSequence");
			return sequenceFurther(code$1);
		}
		if (code$1 === null || markdownLineEnding(code$1)) {
			effects.exit("atxHeading");
			return ok$2(code$1);
		}
		if (markdownSpace(code$1)) return factorySpace(effects, atBreak, "whitespace")(code$1);
		effects.enter("atxHeadingText");
		return data(code$1);
	}
	/**
	* In further sequence (after whitespace).
	*
	* Could be normal “visible” hashes in the heading or a final sequence.
	*
	* ```markdown
	* > | ## aa ##
	*           ^
	* ```
	*
	* @type {State}
	*/
	function sequenceFurther(code$1) {
		if (code$1 === 35) {
			effects.consume(code$1);
			return sequenceFurther;
		}
		effects.exit("atxHeadingSequence");
		return atBreak(code$1);
	}
	/**
	* In text.
	*
	* ```markdown
	* > | ## aa
	*        ^
	* ```
	*
	* @type {State}
	*/
	function data(code$1) {
		if (code$1 === null || code$1 === 35 || markdownLineEndingOrSpace(code$1)) {
			effects.exit("atxHeadingText");
			return atBreak(code$1);
		}
		effects.consume(code$1);
		return data;
	}
}

//#endregion
//#region ../node_modules/.pnpm/micromark-util-html-tag-name@2.0.0/node_modules/micromark-util-html-tag-name/index.js
const htmlBlockNames = [
	"address",
	"article",
	"aside",
	"base",
	"basefont",
	"blockquote",
	"body",
	"caption",
	"center",
	"col",
	"colgroup",
	"dd",
	"details",
	"dialog",
	"dir",
	"div",
	"dl",
	"dt",
	"fieldset",
	"figcaption",
	"figure",
	"footer",
	"form",
	"frame",
	"frameset",
	"h1",
	"h2",
	"h3",
	"h4",
	"h5",
	"h6",
	"head",
	"header",
	"hr",
	"html",
	"iframe",
	"legend",
	"li",
	"link",
	"main",
	"menu",
	"menuitem",
	"nav",
	"noframes",
	"ol",
	"optgroup",
	"option",
	"p",
	"param",
	"search",
	"section",
	"summary",
	"table",
	"tbody",
	"td",
	"tfoot",
	"th",
	"thead",
	"title",
	"tr",
	"track",
	"ul"
];
const htmlRawNames = [
	"pre",
	"script",
	"style",
	"textarea"
];

//#endregion
//#region ../node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/html-flow.js
const htmlFlow = {
	name: "htmlFlow",
	tokenize: tokenizeHtmlFlow,
	resolveTo: resolveToHtmlFlow,
	concrete: true
};
/** @type {Construct} */
const blankLineBefore = {
	tokenize: tokenizeBlankLineBefore,
	partial: true
};
const nonLazyContinuationStart = {
	tokenize: tokenizeNonLazyContinuationStart,
	partial: true
};
/** @type {Resolver} */
function resolveToHtmlFlow(events$2) {
	let index$1 = events$2.length;
	while (index$1--) if (events$2[index$1][0] === "enter" && events$2[index$1][1].type === "htmlFlow") break;
	if (index$1 > 1 && events$2[index$1 - 2][1].type === "linePrefix") {
		events$2[index$1][1].start = events$2[index$1 - 2][1].start;
		events$2[index$1 + 1][1].start = events$2[index$1 - 2][1].start;
		events$2.splice(index$1 - 2, 2);
	}
	return events$2;
}
/**
* @this {TokenizeContext}
* @type {Tokenizer}
*/
function tokenizeHtmlFlow(effects, ok$2, nok) {
	const self$1 = this;
	/** @type {number} */
	let marker;
	/** @type {boolean} */
	let closingTag;
	/** @type {string} */
	let buffer$1;
	/** @type {number} */
	let index$1;
	/** @type {Code} */
	let markerB;
	return start;
	/**
	* Start of HTML (flow).
	*
	* ```markdown
	* > | <x />
	*     ^
	* ```
	*
	* @type {State}
	*/
	function start(code$1) {
		return before(code$1);
	}
	/**
	* At `<`, after optional whitespace.
	*
	* ```markdown
	* > | <x />
	*     ^
	* ```
	*
	* @type {State}
	*/
	function before(code$1) {
		effects.enter("htmlFlow");
		effects.enter("htmlFlowData");
		effects.consume(code$1);
		return open;
	}
	/**
	* After `<`, at tag name or other stuff.
	*
	* ```markdown
	* > | <x />
	*      ^
	* > | <!doctype>
	*      ^
	* > | <!--xxx-->
	*      ^
	* ```
	*
	* @type {State}
	*/
	function open(code$1) {
		if (code$1 === 33) {
			effects.consume(code$1);
			return declarationOpen;
		}
		if (code$1 === 47) {
			effects.consume(code$1);
			closingTag = true;
			return tagCloseStart;
		}
		if (code$1 === 63) {
			effects.consume(code$1);
			marker = 3;
			return self$1.interrupt ? ok$2 : continuationDeclarationInside;
		}
		if (asciiAlpha(code$1)) {
			effects.consume(code$1);
			buffer$1 = String.fromCharCode(code$1);
			return tagName;
		}
		return nok(code$1);
	}
	/**
	* After `<!`, at declaration, comment, or CDATA.
	*
	* ```markdown
	* > | <!doctype>
	*       ^
	* > | <!--xxx-->
	*       ^
	* > | <![CDATA[>&<]]>
	*       ^
	* ```
	*
	* @type {State}
	*/
	function declarationOpen(code$1) {
		if (code$1 === 45) {
			effects.consume(code$1);
			marker = 2;
			return commentOpenInside;
		}
		if (code$1 === 91) {
			effects.consume(code$1);
			marker = 5;
			index$1 = 0;
			return cdataOpenInside;
		}
		if (asciiAlpha(code$1)) {
			effects.consume(code$1);
			marker = 4;
			return self$1.interrupt ? ok$2 : continuationDeclarationInside;
		}
		return nok(code$1);
	}
	/**
	* After `<!-`, inside a comment, at another `-`.
	*
	* ```markdown
	* > | <!--xxx-->
	*        ^
	* ```
	*
	* @type {State}
	*/
	function commentOpenInside(code$1) {
		if (code$1 === 45) {
			effects.consume(code$1);
			return self$1.interrupt ? ok$2 : continuationDeclarationInside;
		}
		return nok(code$1);
	}
	/**
	* After `<![`, inside CDATA, expecting `CDATA[`.
	*
	* ```markdown
	* > | <![CDATA[>&<]]>
	*        ^^^^^^
	* ```
	*
	* @type {State}
	*/
	function cdataOpenInside(code$1) {
		const value = "CDATA[";
		if (code$1 === value.charCodeAt(index$1++)) {
			effects.consume(code$1);
			if (index$1 === value.length) return self$1.interrupt ? ok$2 : continuation;
			return cdataOpenInside;
		}
		return nok(code$1);
	}
	/**
	* After `</`, in closing tag, at tag name.
	*
	* ```markdown
	* > | </x>
	*       ^
	* ```
	*
	* @type {State}
	*/
	function tagCloseStart(code$1) {
		if (asciiAlpha(code$1)) {
			effects.consume(code$1);
			buffer$1 = String.fromCharCode(code$1);
			return tagName;
		}
		return nok(code$1);
	}
	/**
	* In tag name.
	*
	* ```markdown
	* > | <ab>
	*      ^^
	* > | </ab>
	*       ^^
	* ```
	*
	* @type {State}
	*/
	function tagName(code$1) {
		if (code$1 === null || code$1 === 47 || code$1 === 62 || markdownLineEndingOrSpace(code$1)) {
			const slash$2 = code$1 === 47;
			const name = buffer$1.toLowerCase();
			if (!slash$2 && !closingTag && htmlRawNames.includes(name)) {
				marker = 1;
				return self$1.interrupt ? ok$2(code$1) : continuation(code$1);
			}
			if (htmlBlockNames.includes(buffer$1.toLowerCase())) {
				marker = 6;
				if (slash$2) {
					effects.consume(code$1);
					return basicSelfClosing;
				}
				return self$1.interrupt ? ok$2(code$1) : continuation(code$1);
			}
			marker = 7;
			return self$1.interrupt && !self$1.parser.lazy[self$1.now().line] ? nok(code$1) : closingTag ? completeClosingTagAfter(code$1) : completeAttributeNameBefore(code$1);
		}
		if (code$1 === 45 || asciiAlphanumeric(code$1)) {
			effects.consume(code$1);
			buffer$1 += String.fromCharCode(code$1);
			return tagName;
		}
		return nok(code$1);
	}
	/**
	* After closing slash of a basic tag name.
	*
	* ```markdown
	* > | <div/>
	*          ^
	* ```
	*
	* @type {State}
	*/
	function basicSelfClosing(code$1) {
		if (code$1 === 62) {
			effects.consume(code$1);
			return self$1.interrupt ? ok$2 : continuation;
		}
		return nok(code$1);
	}
	/**
	* After closing slash of a complete tag name.
	*
	* ```markdown
	* > | <x/>
	*        ^
	* ```
	*
	* @type {State}
	*/
	function completeClosingTagAfter(code$1) {
		if (markdownSpace(code$1)) {
			effects.consume(code$1);
			return completeClosingTagAfter;
		}
		return completeEnd(code$1);
	}
	/**
	* At an attribute name.
	*
	* At first, this state is used after a complete tag name, after whitespace,
	* where it expects optional attributes or the end of the tag.
	* It is also reused after attributes, when expecting more optional
	* attributes.
	*
	* ```markdown
	* > | <a />
	*        ^
	* > | <a :b>
	*        ^
	* > | <a _b>
	*        ^
	* > | <a b>
	*        ^
	* > | <a >
	*        ^
	* ```
	*
	* @type {State}
	*/
	function completeAttributeNameBefore(code$1) {
		if (code$1 === 47) {
			effects.consume(code$1);
			return completeEnd;
		}
		if (code$1 === 58 || code$1 === 95 || asciiAlpha(code$1)) {
			effects.consume(code$1);
			return completeAttributeName;
		}
		if (markdownSpace(code$1)) {
			effects.consume(code$1);
			return completeAttributeNameBefore;
		}
		return completeEnd(code$1);
	}
	/**
	* In attribute name.
	*
	* ```markdown
	* > | <a :b>
	*         ^
	* > | <a _b>
	*         ^
	* > | <a b>
	*         ^
	* ```
	*
	* @type {State}
	*/
	function completeAttributeName(code$1) {
		if (code$1 === 45 || code$1 === 46 || code$1 === 58 || code$1 === 95 || asciiAlphanumeric(code$1)) {
			effects.consume(code$1);
			return completeAttributeName;
		}
		return completeAttributeNameAfter(code$1);
	}
	/**
	* After attribute name, at an optional initializer, the end of the tag, or
	* whitespace.
	*
	* ```markdown
	* > | <a b>
	*         ^
	* > | <a b=c>
	*         ^
	* ```
	*
	* @type {State}
	*/
	function completeAttributeNameAfter(code$1) {
		if (code$1 === 61) {
			effects.consume(code$1);
			return completeAttributeValueBefore;
		}
		if (markdownSpace(code$1)) {
			effects.consume(code$1);
			return completeAttributeNameAfter;
		}
		return completeAttributeNameBefore(code$1);
	}
	/**
	* Before unquoted, double quoted, or single quoted attribute value, allowing
	* whitespace.
	*
	* ```markdown
	* > | <a b=c>
	*          ^
	* > | <a b="c">
	*          ^
	* ```
	*
	* @type {State}
	*/
	function completeAttributeValueBefore(code$1) {
		if (code$1 === null || code$1 === 60 || code$1 === 61 || code$1 === 62 || code$1 === 96) return nok(code$1);
		if (code$1 === 34 || code$1 === 39) {
			effects.consume(code$1);
			markerB = code$1;
			return completeAttributeValueQuoted;
		}
		if (markdownSpace(code$1)) {
			effects.consume(code$1);
			return completeAttributeValueBefore;
		}
		return completeAttributeValueUnquoted(code$1);
	}
	/**
	* In double or single quoted attribute value.
	*
	* ```markdown
	* > | <a b="c">
	*           ^
	* > | <a b='c'>
	*           ^
	* ```
	*
	* @type {State}
	*/
	function completeAttributeValueQuoted(code$1) {
		if (code$1 === markerB) {
			effects.consume(code$1);
			markerB = null;
			return completeAttributeValueQuotedAfter;
		}
		if (code$1 === null || markdownLineEnding(code$1)) return nok(code$1);
		effects.consume(code$1);
		return completeAttributeValueQuoted;
	}
	/**
	* In unquoted attribute value.
	*
	* ```markdown
	* > | <a b=c>
	*          ^
	* ```
	*
	* @type {State}
	*/
	function completeAttributeValueUnquoted(code$1) {
		if (code$1 === null || code$1 === 34 || code$1 === 39 || code$1 === 47 || code$1 === 60 || code$1 === 61 || code$1 === 62 || code$1 === 96 || markdownLineEndingOrSpace(code$1)) return completeAttributeNameAfter(code$1);
		effects.consume(code$1);
		return completeAttributeValueUnquoted;
	}
	/**
	* After double or single quoted attribute value, before whitespace or the
	* end of the tag.
	*
	* ```markdown
	* > | <a b="c">
	*            ^
	* ```
	*
	* @type {State}
	*/
	function completeAttributeValueQuotedAfter(code$1) {
		if (code$1 === 47 || code$1 === 62 || markdownSpace(code$1)) return completeAttributeNameBefore(code$1);
		return nok(code$1);
	}
	/**
	* In certain circumstances of a complete tag where only an `>` is allowed.
	*
	* ```markdown
	* > | <a b="c">
	*             ^
	* ```
	*
	* @type {State}
	*/
	function completeEnd(code$1) {
		if (code$1 === 62) {
			effects.consume(code$1);
			return completeAfter;
		}
		return nok(code$1);
	}
	/**
	* After `>` in a complete tag.
	*
	* ```markdown
	* > | <x>
	*        ^
	* ```
	*
	* @type {State}
	*/
	function completeAfter(code$1) {
		if (code$1 === null || markdownLineEnding(code$1)) return continuation(code$1);
		if (markdownSpace(code$1)) {
			effects.consume(code$1);
			return completeAfter;
		}
		return nok(code$1);
	}
	/**
	* In continuation of any HTML kind.
	*
	* ```markdown
	* > | <!--xxx-->
	*          ^
	* ```
	*
	* @type {State}
	*/
	function continuation(code$1) {
		if (code$1 === 45 && marker === 2) {
			effects.consume(code$1);
			return continuationCommentInside;
		}
		if (code$1 === 60 && marker === 1) {
			effects.consume(code$1);
			return continuationRawTagOpen;
		}
		if (code$1 === 62 && marker === 4) {
			effects.consume(code$1);
			return continuationClose;
		}
		if (code$1 === 63 && marker === 3) {
			effects.consume(code$1);
			return continuationDeclarationInside;
		}
		if (code$1 === 93 && marker === 5) {
			effects.consume(code$1);
			return continuationCdataInside;
		}
		if (markdownLineEnding(code$1) && (marker === 6 || marker === 7)) {
			effects.exit("htmlFlowData");
			return effects.check(blankLineBefore, continuationAfter, continuationStart)(code$1);
		}
		if (code$1 === null || markdownLineEnding(code$1)) {
			effects.exit("htmlFlowData");
			return continuationStart(code$1);
		}
		effects.consume(code$1);
		return continuation;
	}
	/**
	* In continuation, at eol.
	*
	* ```markdown
	* > | <x>
	*        ^
	*   | asd
	* ```
	*
	* @type {State}
	*/
	function continuationStart(code$1) {
		return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code$1);
	}
	/**
	* In continuation, at eol, before non-lazy content.
	*
	* ```markdown
	* > | <x>
	*        ^
	*   | asd
	* ```
	*
	* @type {State}
	*/
	function continuationStartNonLazy(code$1) {
		effects.enter("lineEnding");
		effects.consume(code$1);
		effects.exit("lineEnding");
		return continuationBefore;
	}
	/**
	* In continuation, before non-lazy content.
	*
	* ```markdown
	*   | <x>
	* > | asd
	*     ^
	* ```
	*
	* @type {State}
	*/
	function continuationBefore(code$1) {
		if (code$1 === null || markdownLineEnding(code$1)) return continuationStart(code$1);
		effects.enter("htmlFlowData");
		return continuation(code$1);
	}
	/**
	* In comment continuation, after one `-`, expecting another.
	*
	* ```markdown
	* > | <!--xxx-->
	*             ^
	* ```
	*
	* @type {State}
	*/
	function continuationCommentInside(code$1) {
		if (code$1 === 45) {
			effects.consume(code$1);
			return continuationDeclarationInside;
		}
		return continuation(code$1);
	}
	/**
	* In raw continuation, after `<`, at `/`.
	*
	* ```markdown
	* > | <script>console.log(1)</script>
	*                            ^
	* ```
	*
	* @type {State}
	*/
	function continuationRawTagOpen(code$1) {
		if (code$1 === 47) {
			effects.consume(code$1);
			buffer$1 = "";
			return continuationRawEndTag;
		}
		return continuation(code$1);
	}
	/**
	* In raw continuation, after `</`, in a raw tag name.
	*
	* ```markdown
	* > | <script>console.log(1)</script>
	*                             ^^^^^^
	* ```
	*
	* @type {State}
	*/
	function continuationRawEndTag(code$1) {
		if (code$1 === 62) {
			const name = buffer$1.toLowerCase();
			if (htmlRawNames.includes(name)) {
				effects.consume(code$1);
				return continuationClose;
			}
			return continuation(code$1);
		}
		if (asciiAlpha(code$1) && buffer$1.length < 8) {
			effects.consume(code$1);
			buffer$1 += String.fromCharCode(code$1);
			return continuationRawEndTag;
		}
		return continuation(code$1);
	}
	/**
	* In cdata continuation, after `]`, expecting `]>`.
	*
	* ```markdown
	* > | <![CDATA[>&<]]>
	*                  ^
	* ```
	*
	* @type {State}
	*/
	function continuationCdataInside(code$1) {
		if (code$1 === 93) {
			effects.consume(code$1);
			return continuationDeclarationInside;
		}
		return continuation(code$1);
	}
	/**
	* In declaration or instruction continuation, at `>`.
	*
	* ```markdown
	* > | <!-->
	*         ^
	* > | <?>
	*       ^
	* > | <!q>
	*        ^
	* > | <!--ab-->
	*             ^
	* > | <![CDATA[>&<]]>
	*                   ^
	* ```
	*
	* @type {State}
	*/
	function continuationDeclarationInside(code$1) {
		if (code$1 === 62) {
			effects.consume(code$1);
			return continuationClose;
		}
		if (code$1 === 45 && marker === 2) {
			effects.consume(code$1);
			return continuationDeclarationInside;
		}
		return continuation(code$1);
	}
	/**
	* In closed continuation: everything we get until the eol/eof is part of it.
	*
	* ```markdown
	* > | <!doctype>
	*               ^
	* ```
	*
	* @type {State}
	*/
	function continuationClose(code$1) {
		if (code$1 === null || markdownLineEnding(code$1)) {
			effects.exit("htmlFlowData");
			return continuationAfter(code$1);
		}
		effects.consume(code$1);
		return continuationClose;
	}
	/**
	* Done.
	*
	* ```markdown
	* > | <!doctype>
	*               ^
	* ```
	*
	* @type {State}
	*/
	function continuationAfter(code$1) {
		effects.exit("htmlFlow");
		return ok$2(code$1);
	}
}
/**
* @this {TokenizeContext}
* @type {Tokenizer}
*/
function tokenizeNonLazyContinuationStart(effects, ok$2, nok) {
	const self$1 = this;
	return start;
	/**
	* At eol, before continuation.
	*
	* ```markdown
	* > | * ```js
	*            ^
	*   | b
	* ```
	*
	* @type {State}
	*/
	function start(code$1) {
		if (markdownLineEnding(code$1)) {
			effects.enter("lineEnding");
			effects.consume(code$1);
			effects.exit("lineEnding");
			return after;
		}
		return nok(code$1);
	}
	/**
	* A continuation.
	*
	* ```markdown
	*   | * ```js
	* > | b
	*     ^
	* ```
	*
	* @type {State}
	*/
	function after(code$1) {
		return self$1.parser.lazy[self$1.now().line] ? nok(code$1) : ok$2(code$1);
	}
}
/**
* @this {TokenizeContext}
* @type {Tokenizer}
*/
function tokenizeBlankLineBefore(effects, ok$2, nok) {
	return start;
	/**
	* Before eol, expecting blank line.
	*
	* ```markdown
	* > | <div>
	*          ^
	*   |
	* ```
	*
	* @type {State}
	*/
	function start(code$1) {
		effects.enter("lineEnding");
		effects.consume(code$1);
		effects.exit("lineEnding");
		return effects.attempt(blankLine, ok$2, nok);
	}
}

//#endregion
//#region ../node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/html-text.js
const htmlText = {
	name: "htmlText",
	tokenize: tokenizeHtmlText
};
/**
* @this {TokenizeContext}
* @type {Tokenizer}
*/
function tokenizeHtmlText(effects, ok$2, nok) {
	const self$1 = this;
	/** @type {NonNullable<Code> | undefined} */
	let marker;
	/** @type {number} */
	let index$1;
	/** @type {State} */
	let returnState;
	return start;
	/**
	* Start of HTML (text).
	*
	* ```markdown
	* > | a <b> c
	*       ^
	* ```
	*
	* @type {State}
	*/
	function start(code$1) {
		effects.enter("htmlText");
		effects.enter("htmlTextData");
		effects.consume(code$1);
		return open;
	}
	/**
	* After `<`, at tag name or other stuff.
	*
	* ```markdown
	* > | a <b> c
	*        ^
	* > | a <!doctype> c
	*        ^
	* > | a <!--b--> c
	*        ^
	* ```
	*
	* @type {State}
	*/
	function open(code$1) {
		if (code$1 === 33) {
			effects.consume(code$1);
			return declarationOpen;
		}
		if (code$1 === 47) {
			effects.consume(code$1);
			return tagCloseStart;
		}
		if (code$1 === 63) {
			effects.consume(code$1);
			return instruction;
		}
		if (asciiAlpha(code$1)) {
			effects.consume(code$1);
			return tagOpen;
		}
		return nok(code$1);
	}
	/**
	* After `<!`, at declaration, comment, or CDATA.
	*
	* ```markdown
	* > | a <!doctype> c
	*         ^
	* > | a <!--b--> c
	*         ^
	* > | a <![CDATA[>&<]]> c
	*         ^
	* ```
	*
	* @type {State}
	*/
	function declarationOpen(code$1) {
		if (code$1 === 45) {
			effects.consume(code$1);
			return commentOpenInside;
		}
		if (code$1 === 91) {
			effects.consume(code$1);
			index$1 = 0;
			return cdataOpenInside;
		}
		if (asciiAlpha(code$1)) {
			effects.consume(code$1);
			return declaration;
		}
		return nok(code$1);
	}
	/**
	* In a comment, after `<!-`, at another `-`.
	*
	* ```markdown
	* > | a <!--b--> c
	*          ^
	* ```
	*
	* @type {State}
	*/
	function commentOpenInside(code$1) {
		if (code$1 === 45) {
			effects.consume(code$1);
			return commentEnd;
		}
		return nok(code$1);
	}
	/**
	* In comment.
	*
	* ```markdown
	* > | a <!--b--> c
	*           ^
	* ```
	*
	* @type {State}
	*/
	function comment(code$1) {
		if (code$1 === null) return nok(code$1);
		if (code$1 === 45) {
			effects.consume(code$1);
			return commentClose;
		}
		if (markdownLineEnding(code$1)) {
			returnState = comment;
			return lineEndingBefore(code$1);
		}
		effects.consume(code$1);
		return comment;
	}
	/**
	* In comment, after `-`.
	*
	* ```markdown
	* > | a <!--b--> c
	*             ^
	* ```
	*
	* @type {State}
	*/
	function commentClose(code$1) {
		if (code$1 === 45) {
			effects.consume(code$1);
			return commentEnd;
		}
		return comment(code$1);
	}
	/**
	* In comment, after `--`.
	*
	* ```markdown
	* > | a <!--b--> c
	*              ^
	* ```
	*
	* @type {State}
	*/
	function commentEnd(code$1) {
		return code$1 === 62 ? end(code$1) : code$1 === 45 ? commentClose(code$1) : comment(code$1);
	}
	/**
	* After `<![`, in CDATA, expecting `CDATA[`.
	*
	* ```markdown
	* > | a <![CDATA[>&<]]> b
	*          ^^^^^^
	* ```
	*
	* @type {State}
	*/
	function cdataOpenInside(code$1) {
		const value = "CDATA[";
		if (code$1 === value.charCodeAt(index$1++)) {
			effects.consume(code$1);
			return index$1 === value.length ? cdata : cdataOpenInside;
		}
		return nok(code$1);
	}
	/**
	* In CDATA.
	*
	* ```markdown
	* > | a <![CDATA[>&<]]> b
	*                ^^^
	* ```
	*
	* @type {State}
	*/
	function cdata(code$1) {
		if (code$1 === null) return nok(code$1);
		if (code$1 === 93) {
			effects.consume(code$1);
			return cdataClose;
		}
		if (markdownLineEnding(code$1)) {
			returnState = cdata;
			return lineEndingBefore(code$1);
		}
		effects.consume(code$1);
		return cdata;
	}
	/**
	* In CDATA, after `]`, at another `]`.
	*
	* ```markdown
	* > | a <![CDATA[>&<]]> b
	*                    ^
	* ```
	*
	* @type {State}
	*/
	function cdataClose(code$1) {
		if (code$1 === 93) {
			effects.consume(code$1);
			return cdataEnd;
		}
		return cdata(code$1);
	}
	/**
	* In CDATA, after `]]`, at `>`.
	*
	* ```markdown
	* > | a <![CDATA[>&<]]> b
	*                     ^
	* ```
	*
	* @type {State}
	*/
	function cdataEnd(code$1) {
		if (code$1 === 62) return end(code$1);
		if (code$1 === 93) {
			effects.consume(code$1);
			return cdataEnd;
		}
		return cdata(code$1);
	}
	/**
	* In declaration.
	*
	* ```markdown
	* > | a <!b> c
	*          ^
	* ```
	*
	* @type {State}
	*/
	function declaration(code$1) {
		if (code$1 === null || code$1 === 62) return end(code$1);
		if (markdownLineEnding(code$1)) {
			returnState = declaration;
			return lineEndingBefore(code$1);
		}
		effects.consume(code$1);
		return declaration;
	}
	/**
	* In instruction.
	*
	* ```markdown
	* > | a <?b?> c
	*         ^
	* ```
	*
	* @type {State}
	*/
	function instruction(code$1) {
		if (code$1 === null) return nok(code$1);
		if (code$1 === 63) {
			effects.consume(code$1);
			return instructionClose;
		}
		if (markdownLineEnding(code$1)) {
			returnState = instruction;
			return lineEndingBefore(code$1);
		}
		effects.consume(code$1);
		return instruction;
	}
	/**
	* In instruction, after `?`, at `>`.
	*
	* ```markdown
	* > | a <?b?> c
	*           ^
	* ```
	*
	* @type {State}
	*/
	function instructionClose(code$1) {
		return code$1 === 62 ? end(code$1) : instruction(code$1);
	}
	/**
	* After `</`, in closing tag, at tag name.
	*
	* ```markdown
	* > | a </b> c
	*         ^
	* ```
	*
	* @type {State}
	*/
	function tagCloseStart(code$1) {
		if (asciiAlpha(code$1)) {
			effects.consume(code$1);
			return tagClose;
		}
		return nok(code$1);
	}
	/**
	* After `</x`, in a tag name.
	*
	* ```markdown
	* > | a </b> c
	*          ^
	* ```
	*
	* @type {State}
	*/
	function tagClose(code$1) {
		if (code$1 === 45 || asciiAlphanumeric(code$1)) {
			effects.consume(code$1);
			return tagClose;
		}
		return tagCloseBetween(code$1);
	}
	/**
	* In closing tag, after tag name.
	*
	* ```markdown
	* > | a </b> c
	*          ^
	* ```
	*
	* @type {State}
	*/
	function tagCloseBetween(code$1) {
		if (markdownLineEnding(code$1)) {
			returnState = tagCloseBetween;
			return lineEndingBefore(code$1);
		}
		if (markdownSpace(code$1)) {
			effects.consume(code$1);
			return tagCloseBetween;
		}
		return end(code$1);
	}
	/**
	* After `<x`, in opening tag name.
	*
	* ```markdown
	* > | a <b> c
	*         ^
	* ```
	*
	* @type {State}
	*/
	function tagOpen(code$1) {
		if (code$1 === 45 || asciiAlphanumeric(code$1)) {
			effects.consume(code$1);
			return tagOpen;
		}
		if (code$1 === 47 || code$1 === 62 || markdownLineEndingOrSpace(code$1)) return tagOpenBetween(code$1);
		return nok(code$1);
	}
	/**
	* In opening tag, after tag name.
	*
	* ```markdown
	* > | a <b> c
	*         ^
	* ```
	*
	* @type {State}
	*/
	function tagOpenBetween(code$1) {
		if (code$1 === 47) {
			effects.consume(code$1);
			return end;
		}
		if (code$1 === 58 || code$1 === 95 || asciiAlpha(code$1)) {
			effects.consume(code$1);
			return tagOpenAttributeName;
		}
		if (markdownLineEnding(code$1)) {
			returnState = tagOpenBetween;
			return lineEndingBefore(code$1);
		}
		if (markdownSpace(code$1)) {
			effects.consume(code$1);
			return tagOpenBetween;
		}
		return end(code$1);
	}
	/**
	* In attribute name.
	*
	* ```markdown
	* > | a <b c> d
	*          ^
	* ```
	*
	* @type {State}
	*/
	function tagOpenAttributeName(code$1) {
		if (code$1 === 45 || code$1 === 46 || code$1 === 58 || code$1 === 95 || asciiAlphanumeric(code$1)) {
			effects.consume(code$1);
			return tagOpenAttributeName;
		}
		return tagOpenAttributeNameAfter(code$1);
	}
	/**
	* After attribute name, before initializer, the end of the tag, or
	* whitespace.
	*
	* ```markdown
	* > | a <b c> d
	*           ^
	* ```
	*
	* @type {State}
	*/
	function tagOpenAttributeNameAfter(code$1) {
		if (code$1 === 61) {
			effects.consume(code$1);
			return tagOpenAttributeValueBefore;
		}
		if (markdownLineEnding(code$1)) {
			returnState = tagOpenAttributeNameAfter;
			return lineEndingBefore(code$1);
		}
		if (markdownSpace(code$1)) {
			effects.consume(code$1);
			return tagOpenAttributeNameAfter;
		}
		return tagOpenBetween(code$1);
	}
	/**
	* Before unquoted, double quoted, or single quoted attribute value, allowing
	* whitespace.
	*
	* ```markdown
	* > | a <b c=d> e
	*            ^
	* ```
	*
	* @type {State}
	*/
	function tagOpenAttributeValueBefore(code$1) {
		if (code$1 === null || code$1 === 60 || code$1 === 61 || code$1 === 62 || code$1 === 96) return nok(code$1);
		if (code$1 === 34 || code$1 === 39) {
			effects.consume(code$1);
			marker = code$1;
			return tagOpenAttributeValueQuoted;
		}
		if (markdownLineEnding(code$1)) {
			returnState = tagOpenAttributeValueBefore;
			return lineEndingBefore(code$1);
		}
		if (markdownSpace(code$1)) {
			effects.consume(code$1);
			return tagOpenAttributeValueBefore;
		}
		effects.consume(code$1);
		return tagOpenAttributeValueUnquoted;
	}
	/**
	* In double or single quoted attribute value.
	*
	* ```markdown
	* > | a <b c="d"> e
	*             ^
	* ```
	*
	* @type {State}
	*/
	function tagOpenAttributeValueQuoted(code$1) {
		if (code$1 === marker) {
			effects.consume(code$1);
			marker = undefined;
			return tagOpenAttributeValueQuotedAfter;
		}
		if (code$1 === null) return nok(code$1);
		if (markdownLineEnding(code$1)) {
			returnState = tagOpenAttributeValueQuoted;
			return lineEndingBefore(code$1);
		}
		effects.consume(code$1);
		return tagOpenAttributeValueQuoted;
	}
	/**
	* In unquoted attribute value.
	*
	* ```markdown
	* > | a <b c=d> e
	*            ^
	* ```
	*
	* @type {State}
	*/
	function tagOpenAttributeValueUnquoted(code$1) {
		if (code$1 === null || code$1 === 34 || code$1 === 39 || code$1 === 60 || code$1 === 61 || code$1 === 96) return nok(code$1);
		if (code$1 === 47 || code$1 === 62 || markdownLineEndingOrSpace(code$1)) return tagOpenBetween(code$1);
		effects.consume(code$1);
		return tagOpenAttributeValueUnquoted;
	}
	/**
	* After double or single quoted attribute value, before whitespace or the end
	* of the tag.
	*
	* ```markdown
	* > | a <b c="d"> e
	*               ^
	* ```
	*
	* @type {State}
	*/
	function tagOpenAttributeValueQuotedAfter(code$1) {
		if (code$1 === 47 || code$1 === 62 || markdownLineEndingOrSpace(code$1)) return tagOpenBetween(code$1);
		return nok(code$1);
	}
	/**
	* In certain circumstances of a tag where only an `>` is allowed.
	*
	* ```markdown
	* > | a <b c="d"> e
	*               ^
	* ```
	*
	* @type {State}
	*/
	function end(code$1) {
		if (code$1 === 62) {
			effects.consume(code$1);
			effects.exit("htmlTextData");
			effects.exit("htmlText");
			return ok$2;
		}
		return nok(code$1);
	}
	/**
	* At eol.
	*
	* > 👉 **Note**: we can’t have blank lines in text, so no need to worry about
	* > empty tokens.
	*
	* ```markdown
	* > | a <!--a
	*            ^
	*   | b-->
	* ```
	*
	* @type {State}
	*/
	function lineEndingBefore(code$1) {
		effects.exit("htmlTextData");
		effects.enter("lineEnding");
		effects.consume(code$1);
		effects.exit("lineEnding");
		return lineEndingAfter;
	}
	/**
	* After eol, at optional whitespace.
	*
	* > 👉 **Note**: we can’t have blank lines in text, so no need to worry about
	* > empty tokens.
	*
	* ```markdown
	*   | a <!--a
	* > | b-->
	*     ^
	* ```
	*
	* @type {State}
	*/
	function lineEndingAfter(code$1) {
		return markdownSpace(code$1) ? factorySpace(effects, lineEndingAfterPrefix, "linePrefix", self$1.parser.constructs.disable.null.includes("codeIndented") ? undefined : 4)(code$1) : lineEndingAfterPrefix(code$1);
	}
	/**
	* After eol, after optional whitespace.
	*
	* > 👉 **Note**: we can’t have blank lines in text, so no need to worry about
	* > empty tokens.
	*
	* ```markdown
	*   | a <!--a
	* > | b-->
	*     ^
	* ```
	*
	* @type {State}
	*/
	function lineEndingAfterPrefix(code$1) {
		effects.enter("htmlTextData");
		return returnState(code$1);
	}
}

//#endregion
//#region ../node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/label-end.js
const labelEnd = {
	name: "labelEnd",
	tokenize: tokenizeLabelEnd,
	resolveTo: resolveToLabelEnd,
	resolveAll: resolveAllLabelEnd
};
/** @type {Construct} */
const resourceConstruct = { tokenize: tokenizeResource };
/** @type {Construct} */
const referenceFullConstruct = { tokenize: tokenizeReferenceFull };
/** @type {Construct} */
const referenceCollapsedConstruct = { tokenize: tokenizeReferenceCollapsed };
/** @type {Resolver} */
function resolveAllLabelEnd(events$2) {
	let index$1 = -1;
	while (++index$1 < events$2.length) {
		const token = events$2[index$1][1];
		if (token.type === "labelImage" || token.type === "labelLink" || token.type === "labelEnd") {
			events$2.splice(index$1 + 1, token.type === "labelImage" ? 4 : 2);
			token.type = "data";
			index$1++;
		}
	}
	return events$2;
}
/** @type {Resolver} */
function resolveToLabelEnd(events$2, context$1) {
	let index$1 = events$2.length;
	let offset = 0;
	/** @type {Token} */
	let token;
	/** @type {number | undefined} */
	let open;
	/** @type {number | undefined} */
	let close;
	/** @type {Array<Event>} */
	let media;
	while (index$1--) {
		token = events$2[index$1][1];
		if (open) {
			if (token.type === "link" || token.type === "labelLink" && token._inactive) break;
			if (events$2[index$1][0] === "enter" && token.type === "labelLink") token._inactive = true;
		} else if (close) {
			if (events$2[index$1][0] === "enter" && (token.type === "labelImage" || token.type === "labelLink") && !token._balanced) {
				open = index$1;
				if (token.type !== "labelLink") {
					offset = 2;
					break;
				}
			}
		} else if (token.type === "labelEnd") close = index$1;
	}
	const group$1 = {
		type: events$2[open][1].type === "labelLink" ? "link" : "image",
		start: Object.assign({}, events$2[open][1].start),
		end: Object.assign({}, events$2[events$2.length - 1][1].end)
	};
	const label = {
		type: "label",
		start: Object.assign({}, events$2[open][1].start),
		end: Object.assign({}, events$2[close][1].end)
	};
	const text$3 = {
		type: "labelText",
		start: Object.assign({}, events$2[open + offset + 2][1].end),
		end: Object.assign({}, events$2[close - 2][1].start)
	};
	media = [[
		"enter",
		group$1,
		context$1
	], [
		"enter",
		label,
		context$1
	]];
	media = push$1(media, events$2.slice(open + 1, open + offset + 3));
	media = push$1(media, [[
		"enter",
		text$3,
		context$1
	]]);
	media = push$1(media, resolveAll(context$1.parser.constructs.insideSpan.null, events$2.slice(open + offset + 4, close - 3), context$1));
	media = push$1(media, [
		[
			"exit",
			text$3,
			context$1
		],
		events$2[close - 2],
		events$2[close - 1],
		[
			"exit",
			label,
			context$1
		]
	]);
	media = push$1(media, events$2.slice(close + 1));
	media = push$1(media, [[
		"exit",
		group$1,
		context$1
	]]);
	splice(events$2, open, events$2.length, media);
	return events$2;
}
/**
* @this {TokenizeContext}
* @type {Tokenizer}
*/
function tokenizeLabelEnd(effects, ok$2, nok) {
	const self$1 = this;
	let index$1 = self$1.events.length;
	/** @type {Token} */
	let labelStart;
	/** @type {boolean} */
	let defined;
	while (index$1--) if ((self$1.events[index$1][1].type === "labelImage" || self$1.events[index$1][1].type === "labelLink") && !self$1.events[index$1][1]._balanced) {
		labelStart = self$1.events[index$1][1];
		break;
	}
	return start;
	/**
	* Start of label end.
	*
	* ```markdown
	* > | [a](b) c
	*       ^
	* > | [a][b] c
	*       ^
	* > | [a][] b
	*       ^
	* > | [a] b
	* ```
	*
	* @type {State}
	*/
	function start(code$1) {
		if (!labelStart) return nok(code$1);
		if (labelStart._inactive) return labelEndNok(code$1);
		defined = self$1.parser.defined.includes(normalizeIdentifier(self$1.sliceSerialize({
			start: labelStart.end,
			end: self$1.now()
		})));
		effects.enter("labelEnd");
		effects.enter("labelMarker");
		effects.consume(code$1);
		effects.exit("labelMarker");
		effects.exit("labelEnd");
		return after;
	}
	/**
	* After `]`.
	*
	* ```markdown
	* > | [a](b) c
	*       ^
	* > | [a][b] c
	*       ^
	* > | [a][] b
	*       ^
	* > | [a] b
	*       ^
	* ```
	*
	* @type {State}
	*/
	function after(code$1) {
		if (code$1 === 40) return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code$1);
		if (code$1 === 91) return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code$1);
		return defined ? labelEndOk(code$1) : labelEndNok(code$1);
	}
	/**
	* After `]`, at `[`, but not at a full reference.
	*
	* > 👉 **Note**: we only get here if the label is defined.
	*
	* ```markdown
	* > | [a][] b
	*        ^
	* > | [a] b
	*        ^
	* ```
	*
	* @type {State}
	*/
	function referenceNotFull(code$1) {
		return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code$1);
	}
	/**
	* Done, we found something.
	*
	* ```markdown
	* > | [a](b) c
	*           ^
	* > | [a][b] c
	*           ^
	* > | [a][] b
	*          ^
	* > | [a] b
	*        ^
	* ```
	*
	* @type {State}
	*/
	function labelEndOk(code$1) {
		return ok$2(code$1);
	}
	/**
	* Done, it’s nothing.
	*
	* There was an okay opening, but we didn’t match anything.
	*
	* ```markdown
	* > | [a](b c
	*        ^
	* > | [a][b c
	*        ^
	* > | [a] b
	*        ^
	* ```
	*
	* @type {State}
	*/
	function labelEndNok(code$1) {
		labelStart._balanced = true;
		return nok(code$1);
	}
}
/**
* @this {TokenizeContext}
* @type {Tokenizer}
*/
function tokenizeResource(effects, ok$2, nok) {
	return resourceStart;
	/**
	* At a resource.
	*
	* ```markdown
	* > | [a](b) c
	*        ^
	* ```
	*
	* @type {State}
	*/
	function resourceStart(code$1) {
		effects.enter("resource");
		effects.enter("resourceMarker");
		effects.consume(code$1);
		effects.exit("resourceMarker");
		return resourceBefore;
	}
	/**
	* In resource, after `(`, at optional whitespace.
	*
	* ```markdown
	* > | [a](b) c
	*         ^
	* ```
	*
	* @type {State}
	*/
	function resourceBefore(code$1) {
		return markdownLineEndingOrSpace(code$1) ? factoryWhitespace(effects, resourceOpen)(code$1) : resourceOpen(code$1);
	}
	/**
	* In resource, after optional whitespace, at `)` or a destination.
	*
	* ```markdown
	* > | [a](b) c
	*         ^
	* ```
	*
	* @type {State}
	*/
	function resourceOpen(code$1) {
		if (code$1 === 41) return resourceEnd(code$1);
		return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, "resourceDestination", "resourceDestinationLiteral", "resourceDestinationLiteralMarker", "resourceDestinationRaw", "resourceDestinationString", 32)(code$1);
	}
	/**
	* In resource, after destination, at optional whitespace.
	*
	* ```markdown
	* > | [a](b) c
	*          ^
	* ```
	*
	* @type {State}
	*/
	function resourceDestinationAfter(code$1) {
		return markdownLineEndingOrSpace(code$1) ? factoryWhitespace(effects, resourceBetween)(code$1) : resourceEnd(code$1);
	}
	/**
	* At invalid destination.
	*
	* ```markdown
	* > | [a](<<) b
	*         ^
	* ```
	*
	* @type {State}
	*/
	function resourceDestinationMissing(code$1) {
		return nok(code$1);
	}
	/**
	* In resource, after destination and whitespace, at `(` or title.
	*
	* ```markdown
	* > | [a](b ) c
	*           ^
	* ```
	*
	* @type {State}
	*/
	function resourceBetween(code$1) {
		if (code$1 === 34 || code$1 === 39 || code$1 === 40) return factoryTitle(effects, resourceTitleAfter, nok, "resourceTitle", "resourceTitleMarker", "resourceTitleString")(code$1);
		return resourceEnd(code$1);
	}
	/**
	* In resource, after title, at optional whitespace.
	*
	* ```markdown
	* > | [a](b "c") d
	*              ^
	* ```
	*
	* @type {State}
	*/
	function resourceTitleAfter(code$1) {
		return markdownLineEndingOrSpace(code$1) ? factoryWhitespace(effects, resourceEnd)(code$1) : resourceEnd(code$1);
	}
	/**
	* In resource, at `)`.
	*
	* ```markdown
	* > | [a](b) d
	*          ^
	* ```
	*
	* @type {State}
	*/
	function resourceEnd(code$1) {
		if (code$1 === 41) {
			effects.enter("resourceMarker");
			effects.consume(code$1);
			effects.exit("resourceMarker");
			effects.exit("resource");
			return ok$2;
		}
		return nok(code$1);
	}
}
/**
* @this {TokenizeContext}
* @type {Tokenizer}
*/
function tokenizeReferenceFull(effects, ok$2, nok) {
	const self$1 = this;
	return referenceFull;
	/**
	* In a reference (full), at the `[`.
	*
	* ```markdown
	* > | [a][b] d
	*        ^
	* ```
	*
	* @type {State}
	*/
	function referenceFull(code$1) {
		return factoryLabel.call(self$1, effects, referenceFullAfter, referenceFullMissing, "reference", "referenceMarker", "referenceString")(code$1);
	}
	/**
	* In a reference (full), after `]`.
	*
	* ```markdown
	* > | [a][b] d
	*          ^
	* ```
	*
	* @type {State}
	*/
	function referenceFullAfter(code$1) {
		return self$1.parser.defined.includes(normalizeIdentifier(self$1.sliceSerialize(self$1.events[self$1.events.length - 1][1]).slice(1, -1))) ? ok$2(code$1) : nok(code$1);
	}
	/**
	* In reference (full) that was missing.
	*
	* ```markdown
	* > | [a][b d
	*        ^
	* ```
	*
	* @type {State}
	*/
	function referenceFullMissing(code$1) {
		return nok(code$1);
	}
}
/**
* @this {TokenizeContext}
* @type {Tokenizer}
*/
function tokenizeReferenceCollapsed(effects, ok$2, nok) {
	return referenceCollapsedStart;
	/**
	* In reference (collapsed), at `[`.
	*
	* > 👉 **Note**: we only get here if the label is defined.
	*
	* ```markdown
	* > | [a][] d
	*        ^
	* ```
	*
	* @type {State}
	*/
	function referenceCollapsedStart(code$1) {
		effects.enter("reference");
		effects.enter("referenceMarker");
		effects.consume(code$1);
		effects.exit("referenceMarker");
		return referenceCollapsedOpen;
	}
	/**
	* In reference (collapsed), at `]`.
	*
	* > 👉 **Note**: we only get here if the label is defined.
	*
	* ```markdown
	* > | [a][] d
	*         ^
	* ```
	*
	*  @type {State}
	*/
	function referenceCollapsedOpen(code$1) {
		if (code$1 === 93) {
			effects.enter("referenceMarker");
			effects.consume(code$1);
			effects.exit("referenceMarker");
			effects.exit("reference");
			return ok$2;
		}
		return nok(code$1);
	}
}

//#endregion
//#region ../node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/label-start-image.js
const labelStartImage = {
	name: "labelStartImage",
	tokenize: tokenizeLabelStartImage,
	resolveAll: labelEnd.resolveAll
};
/**
* @this {TokenizeContext}
* @type {Tokenizer}
*/
function tokenizeLabelStartImage(effects, ok$2, nok) {
	const self$1 = this;
	return start;
	/**
	* Start of label (image) start.
	*
	* ```markdown
	* > | a ![b] c
	*       ^
	* ```
	*
	* @type {State}
	*/
	function start(code$1) {
		effects.enter("labelImage");
		effects.enter("labelImageMarker");
		effects.consume(code$1);
		effects.exit("labelImageMarker");
		return open;
	}
	/**
	* After `!`, at `[`.
	*
	* ```markdown
	* > | a ![b] c
	*        ^
	* ```
	*
	* @type {State}
	*/
	function open(code$1) {
		if (code$1 === 91) {
			effects.enter("labelMarker");
			effects.consume(code$1);
			effects.exit("labelMarker");
			effects.exit("labelImage");
			return after;
		}
		return nok(code$1);
	}
	/**
	* After `![`.
	*
	* ```markdown
	* > | a ![b] c
	*         ^
	* ```
	*
	* This is needed in because, when GFM footnotes are enabled, images never
	* form when started with a `^`.
	* Instead, links form:
	*
	* ```markdown
	* ![^a](b)
	*
	* ![^a][b]
	*
	* [b]: c
	* ```
	*
	* ```html
	* <p>!<a href=\"b\">^a</a></p>
	* <p>!<a href=\"c\">^a</a></p>
	* ```
	*
	* @type {State}
	*/
	function after(code$1) {
		return code$1 === 94 && "_hiddenFootnoteSupport" in self$1.parser.constructs ? nok(code$1) : ok$2(code$1);
	}
}

//#endregion
//#region ../node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/label-start-link.js
const labelStartLink = {
	name: "labelStartLink",
	tokenize: tokenizeLabelStartLink,
	resolveAll: labelEnd.resolveAll
};
/**
* @this {TokenizeContext}
* @type {Tokenizer}
*/
function tokenizeLabelStartLink(effects, ok$2, nok) {
	const self$1 = this;
	return start;
	/**
	* Start of label (link) start.
	*
	* ```markdown
	* > | a [b] c
	*       ^
	* ```
	*
	* @type {State}
	*/
	function start(code$1) {
		effects.enter("labelLink");
		effects.enter("labelMarker");
		effects.consume(code$1);
		effects.exit("labelMarker");
		effects.exit("labelLink");
		return after;
	}
	/** @type {State} */
	function after(code$1) {
		return code$1 === 94 && "_hiddenFootnoteSupport" in self$1.parser.constructs ? nok(code$1) : ok$2(code$1);
	}
}

//#endregion
//#region ../node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/line-ending.js
const lineEnding = {
	name: "lineEnding",
	tokenize: tokenizeLineEnding
};
/**
* @this {TokenizeContext}
* @type {Tokenizer}
*/
function tokenizeLineEnding(effects, ok$2) {
	return start;
	/** @type {State} */
	function start(code$1) {
		effects.enter("lineEnding");
		effects.consume(code$1);
		effects.exit("lineEnding");
		return factorySpace(effects, ok$2, "linePrefix");
	}
}

//#endregion
//#region ../node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/thematic-break.js
const thematicBreak$1 = {
	name: "thematicBreak",
	tokenize: tokenizeThematicBreak
};
/**
* @this {TokenizeContext}
* @type {Tokenizer}
*/
function tokenizeThematicBreak(effects, ok$2, nok) {
	let size = 0;
	/** @type {NonNullable<Code>} */
	let marker;
	return start;
	/**
	* Start of thematic break.
	*
	* ```markdown
	* > | ***
	*     ^
	* ```
	*
	* @type {State}
	*/
	function start(code$1) {
		effects.enter("thematicBreak");
		return before(code$1);
	}
	/**
	* After optional whitespace, at marker.
	*
	* ```markdown
	* > | ***
	*     ^
	* ```
	*
	* @type {State}
	*/
	function before(code$1) {
		marker = code$1;
		return atBreak(code$1);
	}
	/**
	* After something, before something else.
	*
	* ```markdown
	* > | ***
	*     ^
	* ```
	*
	* @type {State}
	*/
	function atBreak(code$1) {
		if (code$1 === marker) {
			effects.enter("thematicBreakSequence");
			return sequence(code$1);
		}
		if (size >= 3 && (code$1 === null || markdownLineEnding(code$1))) {
			effects.exit("thematicBreak");
			return ok$2(code$1);
		}
		return nok(code$1);
	}
	/**
	* In sequence.
	*
	* ```markdown
	* > | ***
	*     ^
	* ```
	*
	* @type {State}
	*/
	function sequence(code$1) {
		if (code$1 === marker) {
			effects.consume(code$1);
			size++;
			return sequence;
		}
		effects.exit("thematicBreakSequence");
		return markdownSpace(code$1) ? factorySpace(effects, atBreak, "whitespace")(code$1) : atBreak(code$1);
	}
}

//#endregion
//#region ../node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/list.js
const list$2 = {
	name: "list",
	tokenize: tokenizeListStart,
	continuation: { tokenize: tokenizeListContinuation },
	exit: tokenizeListEnd
};
/** @type {Construct} */
const listItemPrefixWhitespaceConstruct = {
	tokenize: tokenizeListItemPrefixWhitespace,
	partial: true
};
/** @type {Construct} */
const indentConstruct = {
	tokenize: tokenizeIndent,
	partial: true
};
/**
* @type {Tokenizer}
* @this {TokenizeContext}
*/
function tokenizeListStart(effects, ok$2, nok) {
	const self$1 = this;
	const tail = self$1.events[self$1.events.length - 1];
	let initialSize = tail && tail[1].type === "linePrefix" ? tail[2].sliceSerialize(tail[1], true).length : 0;
	let size = 0;
	return start;
	/** @type {State} */
	function start(code$1) {
		const kind = self$1.containerState.type || (code$1 === 42 || code$1 === 43 || code$1 === 45 ? "listUnordered" : "listOrdered");
		if (kind === "listUnordered" ? !self$1.containerState.marker || code$1 === self$1.containerState.marker : asciiDigit(code$1)) {
			if (!self$1.containerState.type) {
				self$1.containerState.type = kind;
				effects.enter(kind, { _container: true });
			}
			if (kind === "listUnordered") {
				effects.enter("listItemPrefix");
				return code$1 === 42 || code$1 === 45 ? effects.check(thematicBreak$1, nok, atMarker)(code$1) : atMarker(code$1);
			}
			if (!self$1.interrupt || code$1 === 49) {
				effects.enter("listItemPrefix");
				effects.enter("listItemValue");
				return inside(code$1);
			}
		}
		return nok(code$1);
	}
	/** @type {State} */
	function inside(code$1) {
		if (asciiDigit(code$1) && ++size < 10) {
			effects.consume(code$1);
			return inside;
		}
		if ((!self$1.interrupt || size < 2) && (self$1.containerState.marker ? code$1 === self$1.containerState.marker : code$1 === 41 || code$1 === 46)) {
			effects.exit("listItemValue");
			return atMarker(code$1);
		}
		return nok(code$1);
	}
	/**
	* @type {State}
	**/
	function atMarker(code$1) {
		effects.enter("listItemMarker");
		effects.consume(code$1);
		effects.exit("listItemMarker");
		self$1.containerState.marker = self$1.containerState.marker || code$1;
		return effects.check(
			blankLine,
			// Can’t be empty when interrupting.
			self$1.interrupt ? nok : onBlank,
			effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix)
);
	}
	/** @type {State} */
	function onBlank(code$1) {
		self$1.containerState.initialBlankLine = true;
		initialSize++;
		return endOfPrefix(code$1);
	}
	/** @type {State} */
	function otherPrefix(code$1) {
		if (markdownSpace(code$1)) {
			effects.enter("listItemPrefixWhitespace");
			effects.consume(code$1);
			effects.exit("listItemPrefixWhitespace");
			return endOfPrefix;
		}
		return nok(code$1);
	}
	/** @type {State} */
	function endOfPrefix(code$1) {
		self$1.containerState.size = initialSize + self$1.sliceSerialize(effects.exit("listItemPrefix"), true).length;
		return ok$2(code$1);
	}
}
/**
* @type {Tokenizer}
* @this {TokenizeContext}
*/
function tokenizeListContinuation(effects, ok$2, nok) {
	const self$1 = this;
	self$1.containerState._closeFlow = undefined;
	return effects.check(blankLine, onBlank, notBlank);
	/** @type {State} */
	function onBlank(code$1) {
		self$1.containerState.furtherBlankLines = self$1.containerState.furtherBlankLines || self$1.containerState.initialBlankLine;
		return factorySpace(effects, ok$2, "listItemIndent", self$1.containerState.size + 1)(code$1);
	}
	/** @type {State} */
	function notBlank(code$1) {
		if (self$1.containerState.furtherBlankLines || !markdownSpace(code$1)) {
			self$1.containerState.furtherBlankLines = undefined;
			self$1.containerState.initialBlankLine = undefined;
			return notInCurrentItem(code$1);
		}
		self$1.containerState.furtherBlankLines = undefined;
		self$1.containerState.initialBlankLine = undefined;
		return effects.attempt(indentConstruct, ok$2, notInCurrentItem)(code$1);
	}
	/** @type {State} */
	function notInCurrentItem(code$1) {
		self$1.containerState._closeFlow = true;
		self$1.interrupt = undefined;
		return factorySpace(effects, effects.attempt(list$2, ok$2, nok), "linePrefix", self$1.parser.constructs.disable.null.includes("codeIndented") ? undefined : 4)(code$1);
	}
}
/**
* @type {Tokenizer}
* @this {TokenizeContext}
*/
function tokenizeIndent(effects, ok$2, nok) {
	const self$1 = this;
	return factorySpace(effects, afterPrefix, "listItemIndent", self$1.containerState.size + 1);
	/** @type {State} */
	function afterPrefix(code$1) {
		const tail = self$1.events[self$1.events.length - 1];
		return tail && tail[1].type === "listItemIndent" && tail[2].sliceSerialize(tail[1], true).length === self$1.containerState.size ? ok$2(code$1) : nok(code$1);
	}
}
/**
* @type {Exiter}
* @this {TokenizeContext}
*/
function tokenizeListEnd(effects) {
	effects.exit(this.containerState.type);
}
/**
* @type {Tokenizer}
* @this {TokenizeContext}
*/
function tokenizeListItemPrefixWhitespace(effects, ok$2, nok) {
	const self$1 = this;
	return factorySpace(effects, afterPrefix, "listItemPrefixWhitespace", self$1.parser.constructs.disable.null.includes("codeIndented") ? undefined : 5);
	/** @type {State} */
	function afterPrefix(code$1) {
		const tail = self$1.events[self$1.events.length - 1];
		return !markdownSpace(code$1) && tail && tail[1].type === "listItemPrefixWhitespace" ? ok$2(code$1) : nok(code$1);
	}
}

//#endregion
//#region ../node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/setext-underline.js
const setextUnderline = {
	name: "setextUnderline",
	tokenize: tokenizeSetextUnderline,
	resolveTo: resolveToSetextUnderline
};
/** @type {Resolver} */
function resolveToSetextUnderline(events$2, context$1) {
	let index$1 = events$2.length;
	/** @type {number | undefined} */
	let content$2;
	/** @type {number | undefined} */
	let text$3;
	/** @type {number | undefined} */
	let definition$2;
	while (index$1--) if (events$2[index$1][0] === "enter") {
		if (events$2[index$1][1].type === "content") {
			content$2 = index$1;
			break;
		}
		if (events$2[index$1][1].type === "paragraph") text$3 = index$1;
	} else {
		if (events$2[index$1][1].type === "content") events$2.splice(index$1, 1);
		if (!definition$2 && events$2[index$1][1].type === "definition") definition$2 = index$1;
	}
	const heading$1 = {
		type: "setextHeading",
		start: Object.assign({}, events$2[text$3][1].start),
		end: Object.assign({}, events$2[events$2.length - 1][1].end)
	};
	events$2[text$3][1].type = "setextHeadingText";
	if (definition$2) {
		events$2.splice(text$3, 0, [
			"enter",
			heading$1,
			context$1
		]);
		events$2.splice(definition$2 + 1, 0, [
			"exit",
			events$2[content$2][1],
			context$1
		]);
		events$2[content$2][1].end = Object.assign({}, events$2[definition$2][1].end);
	} else events$2[content$2][1] = heading$1;
	events$2.push([
		"exit",
		heading$1,
		context$1
	]);
	return events$2;
}
/**
* @this {TokenizeContext}
* @type {Tokenizer}
*/
function tokenizeSetextUnderline(effects, ok$2, nok) {
	const self$1 = this;
	/** @type {NonNullable<Code>} */
	let marker;
	return start;
	/**
	* At start of heading (setext) underline.
	*
	* ```markdown
	*   | aa
	* > | ==
	*     ^
	* ```
	*
	* @type {State}
	*/
	function start(code$1) {
		let index$1 = self$1.events.length;
		/** @type {boolean | undefined} */
		let paragraph$1;
		while (index$1--) if (self$1.events[index$1][1].type !== "lineEnding" && self$1.events[index$1][1].type !== "linePrefix" && self$1.events[index$1][1].type !== "content") {
			paragraph$1 = self$1.events[index$1][1].type === "paragraph";
			break;
		}
		if (!self$1.parser.lazy[self$1.now().line] && (self$1.interrupt || paragraph$1)) {
			effects.enter("setextHeadingLine");
			marker = code$1;
			return before(code$1);
		}
		return nok(code$1);
	}
	/**
	* After optional whitespace, at `-` or `=`.
	*
	* ```markdown
	*   | aa
	* > | ==
	*     ^
	* ```
	*
	* @type {State}
	*/
	function before(code$1) {
		effects.enter("setextHeadingLineSequence");
		return inside(code$1);
	}
	/**
	* In sequence.
	*
	* ```markdown
	*   | aa
	* > | ==
	*     ^
	* ```
	*
	* @type {State}
	*/
	function inside(code$1) {
		if (code$1 === marker) {
			effects.consume(code$1);
			return inside;
		}
		effects.exit("setextHeadingLineSequence");
		return markdownSpace(code$1) ? factorySpace(effects, after, "lineSuffix")(code$1) : after(code$1);
	}
	/**
	* After sequence, after optional whitespace.
	*
	* ```markdown
	*   | aa
	* > | ==
	*       ^
	* ```
	*
	* @type {State}
	*/
	function after(code$1) {
		if (code$1 === null || markdownLineEnding(code$1)) {
			effects.exit("setextHeadingLine");
			return ok$2(code$1);
		}
		return nok(code$1);
	}
}

//#endregion
//#region ../node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/lib/initialize/flow.js
const flow$1 = { tokenize: initializeFlow };
/**
* @this {TokenizeContext}
* @type {Initializer}
*/
function initializeFlow(effects) {
	const self$1 = this;
	const initial = effects.attempt(
		// Try to parse a blank line.
		blankLine,
		atBlankEnding,
		// Try to parse initial flow (essentially, only code).
		effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content, afterConstruct)), "linePrefix"))
);
	return initial;
	/** @type {State} */
	function atBlankEnding(code$1) {
		if (code$1 === null) {
			effects.consume(code$1);
			return;
		}
		effects.enter("lineEndingBlank");
		effects.consume(code$1);
		effects.exit("lineEndingBlank");
		self$1.currentConstruct = undefined;
		return initial;
	}
	/** @type {State} */
	function afterConstruct(code$1) {
		if (code$1 === null) {
			effects.consume(code$1);
			return;
		}
		effects.enter("lineEnding");
		effects.consume(code$1);
		effects.exit("lineEnding");
		self$1.currentConstruct = undefined;
		return initial;
	}
}

//#endregion
//#region ../node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/lib/initialize/text.js
const resolver = { resolveAll: createResolver() };
const string$1 = initializeFactory("string");
const text$2 = initializeFactory("text");
/**
* @param {'string' | 'text'} field
* @returns {InitialConstruct}
*/
function initializeFactory(field) {
	return {
		tokenize: initializeText,
		resolveAll: createResolver(field === "text" ? resolveAllLineSuffixes : undefined)
	};
	/**
	* @this {TokenizeContext}
	* @type {Initializer}
	*/
	function initializeText(effects) {
		const self$1 = this;
		const constructs$1 = this.parser.constructs[field];
		const text$3 = effects.attempt(constructs$1, start, notText);
		return start;
		/** @type {State} */
		function start(code$1) {
			return atBreak(code$1) ? text$3(code$1) : notText(code$1);
		}
		/** @type {State} */
		function notText(code$1) {
			if (code$1 === null) {
				effects.consume(code$1);
				return;
			}
			effects.enter("data");
			effects.consume(code$1);
			return data;
		}
		/** @type {State} */
		function data(code$1) {
			if (atBreak(code$1)) {
				effects.exit("data");
				return text$3(code$1);
			}
			effects.consume(code$1);
			return data;
		}
		/**
		* @param {Code} code
		* @returns {boolean}
		*/
		function atBreak(code$1) {
			if (code$1 === null) return true;
			const list$3 = constructs$1[code$1];
			let index$1 = -1;
			if (list$3) while (++index$1 < list$3.length) {
				const item = list$3[index$1];
				if (!item.previous || item.previous.call(self$1, self$1.previous)) return true;
			}
			return false;
		}
	}
}
/**
* @param {Resolver | undefined} [extraResolver]
* @returns {Resolver}
*/
function createResolver(extraResolver) {
	return resolveAllText;
	/** @type {Resolver} */
	function resolveAllText(events$2, context$1) {
		let index$1 = -1;
		/** @type {number | undefined} */
		let enter;
		while (++index$1 <= events$2.length) if (enter === undefined) {
			if (events$2[index$1] && events$2[index$1][1].type === "data") {
				enter = index$1;
				index$1++;
			}
		} else if (!events$2[index$1] || events$2[index$1][1].type !== "data") {
			if (index$1 !== enter + 2) {
				events$2[enter][1].end = events$2[index$1 - 1][1].end;
				events$2.splice(enter + 2, index$1 - enter - 2);
				index$1 = enter + 2;
			}
			enter = undefined;
		}
		return extraResolver ? extraResolver(events$2, context$1) : events$2;
	}
}
/**
* A rather ugly set of instructions which again looks at chunks in the input
* stream.
* The reason to do this here is that it is *much* faster to parse in reverse.
* And that we can’t hook into `null` to split the line suffix before an EOF.
* To do: figure out if we can make this into a clean utility, or even in core.
* As it will be useful for GFMs literal autolink extension (and maybe even
* tables?)
*
* @type {Resolver}
*/
function resolveAllLineSuffixes(events$2, context$1) {
	let eventIndex = 0;
	while (++eventIndex <= events$2.length) if ((eventIndex === events$2.length || events$2[eventIndex][1].type === "lineEnding") && events$2[eventIndex - 1][1].type === "data") {
		const data = events$2[eventIndex - 1][1];
		const chunks = context$1.sliceStream(data);
		let index$1 = chunks.length;
		let bufferIndex = -1;
		let size = 0;
		/** @type {boolean | undefined} */
		let tabs;
		while (index$1--) {
			const chunk = chunks[index$1];
			if (typeof chunk === "string") {
				bufferIndex = chunk.length;
				while (chunk.charCodeAt(bufferIndex - 1) === 32) {
					size++;
					bufferIndex--;
				}
				if (bufferIndex) break;
				bufferIndex = -1;
			} else if (chunk === -2) {
				tabs = true;
				size++;
			} else if (chunk === -1) {} else {
				index$1++;
				break;
			}
		}
		if (size) {
			const token = {
				type: eventIndex === events$2.length || tabs || size < 2 ? "lineSuffix" : "hardBreakTrailing",
				start: {
					line: data.end.line,
					column: data.end.column - size,
					offset: data.end.offset - size,
					_index: data.start._index + index$1,
					_bufferIndex: index$1 ? bufferIndex : data.start._bufferIndex + bufferIndex
				},
				end: Object.assign({}, data.end)
			};
			data.end = Object.assign({}, token.start);
			if (data.start.offset === data.end.offset) Object.assign(data, token);
else {
				events$2.splice(eventIndex, 0, [
					"enter",
					token,
					context$1
				], [
					"exit",
					token,
					context$1
				]);
				eventIndex += 2;
			}
		}
		eventIndex++;
	}
	return events$2;
}

//#endregion
//#region ../node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/lib/create-tokenizer.js
function createTokenizer(parser, initialize, from) {
	/** @type {Point} */
	let point$2 = Object.assign(from ? Object.assign({}, from) : {
		line: 1,
		column: 1,
		offset: 0
	}, {
		_index: 0,
		_bufferIndex: -1
	});
	/** @type {Record<string, number>} */
	const columnStart = {};
	/** @type {Array<Construct>} */
	const resolveAllConstructs = [];
	/** @type {Array<Chunk>} */
	let chunks = [];
	/** @type {Array<Token>} */
	let stack = [];
	/** @type {boolean | undefined} */
	let consumed = true;
	/**
	* Tools used for tokenizing.
	*
	* @type {Effects}
	*/
	const effects = {
		consume: consume$1,
		enter,
		exit: exit$1,
		attempt: constructFactory(onsuccessfulconstruct),
		check: constructFactory(onsuccessfulcheck),
		interrupt: constructFactory(onsuccessfulcheck, { interrupt: true })
	};
	/**
	* State and tools for resolving and serializing.
	*
	* @type {TokenizeContext}
	*/
	const context$1 = {
		previous: null,
		code: null,
		containerState: {},
		events: [],
		parser,
		sliceStream,
		sliceSerialize,
		now,
		defineSkip,
		write: write$1
	};
	/**
	* The state function.
	*
	* @type {State | undefined}
	*/
	let state = initialize.tokenize.call(context$1, effects);
	/**
	* Track which character we expect to be consumed, to catch bugs.
	*
	* @type {Code}
	*/
	let expectedCode;
	if (initialize.resolveAll) resolveAllConstructs.push(initialize);
	return context$1;
	/** @type {TokenizeContext['write']} */
	function write$1(slice$1) {
		chunks = push$1(chunks, slice$1);
		main$1();
		if (chunks[chunks.length - 1] !== null) return [];
		addResult(initialize, 0);
		context$1.events = resolveAll(resolveAllConstructs, context$1.events, context$1);
		return context$1.events;
	}
	/** @type {TokenizeContext['sliceSerialize']} */
	function sliceSerialize(token, expandTabs) {
		return serializeChunks(sliceStream(token), expandTabs);
	}
	/** @type {TokenizeContext['sliceStream']} */
	function sliceStream(token) {
		return sliceChunks(chunks, token);
	}
	/** @type {TokenizeContext['now']} */
	function now() {
		const { line, column, offset, _index, _bufferIndex } = point$2;
		return {
			line,
			column,
			offset,
			_index,
			_bufferIndex
		};
	}
	/** @type {TokenizeContext['defineSkip']} */
	function defineSkip(value) {
		columnStart[value.line] = value.column;
		accountForPotentialSkip();
	}
	/**
	* Main loop (note that `_index` and `_bufferIndex` in `point` are modified by
	* `consume`).
	* Here is where we walk through the chunks, which either include strings of
	* several characters, or numerical character codes.
	* The reason to do this in a loop instead of a call is so the stack can
	* drain.
	*
	* @returns {undefined}
	*/
	function main$1() {
		/** @type {number} */
		let chunkIndex;
		while (point$2._index < chunks.length) {
			const chunk = chunks[point$2._index];
			if (typeof chunk === "string") {
				chunkIndex = point$2._index;
				if (point$2._bufferIndex < 0) point$2._bufferIndex = 0;
				while (point$2._index === chunkIndex && point$2._bufferIndex < chunk.length) go(chunk.charCodeAt(point$2._bufferIndex));
			} else go(chunk);
		}
	}
	/**
	* Deal with one code.
	*
	* @param {Code} code
	* @returns {undefined}
	*/
	function go(code$1) {
		consumed = undefined;
		expectedCode = code$1;
		state = state(code$1);
	}
	/** @type {Effects['consume']} */
	function consume$1(code$1) {
		if (markdownLineEnding(code$1)) {
			point$2.line++;
			point$2.column = 1;
			point$2.offset += code$1 === -3 ? 2 : 1;
			accountForPotentialSkip();
		} else if (code$1 !== -1) {
			point$2.column++;
			point$2.offset++;
		}
		if (point$2._bufferIndex < 0) point$2._index++;
else {
			point$2._bufferIndex++;
			if (point$2._bufferIndex === chunks[point$2._index].length) {
				point$2._bufferIndex = -1;
				point$2._index++;
			}
		}
		context$1.previous = code$1;
		consumed = true;
	}
	/** @type {Effects['enter']} */
	function enter(type, fields) {
		/** @type {Token} */
		const token = fields || {};
		token.type = type;
		token.start = now();
		context$1.events.push([
			"enter",
			token,
			context$1
		]);
		stack.push(token);
		return token;
	}
	/** @type {Effects['exit']} */
	function exit$1(type) {
		const token = stack.pop();
		token.end = now();
		context$1.events.push([
			"exit",
			token,
			context$1
		]);
		return token;
	}
	/**
	* Use results.
	*
	* @type {ReturnHandle}
	*/
	function onsuccessfulconstruct(construct$1, info$2) {
		addResult(construct$1, info$2.from);
	}
	/**
	* Discard results.
	*
	* @type {ReturnHandle}
	*/
	function onsuccessfulcheck(_, info$2) {
		info$2.restore();
	}
	/**
	* Factory to attempt/check/interrupt.
	*
	* @param {ReturnHandle} onreturn
	* @param {{interrupt?: boolean | undefined} | undefined} [fields]
	*/
	function constructFactory(onreturn, fields) {
		return hook$1;
		/**
		* Handle either an object mapping codes to constructs, a list of
		* constructs, or a single construct.
		*
		* @param {Array<Construct> | Construct | ConstructRecord} constructs
		* @param {State} returnState
		* @param {State | undefined} [bogusState]
		* @returns {State}
		*/
		function hook$1(constructs$1, returnState, bogusState) {
			/** @type {Array<Construct>} */
			let listOfConstructs;
			/** @type {number} */
			let constructIndex;
			/** @type {Construct} */
			let currentConstruct;
			/** @type {Info} */
			let info$2;
			return Array.isArray(constructs$1) ? handleListOfConstructs(constructs$1) : "tokenize" in constructs$1 ? handleListOfConstructs([constructs$1]) : handleMapOfConstructs(constructs$1);
			/**
			* Handle a list of construct.
			*
			* @param {ConstructRecord} map
			* @returns {State}
			*/
			function handleMapOfConstructs(map$3) {
				return start;
				/** @type {State} */
				function start(code$1) {
					const def = code$1 !== null && map$3[code$1];
					const all$1 = code$1 !== null && map$3.null;
					const list$3 = [...Array.isArray(def) ? def : def ? [def] : [], ...Array.isArray(all$1) ? all$1 : all$1 ? [all$1] : []];
					return handleListOfConstructs(list$3)(code$1);
				}
			}
			/**
			* Handle a list of construct.
			*
			* @param {Array<Construct>} list
			* @returns {State}
			*/
			function handleListOfConstructs(list$3) {
				listOfConstructs = list$3;
				constructIndex = 0;
				if (list$3.length === 0) return bogusState;
				return handleConstruct(list$3[constructIndex]);
			}
			/**
			* Handle a single construct.
			*
			* @param {Construct} construct
			* @returns {State}
			*/
			function handleConstruct(construct$1) {
				return start;
				/** @type {State} */
				function start(code$1) {
					info$2 = store();
					currentConstruct = construct$1;
					if (!construct$1.partial) context$1.currentConstruct = construct$1;
					if (construct$1.name && context$1.parser.constructs.disable.null.includes(construct$1.name)) return nok(code$1);
					return construct$1.tokenize.call(
						// If we do have fields, create an object w/ `context` as its
						// prototype.
						// This allows a “live binding”, which is needed for `interrupt`.
						fields ? Object.assign(Object.create(context$1), fields) : context$1,
						effects,
						ok$2,
						nok
)(code$1);
				}
			}
			/** @type {State} */
			function ok$2(code$1) {
				consumed = true;
				onreturn(currentConstruct, info$2);
				return returnState;
			}
			/** @type {State} */
			function nok(code$1) {
				consumed = true;
				info$2.restore();
				if (++constructIndex < listOfConstructs.length) return handleConstruct(listOfConstructs[constructIndex]);
				return bogusState;
			}
		}
	}
	/**
	* @param {Construct} construct
	* @param {number} from
	* @returns {undefined}
	*/
	function addResult(construct$1, from$1) {
		if (construct$1.resolveAll && !resolveAllConstructs.includes(construct$1)) resolveAllConstructs.push(construct$1);
		if (construct$1.resolve) splice(context$1.events, from$1, context$1.events.length - from$1, construct$1.resolve(context$1.events.slice(from$1), context$1));
		if (construct$1.resolveTo) context$1.events = construct$1.resolveTo(context$1.events, context$1);
	}
	/**
	* Store state.
	*
	* @returns {Info}
	*/
	function store() {
		const startPoint = now();
		const startPrevious = context$1.previous;
		const startCurrentConstruct = context$1.currentConstruct;
		const startEventsIndex = context$1.events.length;
		const startStack = Array.from(stack);
		return {
			restore,
			from: startEventsIndex
		};
		/**
		* Restore state.
		*
		* @returns {undefined}
		*/
		function restore() {
			point$2 = startPoint;
			context$1.previous = startPrevious;
			context$1.currentConstruct = startCurrentConstruct;
			context$1.events.length = startEventsIndex;
			stack = startStack;
			accountForPotentialSkip();
		}
	}
	/**
	* Move the current point a bit forward in the line when it’s on a column
	* skip.
	*
	* @returns {undefined}
	*/
	function accountForPotentialSkip() {
		if (point$2.line in columnStart && point$2.column < 2) {
			point$2.column = columnStart[point$2.line];
			point$2.offset += columnStart[point$2.line] - 1;
		}
	}
}
/**
* Get the chunks from a slice of chunks in the range of a token.
*
* @param {Array<Chunk>} chunks
* @param {Pick<Token, 'end' | 'start'>} token
* @returns {Array<Chunk>}
*/
function sliceChunks(chunks, token) {
	const startIndex = token.start._index;
	const startBufferIndex = token.start._bufferIndex;
	const endIndex = token.end._index;
	const endBufferIndex = token.end._bufferIndex;
	/** @type {Array<Chunk>} */
	let view;
	if (startIndex === endIndex) view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];
else {
		view = chunks.slice(startIndex, endIndex);
		if (startBufferIndex > -1) {
			const head = view[0];
			if (typeof head === "string") view[0] = head.slice(startBufferIndex);
else view.shift();
		}
		if (endBufferIndex > 0) view.push(chunks[endIndex].slice(0, endBufferIndex));
	}
	return view;
}
/**
* Get the string value of a slice of chunks.
*
* @param {Array<Chunk>} chunks
* @param {boolean | undefined} [expandTabs=false]
* @returns {string}
*/
function serializeChunks(chunks, expandTabs) {
	let index$1 = -1;
	/** @type {Array<string>} */
	const result = [];
	/** @type {boolean | undefined} */
	let atTab;
	while (++index$1 < chunks.length) {
		const chunk = chunks[index$1];
		/** @type {string} */
		let value;
		if (typeof chunk === "string") value = chunk;
else switch (chunk) {
			case -5: {
				value = "\r";
				break;
			}
			case -4: {
				value = "\n";
				break;
			}
			case -3: {
				value = "\r\n";
				break;
			}
			case -2: {
				value = expandTabs ? " " : "	";
				break;
			}
			case -1: {
				if (!expandTabs && atTab) continue;
				value = " ";
				break;
			}
			default: value = String.fromCharCode(chunk);
		}
		atTab = chunk === -2;
		result.push(value);
	}
	return result.join("");
}

//#endregion
//#region ../node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/lib/constructs.js
var constructs_exports = {};
__export$8(constructs_exports, {
	attentionMarkers: () => attentionMarkers,
	contentInitial: () => contentInitial,
	disable: () => disable,
	document: () => document,
	flow: () => flow,
	flowInitial: () => flowInitial,
	insideSpan: () => insideSpan,
	string: () => string,
	text: () => text$1
});
const document = {
	[42]: list$2,
	[43]: list$2,
	[45]: list$2,
	[48]: list$2,
	[49]: list$2,
	[50]: list$2,
	[51]: list$2,
	[52]: list$2,
	[53]: list$2,
	[54]: list$2,
	[55]: list$2,
	[56]: list$2,
	[57]: list$2,
	[62]: blockQuote
};
const contentInitial = { [91]: definition$1 };
const flowInitial = {
	[-2]: codeIndented,
	[-1]: codeIndented,
	[32]: codeIndented
};
const flow = {
	[35]: headingAtx,
	[42]: thematicBreak$1,
	[45]: [setextUnderline, thematicBreak$1],
	[60]: htmlFlow,
	[61]: setextUnderline,
	[95]: thematicBreak$1,
	[96]: codeFenced,
	[126]: codeFenced
};
const string = {
	[38]: characterReference,
	[92]: characterEscape
};
const text$1 = {
	[-5]: lineEnding,
	[-4]: lineEnding,
	[-3]: lineEnding,
	[33]: labelStartImage,
	[38]: characterReference,
	[42]: attention,
	[60]: [autolink, htmlText],
	[91]: labelStartLink,
	[92]: [hardBreakEscape, characterEscape],
	[93]: labelEnd,
	[95]: attention,
	[96]: codeText
};
const insideSpan = { null: [attention, resolver] };
const attentionMarkers = { null: [42, 95] };
const disable = { null: [] };

//#endregion
//#region ../node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/lib/parse.js
function parse$7(options) {
	const settings = options || {};
	const constructs$1 = combineExtensions([constructs_exports, ...settings.extensions || []]);
	/** @type {ParseContext} */
	const parser = {
		defined: [],
		lazy: {},
		constructs: constructs$1,
		content: create(content$1),
		document: create(document$1),
		flow: create(flow$1),
		string: create(string$1),
		text: create(text$2)
	};
	return parser;
	/**
	* @param {InitialConstruct} initial
	*/
	function create(initial) {
		return creator;
		/** @type {Create} */
		function creator(from) {
			return createTokenizer(parser, initial, from);
		}
	}
}

//#endregion
//#region ../node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/lib/postprocess.js
function postprocess(events$2) {
	while (!subtokenize(events$2));
	return events$2;
}

//#endregion
//#region ../node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/lib/preprocess.js
/**
* @typedef {import('micromark-util-types').Chunk} Chunk
* @typedef {import('micromark-util-types').Code} Code
* @typedef {import('micromark-util-types').Encoding} Encoding
* @typedef {import('micromark-util-types').Value} Value
*/
/**
* @callback Preprocessor
* @param {Value} value
* @param {Encoding | null | undefined} [encoding]
* @param {boolean | null | undefined} [end=false]
* @returns {Array<Chunk>}
*/
const search = /[\0\t\n\r]/g;
function preprocess() {
	let column = 1;
	let buffer$1 = "";
	/** @type {boolean | undefined} */
	let start = true;
	/** @type {boolean | undefined} */
	let atCarriageReturn;
	return preprocessor;
	/** @type {Preprocessor} */
	function preprocessor(value, encoding, end) {
		/** @type {Array<Chunk>} */
		const chunks = [];
		/** @type {RegExpMatchArray | null} */
		let match;
		/** @type {number} */
		let next;
		/** @type {number} */
		let startPosition;
		/** @type {number} */
		let endPosition;
		/** @type {Code} */
		let code$1;
		value = buffer$1 + (typeof value === "string" ? value.toString() : new TextDecoder(encoding || undefined).decode(value));
		startPosition = 0;
		buffer$1 = "";
		if (start) {
			if (value.charCodeAt(0) === 65279) startPosition++;
			start = undefined;
		}
		while (startPosition < value.length) {
			search.lastIndex = startPosition;
			match = search.exec(value);
			endPosition = match && match.index !== undefined ? match.index : value.length;
			code$1 = value.charCodeAt(endPosition);
			if (!match) {
				buffer$1 = value.slice(startPosition);
				break;
			}
			if (code$1 === 10 && startPosition === endPosition && atCarriageReturn) {
				chunks.push(-3);
				atCarriageReturn = undefined;
			} else {
				if (atCarriageReturn) {
					chunks.push(-5);
					atCarriageReturn = undefined;
				}
				if (startPosition < endPosition) {
					chunks.push(value.slice(startPosition, endPosition));
					column += endPosition - startPosition;
				}
				switch (code$1) {
					case 0: {
						chunks.push(65533);
						column++;
						break;
					}
					case 9: {
						next = Math.ceil(column / 4) * 4;
						chunks.push(-2);
						while (column++ < next) chunks.push(-1);
						break;
					}
					case 10: {
						chunks.push(-4);
						column = 1;
						break;
					}
					default: {
						atCarriageReturn = true;
						column = 1;
					}
				}
			}
			startPosition = endPosition + 1;
		}
		if (end) {
			if (atCarriageReturn) chunks.push(-5);
			if (buffer$1) chunks.push(buffer$1);
			chunks.push(null);
		}
		return chunks;
	}
}

//#endregion
//#region ../node_modules/.pnpm/micromark-util-decode-string@2.0.0/node_modules/micromark-util-decode-string/index.js
const characterEscapeOrReference = /\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;
function decodeString(value) {
	return value.replace(characterEscapeOrReference, decode);
}
/**
* @param {string} $0
* @param {string} $1
* @param {string} $2
* @returns {string}
*/
function decode($0, $1, $2) {
	if ($1) return $1;
	const head = $2.charCodeAt(0);
	if (head === 35) {
		const head$1 = $2.charCodeAt(1);
		const hex = head$1 === 120 || head$1 === 88;
		return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);
	}
	return decodeNamedCharacterReference($2) || $0;
}

//#endregion
//#region ../node_modules/.pnpm/unist-util-stringify-position@4.0.0/node_modules/unist-util-stringify-position/lib/index.js
function stringifyPosition(value) {
	if (!value || typeof value !== "object") return "";
	if ("position" in value || "type" in value) return position(value.position);
	if ("start" in value || "end" in value) return position(value);
	if ("line" in value || "column" in value) return point$1(value);
	return "";
}
/**
* @param {Point | PointLike | null | undefined} point
* @returns {string}
*/
function point$1(point$2) {
	return index(point$2 && point$2.line) + ":" + index(point$2 && point$2.column);
}
/**
* @param {Position | PositionLike | null | undefined} pos
* @returns {string}
*/
function position(pos) {
	return point$1(pos && pos.start) + "-" + point$1(pos && pos.end);
}
/**
* @param {number | null | undefined} value
* @returns {number}
*/
function index(value) {
	return value && typeof value === "number" ? value : 1;
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-from-markdown@2.0.1/node_modules/mdast-util-from-markdown/lib/index.js
const own$3 = {}.hasOwnProperty;
function fromMarkdown(value, encoding, options) {
	if (typeof encoding !== "string") {
		options = encoding;
		encoding = undefined;
	}
	return compiler(options)(postprocess(parse$7(options).document().write(preprocess()(value, encoding, true))));
}
/**
* Note this compiler only understand complete buffering, not streaming.
*
* @param {Options | null | undefined} [options]
*/
function compiler(options) {
	/** @type {Config} */
	const config = {
		transforms: [],
		canContainEols: [
			"emphasis",
			"fragment",
			"heading",
			"paragraph",
			"strong"
		],
		enter: {
			autolink: opener(link$3),
			autolinkProtocol: onenterdata,
			autolinkEmail: onenterdata,
			atxHeading: opener(heading$1),
			blockQuote: opener(blockQuote$1),
			characterEscape: onenterdata,
			characterReference: onenterdata,
			codeFenced: opener(codeFlow),
			codeFencedFenceInfo: buffer$1,
			codeFencedFenceMeta: buffer$1,
			codeIndented: opener(codeFlow, buffer$1),
			codeText: opener(codeText$1, buffer$1),
			codeTextData: onenterdata,
			data: onenterdata,
			codeFlowValue: onenterdata,
			definition: opener(definition$2),
			definitionDestinationString: buffer$1,
			definitionLabelString: buffer$1,
			definitionTitleString: buffer$1,
			emphasis: opener(emphasis$1),
			hardBreakEscape: opener(hardBreak$1),
			hardBreakTrailing: opener(hardBreak$1),
			htmlFlow: opener(html$1, buffer$1),
			htmlFlowData: onenterdata,
			htmlText: opener(html$1, buffer$1),
			htmlTextData: onenterdata,
			image: opener(image$1),
			label: buffer$1,
			link: opener(link$3),
			listItem: opener(listItem$1),
			listItemValue: onenterlistitemvalue,
			listOrdered: opener(list$3, onenterlistordered),
			listUnordered: opener(list$3),
			paragraph: opener(paragraph$1),
			reference: onenterreference,
			referenceString: buffer$1,
			resourceDestinationString: buffer$1,
			resourceTitleString: buffer$1,
			setextHeading: opener(heading$1),
			strong: opener(strong$1),
			thematicBreak: opener(thematicBreak$2)
		},
		exit: {
			atxHeading: closer(),
			atxHeadingSequence: onexitatxheadingsequence,
			autolink: closer(),
			autolinkEmail: onexitautolinkemail,
			autolinkProtocol: onexitautolinkprotocol,
			blockQuote: closer(),
			characterEscapeValue: onexitdata,
			characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,
			characterReferenceMarkerNumeric: onexitcharacterreferencemarker,
			characterReferenceValue: onexitcharacterreferencevalue,
			characterReference: onexitcharacterreference,
			codeFenced: closer(onexitcodefenced),
			codeFencedFence: onexitcodefencedfence,
			codeFencedFenceInfo: onexitcodefencedfenceinfo,
			codeFencedFenceMeta: onexitcodefencedfencemeta,
			codeFlowValue: onexitdata,
			codeIndented: closer(onexitcodeindented),
			codeText: closer(onexitcodetext),
			codeTextData: onexitdata,
			data: onexitdata,
			definition: closer(),
			definitionDestinationString: onexitdefinitiondestinationstring,
			definitionLabelString: onexitdefinitionlabelstring,
			definitionTitleString: onexitdefinitiontitlestring,
			emphasis: closer(),
			hardBreakEscape: closer(onexithardbreak),
			hardBreakTrailing: closer(onexithardbreak),
			htmlFlow: closer(onexithtmlflow),
			htmlFlowData: onexitdata,
			htmlText: closer(onexithtmltext),
			htmlTextData: onexitdata,
			image: closer(onexitimage),
			label: onexitlabel,
			labelText: onexitlabeltext,
			lineEnding: onexitlineending,
			link: closer(onexitlink),
			listItem: closer(),
			listOrdered: closer(),
			listUnordered: closer(),
			paragraph: closer(),
			referenceString: onexitreferencestring,
			resourceDestinationString: onexitresourcedestinationstring,
			resourceTitleString: onexitresourcetitlestring,
			resource: onexitresource,
			setextHeading: closer(onexitsetextheading),
			setextHeadingLineSequence: onexitsetextheadinglinesequence,
			setextHeadingText: onexitsetextheadingtext,
			strong: closer(),
			thematicBreak: closer()
		}
	};
	configure$2(config, (options || {}).mdastExtensions || []);
	/** @type {CompileData} */
	const data = {};
	return compile$2;
	/**
	* Turn micromark events into an mdast tree.
	*
	* @param {Array<Event>} events
	*   Events.
	* @returns {Root}
	*   mdast tree.
	*/
	function compile$2(events$2) {
		/** @type {Root} */
		let tree = {
			type: "root",
			children: []
		};
		/** @type {Omit<CompileContext, 'sliceSerialize'>} */
		const context$1 = {
			stack: [tree],
			tokenStack: [],
			config,
			enter,
			exit: exit$1,
			buffer: buffer$1,
			resume: resume$1,
			data
		};
		/** @type {Array<number>} */
		const listStack = [];
		let index$1 = -1;
		while (++index$1 < events$2.length) if (events$2[index$1][1].type === "listOrdered" || events$2[index$1][1].type === "listUnordered") if (events$2[index$1][0] === "enter") listStack.push(index$1);
else {
			const tail = listStack.pop();
			index$1 = prepareList(events$2, tail, index$1);
		}
		index$1 = -1;
		while (++index$1 < events$2.length) {
			const handler$1 = config[events$2[index$1][0]];
			if (own$3.call(handler$1, events$2[index$1][1].type)) handler$1[events$2[index$1][1].type].call(Object.assign({ sliceSerialize: events$2[index$1][2].sliceSerialize }, context$1), events$2[index$1][1]);
		}
		if (context$1.tokenStack.length > 0) {
			const tail = context$1.tokenStack[context$1.tokenStack.length - 1];
			const handler$1 = tail[1] || defaultOnError;
			handler$1.call(context$1, undefined, tail[0]);
		}
		tree.position = {
			start: point(events$2.length > 0 ? events$2[0][1].start : {
				line: 1,
				column: 1,
				offset: 0
			}),
			end: point(events$2.length > 0 ? events$2[events$2.length - 2][1].end : {
				line: 1,
				column: 1,
				offset: 0
			})
		};
		index$1 = -1;
		while (++index$1 < config.transforms.length) tree = config.transforms[index$1](tree) || tree;
		return tree;
	}
	/**
	* @param {Array<Event>} events
	* @param {number} start
	* @param {number} length
	* @returns {number}
	*/
	function prepareList(events$2, start, length) {
		let index$1 = start - 1;
		let containerBalance = -1;
		let listSpread = false;
		/** @type {Token | undefined} */
		let listItem$2;
		/** @type {number | undefined} */
		let lineIndex;
		/** @type {number | undefined} */
		let firstBlankLineIndex;
		/** @type {boolean | undefined} */
		let atMarker;
		while (++index$1 <= length) {
			const event = events$2[index$1];
			switch (event[1].type) {
				case "listUnordered":
				case "listOrdered":
				case "blockQuote": {
					if (event[0] === "enter") containerBalance++;
else containerBalance--;
					atMarker = undefined;
					break;
				}
				case "lineEndingBlank": {
					if (event[0] === "enter") {
						if (listItem$2 && !atMarker && !containerBalance && !firstBlankLineIndex) firstBlankLineIndex = index$1;
						atMarker = undefined;
					}
					break;
				}
				case "linePrefix":
				case "listItemValue":
				case "listItemMarker":
				case "listItemPrefix":
				case "listItemPrefixWhitespace": break;
				default: atMarker = undefined;
			}
			if (!containerBalance && event[0] === "enter" && event[1].type === "listItemPrefix" || containerBalance === -1 && event[0] === "exit" && (event[1].type === "listUnordered" || event[1].type === "listOrdered")) {
				if (listItem$2) {
					let tailIndex = index$1;
					lineIndex = undefined;
					while (tailIndex--) {
						const tailEvent = events$2[tailIndex];
						if (tailEvent[1].type === "lineEnding" || tailEvent[1].type === "lineEndingBlank") {
							if (tailEvent[0] === "exit") continue;
							if (lineIndex) {
								events$2[lineIndex][1].type = "lineEndingBlank";
								listSpread = true;
							}
							tailEvent[1].type = "lineEnding";
							lineIndex = tailIndex;
						} else if (tailEvent[1].type === "linePrefix" || tailEvent[1].type === "blockQuotePrefix" || tailEvent[1].type === "blockQuotePrefixWhitespace" || tailEvent[1].type === "blockQuoteMarker" || tailEvent[1].type === "listItemIndent") {} else break;
					}
					if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) listItem$2._spread = true;
					listItem$2.end = Object.assign({}, lineIndex ? events$2[lineIndex][1].start : event[1].end);
					events$2.splice(lineIndex || index$1, 0, [
						"exit",
						listItem$2,
						event[2]
					]);
					index$1++;
					length++;
				}
				if (event[1].type === "listItemPrefix") {
					/** @type {Token} */
					const item = {
						type: "listItem",
						_spread: false,
						start: Object.assign({}, event[1].start),
						end: undefined
					};
					listItem$2 = item;
					events$2.splice(index$1, 0, [
						"enter",
						item,
						event[2]
					]);
					index$1++;
					length++;
					firstBlankLineIndex = undefined;
					atMarker = true;
				}
			}
		}
		events$2[start][1]._spread = listSpread;
		return length;
	}
	/**
	* Create an opener handle.
	*
	* @param {(token: Token) => Nodes} create
	*   Create a node.
	* @param {Handle | undefined} [and]
	*   Optional function to also run.
	* @returns {Handle}
	*   Handle.
	*/
	function opener(create, and) {
		return open;
		/**
		* @this {CompileContext}
		* @param {Token} token
		* @returns {undefined}
		*/
		function open(token) {
			enter.call(this, create(token), token);
			if (and) and.call(this, token);
		}
	}
	/**
	* @this {CompileContext}
	* @returns {undefined}
	*/
	function buffer$1() {
		this.stack.push({
			type: "fragment",
			children: []
		});
	}
	/**
	* @this {CompileContext}
	*   Context.
	* @param {Nodes} node
	*   Node to enter.
	* @param {Token} token
	*   Corresponding token.
	* @param {OnEnterError | undefined} [errorHandler]
	*   Handle the case where this token is open, but it is closed by something else.
	* @returns {undefined}
	*   Nothing.
	*/
	function enter(node$1, token, errorHandler) {
		const parent = this.stack[this.stack.length - 1];
		/** @type {Array<Nodes>} */
		const siblings = parent.children;
		siblings.push(node$1);
		this.stack.push(node$1);
		this.tokenStack.push([token, errorHandler]);
		node$1.position = {
			start: point(token.start),
			end: undefined
		};
	}
	/**
	* Create a closer handle.
	*
	* @param {Handle | undefined} [and]
	*   Optional function to also run.
	* @returns {Handle}
	*   Handle.
	*/
	function closer(and) {
		return close;
		/**
		* @this {CompileContext}
		* @param {Token} token
		* @returns {undefined}
		*/
		function close(token) {
			if (and) and.call(this, token);
			exit$1.call(this, token);
		}
	}
	/**
	* @this {CompileContext}
	*   Context.
	* @param {Token} token
	*   Corresponding token.
	* @param {OnExitError | undefined} [onExitError]
	*   Handle the case where another token is open.
	* @returns {undefined}
	*   Nothing.
	*/
	function exit$1(token, onExitError) {
		const node$1 = this.stack.pop();
		const open = this.tokenStack.pop();
		if (!open) throw new Error("Cannot close `" + token.type + "` (" + stringifyPosition({
			start: token.start,
			end: token.end
		}) + "): it’s not open");
else if (open[0].type !== token.type) if (onExitError) onExitError.call(this, token, open[0]);
else {
			const handler$1 = open[1] || defaultOnError;
			handler$1.call(this, token, open[0]);
		}
		node$1.position.end = point(token.end);
	}
	/**
	* @this {CompileContext}
	* @returns {string}
	*/
	function resume$1() {
		return toString(this.stack.pop());
	}
	/**
	* @this {CompileContext}
	* @type {Handle}
	*/
	function onenterlistordered() {
		this.data.expectingFirstListItemValue = true;
	}
	/**
	* @this {CompileContext}
	* @type {Handle}
	*/
	function onenterlistitemvalue(token) {
		if (this.data.expectingFirstListItemValue) {
			const ancestor = this.stack[this.stack.length - 2];
			ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);
			this.data.expectingFirstListItemValue = undefined;
		}
	}
	/**
	* @this {CompileContext}
	* @type {Handle}
	*/
	function onexitcodefencedfenceinfo() {
		const data$1 = this.resume();
		const node$1 = this.stack[this.stack.length - 1];
		node$1.lang = data$1;
	}
	/**
	* @this {CompileContext}
	* @type {Handle}
	*/
	function onexitcodefencedfencemeta() {
		const data$1 = this.resume();
		const node$1 = this.stack[this.stack.length - 1];
		node$1.meta = data$1;
	}
	/**
	* @this {CompileContext}
	* @type {Handle}
	*/
	function onexitcodefencedfence() {
		if (this.data.flowCodeInside) return;
		this.buffer();
		this.data.flowCodeInside = true;
	}
	/**
	* @this {CompileContext}
	* @type {Handle}
	*/
	function onexitcodefenced() {
		const data$1 = this.resume();
		const node$1 = this.stack[this.stack.length - 1];
		node$1.value = data$1.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, "");
		this.data.flowCodeInside = undefined;
	}
	/**
	* @this {CompileContext}
	* @type {Handle}
	*/
	function onexitcodeindented() {
		const data$1 = this.resume();
		const node$1 = this.stack[this.stack.length - 1];
		node$1.value = data$1.replace(/(\r?\n|\r)$/g, "");
	}
	/**
	* @this {CompileContext}
	* @type {Handle}
	*/
	function onexitdefinitionlabelstring(token) {
		const label = this.resume();
		const node$1 = this.stack[this.stack.length - 1];
		node$1.label = label;
		node$1.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();
	}
	/**
	* @this {CompileContext}
	* @type {Handle}
	*/
	function onexitdefinitiontitlestring() {
		const data$1 = this.resume();
		const node$1 = this.stack[this.stack.length - 1];
		node$1.title = data$1;
	}
	/**
	* @this {CompileContext}
	* @type {Handle}
	*/
	function onexitdefinitiondestinationstring() {
		const data$1 = this.resume();
		const node$1 = this.stack[this.stack.length - 1];
		node$1.url = data$1;
	}
	/**
	* @this {CompileContext}
	* @type {Handle}
	*/
	function onexitatxheadingsequence(token) {
		const node$1 = this.stack[this.stack.length - 1];
		if (!node$1.depth) {
			const depth$1 = this.sliceSerialize(token).length;
			node$1.depth = depth$1;
		}
	}
	/**
	* @this {CompileContext}
	* @type {Handle}
	*/
	function onexitsetextheadingtext() {
		this.data.setextHeadingSlurpLineEnding = true;
	}
	/**
	* @this {CompileContext}
	* @type {Handle}
	*/
	function onexitsetextheadinglinesequence(token) {
		const node$1 = this.stack[this.stack.length - 1];
		node$1.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;
	}
	/**
	* @this {CompileContext}
	* @type {Handle}
	*/
	function onexitsetextheading() {
		this.data.setextHeadingSlurpLineEnding = undefined;
	}
	/**
	* @this {CompileContext}
	* @type {Handle}
	*/
	function onenterdata(token) {
		const node$1 = this.stack[this.stack.length - 1];
		/** @type {Array<Nodes>} */
		const siblings = node$1.children;
		let tail = siblings[siblings.length - 1];
		if (!tail || tail.type !== "text") {
			tail = text$3();
			tail.position = {
				start: point(token.start),
				end: undefined
			};
			siblings.push(tail);
		}
		this.stack.push(tail);
	}
	/**
	* @this {CompileContext}
	* @type {Handle}
	*/
	function onexitdata(token) {
		const tail = this.stack.pop();
		tail.value += this.sliceSerialize(token);
		tail.position.end = point(token.end);
	}
	/**
	* @this {CompileContext}
	* @type {Handle}
	*/
	function onexitlineending(token) {
		const context$1 = this.stack[this.stack.length - 1];
		if (this.data.atHardBreak) {
			const tail = context$1.children[context$1.children.length - 1];
			tail.position.end = point(token.end);
			this.data.atHardBreak = undefined;
			return;
		}
		if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context$1.type)) {
			onenterdata.call(this, token);
			onexitdata.call(this, token);
		}
	}
	/**
	* @this {CompileContext}
	* @type {Handle}
	*/
	function onexithardbreak() {
		this.data.atHardBreak = true;
	}
	/**
	* @this {CompileContext}
	* @type {Handle}
	*/
	function onexithtmlflow() {
		const data$1 = this.resume();
		const node$1 = this.stack[this.stack.length - 1];
		node$1.value = data$1;
	}
	/**
	* @this {CompileContext}
	* @type {Handle}
	*/
	function onexithtmltext() {
		const data$1 = this.resume();
		const node$1 = this.stack[this.stack.length - 1];
		node$1.value = data$1;
	}
	/**
	* @this {CompileContext}
	* @type {Handle}
	*/
	function onexitcodetext() {
		const data$1 = this.resume();
		const node$1 = this.stack[this.stack.length - 1];
		node$1.value = data$1;
	}
	/**
	* @this {CompileContext}
	* @type {Handle}
	*/
	function onexitlink() {
		const node$1 = this.stack[this.stack.length - 1];
		if (this.data.inReference) {
			/** @type {ReferenceType} */
			const referenceType = this.data.referenceType || "shortcut";
			node$1.type += "Reference";
			node$1.referenceType = referenceType;
			delete node$1.url;
			delete node$1.title;
		} else {
			delete node$1.identifier;
			delete node$1.label;
		}
		this.data.referenceType = undefined;
	}
	/**
	* @this {CompileContext}
	* @type {Handle}
	*/
	function onexitimage() {
		const node$1 = this.stack[this.stack.length - 1];
		if (this.data.inReference) {
			/** @type {ReferenceType} */
			const referenceType = this.data.referenceType || "shortcut";
			node$1.type += "Reference";
			node$1.referenceType = referenceType;
			delete node$1.url;
			delete node$1.title;
		} else {
			delete node$1.identifier;
			delete node$1.label;
		}
		this.data.referenceType = undefined;
	}
	/**
	* @this {CompileContext}
	* @type {Handle}
	*/
	function onexitlabeltext(token) {
		const string$3 = this.sliceSerialize(token);
		const ancestor = this.stack[this.stack.length - 2];
		ancestor.label = decodeString(string$3);
		ancestor.identifier = normalizeIdentifier(string$3).toLowerCase();
	}
	/**
	* @this {CompileContext}
	* @type {Handle}
	*/
	function onexitlabel() {
		const fragment = this.stack[this.stack.length - 1];
		const value = this.resume();
		const node$1 = this.stack[this.stack.length - 1];
		this.data.inReference = true;
		if (node$1.type === "link") {
			/** @type {Array<PhrasingContent>} */
			const children = fragment.children;
			node$1.children = children;
		} else node$1.alt = value;
	}
	/**
	* @this {CompileContext}
	* @type {Handle}
	*/
	function onexitresourcedestinationstring() {
		const data$1 = this.resume();
		const node$1 = this.stack[this.stack.length - 1];
		node$1.url = data$1;
	}
	/**
	* @this {CompileContext}
	* @type {Handle}
	*/
	function onexitresourcetitlestring() {
		const data$1 = this.resume();
		const node$1 = this.stack[this.stack.length - 1];
		node$1.title = data$1;
	}
	/**
	* @this {CompileContext}
	* @type {Handle}
	*/
	function onexitresource() {
		this.data.inReference = undefined;
	}
	/**
	* @this {CompileContext}
	* @type {Handle}
	*/
	function onenterreference() {
		this.data.referenceType = "collapsed";
	}
	/**
	* @this {CompileContext}
	* @type {Handle}
	*/
	function onexitreferencestring(token) {
		const label = this.resume();
		const node$1 = this.stack[this.stack.length - 1];
		node$1.label = label;
		node$1.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();
		this.data.referenceType = "full";
	}
	/**
	* @this {CompileContext}
	* @type {Handle}
	*/
	function onexitcharacterreferencemarker(token) {
		this.data.characterReferenceType = token.type;
	}
	/**
	* @this {CompileContext}
	* @type {Handle}
	*/
	function onexitcharacterreferencevalue(token) {
		const data$1 = this.sliceSerialize(token);
		const type = this.data.characterReferenceType;
		/** @type {string} */
		let value;
		if (type) {
			value = decodeNumericCharacterReference(data$1, type === "characterReferenceMarkerNumeric" ? 10 : 16);
			this.data.characterReferenceType = undefined;
		} else {
			const result = decodeNamedCharacterReference(data$1);
			value = result;
		}
		const tail = this.stack[this.stack.length - 1];
		tail.value += value;
	}
	/**
	* @this {CompileContext}
	* @type {Handle}
	*/
	function onexitcharacterreference(token) {
		const tail = this.stack.pop();
		tail.position.end = point(token.end);
	}
	/**
	* @this {CompileContext}
	* @type {Handle}
	*/
	function onexitautolinkprotocol(token) {
		onexitdata.call(this, token);
		const node$1 = this.stack[this.stack.length - 1];
		node$1.url = this.sliceSerialize(token);
	}
	/**
	* @this {CompileContext}
	* @type {Handle}
	*/
	function onexitautolinkemail(token) {
		onexitdata.call(this, token);
		const node$1 = this.stack[this.stack.length - 1];
		node$1.url = "mailto:" + this.sliceSerialize(token);
	}
	/** @returns {Blockquote} */
	function blockQuote$1() {
		return {
			type: "blockquote",
			children: []
		};
	}
	/** @returns {Code} */
	function codeFlow() {
		return {
			type: "code",
			lang: null,
			meta: null,
			value: ""
		};
	}
	/** @returns {InlineCode} */
	function codeText$1() {
		return {
			type: "inlineCode",
			value: ""
		};
	}
	/** @returns {Definition} */
	function definition$2() {
		return {
			type: "definition",
			identifier: "",
			label: null,
			title: null,
			url: ""
		};
	}
	/** @returns {Emphasis} */
	function emphasis$1() {
		return {
			type: "emphasis",
			children: []
		};
	}
	/** @returns {Heading} */
	function heading$1() {
		return {
			type: "heading",
			depth: 0,
			children: []
		};
	}
	/** @returns {Break} */
	function hardBreak$1() {
		return { type: "break" };
	}
	/** @returns {Html} */
	function html$1() {
		return {
			type: "html",
			value: ""
		};
	}
	/** @returns {Image} */
	function image$1() {
		return {
			type: "image",
			title: null,
			url: "",
			alt: null
		};
	}
	/** @returns {Link} */
	function link$3() {
		return {
			type: "link",
			title: null,
			url: "",
			children: []
		};
	}
	/**
	* @param {Token} token
	* @returns {List}
	*/
	function list$3(token) {
		return {
			type: "list",
			ordered: token.type === "listOrdered",
			start: null,
			spread: token._spread,
			children: []
		};
	}
	/**
	* @param {Token} token
	* @returns {ListItem}
	*/
	function listItem$1(token) {
		return {
			type: "listItem",
			spread: token._spread,
			checked: null,
			children: []
		};
	}
	/** @returns {Paragraph} */
	function paragraph$1() {
		return {
			type: "paragraph",
			children: []
		};
	}
	/** @returns {Strong} */
	function strong$1() {
		return {
			type: "strong",
			children: []
		};
	}
	/** @returns {Text} */
	function text$3() {
		return {
			type: "text",
			value: ""
		};
	}
	/** @returns {ThematicBreak} */
	function thematicBreak$2() {
		return { type: "thematicBreak" };
	}
}
/**
* Copy a point-like value.
*
* @param {Point} d
*   Point-like value.
* @returns {Point}
*   unist point.
*/
function point(d) {
	return {
		line: d.line,
		column: d.column,
		offset: d.offset
	};
}
/**
* @param {Config} combined
* @param {Array<Array<Extension> | Extension>} extensions
* @returns {undefined}
*/
function configure$2(combined, extensions) {
	let index$1 = -1;
	while (++index$1 < extensions.length) {
		const value = extensions[index$1];
		if (Array.isArray(value)) configure$2(combined, value);
else extension(combined, value);
	}
}
/**
* @param {Config} combined
* @param {Extension} extension
* @returns {undefined}
*/
function extension(combined, extension$1) {
	/** @type {keyof Extension} */
	let key;
	for (key in extension$1) if (own$3.call(extension$1, key)) switch (key) {
		case "canContainEols": {
			const right = extension$1[key];
			if (right) combined[key].push(...right);
			break;
		}
		case "transforms": {
			const right = extension$1[key];
			if (right) combined[key].push(...right);
			break;
		}
		case "enter":
		case "exit": {
			const right = extension$1[key];
			if (right) Object.assign(combined[key], right);
			break;
		}
	}
}
/** @type {OnEnterError} */
function defaultOnError(left, right) {
	if (left) throw new Error("Cannot close `" + left.type + "` (" + stringifyPosition({
		start: left.start,
		end: left.end
	}) + "): a different token (`" + right.type + "`, " + stringifyPosition({
		start: right.start,
		end: right.end
	}) + ") is open");
else throw new Error("Cannot close document, a token (`" + right.type + "`, " + stringifyPosition({
		start: right.start,
		end: right.end
	}) + ") is still open");
}

//#endregion
//#region ../node_modules/.pnpm/remark-parse@11.0.0/node_modules/remark-parse/lib/index.js
function remarkParse(options) {
	/** @type {Processor} */
	const self$1 = this;
	self$1.parser = parser;
	/**
	* @type {Parser}
	*/
	function parser(doc) {
		return fromMarkdown(doc, {
			...self$1.data("settings"),
			...options,
			extensions: self$1.data("micromarkExtensions") || [],
			mdastExtensions: self$1.data("fromMarkdownExtensions") || []
		});
	}
}

//#endregion
//#region ../node_modules/.pnpm/zwitch@2.0.4/node_modules/zwitch/index.js
/**
* @callback Handler
*   Handle a value, with a certain ID field set to a certain value.
*   The ID field is passed to `zwitch`, and it’s value is this function’s
*   place on the `handlers` record.
* @param {...any} parameters
*   Arbitrary parameters passed to the zwitch.
*   The first will be an object with a certain ID field set to a certain value.
* @returns {any}
*   Anything!
*/
/**
* @callback UnknownHandler
*   Handle values that do have a certain ID field, but it’s set to a value
*   that is not listed in the `handlers` record.
* @param {unknown} value
*   An object with a certain ID field set to an unknown value.
* @param {...any} rest
*   Arbitrary parameters passed to the zwitch.
* @returns {any}
*   Anything!
*/
/**
* @callback InvalidHandler
*   Handle values that do not have a certain ID field.
* @param {unknown} value
*   Any unknown value.
* @param {...any} rest
*   Arbitrary parameters passed to the zwitch.
* @returns {void|null|undefined|never}
*   This should crash or return nothing.
*/
/**
* @template {InvalidHandler} [Invalid=InvalidHandler]
* @template {UnknownHandler} [Unknown=UnknownHandler]
* @template {Record<string, Handler>} [Handlers=Record<string, Handler>]
* @typedef Options
*   Configuration (required).
* @property {Invalid} [invalid]
*   Handler to use for invalid values.
* @property {Unknown} [unknown]
*   Handler to use for unknown values.
* @property {Handlers} [handlers]
*   Handlers to use.
*/
const own$2 = {}.hasOwnProperty;
function zwitch(key, options) {
	const settings = options || {};
	/**
	* Handle one value.
	*
	* Based on the bound `key`, a respective handler will be called.
	* If `value` is not an object, or doesn’t have a `key` property, the special
	* “invalid” handler will be called.
	* If `value` has an unknown `key`, the special “unknown” handler will be
	* called.
	*
	* All arguments, and the context object, are passed through to the handler,
	* and it’s result is returned.
	*
	* @this {unknown}
	*   Any context object.
	* @param {unknown} [value]
	*   Any value.
	* @param {...unknown} parameters
	*   Arbitrary parameters passed to the zwitch.
	* @property {Handler} invalid
	*   Handle for values that do not have a certain ID field.
	* @property {Handler} unknown
	*   Handle values that do have a certain ID field, but it’s set to a value
	*   that is not listed in the `handlers` record.
	* @property {Handlers} handlers
	*   Record of handlers.
	* @returns {unknown}
	*   Anything.
	*/
	function one$1(value, ...parameters) {
		/** @type {Handler|undefined} */
		let fn = one$1.invalid;
		const handlers = one$1.handlers;
		if (value && own$2.call(value, key)) {
			const id = String(value[key]);
			fn = own$2.call(handlers, id) ? handlers[id] : one$1.unknown;
		}
		if (fn) return fn.call(this, value, ...parameters);
	}
	one$1.handlers = settings.handlers || {};
	one$1.invalid = settings.invalid;
	one$1.unknown = settings.unknown;
	return one$1;
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/configure.js
/**
* @typedef {import('./types.js').Options} Options
* @typedef {import('./types.js').State} State
*/
const own$1 = {}.hasOwnProperty;
function configure$1(base, extension$1) {
	let index$1 = -1;
	/** @type {keyof Options} */
	let key;
	if (extension$1.extensions) while (++index$1 < extension$1.extensions.length) configure$1(base, extension$1.extensions[index$1]);
	for (key in extension$1) if (own$1.call(extension$1, key)) switch (key) {
		case "extensions": break;
		case "unsafe": {
			list$1(base[key], extension$1[key]);
			break;
		}
		case "join": {
			list$1(base[key], extension$1[key]);
			break;
		}
		case "handlers": {
			map$2(base[key], extension$1[key]);
			break;
		}
		default: base.options[key] = extension$1[key];
	}
	return base;
}
/**
* @template T
* @param {Array<T>} left
* @param {Array<T> | null | undefined} right
*/
function list$1(left, right) {
	if (right) left.push(...right);
}
/**
* @template T
* @param {Record<string, T>} left
* @param {Record<string, T> | null | undefined} right
*/
function map$2(left, right) {
	if (right) Object.assign(left, right);
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/blockquote.js
function blockquote(node$1, _, state, info$2) {
	const exit$1 = state.enter("blockquote");
	const tracker = state.createTracker(info$2);
	tracker.move("> ");
	tracker.shift(2);
	const value = state.indentLines(state.containerFlow(node$1, tracker.current()), map$1);
	exit$1();
	return value;
}
/** @type {Map} */
function map$1(line, _, blank) {
	return ">" + (blank ? "" : " ") + line;
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js
function patternInScope(stack, pattern$1) {
	return listInScope(stack, pattern$1.inConstruct, true) && !listInScope(stack, pattern$1.notInConstruct, false);
}
/**
* @param {Array<ConstructName>} stack
* @param {Unsafe['inConstruct']} list
* @param {boolean} none
* @returns {boolean}
*/
function listInScope(stack, list$3, none) {
	if (typeof list$3 === "string") list$3 = [list$3];
	if (!list$3 || list$3.length === 0) return none;
	let index$1 = -1;
	while (++index$1 < list$3.length) if (stack.includes(list$3[index$1])) return true;
	return false;
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/break.js
function hardBreak(_, _1, state, info$2) {
	let index$1 = -1;
	while (++index$1 < state.unsafe.length) if (state.unsafe[index$1].character === "\n" && patternInScope(state.stack, state.unsafe[index$1])) return /[ \t]/.test(info$2.before) ? "" : " ";
	return "\\\n";
}

//#endregion
//#region ../node_modules/.pnpm/longest-streak@3.1.0/node_modules/longest-streak/index.js
function longestStreak(value, substring) {
	const source = String(value);
	let index$1 = source.indexOf(substring);
	let expected = index$1;
	let count = 0;
	let max = 0;
	if (typeof substring !== "string") throw new TypeError("Expected substring");
	while (index$1 !== -1) {
		if (index$1 === expected) {
			if (++count > max) max = count;
		} else count = 1;
		expected = index$1 + substring.length;
		index$1 = source.indexOf(substring, expected);
	}
	return max;
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js
function formatCodeAsIndented(node$1, state) {
	return Boolean(state.options.fences === false && node$1.value && !node$1.lang && /[^ \r\n]/.test(node$1.value) && !/^[\t ]*(?:[\r\n]|$)|(?:^|[\r\n])[\t ]*$/.test(node$1.value));
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/check-fence.js
function checkFence(state) {
	const marker = state.options.fence || "`";
	if (marker !== "`" && marker !== "~") throw new Error("Cannot serialize code with `" + marker + "` for `options.fence`, expected `` ` `` or `~`");
	return marker;
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/code.js
function code(node$1, _, state, info$2) {
	const marker = checkFence(state);
	const raw = node$1.value || "";
	const suffix = marker === "`" ? "GraveAccent" : "Tilde";
	if (formatCodeAsIndented(node$1, state)) {
		const exit$2 = state.enter("codeIndented");
		const value$1 = state.indentLines(raw, map);
		exit$2();
		return value$1;
	}
	const tracker = state.createTracker(info$2);
	const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3));
	const exit$1 = state.enter("codeFenced");
	let value = tracker.move(sequence);
	if (node$1.lang) {
		const subexit = state.enter(`codeFencedLang${suffix}`);
		value += tracker.move(state.safe(node$1.lang, {
			before: value,
			after: " ",
			encode: ["`"],
			...tracker.current()
		}));
		subexit();
	}
	if (node$1.lang && node$1.meta) {
		const subexit = state.enter(`codeFencedMeta${suffix}`);
		value += tracker.move(" ");
		value += tracker.move(state.safe(node$1.meta, {
			before: value,
			after: "\n",
			encode: ["`"],
			...tracker.current()
		}));
		subexit();
	}
	value += tracker.move("\n");
	if (raw) value += tracker.move(raw + "\n");
	value += tracker.move(sequence);
	exit$1();
	return value;
}
/** @type {Map} */
function map(line, _, blank) {
	return (blank ? "" : "    ") + line;
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/check-quote.js
function checkQuote(state) {
	const marker = state.options.quote || "\"";
	if (marker !== "\"" && marker !== "'") throw new Error("Cannot serialize title with `" + marker + "` for `options.quote`, expected `\"`, or `'`");
	return marker;
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/definition.js
function definition(node$1, _, state, info$2) {
	const quote = checkQuote(state);
	const suffix = quote === "\"" ? "Quote" : "Apostrophe";
	const exit$1 = state.enter("definition");
	let subexit = state.enter("label");
	const tracker = state.createTracker(info$2);
	let value = tracker.move("[");
	value += tracker.move(state.safe(state.associationId(node$1), {
		before: value,
		after: "]",
		...tracker.current()
	}));
	value += tracker.move("]: ");
	subexit();
	if (!node$1.url || /[\0- \u007F]/.test(node$1.url)) {
		subexit = state.enter("destinationLiteral");
		value += tracker.move("<");
		value += tracker.move(state.safe(node$1.url, {
			before: value,
			after: ">",
			...tracker.current()
		}));
		value += tracker.move(">");
	} else {
		subexit = state.enter("destinationRaw");
		value += tracker.move(state.safe(node$1.url, {
			before: value,
			after: node$1.title ? " " : "\n",
			...tracker.current()
		}));
	}
	subexit();
	if (node$1.title) {
		subexit = state.enter(`title${suffix}`);
		value += tracker.move(" " + quote);
		value += tracker.move(state.safe(node$1.title, {
			before: value,
			after: quote,
			...tracker.current()
		}));
		value += tracker.move(quote);
		subexit();
	}
	exit$1();
	return value;
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js
function checkEmphasis(state) {
	const marker = state.options.emphasis || "*";
	if (marker !== "*" && marker !== "_") throw new Error("Cannot serialize emphasis with `" + marker + "` for `options.emphasis`, expected `*`, or `_`");
	return marker;
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/emphasis.js
emphasis.peek = emphasisPeek;
function emphasis(node$1, _, state, info$2) {
	const marker = checkEmphasis(state);
	const exit$1 = state.enter("emphasis");
	const tracker = state.createTracker(info$2);
	let value = tracker.move(marker);
	value += tracker.move(state.containerPhrasing(node$1, {
		before: value,
		after: marker,
		...tracker.current()
	}));
	value += tracker.move(marker);
	exit$1();
	return value;
}
/**
* @param {Emphasis} _
* @param {Parents | undefined} _1
* @param {State} state
* @returns {string}
*/
function emphasisPeek(_, _1, state) {
	return state.options.emphasis || "*";
}

//#endregion
//#region ../node_modules/.pnpm/unist-util-is@6.0.0/node_modules/unist-util-is/lib/index.js
const convert = function(test) {
	if (test === null || test === undefined) return ok$1;
	if (typeof test === "function") return castFactory(test);
	if (typeof test === "object") return Array.isArray(test) ? anyFactory(test) : propsFactory(test);
	if (typeof test === "string") return typeFactory(test);
	throw new Error("Expected function, string, or object as test");
};
/**
* @param {Array<Props | TestFunction | string>} tests
* @returns {Check}
*/
function anyFactory(tests) {
	/** @type {Array<Check>} */
	const checks = [];
	let index$1 = -1;
	while (++index$1 < tests.length) checks[index$1] = convert(tests[index$1]);
	return castFactory(any);
	/**
	* @this {unknown}
	* @type {TestFunction}
	*/
	function any(...parameters) {
		let index$2 = -1;
		while (++index$2 < checks.length) if (checks[index$2].apply(this, parameters)) return true;
		return false;
	}
}
/**
* Turn an object into a test for a node with a certain fields.
*
* @param {Props} check
* @returns {Check}
*/
function propsFactory(check) {
	const checkAsRecord = check;
	return castFactory(all$1);
	/**
	* @param {Node} node
	* @returns {boolean}
	*/
	function all$1(node$1) {
		const nodeAsRecord = node$1;
		/** @type {string} */
		let key;
		for (key in check) if (nodeAsRecord[key] !== checkAsRecord[key]) return false;
		return true;
	}
}
/**
* Turn a string into a test for a node with a certain type.
*
* @param {string} check
* @returns {Check}
*/
function typeFactory(check) {
	return castFactory(type);
	/**
	* @param {Node} node
	*/
	function type(node$1) {
		return node$1 && node$1.type === check;
	}
}
/**
* Turn a custom test into a test for a node that passes that test.
*
* @param {TestFunction} testFunction
* @returns {Check}
*/
function castFactory(testFunction) {
	return check;
	/**
	* @this {unknown}
	* @type {Check}
	*/
	function check(value, index$1, parent) {
		return Boolean(looksLikeANode(value) && testFunction.call(this, value, typeof index$1 === "number" ? index$1 : undefined, parent || undefined));
	}
}
function ok$1() {
	return true;
}
/**
* @param {unknown} value
* @returns {value is Node}
*/
function looksLikeANode(value) {
	return value !== null && typeof value === "object" && "type" in value;
}

//#endregion
//#region ../node_modules/.pnpm/unist-util-visit-parents@6.0.1/node_modules/unist-util-visit-parents/lib/color.node.js
function color(d) {
	return "\x1B[33m" + d + "\x1B[39m";
}

//#endregion
//#region ../node_modules/.pnpm/unist-util-visit-parents@6.0.1/node_modules/unist-util-visit-parents/lib/index.js
/** @type {Readonly<ActionTuple>} */
const empty = [];
const CONTINUE = true;
const EXIT = false;
const SKIP = "skip";
function visitParents(tree, test, visitor, reverse) {
	/** @type {Test} */
	let check;
	if (typeof test === "function" && typeof visitor !== "function") {
		reverse = visitor;
		visitor = test;
	} else check = test;
	const is = convert(check);
	const step = reverse ? -1 : 1;
	factory$1(tree, undefined, [])();
	/**
	* @param {UnistNode} node
	* @param {number | undefined} index
	* @param {Array<UnistParent>} parents
	*/
	function factory$1(node$1, index$1, parents) {
		const value = node$1 && typeof node$1 === "object" ? node$1 : {};
		if (typeof value.type === "string") {
			const name = typeof value.tagName === "string" ? value.tagName : typeof value.name === "string" ? value.name : undefined;
			Object.defineProperty(visit$1, "name", { value: "node (" + color(node$1.type + (name ? "<" + name + ">" : "")) + ")" });
		}
		return visit$1;
		function visit$1() {
			/** @type {Readonly<ActionTuple>} */
			let result = empty;
			/** @type {Readonly<ActionTuple>} */
			let subresult;
			/** @type {number} */
			let offset;
			/** @type {Array<UnistParent>} */
			let grandparents;
			if (!test || is(node$1, index$1, parents[parents.length - 1] || undefined)) {
				result = toResult(visitor(node$1, parents));
				if (result[0] === EXIT) return result;
			}
			if ("children" in node$1 && node$1.children) {
				const nodeAsParent = node$1;
				if (nodeAsParent.children && result[0] !== SKIP) {
					offset = (reverse ? nodeAsParent.children.length : -1) + step;
					grandparents = parents.concat(nodeAsParent);
					while (offset > -1 && offset < nodeAsParent.children.length) {
						const child$1 = nodeAsParent.children[offset];
						subresult = factory$1(child$1, offset, grandparents)();
						if (subresult[0] === EXIT) return subresult;
						offset = typeof subresult[1] === "number" ? subresult[1] : offset + step;
					}
				}
			}
			return result;
		}
	}
}
/**
* Turn a return value into a clean result.
*
* @param {VisitorResult} value
*   Valid return values from visitors.
* @returns {Readonly<ActionTuple>}
*   Clean result.
*/
function toResult(value) {
	if (Array.isArray(value)) return value;
	if (typeof value === "number") return [CONTINUE, value];
	return value === null || value === undefined ? empty : [value];
}

//#endregion
//#region ../node_modules/.pnpm/unist-util-visit@5.0.0/node_modules/unist-util-visit/lib/index.js
function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {
	/** @type {boolean | null | undefined} */
	let reverse;
	/** @type {Test} */
	let test;
	/** @type {Visitor} */
	let visitor;
	if (typeof testOrVisitor === "function" && typeof visitorOrReverse !== "function") {
		test = undefined;
		visitor = testOrVisitor;
		reverse = visitorOrReverse;
	} else {
		test = testOrVisitor;
		visitor = visitorOrReverse;
		reverse = maybeReverse;
	}
	visitParents(tree, test, overload, reverse);
	/**
	* @param {UnistNode} node
	* @param {Array<UnistParent>} parents
	*/
	function overload(node$1, parents) {
		const parent = parents[parents.length - 1];
		const index$1 = parent ? parent.children.indexOf(node$1) : undefined;
		return visitor(node$1, index$1, parent);
	}
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js
function formatHeadingAsSetext(node$1, state) {
	let literalWithBreak = false;
	visit(node$1, function(node$2) {
		if ("value" in node$2 && /\r?\n|\r/.test(node$2.value) || node$2.type === "break") {
			literalWithBreak = true;
			return EXIT;
		}
	});
	return Boolean((!node$1.depth || node$1.depth < 3) && toString(node$1) && (state.options.setext || literalWithBreak));
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/heading.js
function heading(node$1, _, state, info$2) {
	const rank = Math.max(Math.min(6, node$1.depth || 1), 1);
	const tracker = state.createTracker(info$2);
	if (formatHeadingAsSetext(node$1, state)) {
		const exit$2 = state.enter("headingSetext");
		const subexit$1 = state.enter("phrasing");
		const value$1 = state.containerPhrasing(node$1, {
			...tracker.current(),
			before: "\n",
			after: "\n"
		});
		subexit$1();
		exit$2();
		return value$1 + "\n" + (rank === 1 ? "=" : "-").repeat(
			// The whole size…
			value$1.length - (Math.max(value$1.lastIndexOf("\r"), value$1.lastIndexOf("\n")) + 1)
);
	}
	const sequence = "#".repeat(rank);
	const exit$1 = state.enter("headingAtx");
	const subexit = state.enter("phrasing");
	tracker.move(sequence + " ");
	let value = state.containerPhrasing(node$1, {
		before: "# ",
		after: "\n",
		...tracker.current()
	});
	if (/^[\t ]/.test(value)) value = "&#x" + value.charCodeAt(0).toString(16).toUpperCase() + ";" + value.slice(1);
	value = value ? sequence + " " + value : sequence;
	if (state.options.closeAtx) value += " " + sequence;
	subexit();
	exit$1();
	return value;
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/html.js
/**
* @typedef {import('mdast').Html} Html
*/
html.peek = htmlPeek;
function html(node$1) {
	return node$1.value || "";
}
/**
* @returns {string}
*/
function htmlPeek() {
	return "<";
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/image.js
image.peek = imagePeek;
function image(node$1, _, state, info$2) {
	const quote = checkQuote(state);
	const suffix = quote === "\"" ? "Quote" : "Apostrophe";
	const exit$1 = state.enter("image");
	let subexit = state.enter("label");
	const tracker = state.createTracker(info$2);
	let value = tracker.move("![");
	value += tracker.move(state.safe(node$1.alt, {
		before: value,
		after: "]",
		...tracker.current()
	}));
	value += tracker.move("](");
	subexit();
	if (!node$1.url && node$1.title || /[\0- \u007F]/.test(node$1.url)) {
		subexit = state.enter("destinationLiteral");
		value += tracker.move("<");
		value += tracker.move(state.safe(node$1.url, {
			before: value,
			after: ">",
			...tracker.current()
		}));
		value += tracker.move(">");
	} else {
		subexit = state.enter("destinationRaw");
		value += tracker.move(state.safe(node$1.url, {
			before: value,
			after: node$1.title ? " " : ")",
			...tracker.current()
		}));
	}
	subexit();
	if (node$1.title) {
		subexit = state.enter(`title${suffix}`);
		value += tracker.move(" " + quote);
		value += tracker.move(state.safe(node$1.title, {
			before: value,
			after: quote,
			...tracker.current()
		}));
		value += tracker.move(quote);
		subexit();
	}
	value += tracker.move(")");
	exit$1();
	return value;
}
/**
* @returns {string}
*/
function imagePeek() {
	return "!";
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/image-reference.js
/**
* @typedef {import('mdast').ImageReference} ImageReference
* @typedef {import('mdast').Parents} Parents
* @typedef {import('../types.js').Info} Info
* @typedef {import('../types.js').State} State
*/
imageReference.peek = imageReferencePeek;
function imageReference(node$1, _, state, info$2) {
	const type = node$1.referenceType;
	const exit$1 = state.enter("imageReference");
	let subexit = state.enter("label");
	const tracker = state.createTracker(info$2);
	let value = tracker.move("![");
	const alt = state.safe(node$1.alt, {
		before: value,
		after: "]",
		...tracker.current()
	});
	value += tracker.move(alt + "][");
	subexit();
	const stack = state.stack;
	state.stack = [];
	subexit = state.enter("reference");
	const reference = state.safe(state.associationId(node$1), {
		before: value,
		after: "]",
		...tracker.current()
	});
	subexit();
	state.stack = stack;
	exit$1();
	if (type === "full" || !alt || alt !== reference) value += tracker.move(reference + "]");
else if (type === "shortcut") value = value.slice(0, -1);
else value += tracker.move("]");
	return value;
}
/**
* @returns {string}
*/
function imageReferencePeek() {
	return "!";
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/inline-code.js
/**
* @typedef {import('mdast').InlineCode} InlineCode
* @typedef {import('mdast').Parents} Parents
* @typedef {import('../types.js').State} State
*/
inlineCode.peek = inlineCodePeek;
function inlineCode(node$1, _, state) {
	let value = node$1.value || "";
	let sequence = "`";
	let index$1 = -1;
	while (new RegExp("(^|[^`])" + sequence + "([^`]|$)").test(value)) sequence += "`";
	if (/[^ \r\n]/.test(value) && (/^[ \r\n]/.test(value) && /[ \r\n]$/.test(value) || /^`|`$/.test(value))) value = " " + value + " ";
	while (++index$1 < state.unsafe.length) {
		const pattern$1 = state.unsafe[index$1];
		const expression = state.compilePattern(pattern$1);
		/** @type {RegExpExecArray | null} */
		let match;
		if (!pattern$1.atBreak) continue;
		while (match = expression.exec(value)) {
			let position$1 = match.index;
			if (value.charCodeAt(position$1) === 10 && value.charCodeAt(position$1 - 1) === 13) position$1--;
			value = value.slice(0, position$1) + " " + value.slice(match.index + 1);
		}
	}
	return sequence + value + sequence;
}
/**
* @returns {string}
*/
function inlineCodePeek() {
	return "`";
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js
function formatLinkAsAutolink(node$1, state) {
	const raw = toString(node$1);
	return Boolean(!state.options.resourceLink && node$1.url && !node$1.title && node$1.children && node$1.children.length === 1 && node$1.children[0].type === "text" && (raw === node$1.url || "mailto:" + raw === node$1.url) && /^[a-z][a-z+.-]+:/i.test(node$1.url) && !/[\0- <>\u007F]/.test(node$1.url));
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/link.js
link.peek = linkPeek;
function link(node$1, _, state, info$2) {
	const quote = checkQuote(state);
	const suffix = quote === "\"" ? "Quote" : "Apostrophe";
	const tracker = state.createTracker(info$2);
	/** @type {Exit} */
	let exit$1;
	/** @type {Exit} */
	let subexit;
	if (formatLinkAsAutolink(node$1, state)) {
		const stack = state.stack;
		state.stack = [];
		exit$1 = state.enter("autolink");
		let value$1 = tracker.move("<");
		value$1 += tracker.move(state.containerPhrasing(node$1, {
			before: value$1,
			after: ">",
			...tracker.current()
		}));
		value$1 += tracker.move(">");
		exit$1();
		state.stack = stack;
		return value$1;
	}
	exit$1 = state.enter("link");
	subexit = state.enter("label");
	let value = tracker.move("[");
	value += tracker.move(state.containerPhrasing(node$1, {
		before: value,
		after: "](",
		...tracker.current()
	}));
	value += tracker.move("](");
	subexit();
	if (!node$1.url && node$1.title || /[\0- \u007F]/.test(node$1.url)) {
		subexit = state.enter("destinationLiteral");
		value += tracker.move("<");
		value += tracker.move(state.safe(node$1.url, {
			before: value,
			after: ">",
			...tracker.current()
		}));
		value += tracker.move(">");
	} else {
		subexit = state.enter("destinationRaw");
		value += tracker.move(state.safe(node$1.url, {
			before: value,
			after: node$1.title ? " " : ")",
			...tracker.current()
		}));
	}
	subexit();
	if (node$1.title) {
		subexit = state.enter(`title${suffix}`);
		value += tracker.move(" " + quote);
		value += tracker.move(state.safe(node$1.title, {
			before: value,
			after: quote,
			...tracker.current()
		}));
		value += tracker.move(quote);
		subexit();
	}
	value += tracker.move(")");
	exit$1();
	return value;
}
/**
* @param {Link} node
* @param {Parents | undefined} _
* @param {State} state
* @returns {string}
*/
function linkPeek(node$1, _, state) {
	return formatLinkAsAutolink(node$1, state) ? "<" : "[";
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/link-reference.js
/**
* @typedef {import('mdast').LinkReference} LinkReference
* @typedef {import('mdast').Parents} Parents
* @typedef {import('../types.js').Info} Info
* @typedef {import('../types.js').State} State
*/
linkReference.peek = linkReferencePeek;
function linkReference(node$1, _, state, info$2) {
	const type = node$1.referenceType;
	const exit$1 = state.enter("linkReference");
	let subexit = state.enter("label");
	const tracker = state.createTracker(info$2);
	let value = tracker.move("[");
	const text$3 = state.containerPhrasing(node$1, {
		before: value,
		after: "]",
		...tracker.current()
	});
	value += tracker.move(text$3 + "][");
	subexit();
	const stack = state.stack;
	state.stack = [];
	subexit = state.enter("reference");
	const reference = state.safe(state.associationId(node$1), {
		before: value,
		after: "]",
		...tracker.current()
	});
	subexit();
	state.stack = stack;
	exit$1();
	if (type === "full" || !text$3 || text$3 !== reference) value += tracker.move(reference + "]");
else if (type === "shortcut") value = value.slice(0, -1);
else value += tracker.move("]");
	return value;
}
/**
* @returns {string}
*/
function linkReferencePeek() {
	return "[";
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/check-bullet.js
function checkBullet(state) {
	const marker = state.options.bullet || "*";
	if (marker !== "*" && marker !== "+" && marker !== "-") throw new Error("Cannot serialize items with `" + marker + "` for `options.bullet`, expected `*`, `+`, or `-`");
	return marker;
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js
function checkBulletOther(state) {
	const bullet = checkBullet(state);
	const bulletOther = state.options.bulletOther;
	if (!bulletOther) return bullet === "*" ? "-" : "*";
	if (bulletOther !== "*" && bulletOther !== "+" && bulletOther !== "-") throw new Error("Cannot serialize items with `" + bulletOther + "` for `options.bulletOther`, expected `*`, `+`, or `-`");
	if (bulletOther === bullet) throw new Error("Expected `bullet` (`" + bullet + "`) and `bulletOther` (`" + bulletOther + "`) to be different");
	return bulletOther;
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js
function checkBulletOrdered(state) {
	const marker = state.options.bulletOrdered || ".";
	if (marker !== "." && marker !== ")") throw new Error("Cannot serialize items with `" + marker + "` for `options.bulletOrdered`, expected `.` or `)`");
	return marker;
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/check-rule.js
function checkRule(state) {
	const marker = state.options.rule || "*";
	if (marker !== "*" && marker !== "-" && marker !== "_") throw new Error("Cannot serialize rules with `" + marker + "` for `options.rule`, expected `*`, `-`, or `_`");
	return marker;
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/list.js
function list(node$1, parent, state, info$2) {
	const exit$1 = state.enter("list");
	const bulletCurrent = state.bulletCurrent;
	/** @type {string} */
	let bullet = node$1.ordered ? checkBulletOrdered(state) : checkBullet(state);
	/** @type {string} */
	const bulletOther = node$1.ordered ? bullet === "." ? ")" : "." : checkBulletOther(state);
	let useDifferentMarker = parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false;
	if (!node$1.ordered) {
		const firstListItem = node$1.children ? node$1.children[0] : undefined;
		if ((bullet === "*" || bullet === "-") && firstListItem && (!firstListItem.children || !firstListItem.children[0]) && state.stack[state.stack.length - 1] === "list" && state.stack[state.stack.length - 2] === "listItem" && state.stack[state.stack.length - 3] === "list" && state.stack[state.stack.length - 4] === "listItem" && state.indexStack[state.indexStack.length - 1] === 0 && state.indexStack[state.indexStack.length - 2] === 0 && state.indexStack[state.indexStack.length - 3] === 0) useDifferentMarker = true;
		if (checkRule(state) === bullet && firstListItem) {
			let index$1 = -1;
			while (++index$1 < node$1.children.length) {
				const item = node$1.children[index$1];
				if (item && item.type === "listItem" && item.children && item.children[0] && item.children[0].type === "thematicBreak") {
					useDifferentMarker = true;
					break;
				}
			}
		}
	}
	if (useDifferentMarker) bullet = bulletOther;
	state.bulletCurrent = bullet;
	const value = state.containerFlow(node$1, info$2);
	state.bulletLastUsed = bullet;
	state.bulletCurrent = bulletCurrent;
	exit$1();
	return value;
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js
function checkListItemIndent(state) {
	const style = state.options.listItemIndent || "one";
	if (style !== "tab" && style !== "one" && style !== "mixed") throw new Error("Cannot serialize items with `" + style + "` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`");
	return style;
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/list-item.js
function listItem(node$1, parent, state, info$2) {
	const listItemIndent = checkListItemIndent(state);
	let bullet = state.bulletCurrent || checkBullet(state);
	if (parent && parent.type === "list" && parent.ordered) bullet = (typeof parent.start === "number" && parent.start > -1 ? parent.start : 1) + (state.options.incrementListMarker === false ? 0 : parent.children.indexOf(node$1)) + bullet;
	let size = bullet.length + 1;
	if (listItemIndent === "tab" || listItemIndent === "mixed" && (parent && parent.type === "list" && parent.spread || node$1.spread)) size = Math.ceil(size / 4) * 4;
	const tracker = state.createTracker(info$2);
	tracker.move(bullet + " ".repeat(size - bullet.length));
	tracker.shift(size);
	const exit$1 = state.enter("listItem");
	const value = state.indentLines(state.containerFlow(node$1, tracker.current()), map$3);
	exit$1();
	return value;
	/** @type {Map} */
	function map$3(line, index$1, blank) {
		if (index$1) return (blank ? "" : " ".repeat(size)) + line;
		return (blank ? bullet : bullet + " ".repeat(size - bullet.length)) + line;
	}
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/paragraph.js
function paragraph(node$1, _, state, info$2) {
	const exit$1 = state.enter("paragraph");
	const subexit = state.enter("phrasing");
	const value = state.containerPhrasing(node$1, info$2);
	subexit();
	exit$1();
	return value;
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-phrasing@4.1.0/node_modules/mdast-util-phrasing/lib/index.js
const phrasing = convert([
	"break",
	"delete",
	"emphasis",
	"footnote",
	"footnoteReference",
	"image",
	"imageReference",
	"inlineCode",
	"inlineMath",
	"link",
	"linkReference",
	"mdxJsxTextElement",
	"mdxTextExpression",
	"strong",
	"text",
	"textDirective"
]);

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/root.js
function root(node$1, _, state, info$2) {
	const hasPhrasing = node$1.children.some(function(d) {
		return phrasing(d);
	});
	const fn = hasPhrasing ? state.containerPhrasing : state.containerFlow;
	return fn.call(state, node$1, info$2);
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/check-strong.js
function checkStrong(state) {
	const marker = state.options.strong || "*";
	if (marker !== "*" && marker !== "_") throw new Error("Cannot serialize strong with `" + marker + "` for `options.strong`, expected `*`, or `_`");
	return marker;
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/strong.js
strong.peek = strongPeek;
function strong(node$1, _, state, info$2) {
	const marker = checkStrong(state);
	const exit$1 = state.enter("strong");
	const tracker = state.createTracker(info$2);
	let value = tracker.move(marker + marker);
	value += tracker.move(state.containerPhrasing(node$1, {
		before: value,
		after: marker,
		...tracker.current()
	}));
	value += tracker.move(marker + marker);
	exit$1();
	return value;
}
/**
* @param {Strong} _
* @param {Parents | undefined} _1
* @param {State} state
* @returns {string}
*/
function strongPeek(_, _1, state) {
	return state.options.strong || "*";
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/text.js
function text(node$1, _, state, info$2) {
	return state.safe(node$1.value, info$2);
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js
function checkRuleRepetition(state) {
	const repetition = state.options.ruleRepetition || 3;
	if (repetition < 3) throw new Error("Cannot serialize rules with repetition `" + repetition + "` for `options.ruleRepetition`, expected `3` or more");
	return repetition;
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js
function thematicBreak(_, _1, state) {
	const value = (checkRule(state) + (state.options.ruleSpaces ? " " : "")).repeat(checkRuleRepetition(state));
	return state.options.ruleSpaces ? value.slice(0, -1) : value;
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/index.js
const handle = {
	blockquote,
	break: hardBreak,
	code,
	definition,
	emphasis,
	hardBreak,
	heading,
	html,
	image,
	imageReference,
	inlineCode,
	link,
	linkReference,
	list,
	listItem,
	paragraph,
	root,
	strong,
	text,
	thematicBreak
};

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/join.js
const join$3 = [joinDefaults];
/** @type {Join} */
function joinDefaults(left, right, parent, state) {
	if (right.type === "code" && formatCodeAsIndented(right, state) && (left.type === "list" || left.type === right.type && formatCodeAsIndented(left, state))) return false;
	if ("spread" in parent && typeof parent.spread === "boolean") {
		if (left.type === "paragraph" && (left.type === right.type || right.type === "definition" || right.type === "heading" && formatHeadingAsSetext(right, state))) return;
		return parent.spread ? 1 : 0;
	}
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/unsafe.js
/**
* @typedef {import('./types.js').ConstructName} ConstructName
* @typedef {import('./types.js').Unsafe} Unsafe
*/
/**
* List of constructs that occur in phrasing (paragraphs, headings), but cannot
* contain things like attention (emphasis, strong), images, or links.
* So they sort of cancel each other out.
* Note: could use a better name.
*
* @type {Array<ConstructName>}
*/
const fullPhrasingSpans = [
	"autolink",
	"destinationLiteral",
	"destinationRaw",
	"reference",
	"titleQuote",
	"titleApostrophe"
];
const unsafe = [
	{
		character: "	",
		after: "[\\r\\n]",
		inConstruct: "phrasing"
	},
	{
		character: "	",
		before: "[\\r\\n]",
		inConstruct: "phrasing"
	},
	{
		character: "	",
		inConstruct: ["codeFencedLangGraveAccent", "codeFencedLangTilde"]
	},
	{
		character: "\r",
		inConstruct: [
			"codeFencedLangGraveAccent",
			"codeFencedLangTilde",
			"codeFencedMetaGraveAccent",
			"codeFencedMetaTilde",
			"destinationLiteral",
			"headingAtx"
		]
	},
	{
		character: "\n",
		inConstruct: [
			"codeFencedLangGraveAccent",
			"codeFencedLangTilde",
			"codeFencedMetaGraveAccent",
			"codeFencedMetaTilde",
			"destinationLiteral",
			"headingAtx"
		]
	},
	{
		character: " ",
		after: "[\\r\\n]",
		inConstruct: "phrasing"
	},
	{
		character: " ",
		before: "[\\r\\n]",
		inConstruct: "phrasing"
	},
	{
		character: " ",
		inConstruct: ["codeFencedLangGraveAccent", "codeFencedLangTilde"]
	},
	{
		character: "!",
		after: "\\[",
		inConstruct: "phrasing",
		notInConstruct: fullPhrasingSpans
	},
	{
		character: "\"",
		inConstruct: "titleQuote"
	},
	{
		atBreak: true,
		character: "#"
	},
	{
		character: "#",
		inConstruct: "headingAtx",
		after: "(?:[\r\n]|$)"
	},
	{
		character: "&",
		after: "[#A-Za-z]",
		inConstruct: "phrasing"
	},
	{
		character: "'",
		inConstruct: "titleApostrophe"
	},
	{
		character: "(",
		inConstruct: "destinationRaw"
	},
	{
		before: "\\]",
		character: "(",
		inConstruct: "phrasing",
		notInConstruct: fullPhrasingSpans
	},
	{
		atBreak: true,
		before: "\\d+",
		character: ")"
	},
	{
		character: ")",
		inConstruct: "destinationRaw"
	},
	{
		atBreak: true,
		character: "*",
		after: "(?:[ 	\r\n*])"
	},
	{
		character: "*",
		inConstruct: "phrasing",
		notInConstruct: fullPhrasingSpans
	},
	{
		atBreak: true,
		character: "+",
		after: "(?:[ 	\r\n])"
	},
	{
		atBreak: true,
		character: "-",
		after: "(?:[ 	\r\n-])"
	},
	{
		atBreak: true,
		before: "\\d+",
		character: ".",
		after: "(?:[ 	\r\n]|$)"
	},
	{
		atBreak: true,
		character: "<",
		after: "[!/?A-Za-z]"
	},
	{
		character: "<",
		after: "[!/?A-Za-z]",
		inConstruct: "phrasing",
		notInConstruct: fullPhrasingSpans
	},
	{
		character: "<",
		inConstruct: "destinationLiteral"
	},
	{
		atBreak: true,
		character: "="
	},
	{
		atBreak: true,
		character: ">"
	},
	{
		character: ">",
		inConstruct: "destinationLiteral"
	},
	{
		atBreak: true,
		character: "["
	},
	{
		character: "[",
		inConstruct: "phrasing",
		notInConstruct: fullPhrasingSpans
	},
	{
		character: "[",
		inConstruct: ["label", "reference"]
	},
	{
		character: "\\",
		after: "[\\r\\n]",
		inConstruct: "phrasing"
	},
	{
		character: "]",
		inConstruct: ["label", "reference"]
	},
	{
		atBreak: true,
		character: "_"
	},
	{
		character: "_",
		inConstruct: "phrasing",
		notInConstruct: fullPhrasingSpans
	},
	{
		atBreak: true,
		character: "`"
	},
	{
		character: "`",
		inConstruct: ["codeFencedLangGraveAccent", "codeFencedMetaGraveAccent"]
	},
	{
		character: "`",
		inConstruct: "phrasing",
		notInConstruct: fullPhrasingSpans
	},
	{
		atBreak: true,
		character: "~"
	}
];

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/association.js
function association(node$1) {
	if (node$1.label || !node$1.identifier) return node$1.label || "";
	return decodeString(node$1.identifier);
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/compile-pattern.js
function compilePattern(pattern$1) {
	if (!pattern$1._compiled) {
		const before = (pattern$1.atBreak ? "[\\r\\n][\\t ]*" : "") + (pattern$1.before ? "(?:" + pattern$1.before + ")" : "");
		pattern$1._compiled = new RegExp((before ? "(" + before + ")" : "") + (/[|\\{}()[\]^$+*?.-]/.test(pattern$1.character) ? "\\" : "") + pattern$1.character + (pattern$1.after ? "(?:" + pattern$1.after + ")" : ""), "g");
	}
	return pattern$1._compiled;
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js
function containerPhrasing(parent, state, info$2) {
	const indexStack = state.indexStack;
	const children = parent.children || [];
	/** @type {Array<string>} */
	const results = [];
	let index$1 = -1;
	let before = info$2.before;
	indexStack.push(-1);
	let tracker = state.createTracker(info$2);
	while (++index$1 < children.length) {
		const child$1 = children[index$1];
		/** @type {string} */
		let after;
		indexStack[indexStack.length - 1] = index$1;
		if (index$1 + 1 < children.length) {
			/** @type {Handle} */
			let handle$1 = state.handle.handlers[children[index$1 + 1].type];
			/** @type {Handle} */
			if (handle$1 && handle$1.peek) handle$1 = handle$1.peek;
			after = handle$1 ? handle$1(children[index$1 + 1], parent, state, {
				before: "",
				after: "",
				...tracker.current()
			}).charAt(0) : "";
		} else after = info$2.after;
		if (results.length > 0 && (before === "\r" || before === "\n") && child$1.type === "html") {
			results[results.length - 1] = results[results.length - 1].replace(/(\r?\n|\r)$/, " ");
			before = " ";
			tracker = state.createTracker(info$2);
			tracker.move(results.join(""));
		}
		results.push(tracker.move(state.handle(child$1, parent, state, {
			...tracker.current(),
			before,
			after
		})));
		before = results[results.length - 1].slice(-1);
	}
	indexStack.pop();
	return results.join("");
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/container-flow.js
function containerFlow(parent, state, info$2) {
	const indexStack = state.indexStack;
	const children = parent.children || [];
	const tracker = state.createTracker(info$2);
	/** @type {Array<string>} */
	const results = [];
	let index$1 = -1;
	indexStack.push(-1);
	while (++index$1 < children.length) {
		const child$1 = children[index$1];
		indexStack[indexStack.length - 1] = index$1;
		results.push(tracker.move(state.handle(child$1, parent, state, {
			before: "\n",
			after: "\n",
			...tracker.current()
		})));
		if (child$1.type !== "list") state.bulletLastUsed = undefined;
		if (index$1 < children.length - 1) results.push(tracker.move(between(child$1, children[index$1 + 1], parent, state)));
	}
	indexStack.pop();
	return results.join("");
}
/**
* @param {FlowChildren} left
* @param {FlowChildren} right
* @param {FlowParents} parent
* @param {State} state
* @returns {string}
*/
function between(left, right, parent, state) {
	let index$1 = state.join.length;
	while (index$1--) {
		const result = state.join[index$1](left, right, parent, state);
		if (result === true || result === 1) break;
		if (typeof result === "number") return "\n".repeat(1 + result);
		if (result === false) return "\n\n<!---->\n\n";
	}
	return "\n\n";
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/indent-lines.js
/**
* @typedef {import('../types.js').IndentLines} IndentLines
*/
const eol = /\r?\n|\r/g;
function indentLines(value, map$3) {
	/** @type {Array<string>} */
	const result = [];
	let start = 0;
	let line = 0;
	/** @type {RegExpExecArray | null} */
	let match;
	while (match = eol.exec(value)) {
		one$1(value.slice(start, match.index));
		result.push(match[0]);
		start = match.index + match[0].length;
		line++;
	}
	one$1(value.slice(start));
	return result.join("");
	/**
	* @param {string} value
	*/
	function one$1(value$1) {
		result.push(map$3(value$1, line, !value$1));
	}
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/safe.js
function safe(state, input, config) {
	const value = (config.before || "") + (input || "") + (config.after || "");
	/** @type {Array<number>} */
	const positions = [];
	/** @type {Array<string>} */
	const result = [];
	/** @type {Record<number, {before: boolean, after: boolean}>} */
	const infos = {};
	let index$1 = -1;
	while (++index$1 < state.unsafe.length) {
		const pattern$1 = state.unsafe[index$1];
		if (!patternInScope(state.stack, pattern$1)) continue;
		const expression = state.compilePattern(pattern$1);
		/** @type {RegExpExecArray | null} */
		let match;
		while (match = expression.exec(value)) {
			const before = "before" in pattern$1 || Boolean(pattern$1.atBreak);
			const after = "after" in pattern$1;
			const position$1 = match.index + (before ? match[1].length : 0);
			if (positions.includes(position$1)) {
				if (infos[position$1].before && !before) infos[position$1].before = false;
				if (infos[position$1].after && !after) infos[position$1].after = false;
			} else {
				positions.push(position$1);
				infos[position$1] = {
					before,
					after
				};
			}
		}
	}
	positions.sort(numerical);
	let start = config.before ? config.before.length : 0;
	const end = value.length - (config.after ? config.after.length : 0);
	index$1 = -1;
	while (++index$1 < positions.length) {
		const position$1 = positions[index$1];
		if (position$1 < start || position$1 >= end) continue;
		if (position$1 + 1 < end && positions[index$1 + 1] === position$1 + 1 && infos[position$1].after && !infos[position$1 + 1].before && !infos[position$1 + 1].after || positions[index$1 - 1] === position$1 - 1 && infos[position$1].before && !infos[position$1 - 1].before && !infos[position$1 - 1].after) continue;
		if (start !== position$1) result.push(escapeBackslashes(value.slice(start, position$1), "\\"));
		start = position$1;
		if (/[!-/:-@[-`{-~]/.test(value.charAt(position$1)) && (!config.encode || !config.encode.includes(value.charAt(position$1)))) result.push("\\");
else {
			result.push("&#x" + value.charCodeAt(position$1).toString(16).toUpperCase() + ";");
			start++;
		}
	}
	result.push(escapeBackslashes(value.slice(start, end), config.after));
	return result.join("");
}
/**
* @param {number} a
* @param {number} b
* @returns {number}
*/
function numerical(a, b) {
	return a - b;
}
/**
* @param {string} value
* @param {string} after
* @returns {string}
*/
function escapeBackslashes(value, after) {
	const expression = /\\(?=[!-/:-@[-`{-~])/g;
	/** @type {Array<number>} */
	const positions = [];
	/** @type {Array<string>} */
	const results = [];
	const whole = value + after;
	let index$1 = -1;
	let start = 0;
	/** @type {RegExpExecArray | null} */
	let match;
	while (match = expression.exec(whole)) positions.push(match.index);
	while (++index$1 < positions.length) {
		if (start !== positions[index$1]) results.push(value.slice(start, positions[index$1]));
		results.push("\\");
		start = positions[index$1];
	}
	results.push(value.slice(start));
	return results.join("");
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/track.js
function track(config) {
	const options = config || {};
	const now = options.now || {};
	let lineShift = options.lineShift || 0;
	let line = now.line || 1;
	let column = now.column || 1;
	return {
		move: move$2,
		current,
		shift
	};
	/**
	* Get the current tracked info.
	*
	* @type {TrackCurrent}
	*/
	function current() {
		return {
			now: {
				line,
				column
			},
			lineShift
		};
	}
	/**
	* Define an increased line shift (the typical indent for lines).
	*
	* @type {TrackShift}
	*/
	function shift(value) {
		lineShift += value;
	}
	/**
	* Move past some generated markdown.
	*
	* @type {TrackMove}
	*/
	function move$2(input) {
		const value = input || "";
		const chunks = value.split(/\r?\n|\r/g);
		const tail = chunks[chunks.length - 1];
		line += chunks.length - 1;
		column = chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift;
		return value;
	}
}

//#endregion
//#region ../node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/index.js
function toMarkdown(tree, options = {}) {
	/** @type {State} */
	const state = {
		enter,
		indentLines,
		associationId: association,
		containerPhrasing: containerPhrasingBound,
		containerFlow: containerFlowBound,
		createTracker: track,
		compilePattern,
		safe: safeBound,
		stack: [],
		unsafe: [...unsafe],
		join: [...join$3],
		handlers: { ...handle },
		options: {},
		indexStack: [],
		handle: undefined
	};
	configure$1(state, options);
	if (state.options.tightDefinitions) state.join.push(joinDefinition);
	state.handle = zwitch("type", {
		invalid,
		unknown,
		handlers: state.handlers
	});
	let result = state.handle(tree, undefined, state, {
		before: "\n",
		after: "\n",
		now: {
			line: 1,
			column: 1
		},
		lineShift: 0
	});
	if (result && result.charCodeAt(result.length - 1) !== 10 && result.charCodeAt(result.length - 1) !== 13) result += "\n";
	return result;
	/** @type {Enter} */
	function enter(name) {
		state.stack.push(name);
		return exit$1;
		/**
		* @returns {undefined}
		*/
		function exit$1() {
			state.stack.pop();
		}
	}
}
/**
* @param {unknown} value
* @returns {never}
*/
function invalid(value) {
	throw new Error("Cannot handle value `" + value + "`, expected node");
}
/**
* @param {unknown} value
* @returns {never}
*/
function unknown(value) {
	const node$1 = value;
	throw new Error("Cannot handle unknown node `" + node$1.type + "`");
}
/** @type {Join} */
function joinDefinition(left, right) {
	if (left.type === "definition" && left.type === right.type) return 0;
}
/**
* Serialize the children of a parent that contains phrasing children.
*
* These children will be joined flush together.
*
* @this {State}
*   Info passed around about the current state.
* @param {PhrasingParents} parent
*   Parent of flow nodes.
* @param {Info} info
*   Info on where we are in the document we are generating.
* @returns {string}
*   Serialized children, joined together.
*/
function containerPhrasingBound(parent, info$2) {
	return containerPhrasing(parent, this, info$2);
}
/**
* Serialize the children of a parent that contains flow children.
*
* These children will typically be joined by blank lines.
* What they are joined by exactly is defined by `Join` functions.
*
* @this {State}
*   Info passed around about the current state.
* @param {FlowParents} parent
*   Parent of flow nodes.
* @param {TrackFields} info
*   Info on where we are in the document we are generating.
* @returns {string}
*   Serialized children, joined by (blank) lines.
*/
function containerFlowBound(parent, info$2) {
	return containerFlow(parent, this, info$2);
}
/**
* Make a string safe for embedding in markdown constructs.
*
* In markdown, almost all punctuation characters can, in certain cases,
* result in something.
* Whether they do is highly subjective to where they happen and in what
* they happen.
*
* To solve this, `mdast-util-to-markdown` tracks:
*
* * Characters before and after something;
* * What “constructs” we are in.
*
* This information is then used by this function to escape or encode
* special characters.
*
* @this {State}
*   Info passed around about the current state.
* @param {string | null | undefined} value
*   Raw value to make safe.
* @param {SafeConfig} config
*   Configuration.
* @returns {string}
*   Serialized markdown safe for embedding.
*/
function safeBound(value, config) {
	return safe(this, value, config);
}

//#endregion
//#region ../node_modules/.pnpm/remark-stringify@11.0.0/node_modules/remark-stringify/lib/index.js
function remarkStringify(options) {
	/** @type {Processor} */
	const self$1 = this;
	self$1.compiler = compiler$1;
	/**
	* @type {Compiler}
	*/
	function compiler$1(tree) {
		return toMarkdown(tree, {
			...self$1.data("settings"),
			...options,
			extensions: self$1.data("toMarkdownExtensions") || []
		});
	}
}

//#endregion
//#region ../node_modules/.pnpm/resolve-from@5.0.0/node_modules/resolve-from/index.js
var require_resolve_from = __commonJS({ "../node_modules/.pnpm/resolve-from@5.0.0/node_modules/resolve-from/index.js"(exports, module) {
	const path = require("path");
	const Module = require("module");
	const fs = require("fs");
	const resolveFrom$2 = (fromDirectory, moduleId, silent) => {
		if (typeof fromDirectory !== "string") throw new TypeError(`Expected \`fromDir\` to be of type \`string\`, got \`${typeof fromDirectory}\``);
		if (typeof moduleId !== "string") throw new TypeError(`Expected \`moduleId\` to be of type \`string\`, got \`${typeof moduleId}\``);
		try {
			fromDirectory = fs.realpathSync(fromDirectory);
		} catch (error$2) {
			if (error$2.code === "ENOENT") fromDirectory = path.resolve(fromDirectory);
else if (silent) return;
else throw error$2;
		}
		const fromFile = path.join(fromDirectory, "noop.js");
		const resolveFileName = () => Module._resolveFilename(moduleId, {
			id: fromFile,
			filename: fromFile,
			paths: Module._nodeModulePaths(fromDirectory)
		});
		if (silent) try {
			return resolveFileName();
		} catch (error$2) {
			return;
		}
		return resolveFileName();
	};
	module.exports = (fromDirectory, moduleId) => resolveFrom$2(fromDirectory, moduleId);
	module.exports.silent = (fromDirectory, moduleId) => resolveFrom$2(fromDirectory, moduleId, true);
} });

//#endregion
//#region ../node_modules/.pnpm/bail@2.0.2/node_modules/bail/index.js
function bail(error$2) {
	if (error$2) throw error$2;
}

//#endregion
//#region ../node_modules/.pnpm/extend@3.0.2/node_modules/extend/index.js
var require_extend = __commonJS({ "../node_modules/.pnpm/extend@3.0.2/node_modules/extend/index.js"(exports, module) {
	var hasOwn = Object.prototype.hasOwnProperty;
	var toStr = Object.prototype.toString;
	var defineProperty = Object.defineProperty;
	var gOPD = Object.getOwnPropertyDescriptor;
	var isArray = function isArray$1(arr) {
		if (typeof Array.isArray === "function") return Array.isArray(arr);
		return toStr.call(arr) === "[object Array]";
	};
	var isPlainObject$1 = function isPlainObject$4(obj) {
		if (!obj || toStr.call(obj) !== "[object Object]") return false;
		var hasOwnConstructor = hasOwn.call(obj, "constructor");
		var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, "isPrototypeOf");
		if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) return false;
		var key;
		for (key in obj);
		return typeof key === "undefined" || hasOwn.call(obj, key);
	};
	var setProperty = function setProperty$1(target, options) {
		if (defineProperty && options.name === "__proto__") defineProperty(target, options.name, {
			enumerable: true,
			configurable: true,
			value: options.newValue,
			writable: true
		});
else target[options.name] = options.newValue;
	};
	var getProperty = function getProperty$1(obj, name) {
		if (name === "__proto__") {
			if (!hasOwn.call(obj, name)) return void 0;
else if (gOPD) return gOPD(obj, name).value;
		}
		return obj[name];
	};
	module.exports = function extend$3() {
		var options, name, src$1, copy$4, copyIsArray, clone$2;
		var target = arguments[0];
		var i$2 = 1;
		var length = arguments.length;
		var deep = false;
		if (typeof target === "boolean") {
			deep = target;
			target = arguments[1] || {};
			i$2 = 2;
		}
		if (target == null || typeof target !== "object" && typeof target !== "function") target = {};
		for (; i$2 < length; ++i$2) {
			options = arguments[i$2];
			if (options != null) for (name in options) {
				src$1 = getProperty(target, name);
				copy$4 = getProperty(options, name);
				if (target !== copy$4) {
					if (deep && copy$4 && (isPlainObject$1(copy$4) || (copyIsArray = isArray(copy$4)))) {
						if (copyIsArray) {
							copyIsArray = false;
							clone$2 = src$1 && isArray(src$1) ? src$1 : [];
						} else clone$2 = src$1 && isPlainObject$1(src$1) ? src$1 : {};
						setProperty(target, {
							name,
							newValue: extend$3(deep, clone$2, copy$4)
						});
					} else if (typeof copy$4 !== "undefined") setProperty(target, {
						name,
						newValue: copy$4
					});
				}
			}
		}
		return target;
	};
} });

//#endregion
//#region ../node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/default.js
function ok() {}

//#endregion
//#region ../node_modules/.pnpm/is-plain-obj@4.1.0/node_modules/is-plain-obj/index.js
function isPlainObject(value) {
	if (typeof value !== "object" || value === null) return false;
	const prototype = Object.getPrototypeOf(value);
	return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);
}

//#endregion
//#region ../node_modules/.pnpm/trough@2.2.0/node_modules/trough/lib/index.js
function trough() {
	/** @type {Array<Middleware>} */
	const fns = [];
	/** @type {Pipeline} */
	const pipeline$3 = {
		run: run$1,
		use
	};
	return pipeline$3;
	/** @type {Run} */
	function run$1(...values) {
		let middlewareIndex = -1;
		/** @type {Callback} */
		const callback = values.pop();
		if (typeof callback !== "function") throw new TypeError("Expected function as last argument, not " + callback);
		next(null, ...values);
		/**
		* Run the next `fn`, or we’re done.
		*
		* @param {Error | null | undefined} error
		* @param {Array<any>} output
		*/
		function next(error$2, ...output) {
			const fn = fns[++middlewareIndex];
			let index$1 = -1;
			if (error$2) {
				callback(error$2);
				return;
			}
			while (++index$1 < values.length) if (output[index$1] === null || output[index$1] === undefined) output[index$1] = values[index$1];
			values = output;
			if (fn) wrap(fn, next)(...output);
else callback(null, ...output);
		}
	}
	/** @type {Use} */
	function use(middelware) {
		if (typeof middelware !== "function") throw new TypeError("Expected `middelware` to be a function, not " + middelware);
		fns.push(middelware);
		return pipeline$3;
	}
}
function wrap(middleware, callback) {
	/** @type {boolean} */
	let called;
	return wrapped;
	/**
	* Call `middleware`.
	* @this {any}
	* @param {Array<any>} parameters
	* @returns {void}
	*/
	function wrapped(...parameters) {
		const fnExpectsCallback = middleware.length > parameters.length;
		/** @type {any} */
		let result;
		if (fnExpectsCallback) parameters.push(done);
		try {
			result = middleware.apply(this, parameters);
		} catch (error$2) {
			const exception = error$2;
			if (fnExpectsCallback && called) throw exception;
			return done(exception);
		}
		if (!fnExpectsCallback) if (result && result.then && typeof result.then === "function") result.then(then, done);
else if (result instanceof Error) done(result);
else then(result);
	}
	/**
	* Call `callback`, only once.
	*
	* @type {Callback}
	*/
	function done(error$2, ...output) {
		if (!called) {
			called = true;
			callback(error$2, ...output);
		}
	}
	/**
	* Call `done` with one value.
	*
	* @param {any} [value]
	*/
	function then(value) {
		done(null, value);
	}
}

//#endregion
//#region ../node_modules/.pnpm/vfile-message@4.0.2/node_modules/vfile-message/lib/index.js
var VFileMessage = class extends Error {
	/**
	* Create a message for `reason`.
	*
	* > 🪦 **Note**: also has obsolete signatures.
	*
	* @overload
	* @param {string} reason
	* @param {Options | null | undefined} [options]
	* @returns
	*
	* @overload
	* @param {string} reason
	* @param {Node | NodeLike | null | undefined} parent
	* @param {string | null | undefined} [origin]
	* @returns
	*
	* @overload
	* @param {string} reason
	* @param {Point | Position | null | undefined} place
	* @param {string | null | undefined} [origin]
	* @returns
	*
	* @overload
	* @param {string} reason
	* @param {string | null | undefined} [origin]
	* @returns
	*
	* @overload
	* @param {Error | VFileMessage} cause
	* @param {Node | NodeLike | null | undefined} parent
	* @param {string | null | undefined} [origin]
	* @returns
	*
	* @overload
	* @param {Error | VFileMessage} cause
	* @param {Point | Position | null | undefined} place
	* @param {string | null | undefined} [origin]
	* @returns
	*
	* @overload
	* @param {Error | VFileMessage} cause
	* @param {string | null | undefined} [origin]
	* @returns
	*
	* @param {Error | VFileMessage | string} causeOrReason
	*   Reason for message, should use markdown.
	* @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
	*   Configuration (optional).
	* @param {string | null | undefined} [origin]
	*   Place in code where the message originates (example:
	*   `'my-package:my-rule'` or `'my-rule'`).
	* @returns
	*   Instance of `VFileMessage`.
	*/
	constructor(causeOrReason, optionsOrParentOrPlace, origin) {
		super();
		if (typeof optionsOrParentOrPlace === "string") {
			origin = optionsOrParentOrPlace;
			optionsOrParentOrPlace = undefined;
		}
		/** @type {string} */
		let reason = "";
		/** @type {Options} */
		let options = {};
		let legacyCause = false;
		if (optionsOrParentOrPlace) if ("line" in optionsOrParentOrPlace && "column" in optionsOrParentOrPlace) options = { place: optionsOrParentOrPlace };
else if ("start" in optionsOrParentOrPlace && "end" in optionsOrParentOrPlace) options = { place: optionsOrParentOrPlace };
else if ("type" in optionsOrParentOrPlace) options = {
			ancestors: [optionsOrParentOrPlace],
			place: optionsOrParentOrPlace.position
		};
else options = { ...optionsOrParentOrPlace };
		if (typeof causeOrReason === "string") reason = causeOrReason;
else if (!options.cause && causeOrReason) {
			legacyCause = true;
			reason = causeOrReason.message;
			options.cause = causeOrReason;
		}
		if (!options.ruleId && !options.source && typeof origin === "string") {
			const index$1 = origin.indexOf(":");
			if (index$1 === -1) options.ruleId = origin;
else {
				options.source = origin.slice(0, index$1);
				options.ruleId = origin.slice(index$1 + 1);
			}
		}
		if (!options.place && options.ancestors && options.ancestors) {
			const parent = options.ancestors[options.ancestors.length - 1];
			if (parent) options.place = parent.position;
		}
		const start = options.place && "start" in options.place ? options.place.start : options.place;
		/**
		* Stack of ancestor nodes surrounding the message.
		*
		* @type {Array<Node> | undefined}
		*/
		this.ancestors = options.ancestors || undefined;
		/**
		* Original error cause of the message.
		*
		* @type {Error | undefined}
		*/
		this.cause = options.cause || undefined;
		/**
		* Starting column of message.
		*
		* @type {number | undefined}
		*/
		this.column = start ? start.column : undefined;
		/**
		* State of problem.
		*
		* * `true` — error, file not usable
		* * `false` — warning, change may be needed
		* * `undefined` — change likely not needed
		*
		* @type {boolean | null | undefined}
		*/
		this.fatal = undefined;
		/**
		* Path of a file (used throughout the `VFile` ecosystem).
		*
		* @type {string | undefined}
		*/
		this.file;
		/**
		* Reason for message.
		*
		* @type {string}
		*/
		this.message = reason;
		/**
		* Starting line of error.
		*
		* @type {number | undefined}
		*/
		this.line = start ? start.line : undefined;
		/**
		* Serialized positional info of message.
		*
		* On normal errors, this would be something like `ParseError`, buit in
		* `VFile` messages we use this space to show where an error happened.
		*/
		this.name = stringifyPosition(options.place) || "1:1";
		/**
		* Place of message.
		*
		* @type {Point | Position | undefined}
		*/
		this.place = options.place || undefined;
		/**
		* Reason for message, should use markdown.
		*
		* @type {string}
		*/
		this.reason = this.message;
		/**
		* Category of message (example: `'my-rule'`).
		*
		* @type {string | undefined}
		*/
		this.ruleId = options.ruleId || undefined;
		/**
		* Namespace of message (example: `'my-package'`).
		*
		* @type {string | undefined}
		*/
		this.source = options.source || undefined;
		/**
		* Stack of message.
		*
		* This is used by normal errors to show where something happened in
		* programming code, irrelevant for `VFile` messages,
		*
		* @type {string}
		*/
		this.stack = legacyCause && options.cause && typeof options.cause.stack === "string" ? options.cause.stack : "";
		/**
		* Specify the source value that’s being reported, which is deemed
		* incorrect.
		*
		* @type {string | undefined}
		*/
		this.actual;
		/**
		* Suggest acceptable values that can be used instead of `actual`.
		*
		* @type {Array<string> | undefined}
		*/
		this.expected;
		/**
		* Long form description of the message (you should use markdown).
		*
		* @type {string | undefined}
		*/
		this.note;
		/**
		* Link to docs for the message.
		*
		* > 👉 **Note**: this must be an absolute URL that can be passed as `x`
		* > to `new URL(x)`.
		*
		* @type {string | undefined}
		*/
		this.url;
	}
};
VFileMessage.prototype.file = "";
VFileMessage.prototype.name = "";
VFileMessage.prototype.reason = "";
VFileMessage.prototype.message = "";
VFileMessage.prototype.stack = "";
VFileMessage.prototype.column = undefined;
VFileMessage.prototype.line = undefined;
VFileMessage.prototype.ancestors = undefined;
VFileMessage.prototype.cause = undefined;
VFileMessage.prototype.fatal = undefined;
VFileMessage.prototype.place = undefined;
VFileMessage.prototype.ruleId = undefined;
VFileMessage.prototype.source = undefined;

//#endregion
//#region ../node_modules/.pnpm/vfile@6.0.3/node_modules/vfile/lib/minurl.shared.js
function isUrl(fileUrlOrPath) {
	return Boolean(fileUrlOrPath !== null && typeof fileUrlOrPath === "object" && "href" in fileUrlOrPath && fileUrlOrPath.href && "protocol" in fileUrlOrPath && fileUrlOrPath.protocol && fileUrlOrPath.auth === undefined);
}

//#endregion
//#region ../node_modules/.pnpm/vfile@6.0.3/node_modules/vfile/lib/index.js
/**
* Order of setting (least specific to most), we need this because otherwise
* `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a
* stem can be set.
*/
const order = [
	"history",
	"path",
	"basename",
	"stem",
	"extname",
	"dirname"
];
var VFile = class {
	/**
	* Create a new virtual file.
	*
	* `options` is treated as:
	*
	* *   `string` or `Uint8Array` — `{value: options}`
	* *   `URL` — `{path: options}`
	* *   `VFile` — shallow copies its data over to the new file
	* *   `object` — all fields are shallow copied over to the new file
	*
	* Path related fields are set in the following order (least specific to
	* most specific): `history`, `path`, `basename`, `stem`, `extname`,
	* `dirname`.
	*
	* You cannot set `dirname` or `extname` without setting either `history`,
	* `path`, `basename`, or `stem` too.
	*
	* @param {Compatible | null | undefined} [value]
	*   File value.
	* @returns
	*   New instance.
	*/
	constructor(value) {
		/** @type {Options | VFile} */
		let options;
		if (!value) options = {};
else if (isUrl(value)) options = { path: value };
else if (typeof value === "string" || isUint8Array$1(value)) options = { value };
else options = value;
		/**
		* Base of `path` (default: `process.cwd()` or `'/'` in browsers).
		*
		* @type {string}
		*/
		this.cwd = "cwd" in options ? "" : minproc.cwd();
		/**
		* Place to store custom info (default: `{}`).
		*
		* It’s OK to store custom data directly on the file but moving it to
		* `data` is recommended.
		*
		* @type {Data}
		*/
		this.data = {};
		/**
		* List of file paths the file moved between.
		*
		* The first is the original path and the last is the current path.
		*
		* @type {Array<string>}
		*/
		this.history = [];
		/**
		* List of messages associated with the file.
		*
		* @type {Array<VFileMessage>}
		*/
		this.messages = [];
		/**
		* Raw value.
		*
		* @type {Value}
		*/
		this.value;
		/**
		* Source map.
		*
		* This type is equivalent to the `RawSourceMap` type from the `source-map`
		* module.
		*
		* @type {Map | null | undefined}
		*/
		this.map;
		/**
		* Custom, non-string, compiled, representation.
		*
		* This is used by unified to store non-string results.
		* One example is when turning markdown into React nodes.
		*
		* @type {unknown}
		*/
		this.result;
		/**
		* Whether a file was saved to disk.
		*
		* This is used by vfile reporters.
		*
		* @type {boolean}
		*/
		this.stored;
		let index$1 = -1;
		while (++index$1 < order.length) {
			const field$1 = order[index$1];
			if (field$1 in options && options[field$1] !== undefined && options[field$1] !== null) this[field$1] = field$1 === "history" ? [...options[field$1]] : options[field$1];
		}
		/** @type {string} */
		let field;
		for (field in options) if (!order.includes(field)) this[field] = options[field];
	}
	/**
	* Get the basename (including extname) (example: `'index.min.js'`).
	*
	* @returns {string | undefined}
	*   Basename.
	*/
	get basename() {
		return typeof this.path === "string" ? minpath.basename(this.path) : undefined;
	}
	/**
	* Set basename (including extname) (`'index.min.js'`).
	*
	* Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
	* on windows).
	* Cannot be nullified (use `file.path = file.dirname` instead).
	*
	* @param {string} basename
	*   Basename.
	* @returns {undefined}
	*   Nothing.
	*/
	set basename(basename$1) {
		assertNonEmpty(basename$1, "basename");
		assertPart(basename$1, "basename");
		this.path = minpath.join(this.dirname || "", basename$1);
	}
	/**
	* Get the parent path (example: `'~'`).
	*
	* @returns {string | undefined}
	*   Dirname.
	*/
	get dirname() {
		return typeof this.path === "string" ? minpath.dirname(this.path) : undefined;
	}
	/**
	* Set the parent path (example: `'~'`).
	*
	* Cannot be set if there’s no `path` yet.
	*
	* @param {string | undefined} dirname
	*   Dirname.
	* @returns {undefined}
	*   Nothing.
	*/
	set dirname(dirname) {
		assertPath(this.basename, "dirname");
		this.path = minpath.join(dirname || "", this.basename);
	}
	/**
	* Get the extname (including dot) (example: `'.js'`).
	*
	* @returns {string | undefined}
	*   Extname.
	*/
	get extname() {
		return typeof this.path === "string" ? minpath.extname(this.path) : undefined;
	}
	/**
	* Set the extname (including dot) (example: `'.js'`).
	*
	* Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
	* on windows).
	* Cannot be set if there’s no `path` yet.
	*
	* @param {string | undefined} extname
	*   Extname.
	* @returns {undefined}
	*   Nothing.
	*/
	set extname(extname) {
		assertPart(extname, "extname");
		assertPath(this.dirname, "extname");
		if (extname) {
			if (extname.codePointAt(0) !== 46) throw new Error("`extname` must start with `.`");
			if (extname.includes(".", 1)) throw new Error("`extname` cannot contain multiple dots");
		}
		this.path = minpath.join(this.dirname, this.stem + (extname || ""));
	}
	/**
	* Get the full path (example: `'~/index.min.js'`).
	*
	* @returns {string}
	*   Path.
	*/
	get path() {
		return this.history[this.history.length - 1];
	}
	/**
	* Set the full path (example: `'~/index.min.js'`).
	*
	* Cannot be nullified.
	* You can set a file URL (a `URL` object with a `file:` protocol) which will
	* be turned into a path with `url.fileURLToPath`.
	*
	* @param {URL | string} path
	*   Path.
	* @returns {undefined}
	*   Nothing.
	*/
	set path(path$72) {
		if (isUrl(path$72)) path$72 = urlToPath(path$72);
		assertNonEmpty(path$72, "path");
		if (this.path !== path$72) this.history.push(path$72);
	}
	/**
	* Get the stem (basename w/o extname) (example: `'index.min'`).
	*
	* @returns {string | undefined}
	*   Stem.
	*/
	get stem() {
		return typeof this.path === "string" ? minpath.basename(this.path, this.extname) : undefined;
	}
	/**
	* Set the stem (basename w/o extname) (example: `'index.min'`).
	*
	* Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
	* on windows).
	* Cannot be nullified (use `file.path = file.dirname` instead).
	*
	* @param {string} stem
	*   Stem.
	* @returns {undefined}
	*   Nothing.
	*/
	set stem(stem) {
		assertNonEmpty(stem, "stem");
		assertPart(stem, "stem");
		this.path = minpath.join(this.dirname || "", stem + (this.extname || ""));
	}
	/**
	* Create a fatal message for `reason` associated with the file.
	*
	* The `fatal` field of the message is set to `true` (error; file not usable)
	* and the `file` field is set to the current file path.
	* The message is added to the `messages` field on `file`.
	*
	* > 🪦 **Note**: also has obsolete signatures.
	*
	* @overload
	* @param {string} reason
	* @param {MessageOptions | null | undefined} [options]
	* @returns {never}
	*
	* @overload
	* @param {string} reason
	* @param {Node | NodeLike | null | undefined} parent
	* @param {string | null | undefined} [origin]
	* @returns {never}
	*
	* @overload
	* @param {string} reason
	* @param {Point | Position | null | undefined} place
	* @param {string | null | undefined} [origin]
	* @returns {never}
	*
	* @overload
	* @param {string} reason
	* @param {string | null | undefined} [origin]
	* @returns {never}
	*
	* @overload
	* @param {Error | VFileMessage} cause
	* @param {Node | NodeLike | null | undefined} parent
	* @param {string | null | undefined} [origin]
	* @returns {never}
	*
	* @overload
	* @param {Error | VFileMessage} cause
	* @param {Point | Position | null | undefined} place
	* @param {string | null | undefined} [origin]
	* @returns {never}
	*
	* @overload
	* @param {Error | VFileMessage} cause
	* @param {string | null | undefined} [origin]
	* @returns {never}
	*
	* @param {Error | VFileMessage | string} causeOrReason
	*   Reason for message, should use markdown.
	* @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
	*   Configuration (optional).
	* @param {string | null | undefined} [origin]
	*   Place in code where the message originates (example:
	*   `'my-package:my-rule'` or `'my-rule'`).
	* @returns {never}
	*   Never.
	* @throws {VFileMessage}
	*   Message.
	*/
	fail(causeOrReason, optionsOrParentOrPlace, origin) {
		const message = this.message(causeOrReason, optionsOrParentOrPlace, origin);
		message.fatal = true;
		throw message;
	}
	/**
	* Create an info message for `reason` associated with the file.
	*
	* The `fatal` field of the message is set to `undefined` (info; change
	* likely not needed) and the `file` field is set to the current file path.
	* The message is added to the `messages` field on `file`.
	*
	* > 🪦 **Note**: also has obsolete signatures.
	*
	* @overload
	* @param {string} reason
	* @param {MessageOptions | null | undefined} [options]
	* @returns {VFileMessage}
	*
	* @overload
	* @param {string} reason
	* @param {Node | NodeLike | null | undefined} parent
	* @param {string | null | undefined} [origin]
	* @returns {VFileMessage}
	*
	* @overload
	* @param {string} reason
	* @param {Point | Position | null | undefined} place
	* @param {string | null | undefined} [origin]
	* @returns {VFileMessage}
	*
	* @overload
	* @param {string} reason
	* @param {string | null | undefined} [origin]
	* @returns {VFileMessage}
	*
	* @overload
	* @param {Error | VFileMessage} cause
	* @param {Node | NodeLike | null | undefined} parent
	* @param {string | null | undefined} [origin]
	* @returns {VFileMessage}
	*
	* @overload
	* @param {Error | VFileMessage} cause
	* @param {Point | Position | null | undefined} place
	* @param {string | null | undefined} [origin]
	* @returns {VFileMessage}
	*
	* @overload
	* @param {Error | VFileMessage} cause
	* @param {string | null | undefined} [origin]
	* @returns {VFileMessage}
	*
	* @param {Error | VFileMessage | string} causeOrReason
	*   Reason for message, should use markdown.
	* @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
	*   Configuration (optional).
	* @param {string | null | undefined} [origin]
	*   Place in code where the message originates (example:
	*   `'my-package:my-rule'` or `'my-rule'`).
	* @returns {VFileMessage}
	*   Message.
	*/
	info(causeOrReason, optionsOrParentOrPlace, origin) {
		const message = this.message(causeOrReason, optionsOrParentOrPlace, origin);
		message.fatal = undefined;
		return message;
	}
	/**
	* Create a message for `reason` associated with the file.
	*
	* The `fatal` field of the message is set to `false` (warning; change may be
	* needed) and the `file` field is set to the current file path.
	* The message is added to the `messages` field on `file`.
	*
	* > 🪦 **Note**: also has obsolete signatures.
	*
	* @overload
	* @param {string} reason
	* @param {MessageOptions | null | undefined} [options]
	* @returns {VFileMessage}
	*
	* @overload
	* @param {string} reason
	* @param {Node | NodeLike | null | undefined} parent
	* @param {string | null | undefined} [origin]
	* @returns {VFileMessage}
	*
	* @overload
	* @param {string} reason
	* @param {Point | Position | null | undefined} place
	* @param {string | null | undefined} [origin]
	* @returns {VFileMessage}
	*
	* @overload
	* @param {string} reason
	* @param {string | null | undefined} [origin]
	* @returns {VFileMessage}
	*
	* @overload
	* @param {Error | VFileMessage} cause
	* @param {Node | NodeLike | null | undefined} parent
	* @param {string | null | undefined} [origin]
	* @returns {VFileMessage}
	*
	* @overload
	* @param {Error | VFileMessage} cause
	* @param {Point | Position | null | undefined} place
	* @param {string | null | undefined} [origin]
	* @returns {VFileMessage}
	*
	* @overload
	* @param {Error | VFileMessage} cause
	* @param {string | null | undefined} [origin]
	* @returns {VFileMessage}
	*
	* @param {Error | VFileMessage | string} causeOrReason
	*   Reason for message, should use markdown.
	* @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
	*   Configuration (optional).
	* @param {string | null | undefined} [origin]
	*   Place in code where the message originates (example:
	*   `'my-package:my-rule'` or `'my-rule'`).
	* @returns {VFileMessage}
	*   Message.
	*/
	message(causeOrReason, optionsOrParentOrPlace, origin) {
		const message = new VFileMessage(
			// @ts-expect-error: the overloads are fine.
			causeOrReason,
			optionsOrParentOrPlace,
			origin
);
		if (this.path) {
			message.name = this.path + ":" + message.name;
			message.file = this.path;
		}
		message.fatal = false;
		this.messages.push(message);
		return message;
	}
	/**
	* Serialize the file.
	*
	* > **Note**: which encodings are supported depends on the engine.
	* > For info on Node.js, see:
	* > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.
	*
	* @param {string | null | undefined} [encoding='utf8']
	*   Character encoding to understand `value` as when it’s a `Uint8Array`
	*   (default: `'utf-8'`).
	* @returns {string}
	*   Serialized file.
	*/
	toString(encoding) {
		if (this.value === undefined) return "";
		if (typeof this.value === "string") return this.value;
		const decoder = new TextDecoder(encoding || undefined);
		return decoder.decode(this.value);
	}
};
/**
* Assert that `part` is not a path (as in, does not contain `path.sep`).
*
* @param {string | null | undefined} part
*   File path part.
* @param {string} name
*   Part name.
* @returns {undefined}
*   Nothing.
*/
function assertPart(part, name) {
	if (part && part.includes(minpath.sep)) throw new Error("`" + name + "` cannot be a path: did not expect `" + minpath.sep + "`");
}
/**
* Assert that `part` is not empty.
*
* @param {string | undefined} part
*   Thing.
* @param {string} name
*   Part name.
* @returns {asserts part is string}
*   Nothing.
*/
function assertNonEmpty(part, name) {
	if (!part) throw new Error("`" + name + "` cannot be empty");
}
/**
* Assert `path` exists.
*
* @param {string | undefined} path
*   Path.
* @param {string} name
*   Dependency name.
* @returns {asserts path is string}
*   Nothing.
*/
function assertPath(path$72, name) {
	if (!path$72) throw new Error("Setting `" + name + "` requires `path` to be set too");
}
/**
* Assert `value` is an `Uint8Array`.
*
* @param {unknown} value
*   thing.
* @returns {value is Uint8Array}
*   Whether `value` is an `Uint8Array`.
*/
function isUint8Array$1(value) {
	return Boolean(value && typeof value === "object" && "byteLength" in value && "byteOffset" in value);
}

//#endregion
//#region ../node_modules/.pnpm/unified@11.0.5/node_modules/unified/lib/callable-instance.js
const CallableInstance = function(property) {
	const self$1 = this;
	const constr = self$1.constructor;
	const proto = constr.prototype;
	const value = proto[property];
	/** @type {(...parameters: Array<unknown>) => unknown} */
	const apply = function() {
		return value.apply(apply, arguments);
	};
	Object.setPrototypeOf(apply, proto);
	return apply;
};

//#endregion
//#region ../node_modules/.pnpm/unified@11.0.5/node_modules/unified/lib/index.js
var import_extend = __toESM$1(require_extend());
const own = {}.hasOwnProperty;
var Processor = class Processor extends CallableInstance {
	/**
	* Create a processor.
	*/
	constructor() {
		super("copy");
		/**
		* Compiler to use (deprecated).
		*
		* @deprecated
		*   Use `compiler` instead.
		* @type {(
		*   Compiler<
		*     CompileTree extends undefined ? Node : CompileTree,
		*     CompileResult extends undefined ? CompileResults : CompileResult
		*   > |
		*   undefined
		* )}
		*/
		this.Compiler = undefined;
		/**
		* Parser to use (deprecated).
		*
		* @deprecated
		*   Use `parser` instead.
		* @type {(
		*   Parser<ParseTree extends undefined ? Node : ParseTree> |
		*   undefined
		* )}
		*/
		this.Parser = undefined;
		/**
		* Internal list of configured plugins.
		*
		* @deprecated
		*   This is a private internal property and should not be used.
		* @type {Array<PluginTuple<Array<unknown>>>}
		*/
		this.attachers = [];
		/**
		* Compiler to use.
		*
		* @type {(
		*   Compiler<
		*     CompileTree extends undefined ? Node : CompileTree,
		*     CompileResult extends undefined ? CompileResults : CompileResult
		*   > |
		*   undefined
		* )}
		*/
		this.compiler = undefined;
		/**
		* Internal state to track where we are while freezing.
		*
		* @deprecated
		*   This is a private internal property and should not be used.
		* @type {number}
		*/
		this.freezeIndex = -1;
		/**
		* Internal state to track whether we’re frozen.
		*
		* @deprecated
		*   This is a private internal property and should not be used.
		* @type {boolean | undefined}
		*/
		this.frozen = undefined;
		/**
		* Internal state.
		*
		* @deprecated
		*   This is a private internal property and should not be used.
		* @type {Data}
		*/
		this.namespace = {};
		/**
		* Parser to use.
		*
		* @type {(
		*   Parser<ParseTree extends undefined ? Node : ParseTree> |
		*   undefined
		* )}
		*/
		this.parser = undefined;
		/**
		* Internal list of configured transformers.
		*
		* @deprecated
		*   This is a private internal property and should not be used.
		* @type {Pipeline}
		*/
		this.transformers = trough();
	}
	/**
	* Copy a processor.
	*
	* @deprecated
	*   This is a private internal method and should not be used.
	* @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
	*   New *unfrozen* processor ({@linkcode Processor}) that is
	*   configured to work the same as its ancestor.
	*   When the descendant processor is configured in the future it does not
	*   affect the ancestral processor.
	*/
	copy() {
		const destination = new Processor();
		let index$1 = -1;
		while (++index$1 < this.attachers.length) {
			const attacher = this.attachers[index$1];
			destination.use(...attacher);
		}
		destination.data((0, import_extend.default)(true, {}, this.namespace));
		return destination;
	}
	/**
	* Configure the processor with info available to all plugins.
	* Information is stored in an object.
	*
	* Typically, options can be given to a specific plugin, but sometimes it
	* makes sense to have information shared with several plugins.
	* For example, a list of HTML elements that are self-closing, which is
	* needed during all phases.
	*
	* > **Note**: setting information cannot occur on *frozen* processors.
	* > Call the processor first to create a new unfrozen processor.
	*
	* > **Note**: to register custom data in TypeScript, augment the
	* > {@linkcode Data} interface.
	*
	* @example
	*   This example show how to get and set info:
	*
	*   ```js
	*   import {unified} from 'unified'
	*
	*   const processor = unified().data('alpha', 'bravo')
	*
	*   processor.data('alpha') // => 'bravo'
	*
	*   processor.data() // => {alpha: 'bravo'}
	*
	*   processor.data({charlie: 'delta'})
	*
	*   processor.data() // => {charlie: 'delta'}
	*   ```
	*
	* @template {keyof Data} Key
	*
	* @overload
	* @returns {Data}
	*
	* @overload
	* @param {Data} dataset
	* @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
	*
	* @overload
	* @param {Key} key
	* @returns {Data[Key]}
	*
	* @overload
	* @param {Key} key
	* @param {Data[Key]} value
	* @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
	*
	* @param {Data | Key} [key]
	*   Key to get or set, or entire dataset to set, or nothing to get the
	*   entire dataset (optional).
	* @param {Data[Key]} [value]
	*   Value to set (optional).
	* @returns {unknown}
	*   The current processor when setting, the value at `key` when getting, or
	*   the entire dataset when getting without key.
	*/
	data(key, value) {
		if (typeof key === "string") {
			if (arguments.length === 2) {
				assertUnfrozen("data", this.frozen);
				this.namespace[key] = value;
				return this;
			}
			return own.call(this.namespace, key) && this.namespace[key] || undefined;
		}
		if (key) {
			assertUnfrozen("data", this.frozen);
			this.namespace = key;
			return this;
		}
		return this.namespace;
	}
	/**
	* Freeze a processor.
	*
	* Frozen processors are meant to be extended and not to be configured
	* directly.
	*
	* When a processor is frozen it cannot be unfrozen.
	* New processors working the same way can be created by calling the
	* processor.
	*
	* It’s possible to freeze processors explicitly by calling `.freeze()`.
	* Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,
	* `.stringify()`, `.process()`, or `.processSync()` are called.
	*
	* @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
	*   The current processor.
	*/
	freeze() {
		if (this.frozen) return this;
		const self$1 = this;
		while (++this.freezeIndex < this.attachers.length) {
			const [attacher, ...options] = this.attachers[this.freezeIndex];
			if (options[0] === false) continue;
			if (options[0] === true) options[0] = undefined;
			const transformer = attacher.call(self$1, ...options);
			if (typeof transformer === "function") this.transformers.use(transformer);
		}
		this.frozen = true;
		this.freezeIndex = Number.POSITIVE_INFINITY;
		return this;
	}
	/**
	* Parse text to a syntax tree.
	*
	* > **Note**: `parse` freezes the processor if not already *frozen*.
	*
	* > **Note**: `parse` performs the parse phase, not the run phase or other
	* > phases.
	*
	* @param {Compatible | undefined} [file]
	*   file to parse (optional); typically `string` or `VFile`; any value
	*   accepted as `x` in `new VFile(x)`.
	* @returns {ParseTree extends undefined ? Node : ParseTree}
	*   Syntax tree representing `file`.
	*/
	parse(file$2) {
		this.freeze();
		const realFile = vfile(file$2);
		const parser = this.parser || this.Parser;
		assertParser("parse", parser);
		return parser(String(realFile), realFile);
	}
	/**
	* Process the given file as configured on the processor.
	*
	* > **Note**: `process` freezes the processor if not already *frozen*.
	*
	* > **Note**: `process` performs the parse, run, and stringify phases.
	*
	* @overload
	* @param {Compatible | undefined} file
	* @param {ProcessCallback<VFileWithOutput<CompileResult>>} done
	* @returns {undefined}
	*
	* @overload
	* @param {Compatible | undefined} [file]
	* @returns {Promise<VFileWithOutput<CompileResult>>}
	*
	* @param {Compatible | undefined} [file]
	*   File (optional); typically `string` or `VFile`]; any value accepted as
	*   `x` in `new VFile(x)`.
	* @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]
	*   Callback (optional).
	* @returns {Promise<VFile> | undefined}
	*   Nothing if `done` is given.
	*   Otherwise a promise, rejected with a fatal error or resolved with the
	*   processed file.
	*
	*   The parsed, transformed, and compiled value is available at
	*   `file.value` (see note).
	*
	*   > **Note**: unified typically compiles by serializing: most
	*   > compilers return `string` (or `Uint8Array`).
	*   > Some compilers, such as the one configured with
	*   > [`rehype-react`][rehype-react], return other values (in this case, a
	*   > React tree).
	*   > If you’re using a compiler that doesn’t serialize, expect different
	*   > result values.
	*   >
	*   > To register custom results in TypeScript, add them to
	*   > {@linkcode CompileResultMap}.
	*
	*   [rehype-react]: https://github.com/rehypejs/rehype-react
	*/
	process(file$2, done) {
		const self$1 = this;
		this.freeze();
		assertParser("process", this.parser || this.Parser);
		assertCompiler("process", this.compiler || this.Compiler);
		return done ? executor(undefined, done) : new Promise(executor);
		/**
		* @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve
		* @param {(error: Error | undefined) => undefined | void} reject
		* @returns {undefined}
		*/
		function executor(resolve$1, reject) {
			const realFile = vfile(file$2);
			const parseTree = self$1.parse(realFile);
			self$1.run(parseTree, realFile, function(error$2, tree, file$3) {
				if (error$2 || !tree || !file$3) return realDone(error$2);
				const compileTree = tree;
				const compileResult = self$1.stringify(compileTree, file$3);
				if (looksLikeAValue(compileResult)) file$3.value = compileResult;
else file$3.result = compileResult;
				realDone(error$2, file$3);
			});
			/**
			* @param {Error | undefined} error
			* @param {VFileWithOutput<CompileResult> | undefined} [file]
			* @returns {undefined}
			*/
			function realDone(error$2, file$3) {
				if (error$2 || !file$3) reject(error$2);
else if (resolve$1) resolve$1(file$3);
else {
					ok(done, "`done` is defined if `resolve` is not");
					done(undefined, file$3);
				}
			}
		}
	}
	/**
	* Process the given file as configured on the processor.
	*
	* An error is thrown if asynchronous transforms are configured.
	*
	* > **Note**: `processSync` freezes the processor if not already *frozen*.
	*
	* > **Note**: `processSync` performs the parse, run, and stringify phases.
	*
	* @param {Compatible | undefined} [file]
	*   File (optional); typically `string` or `VFile`; any value accepted as
	*   `x` in `new VFile(x)`.
	* @returns {VFileWithOutput<CompileResult>}
	*   The processed file.
	*
	*   The parsed, transformed, and compiled value is available at
	*   `file.value` (see note).
	*
	*   > **Note**: unified typically compiles by serializing: most
	*   > compilers return `string` (or `Uint8Array`).
	*   > Some compilers, such as the one configured with
	*   > [`rehype-react`][rehype-react], return other values (in this case, a
	*   > React tree).
	*   > If you’re using a compiler that doesn’t serialize, expect different
	*   > result values.
	*   >
	*   > To register custom results in TypeScript, add them to
	*   > {@linkcode CompileResultMap}.
	*
	*   [rehype-react]: https://github.com/rehypejs/rehype-react
	*/
	processSync(file$2) {
		/** @type {boolean} */
		let complete = false;
		/** @type {VFileWithOutput<CompileResult> | undefined} */
		let result;
		this.freeze();
		assertParser("processSync", this.parser || this.Parser);
		assertCompiler("processSync", this.compiler || this.Compiler);
		this.process(file$2, realDone);
		assertDone("processSync", "process", complete);
		ok(result, "we either bailed on an error or have a tree");
		return result;
		/**
		* @type {ProcessCallback<VFileWithOutput<CompileResult>>}
		*/
		function realDone(error$2, file$3) {
			complete = true;
			bail(error$2);
			result = file$3;
		}
	}
	/**
	* Run *transformers* on a syntax tree.
	*
	* > **Note**: `run` freezes the processor if not already *frozen*.
	*
	* > **Note**: `run` performs the run phase, not other phases.
	*
	* @overload
	* @param {HeadTree extends undefined ? Node : HeadTree} tree
	* @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done
	* @returns {undefined}
	*
	* @overload
	* @param {HeadTree extends undefined ? Node : HeadTree} tree
	* @param {Compatible | undefined} file
	* @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done
	* @returns {undefined}
	*
	* @overload
	* @param {HeadTree extends undefined ? Node : HeadTree} tree
	* @param {Compatible | undefined} [file]
	* @returns {Promise<TailTree extends undefined ? Node : TailTree>}
	*
	* @param {HeadTree extends undefined ? Node : HeadTree} tree
	*   Tree to transform and inspect.
	* @param {(
	*   RunCallback<TailTree extends undefined ? Node : TailTree> |
	*   Compatible
	* )} [file]
	*   File associated with `node` (optional); any value accepted as `x` in
	*   `new VFile(x)`.
	* @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]
	*   Callback (optional).
	* @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}
	*   Nothing if `done` is given.
	*   Otherwise, a promise rejected with a fatal error or resolved with the
	*   transformed tree.
	*/
	run(tree, file$2, done) {
		assertNode(tree);
		this.freeze();
		const transformers = this.transformers;
		if (!done && typeof file$2 === "function") {
			done = file$2;
			file$2 = undefined;
		}
		return done ? executor(undefined, done) : new Promise(executor);
		/**
		* @param {(
		*   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |
		*   undefined
		* )} resolve
		* @param {(error: Error) => undefined | void} reject
		* @returns {undefined}
		*/
		function executor(resolve$1, reject) {
			ok(typeof file$2 !== "function", "`file` can’t be a `done` anymore, we checked");
			const realFile = vfile(file$2);
			transformers.run(tree, realFile, realDone);
			/**
			* @param {Error | undefined} error
			* @param {Node} outputTree
			* @param {VFile} file
			* @returns {undefined}
			*/
			function realDone(error$2, outputTree, file$3) {
				const resultingTree = outputTree || tree;
				if (error$2) reject(error$2);
else if (resolve$1) resolve$1(resultingTree);
else {
					ok(done, "`done` is defined if `resolve` is not");
					done(undefined, resultingTree, file$3);
				}
			}
		}
	}
	/**
	* Run *transformers* on a syntax tree.
	*
	* An error is thrown if asynchronous transforms are configured.
	*
	* > **Note**: `runSync` freezes the processor if not already *frozen*.
	*
	* > **Note**: `runSync` performs the run phase, not other phases.
	*
	* @param {HeadTree extends undefined ? Node : HeadTree} tree
	*   Tree to transform and inspect.
	* @param {Compatible | undefined} [file]
	*   File associated with `node` (optional); any value accepted as `x` in
	*   `new VFile(x)`.
	* @returns {TailTree extends undefined ? Node : TailTree}
	*   Transformed tree.
	*/
	runSync(tree, file$2) {
		/** @type {boolean} */
		let complete = false;
		/** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */
		let result;
		this.run(tree, file$2, realDone);
		assertDone("runSync", "run", complete);
		ok(result, "we either bailed on an error or have a tree");
		return result;
		/**
		* @type {RunCallback<TailTree extends undefined ? Node : TailTree>}
		*/
		function realDone(error$2, tree$1) {
			bail(error$2);
			result = tree$1;
			complete = true;
		}
	}
	/**
	* Compile a syntax tree.
	*
	* > **Note**: `stringify` freezes the processor if not already *frozen*.
	*
	* > **Note**: `stringify` performs the stringify phase, not the run phase
	* > or other phases.
	*
	* @param {CompileTree extends undefined ? Node : CompileTree} tree
	*   Tree to compile.
	* @param {Compatible | undefined} [file]
	*   File associated with `node` (optional); any value accepted as `x` in
	*   `new VFile(x)`.
	* @returns {CompileResult extends undefined ? Value : CompileResult}
	*   Textual representation of the tree (see note).
	*
	*   > **Note**: unified typically compiles by serializing: most compilers
	*   > return `string` (or `Uint8Array`).
	*   > Some compilers, such as the one configured with
	*   > [`rehype-react`][rehype-react], return other values (in this case, a
	*   > React tree).
	*   > If you’re using a compiler that doesn’t serialize, expect different
	*   > result values.
	*   >
	*   > To register custom results in TypeScript, add them to
	*   > {@linkcode CompileResultMap}.
	*
	*   [rehype-react]: https://github.com/rehypejs/rehype-react
	*/
	stringify(tree, file$2) {
		this.freeze();
		const realFile = vfile(file$2);
		const compiler$1 = this.compiler || this.Compiler;
		assertCompiler("stringify", compiler$1);
		assertNode(tree);
		return compiler$1(tree, realFile);
	}
	/**
	* Configure the processor to use a plugin, a list of usable values, or a
	* preset.
	*
	* If the processor is already using a plugin, the previous plugin
	* configuration is changed based on the options that are passed in.
	* In other words, the plugin is not added a second time.
	*
	* > **Note**: `use` cannot be called on *frozen* processors.
	* > Call the processor first to create a new unfrozen processor.
	*
	* @example
	*   There are many ways to pass plugins to `.use()`.
	*   This example gives an overview:
	*
	*   ```js
	*   import {unified} from 'unified'
	*
	*   unified()
	*     // Plugin with options:
	*     .use(pluginA, {x: true, y: true})
	*     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):
	*     .use(pluginA, {y: false, z: true})
	*     // Plugins:
	*     .use([pluginB, pluginC])
	*     // Two plugins, the second with options:
	*     .use([pluginD, [pluginE, {}]])
	*     // Preset with plugins and settings:
	*     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})
	*     // Settings only:
	*     .use({settings: {position: false}})
	*   ```
	*
	* @template {Array<unknown>} [Parameters=[]]
	* @template {Node | string | undefined} [Input=undefined]
	* @template [Output=Input]
	*
	* @overload
	* @param {Preset | null | undefined} [preset]
	* @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
	*
	* @overload
	* @param {PluggableList} list
	* @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
	*
	* @overload
	* @param {Plugin<Parameters, Input, Output>} plugin
	* @param {...(Parameters | [boolean])} parameters
	* @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}
	*
	* @param {PluggableList | Plugin | Preset | null | undefined} value
	*   Usable value.
	* @param {...unknown} parameters
	*   Parameters, when a plugin is given as a usable value.
	* @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
	*   Current processor.
	*/
	use(value, ...parameters) {
		const attachers = this.attachers;
		const namespace = this.namespace;
		assertUnfrozen("use", this.frozen);
		if (value === null || value === undefined) {} else if (typeof value === "function") addPlugin(value, parameters);
else if (typeof value === "object") if (Array.isArray(value)) addList(value);
else addPreset(value);
else throw new TypeError("Expected usable value, not `" + value + "`");
		return this;
		/**
		* @param {Pluggable} value
		* @returns {undefined}
		*/
		function add$1(value$1) {
			if (typeof value$1 === "function") addPlugin(value$1, []);
else if (typeof value$1 === "object") if (Array.isArray(value$1)) {
				const [plugin, ...parameters$1] = value$1;
				addPlugin(plugin, parameters$1);
			} else addPreset(value$1);
else throw new TypeError("Expected usable value, not `" + value$1 + "`");
		}
		/**
		* @param {Preset} result
		* @returns {undefined}
		*/
		function addPreset(result) {
			if (!("plugins" in result) && !("settings" in result)) throw new Error("Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither");
			addList(result.plugins);
			if (result.settings) namespace.settings = (0, import_extend.default)(true, namespace.settings, result.settings);
		}
		/**
		* @param {PluggableList | null | undefined} plugins
		* @returns {undefined}
		*/
		function addList(plugins) {
			let index$1 = -1;
			if (plugins === null || plugins === undefined) {} else if (Array.isArray(plugins)) while (++index$1 < plugins.length) {
				const thing = plugins[index$1];
				add$1(thing);
			}
else throw new TypeError("Expected a list of plugins, not `" + plugins + "`");
		}
		/**
		* @param {Plugin} plugin
		* @param {Array<unknown>} parameters
		* @returns {undefined}
		*/
		function addPlugin(plugin, parameters$1) {
			let index$1 = -1;
			let entryIndex = -1;
			while (++index$1 < attachers.length) if (attachers[index$1][0] === plugin) {
				entryIndex = index$1;
				break;
			}
			if (entryIndex === -1) attachers.push([plugin, ...parameters$1]);
else if (parameters$1.length > 0) {
				let [primary, ...rest] = parameters$1;
				const currentPrimary = attachers[entryIndex][1];
				if (isPlainObject(currentPrimary) && isPlainObject(primary)) primary = (0, import_extend.default)(true, currentPrimary, primary);
				attachers[entryIndex] = [
					plugin,
					primary,
					...rest
				];
			}
		}
	}
};
const unified = new Processor().freeze();
/**
* Assert a parser is available.
*
* @param {string} name
* @param {unknown} value
* @returns {asserts value is Parser}
*/
function assertParser(name, value) {
	if (typeof value !== "function") throw new TypeError("Cannot `" + name + "` without `parser`");
}
/**
* Assert a compiler is available.
*
* @param {string} name
* @param {unknown} value
* @returns {asserts value is Compiler}
*/
function assertCompiler(name, value) {
	if (typeof value !== "function") throw new TypeError("Cannot `" + name + "` without `compiler`");
}
/**
* Assert the processor is not frozen.
*
* @param {string} name
* @param {unknown} frozen
* @returns {asserts frozen is false}
*/
function assertUnfrozen(name, frozen) {
	if (frozen) throw new Error("Cannot call `" + name + "` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.");
}
/**
* Assert `node` is a unist node.
*
* @param {unknown} node
* @returns {asserts node is Node}
*/
function assertNode(node$1) {
	if (!isPlainObject(node$1) || typeof node$1.type !== "string") throw new TypeError("Expected node, got `" + node$1 + "`");
}
/**
* Assert that `complete` is `true`.
*
* @param {string} name
* @param {string} asyncName
* @param {unknown} complete
* @returns {asserts complete is true}
*/
function assertDone(name, asyncName, complete) {
	if (!complete) throw new Error("`" + name + "` finished async. Use `" + asyncName + "` instead");
}
/**
* @param {Compatible | undefined} [value]
* @returns {VFile}
*/
function vfile(value) {
	return looksLikeAVFile(value) ? value : new VFile(value);
}
/**
* @param {Compatible | undefined} [value]
* @returns {value is VFile}
*/
function looksLikeAVFile(value) {
	return Boolean(value && typeof value === "object" && "message" in value && "messages" in value);
}
/**
* @param {unknown} [value]
* @returns {value is Value}
*/
function looksLikeAValue(value) {
	return typeof value === "string" || isUint8Array(value);
}
/**
* Assert `value` is an `Uint8Array`.
*
* @param {unknown} value
*   thing.
* @returns {value is Uint8Array}
*   Whether `value` is an `Uint8Array`.
*/
function isUint8Array(value) {
	return Boolean(value && typeof value === "object" && "byteLength" in value && "byteOffset" in value);
}

//#endregion
//#region src/utils.ts
var import_manypkg_get_packages_cjs$2 = __toESM$1(require_manypkg_get_packages_cjs());
var import_resolve_from$1 = __toESM$1(require_resolve_from());
const MAX_CHARACTERS_PER_MESSAGE = 6e4;
const BumpLevels = {
	dep: 0,
	patch: 1,
	minor: 2,
	major: 3
};
const getChangelogEntry = (changelog, version) => {
	const ast = unified().use(remarkParse).parse(changelog);
	let highestLevel = BumpLevels.dep;
	const nodes = ast.children;
	let headingStartInfo;
	let endIndex;
	for (let i$2 = 0; i$2 < nodes.length; i$2++) {
		const node$1 = nodes[i$2];
		if (node$1.type === "heading") {
			const stringified = toString(node$1);
			const match = stringified.toLowerCase().match(/(major|minor|patch)/);
			if (match !== null) {
				const level = BumpLevels[match[0]];
				highestLevel = Math.max(level, highestLevel);
			}
			if (headingStartInfo === undefined && stringified === version) {
				headingStartInfo = {
					index: i$2,
					depth: node$1.depth
				};
				continue;
			}
			if (endIndex === undefined && headingStartInfo !== undefined && headingStartInfo.depth === node$1.depth) {
				endIndex = i$2;
				break;
			}
		}
	}
	if (headingStartInfo) ast.children = ast.children.slice(headingStartInfo.index + 1, endIndex);
	return {
		content: unified().use(remarkStringify).stringify(ast),
		highestLevel
	};
};
const getVersionPrBody = async ({ branch, cwd: cwd$1, versionsByDirectory }) => {
	const { packages } = await (0, import_manypkg_get_packages_cjs$2.getPackages)(cwd$1);
	const changedPackagesSet = new Set();
	for (const pkg of packages) {
		const previousVersion = versionsByDirectory.get(pkg.dir);
		if (previousVersion !== pkg.packageJson.version) changedPackagesSet.add(pkg);
	}
	const changedPackages = Array.from(changedPackagesSet);
	const changedPackagesInfo = await Promise.all(changedPackages.map(async (pkg) => {
		const changelogContents = await readFile$1(join$2(pkg.dir, "CHANGELOG.md"), "utf8");
		const entry = getChangelogEntry(changelogContents, pkg.packageJson.version);
		return {
			highestLevel: entry.highestLevel,
			content: entry.content,
			header: `## ${pkg.packageJson.name}@${pkg.packageJson.version}`
		};
	}));
	const messageHeader = `\
This PR was opened by the [Changesets release](https://github.com/YutaUra/actions) GitHub action. \
When you're ready to do a release, you can merge this and the action will be released automatically. \
If you're not ready to do a release yet, that's fine, whenever you add more changesets to ${branch}, this PR will be updated.
`;
	const messageReleasesHeading = "# Releases";
	let fullMessage = [
		messageHeader,
		messageReleasesHeading,
		...changedPackagesInfo.map((info$2) => `${info$2.header}\n\n${info$2.content}`)
	].join("\n");
	if (fullMessage.length > MAX_CHARACTERS_PER_MESSAGE) fullMessage = [
		messageHeader,
		messageReleasesHeading,
		"\n> The changelog information of each package has been omitted from this message, as the content exceeds the size limit.\n",
		...changedPackagesInfo.map((info$2) => `${info$2.header}\n\n`)
	].join("\n");
	if (fullMessage.length > MAX_CHARACTERS_PER_MESSAGE) fullMessage = [
		messageHeader,
		messageReleasesHeading,
		"\n> All release information have been omitted from this message, as the content exceeds the size limit."
	].join("\n");
	return fullMessage;
};
const requireChangesetsCliPkgJson = (cwd$1) => {
	try {
		return require((0, import_resolve_from$1.default)(cwd$1, "@changesets/cli/package.json"));
	} catch (err) {
		if (err && typeof err === "object" && "code" in err && err.code === "MODULE_NOT_FOUND") throw new Error(`Have you forgotten to install \`@changesets/cli\` in "${cwd$1}"?`);
		throw err;
	}
};
const escapeMarkdownString = (content$2) => content$2.replaceAll("__", "\\_\\_");

//#endregion
//#region src/utils/git.ts
var import_core$4 = __toESM$1(require_core$2());
var import_exec$1 = __toESM$1(require_exec());
const DEFAULT_GITHUB_ACTION_NAME = "github-actions[bot]";
const DEFAULT_GITHUB_ACTION_EMAIL = "41898282+github-actions[bot]@users.noreply.github.com";
const configure = async (cwd$1) => {
	await (0, import_exec$1.exec)("git", [
		"config",
		"user.name",
		DEFAULT_GITHUB_ACTION_NAME
	], { cwd: cwd$1 });
	await (0, import_exec$1.exec)("git", [
		"config",
		"user.email",
		DEFAULT_GITHUB_ACTION_EMAIL
	], { cwd: cwd$1 });
};
const fetchIsTagExistsOnRemote = async (cwd$1, tag$2) => {
	const result = await (0, import_exec$1.getExecOutput)("git", [
		"ls-remote",
		"--tags",
		"origin",
		tag$2
	], { cwd: cwd$1 });
	if (result.exitCode !== 0) throw new Error(`Failed to check if tag ${tag$2} exists: ${result.stderr}`);
	return result.stdout.includes(tag$2);
};
const tag = async (cwd$1, tag$2) => {
	await (0, import_exec$1.exec)("git", ["tag", tag$2], { cwd: cwd$1 });
};
const pushTag = async (cwd$1) => {
	await (0, import_exec$1.getExecOutput)("git", ["push", "--tags"], { cwd: cwd$1 });
};
const commit = async (cwd$1, message, files = ".") => {
	await (0, import_exec$1.exec)("git", ["add", ...Array.isArray(files) ? files : [files]], { cwd: cwd$1 });
	await (0, import_exec$1.exec)("git", [
		"commit",
		"-m",
		message
	], { cwd: cwd$1 });
};
const push = async (cwd$1, remoteBranch, token) => {
	if (!token) {
		await (0, import_exec$1.exec)("git", [
			"push",
			"origin",
			`HEAD:${remoteBranch}`,
			"--force"
		], { cwd: cwd$1 });
		return;
	}
	const credentials = Buffer.from(`x-access-token:${token}`).toString("base64");
	(0, import_core$4.setSecret)(credentials);
	await (0, import_exec$1.exec)("git", [
		"-c",
		"http.https://github.com/.extraheader=",
		"-c",
		`http.https://github.com/.extraheader=AUTHORIZATION: basic ${credentials}`,
		"push",
		"origin",
		`HEAD:${remoteBranch}`,
		"--force"
	], { cwd: cwd$1 });
};
const switchBranch = async (cwd$1, branch) => {
	const { stderr } = await (0, import_exec$1.getExecOutput)("git", [
		"switch",
		"-c",
		branch
	], {
		cwd: cwd$1,
		ignoreReturnCode: true
	});
	const isCreatingBranch = !stderr.toString().includes(`Switched to a new branch '${branch}'`);
	if (!isCreatingBranch) await (0, import_exec$1.exec)("git", ["switch", branch], { cwd: cwd$1 });
};
const resetHard = async (cwd$1, target) => {
	await (0, import_exec$1.exec)("git", [
		"reset",
		"--hard",
		target
	], { cwd: cwd$1 });
};
const autoMerge = async (prNumber, context$1, octokit) => {
	const { repository: { pullRequest } } = await octokit.graphql(`
    query GetPullRequest($name: String!, $owner: String!, $prNumber: Int!) {
      repository(name: $name, owner: $owner) {
        pullRequest(number: $prNumber) {
          id
        }
      } 
    } 
`, {
		owner: context$1.repo.owner,
		name: context$1.repo.repo,
		prNumber
	});
	await octokit.graphql(`
    mutation EnableAutoMerge($pullRequestId: ID!) {
      enablePullRequestAutoMerge(input: {pullRequestId: $pullRequestId, mergeMethod: MERGE}) {
        clientMutationId
      }
    }
`, { pullRequestId: pullRequest.id });
};
const isDirty = async (cwd$1) => {
	const { stdout } = await (0, import_exec$1.getExecOutput)("git", ["status", "--porcelain"], { cwd: cwd$1 });
	return stdout.trim().length > 0;
};

//#endregion
//#region src/publish.ts
var import_core$3 = __toESM$1(require_core$2());
var import_manypkg_get_packages_cjs$1 = __toESM$1(require_manypkg_get_packages_cjs());
const execAsync = promisify(exec$1);
const runPublish = async (inputs$1) => {
	const { rootPackage } = await (0, import_manypkg_get_packages_cjs$1.getPackages)(inputs$1.cwd);
	const version = rootPackage?.packageJson.version;
	if (!version) throw new Error("No version found in root package.json");
	const isTagExists = await fetchIsTagExistsOnRemote(inputs$1.cwd, `v${version}`);
	if (isTagExists) {
		import_core$3.info(`v${version} tag already exists`);
		import_core$3.info("Skipping release");
		return { published: false };
	}
	if (inputs$1["setup-git-user"]) await configure(inputs$1.cwd);
	if (inputs$1["pre-tag-script"] && inputs$1["pre-tag-script"].trim().length > 0) {
		await execAsync(inputs$1["pre-tag-script"].trim(), { cwd: inputs$1.cwd });
		if (await isDirty(inputs$1.cwd)) await commit(inputs$1.cwd, "pre tag script result", ".");
	}
	await tag(inputs$1.cwd, `v${version}`);
	await pushTag(inputs$1.cwd);
	const { packages, rootDir } = await (0, import_manypkg_get_packages_cjs$1.getPackages)(inputs$1.cwd);
	const entries = await Promise.all(packages.map(async ({ dir, packageJson }) => {
		const changelogFileName = join$1(dir, "CHANGELOG.md");
		const changelog = await readFile(changelogFileName, "utf8");
		const content$2 = getChangelogEntry(changelog, version).content.trim();
		const headerLevel = rootDir === dir ? "#" : "#";
		if (!content$2) return `${headerLevel} ${escapeMarkdownString(packageJson.name)} v${version}`;
		return `\
${headerLevel} ${escapeMarkdownString(packageJson.name)} v${version}

${content$2}
`;
	}));
	await inputs$1.octokit.rest.repos.createRelease({
		...inputs$1.context.repo,
		name: `v${version}`,
		tag_name: `v${version}`,
		body: entries.join("\n\n")
	});
	return { published: true };
};

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/constants.js
var require_constants = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/constants.js"(exports, module) {
	const SEMVER_SPEC_VERSION = "2.0.0";
	const MAX_LENGTH$2 = 256;
	const MAX_SAFE_INTEGER$1 = Number.MAX_SAFE_INTEGER || 9007199254740991;
	const MAX_SAFE_COMPONENT_LENGTH$1 = 16;
	const MAX_SAFE_BUILD_LENGTH$1 = MAX_LENGTH$2 - 6;
	const RELEASE_TYPES = [
		"major",
		"premajor",
		"minor",
		"preminor",
		"patch",
		"prepatch",
		"prerelease"
	];
	module.exports = {
		MAX_LENGTH: MAX_LENGTH$2,
		MAX_SAFE_COMPONENT_LENGTH: MAX_SAFE_COMPONENT_LENGTH$1,
		MAX_SAFE_BUILD_LENGTH: MAX_SAFE_BUILD_LENGTH$1,
		MAX_SAFE_INTEGER: MAX_SAFE_INTEGER$1,
		RELEASE_TYPES,
		SEMVER_SPEC_VERSION,
		FLAG_INCLUDE_PRERELEASE: 1,
		FLAG_LOOSE: 2
	};
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/debug.js
var require_debug = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/debug.js"(exports, module) {
	const debug$4 = typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {};
	module.exports = debug$4;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/re.js
var require_re = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/re.js"(exports, module) {
	const { MAX_SAFE_COMPONENT_LENGTH, MAX_SAFE_BUILD_LENGTH, MAX_LENGTH: MAX_LENGTH$1 } = require_constants();
	const debug$3 = require_debug();
	exports = module.exports = {};
	const re$4 = exports.re = [];
	const safeRe = exports.safeRe = [];
	const src = exports.src = [];
	const t$4 = exports.t = {};
	let R = 0;
	const LETTERDASHNUMBER = "[a-zA-Z0-9-]";
	const safeRegexReplacements = [
		["\\s", 1],
		["\\d", MAX_LENGTH$1],
		[LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH]
	];
	const makeSafeRegex = (value) => {
		for (const [token, max] of safeRegexReplacements) value = value.split(`${token}*`).join(`${token}{0,${max}}`).split(`${token}+`).join(`${token}{1,${max}}`);
		return value;
	};
	const createToken = (name, value, isGlobal) => {
		const safe$1 = makeSafeRegex(value);
		const index$1 = R++;
		debug$3(name, index$1, value);
		t$4[name] = index$1;
		src[index$1] = value;
		re$4[index$1] = new RegExp(value, isGlobal ? "g" : undefined);
		safeRe[index$1] = new RegExp(safe$1, isGlobal ? "g" : undefined);
	};
	createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
	createToken("NUMERICIDENTIFIERLOOSE", "\\d+");
	createToken("NONNUMERICIDENTIFIER", `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);
	createToken("MAINVERSION", `(${src[t$4.NUMERICIDENTIFIER]})\\.` + `(${src[t$4.NUMERICIDENTIFIER]})\\.` + `(${src[t$4.NUMERICIDENTIFIER]})`);
	createToken("MAINVERSIONLOOSE", `(${src[t$4.NUMERICIDENTIFIERLOOSE]})\\.` + `(${src[t$4.NUMERICIDENTIFIERLOOSE]})\\.` + `(${src[t$4.NUMERICIDENTIFIERLOOSE]})`);
	createToken("PRERELEASEIDENTIFIER", `(?:${src[t$4.NUMERICIDENTIFIER]}|${src[t$4.NONNUMERICIDENTIFIER]})`);
	createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t$4.NUMERICIDENTIFIERLOOSE]}|${src[t$4.NONNUMERICIDENTIFIER]})`);
	createToken("PRERELEASE", `(?:-(${src[t$4.PRERELEASEIDENTIFIER]}(?:\\.${src[t$4.PRERELEASEIDENTIFIER]})*))`);
	createToken("PRERELEASELOOSE", `(?:-?(${src[t$4.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t$4.PRERELEASEIDENTIFIERLOOSE]})*))`);
	createToken("BUILDIDENTIFIER", `${LETTERDASHNUMBER}+`);
	createToken("BUILD", `(?:\\+(${src[t$4.BUILDIDENTIFIER]}(?:\\.${src[t$4.BUILDIDENTIFIER]})*))`);
	createToken("FULLPLAIN", `v?${src[t$4.MAINVERSION]}${src[t$4.PRERELEASE]}?${src[t$4.BUILD]}?`);
	createToken("FULL", `^${src[t$4.FULLPLAIN]}$`);
	createToken("LOOSEPLAIN", `[v=\\s]*${src[t$4.MAINVERSIONLOOSE]}${src[t$4.PRERELEASELOOSE]}?${src[t$4.BUILD]}?`);
	createToken("LOOSE", `^${src[t$4.LOOSEPLAIN]}$`);
	createToken("GTLT", "((?:<|>)?=?)");
	createToken("XRANGEIDENTIFIERLOOSE", `${src[t$4.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
	createToken("XRANGEIDENTIFIER", `${src[t$4.NUMERICIDENTIFIER]}|x|X|\\*`);
	createToken("XRANGEPLAIN", `[v=\\s]*(${src[t$4.XRANGEIDENTIFIER]})` + `(?:\\.(${src[t$4.XRANGEIDENTIFIER]})` + `(?:\\.(${src[t$4.XRANGEIDENTIFIER]})` + `(?:${src[t$4.PRERELEASE]})?${src[t$4.BUILD]}?` + `)?)?`);
	createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t$4.XRANGEIDENTIFIERLOOSE]})` + `(?:\\.(${src[t$4.XRANGEIDENTIFIERLOOSE]})` + `(?:\\.(${src[t$4.XRANGEIDENTIFIERLOOSE]})` + `(?:${src[t$4.PRERELEASELOOSE]})?${src[t$4.BUILD]}?` + `)?)?`);
	createToken("XRANGE", `^${src[t$4.GTLT]}\\s*${src[t$4.XRANGEPLAIN]}$`);
	createToken("XRANGELOOSE", `^${src[t$4.GTLT]}\\s*${src[t$4.XRANGEPLAINLOOSE]}$`);
	createToken("COERCEPLAIN", `${"(^|[^\\d])(\\d{1,"}${MAX_SAFE_COMPONENT_LENGTH}})` + `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` + `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`);
	createToken("COERCE", `${src[t$4.COERCEPLAIN]}(?:$|[^\\d])`);
	createToken("COERCEFULL", src[t$4.COERCEPLAIN] + `(?:${src[t$4.PRERELEASE]})?` + `(?:${src[t$4.BUILD]})?` + `(?:$|[^\\d])`);
	createToken("COERCERTL", src[t$4.COERCE], true);
	createToken("COERCERTLFULL", src[t$4.COERCEFULL], true);
	createToken("LONETILDE", "(?:~>?)");
	createToken("TILDETRIM", `(\\s*)${src[t$4.LONETILDE]}\\s+`, true);
	exports.tildeTrimReplace = "$1~";
	createToken("TILDE", `^${src[t$4.LONETILDE]}${src[t$4.XRANGEPLAIN]}$`);
	createToken("TILDELOOSE", `^${src[t$4.LONETILDE]}${src[t$4.XRANGEPLAINLOOSE]}$`);
	createToken("LONECARET", "(?:\\^)");
	createToken("CARETTRIM", `(\\s*)${src[t$4.LONECARET]}\\s+`, true);
	exports.caretTrimReplace = "$1^";
	createToken("CARET", `^${src[t$4.LONECARET]}${src[t$4.XRANGEPLAIN]}$`);
	createToken("CARETLOOSE", `^${src[t$4.LONECARET]}${src[t$4.XRANGEPLAINLOOSE]}$`);
	createToken("COMPARATORLOOSE", `^${src[t$4.GTLT]}\\s*(${src[t$4.LOOSEPLAIN]})$|^$`);
	createToken("COMPARATOR", `^${src[t$4.GTLT]}\\s*(${src[t$4.FULLPLAIN]})$|^$`);
	createToken("COMPARATORTRIM", `(\\s*)${src[t$4.GTLT]}\\s*(${src[t$4.LOOSEPLAIN]}|${src[t$4.XRANGEPLAIN]})`, true);
	exports.comparatorTrimReplace = "$1$2$3";
	createToken("HYPHENRANGE", `^\\s*(${src[t$4.XRANGEPLAIN]})` + `\\s+-\\s+` + `(${src[t$4.XRANGEPLAIN]})` + `\\s*$`);
	createToken("HYPHENRANGELOOSE", `^\\s*(${src[t$4.XRANGEPLAINLOOSE]})` + `\\s+-\\s+` + `(${src[t$4.XRANGEPLAINLOOSE]})` + `\\s*$`);
	createToken("STAR", "(<|>)?=?\\s*\\*");
	createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
	createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/parse-options.js
var require_parse_options = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/parse-options.js"(exports, module) {
	const looseOption = Object.freeze({ loose: true });
	const emptyOpts = Object.freeze({});
	const parseOptions$3 = (options) => {
		if (!options) return emptyOpts;
		if (typeof options !== "object") return looseOption;
		return options;
	};
	module.exports = parseOptions$3;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/identifiers.js
var require_identifiers = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/identifiers.js"(exports, module) {
	const numeric = /^[0-9]+$/;
	const compareIdentifiers$1 = (a, b) => {
		const anum = numeric.test(a);
		const bnum = numeric.test(b);
		if (anum && bnum) {
			a = +a;
			b = +b;
		}
		return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
	};
	const rcompareIdentifiers = (a, b) => compareIdentifiers$1(b, a);
	module.exports = {
		compareIdentifiers: compareIdentifiers$1,
		rcompareIdentifiers
	};
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/semver.js
var require_semver$1 = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/semver.js"(exports, module) {
	const debug$2 = require_debug();
	const { MAX_LENGTH, MAX_SAFE_INTEGER } = require_constants();
	const { safeRe: re$3, t: t$3 } = require_re();
	const parseOptions$2 = require_parse_options();
	const { compareIdentifiers } = require_identifiers();
	var SemVer$15 = class SemVer$15 {
		constructor(version, options) {
			options = parseOptions$2(options);
			if (version instanceof SemVer$15) if (version.loose === !!options.loose && version.includePrerelease === !!options.includePrerelease) return version;
else version = version.version;
else if (typeof version !== "string") throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version}".`);
			if (version.length > MAX_LENGTH) throw new TypeError(`version is longer than ${MAX_LENGTH} characters`);
			debug$2("SemVer", version, options);
			this.options = options;
			this.loose = !!options.loose;
			this.includePrerelease = !!options.includePrerelease;
			const m = version.trim().match(options.loose ? re$3[t$3.LOOSE] : re$3[t$3.FULL]);
			if (!m) throw new TypeError(`Invalid Version: ${version}`);
			this.raw = version;
			this.major = +m[1];
			this.minor = +m[2];
			this.patch = +m[3];
			if (this.major > MAX_SAFE_INTEGER || this.major < 0) throw new TypeError("Invalid major version");
			if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) throw new TypeError("Invalid minor version");
			if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) throw new TypeError("Invalid patch version");
			if (!m[4]) this.prerelease = [];
else this.prerelease = m[4].split(".").map((id) => {
				if (/^[0-9]+$/.test(id)) {
					const num = +id;
					if (num >= 0 && num < MAX_SAFE_INTEGER) return num;
				}
				return id;
			});
			this.build = m[5] ? m[5].split(".") : [];
			this.format();
		}
		format() {
			this.version = `${this.major}.${this.minor}.${this.patch}`;
			if (this.prerelease.length) this.version += `-${this.prerelease.join(".")}`;
			return this.version;
		}
		toString() {
			return this.version;
		}
		compare(other) {
			debug$2("SemVer.compare", this.version, this.options, other);
			if (!(other instanceof SemVer$15)) {
				if (typeof other === "string" && other === this.version) return 0;
				other = new SemVer$15(other, this.options);
			}
			if (other.version === this.version) return 0;
			return this.compareMain(other) || this.comparePre(other);
		}
		compareMain(other) {
			if (!(other instanceof SemVer$15)) other = new SemVer$15(other, this.options);
			return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
		}
		comparePre(other) {
			if (!(other instanceof SemVer$15)) other = new SemVer$15(other, this.options);
			if (this.prerelease.length && !other.prerelease.length) return -1;
else if (!this.prerelease.length && other.prerelease.length) return 1;
else if (!this.prerelease.length && !other.prerelease.length) return 0;
			let i$2 = 0;
			do {
				const a = this.prerelease[i$2];
				const b = other.prerelease[i$2];
				debug$2("prerelease compare", i$2, a, b);
				if (a === undefined && b === undefined) return 0;
else if (b === undefined) return 1;
else if (a === undefined) return -1;
else if (a === b) continue;
else return compareIdentifiers(a, b);
			} while (++i$2);
		}
		compareBuild(other) {
			if (!(other instanceof SemVer$15)) other = new SemVer$15(other, this.options);
			let i$2 = 0;
			do {
				const a = this.build[i$2];
				const b = other.build[i$2];
				debug$2("build compare", i$2, a, b);
				if (a === undefined && b === undefined) return 0;
else if (b === undefined) return 1;
else if (a === undefined) return -1;
else if (a === b) continue;
else return compareIdentifiers(a, b);
			} while (++i$2);
		}
		inc(release, identifier, identifierBase) {
			switch (release) {
				case "premajor":
					this.prerelease.length = 0;
					this.patch = 0;
					this.minor = 0;
					this.major++;
					this.inc("pre", identifier, identifierBase);
					break;
				case "preminor":
					this.prerelease.length = 0;
					this.patch = 0;
					this.minor++;
					this.inc("pre", identifier, identifierBase);
					break;
				case "prepatch":
					this.prerelease.length = 0;
					this.inc("patch", identifier, identifierBase);
					this.inc("pre", identifier, identifierBase);
					break;
				case "prerelease":
					if (this.prerelease.length === 0) this.inc("patch", identifier, identifierBase);
					this.inc("pre", identifier, identifierBase);
					break;
				case "major":
					if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) this.major++;
					this.minor = 0;
					this.patch = 0;
					this.prerelease = [];
					break;
				case "minor":
					if (this.patch !== 0 || this.prerelease.length === 0) this.minor++;
					this.patch = 0;
					this.prerelease = [];
					break;
				case "patch":
					if (this.prerelease.length === 0) this.patch++;
					this.prerelease = [];
					break;
				case "pre": {
					const base = Number(identifierBase) ? 1 : 0;
					if (!identifier && identifierBase === false) throw new Error("invalid increment argument: identifier is empty");
					if (this.prerelease.length === 0) this.prerelease = [base];
else {
						let i$2 = this.prerelease.length;
						while (--i$2 >= 0) if (typeof this.prerelease[i$2] === "number") {
							this.prerelease[i$2]++;
							i$2 = -2;
						}
						if (i$2 === -1) {
							if (identifier === this.prerelease.join(".") && identifierBase === false) throw new Error("invalid increment argument: identifier already exists");
							this.prerelease.push(base);
						}
					}
					if (identifier) {
						let prerelease$2 = [identifier, base];
						if (identifierBase === false) prerelease$2 = [identifier];
						if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
							if (isNaN(this.prerelease[1])) this.prerelease = prerelease$2;
						} else this.prerelease = prerelease$2;
					}
					break;
				}
				default: throw new Error(`invalid increment argument: ${release}`);
			}
			this.raw = this.format();
			if (this.build.length) this.raw += `+${this.build.join(".")}`;
			return this;
		}
	};
	module.exports = SemVer$15;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/parse.js
var require_parse = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/parse.js"(exports, module) {
	const SemVer$14 = require_semver$1();
	const parse$6 = (version, options, throwErrors = false) => {
		if (version instanceof SemVer$14) return version;
		try {
			return new SemVer$14(version, options);
		} catch (er) {
			if (!throwErrors) return null;
			throw er;
		}
	};
	module.exports = parse$6;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/valid.js
var require_valid$1 = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/valid.js"(exports, module) {
	const parse$5 = require_parse();
	const valid$1 = (version, options) => {
		const v = parse$5(version, options);
		return v ? v.version : null;
	};
	module.exports = valid$1;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/clean.js
var require_clean = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/clean.js"(exports, module) {
	const parse$4 = require_parse();
	const clean$1 = (version, options) => {
		const s = parse$4(version.trim().replace(/^[=v]+/, ""), options);
		return s ? s.version : null;
	};
	module.exports = clean$1;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/inc.js
var require_inc = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/inc.js"(exports, module) {
	const SemVer$13 = require_semver$1();
	const inc$1 = (version, release, options, identifier, identifierBase) => {
		if (typeof options === "string") {
			identifierBase = identifier;
			identifier = options;
			options = undefined;
		}
		try {
			return new SemVer$13(version instanceof SemVer$13 ? version.version : version, options).inc(release, identifier, identifierBase).version;
		} catch (er) {
			return null;
		}
	};
	module.exports = inc$1;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/diff.js
var require_diff = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/diff.js"(exports, module) {
	const parse$3 = require_parse();
	const diff$1 = (version1, version2) => {
		const v1 = parse$3(version1, null, true);
		const v2 = parse$3(version2, null, true);
		const comparison = v1.compare(v2);
		if (comparison === 0) return null;
		const v1Higher = comparison > 0;
		const highVersion = v1Higher ? v1 : v2;
		const lowVersion = v1Higher ? v2 : v1;
		const highHasPre = !!highVersion.prerelease.length;
		const lowHasPre = !!lowVersion.prerelease.length;
		if (lowHasPre && !highHasPre) {
			if (!lowVersion.patch && !lowVersion.minor) return "major";
			if (highVersion.patch) return "patch";
			if (highVersion.minor) return "minor";
			return "major";
		}
		const prefix$1 = highHasPre ? "pre" : "";
		if (v1.major !== v2.major) return prefix$1 + "major";
		if (v1.minor !== v2.minor) return prefix$1 + "minor";
		if (v1.patch !== v2.patch) return prefix$1 + "patch";
		return "prerelease";
	};
	module.exports = diff$1;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/major.js
var require_major = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/major.js"(exports, module) {
	const SemVer$12 = require_semver$1();
	const major$1 = (a, loose) => new SemVer$12(a, loose).major;
	module.exports = major$1;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/minor.js
var require_minor = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/minor.js"(exports, module) {
	const SemVer$11 = require_semver$1();
	const minor$1 = (a, loose) => new SemVer$11(a, loose).minor;
	module.exports = minor$1;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/patch.js
var require_patch = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/patch.js"(exports, module) {
	const SemVer$10 = require_semver$1();
	const patch$1 = (a, loose) => new SemVer$10(a, loose).patch;
	module.exports = patch$1;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/prerelease.js
var require_prerelease = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/prerelease.js"(exports, module) {
	const parse$2 = require_parse();
	const prerelease$1 = (version, options) => {
		const parsed = parse$2(version, options);
		return parsed && parsed.prerelease.length ? parsed.prerelease : null;
	};
	module.exports = prerelease$1;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/compare.js
var require_compare = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/compare.js"(exports, module) {
	const SemVer$9 = require_semver$1();
	const compare$11 = (a, b, loose) => new SemVer$9(a, loose).compare(new SemVer$9(b, loose));
	module.exports = compare$11;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/rcompare.js
var require_rcompare = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/rcompare.js"(exports, module) {
	const compare$10 = require_compare();
	const rcompare$1 = (a, b, loose) => compare$10(b, a, loose);
	module.exports = rcompare$1;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/compare-loose.js
var require_compare_loose = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/compare-loose.js"(exports, module) {
	const compare$9 = require_compare();
	const compareLoose$1 = (a, b) => compare$9(a, b, true);
	module.exports = compareLoose$1;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/compare-build.js
var require_compare_build = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/compare-build.js"(exports, module) {
	const SemVer$8 = require_semver$1();
	const compareBuild$3 = (a, b, loose) => {
		const versionA = new SemVer$8(a, loose);
		const versionB = new SemVer$8(b, loose);
		return versionA.compare(versionB) || versionA.compareBuild(versionB);
	};
	module.exports = compareBuild$3;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/sort.js
var require_sort = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/sort.js"(exports, module) {
	const compareBuild$2 = require_compare_build();
	const sort$1 = (list$3, loose) => list$3.sort((a, b) => compareBuild$2(a, b, loose));
	module.exports = sort$1;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/rsort.js
var require_rsort = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/rsort.js"(exports, module) {
	const compareBuild$1 = require_compare_build();
	const rsort$1 = (list$3, loose) => list$3.sort((a, b) => compareBuild$1(b, a, loose));
	module.exports = rsort$1;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/gt.js
var require_gt = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/gt.js"(exports, module) {
	const compare$8 = require_compare();
	const gt$4 = (a, b, loose) => compare$8(a, b, loose) > 0;
	module.exports = gt$4;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/lt.js
var require_lt = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/lt.js"(exports, module) {
	const compare$7 = require_compare();
	const lt$4 = (a, b, loose) => compare$7(a, b, loose) < 0;
	module.exports = lt$4;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/eq.js
var require_eq = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/eq.js"(exports, module) {
	const compare$6 = require_compare();
	const eq$2 = (a, b, loose) => compare$6(a, b, loose) === 0;
	module.exports = eq$2;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/neq.js
var require_neq = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/neq.js"(exports, module) {
	const compare$5 = require_compare();
	const neq$2 = (a, b, loose) => compare$5(a, b, loose) !== 0;
	module.exports = neq$2;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/gte.js
var require_gte = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/gte.js"(exports, module) {
	const compare$4 = require_compare();
	const gte$3 = (a, b, loose) => compare$4(a, b, loose) >= 0;
	module.exports = gte$3;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/lte.js
var require_lte = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/lte.js"(exports, module) {
	const compare$3 = require_compare();
	const lte$3 = (a, b, loose) => compare$3(a, b, loose) <= 0;
	module.exports = lte$3;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/cmp.js
var require_cmp = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/cmp.js"(exports, module) {
	const eq$1 = require_eq();
	const neq$1 = require_neq();
	const gt$3 = require_gt();
	const gte$2 = require_gte();
	const lt$3 = require_lt();
	const lte$2 = require_lte();
	const cmp$2 = (a, op, b, loose) => {
		switch (op) {
			case "===":
				if (typeof a === "object") a = a.version;
				if (typeof b === "object") b = b.version;
				return a === b;
			case "!==":
				if (typeof a === "object") a = a.version;
				if (typeof b === "object") b = b.version;
				return a !== b;
			case "":
			case "=":
			case "==": return eq$1(a, b, loose);
			case "!=": return neq$1(a, b, loose);
			case ">": return gt$3(a, b, loose);
			case ">=": return gte$2(a, b, loose);
			case "<": return lt$3(a, b, loose);
			case "<=": return lte$2(a, b, loose);
			default: throw new TypeError(`Invalid operator: ${op}`);
		}
	};
	module.exports = cmp$2;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/coerce.js
var require_coerce = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/coerce.js"(exports, module) {
	const SemVer$7 = require_semver$1();
	const parse$1 = require_parse();
	const { safeRe: re$2, t: t$2 } = require_re();
	const coerce$1 = (version, options) => {
		if (version instanceof SemVer$7) return version;
		if (typeof version === "number") version = String(version);
		if (typeof version !== "string") return null;
		options = options || {};
		let match = null;
		if (!options.rtl) match = version.match(options.includePrerelease ? re$2[t$2.COERCEFULL] : re$2[t$2.COERCE]);
else {
			const coerceRtlRegex = options.includePrerelease ? re$2[t$2.COERCERTLFULL] : re$2[t$2.COERCERTL];
			let next;
			while ((next = coerceRtlRegex.exec(version)) && (!match || match.index + match[0].length !== version.length)) {
				if (!match || next.index + next[0].length !== match.index + match[0].length) match = next;
				coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length;
			}
			coerceRtlRegex.lastIndex = -1;
		}
		if (match === null) return null;
		const major$2 = match[2];
		const minor$2 = match[3] || "0";
		const patch$4 = match[4] || "0";
		const prerelease$2 = options.includePrerelease && match[5] ? `-${match[5]}` : "";
		const build = options.includePrerelease && match[6] ? `+${match[6]}` : "";
		return parse$1(`${major$2}.${minor$2}.${patch$4}${prerelease$2}${build}`, options);
	};
	module.exports = coerce$1;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/lrucache.js
var require_lrucache = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/lrucache.js"(exports, module) {
	var LRUCache = class {
		constructor() {
			this.max = 1e3;
			this.map = new Map();
		}
		get(key) {
			const value = this.map.get(key);
			if (value === undefined) return undefined;
else {
				this.map.delete(key);
				this.map.set(key, value);
				return value;
			}
		}
		delete(key) {
			return this.map.delete(key);
		}
		set(key, value) {
			const deleted = this.delete(key);
			if (!deleted && value !== undefined) {
				if (this.map.size >= this.max) {
					const firstKey = this.map.keys().next().value;
					this.delete(firstKey);
				}
				this.map.set(key, value);
			}
			return this;
		}
	};
	module.exports = LRUCache;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/range.js
var require_range = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/range.js"(exports, module) {
	const SPACE_CHARACTERS = /\s+/g;
	var Range$11 = class Range$11 {
		constructor(range, options) {
			options = parseOptions$1(options);
			if (range instanceof Range$11) if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) return range;
else return new Range$11(range.raw, options);
			if (range instanceof Comparator$4) {
				this.raw = range.value;
				this.set = [[range]];
				this.formatted = undefined;
				return this;
			}
			this.options = options;
			this.loose = !!options.loose;
			this.includePrerelease = !!options.includePrerelease;
			this.raw = range.trim().replace(SPACE_CHARACTERS, " ");
			this.set = this.raw.split("||").map((r) => this.parseRange(r.trim())).filter((c) => c.length);
			if (!this.set.length) throw new TypeError(`Invalid SemVer Range: ${this.raw}`);
			if (this.set.length > 1) {
				const first = this.set[0];
				this.set = this.set.filter((c) => !isNullSet(c[0]));
				if (this.set.length === 0) this.set = [first];
else if (this.set.length > 1) {
					for (const c of this.set) if (c.length === 1 && isAny(c[0])) {
						this.set = [c];
						break;
					}
				}
			}
			this.formatted = undefined;
		}
		get range() {
			if (this.formatted === undefined) {
				this.formatted = "";
				for (let i$2 = 0; i$2 < this.set.length; i$2++) {
					if (i$2 > 0) this.formatted += "||";
					const comps = this.set[i$2];
					for (let k = 0; k < comps.length; k++) {
						if (k > 0) this.formatted += " ";
						this.formatted += comps[k].toString().trim();
					}
				}
			}
			return this.formatted;
		}
		format() {
			return this.range;
		}
		toString() {
			return this.range;
		}
		parseRange(range) {
			const memoOpts = (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) | (this.options.loose && FLAG_LOOSE);
			const memoKey = memoOpts + ":" + range;
			const cached = cache.get(memoKey);
			if (cached) return cached;
			const loose = this.options.loose;
			const hr = loose ? re$1[t$1.HYPHENRANGELOOSE] : re$1[t$1.HYPHENRANGE];
			range = range.replace(hr, hyphenReplace(this.options.includePrerelease));
			debug$1("hyphen replace", range);
			range = range.replace(re$1[t$1.COMPARATORTRIM], comparatorTrimReplace);
			debug$1("comparator trim", range);
			range = range.replace(re$1[t$1.TILDETRIM], tildeTrimReplace);
			debug$1("tilde trim", range);
			range = range.replace(re$1[t$1.CARETTRIM], caretTrimReplace);
			debug$1("caret trim", range);
			let rangeList = range.split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options));
			if (loose) rangeList = rangeList.filter((comp) => {
				debug$1("loose invalid filter", comp, this.options);
				return !!comp.match(re$1[t$1.COMPARATORLOOSE]);
			});
			debug$1("range list", rangeList);
			const rangeMap = new Map();
			const comparators = rangeList.map((comp) => new Comparator$4(comp, this.options));
			for (const comp of comparators) {
				if (isNullSet(comp)) return [comp];
				rangeMap.set(comp.value, comp);
			}
			if (rangeMap.size > 1 && rangeMap.has("")) rangeMap.delete("");
			const result = [...rangeMap.values()];
			cache.set(memoKey, result);
			return result;
		}
		intersects(range, options) {
			if (!(range instanceof Range$11)) throw new TypeError("a Range is required");
			return this.set.some((thisComparators) => {
				return isSatisfiable(thisComparators, options) && range.set.some((rangeComparators) => {
					return isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => {
						return rangeComparators.every((rangeComparator) => {
							return thisComparator.intersects(rangeComparator, options);
						});
					});
				});
			});
		}
		test(version) {
			if (!version) return false;
			if (typeof version === "string") try {
				version = new SemVer$6(version, this.options);
			} catch (er) {
				return false;
			}
			for (let i$2 = 0; i$2 < this.set.length; i$2++) if (testSet(this.set[i$2], version, this.options)) return true;
			return false;
		}
	};
	module.exports = Range$11;
	const LRU = require_lrucache();
	const cache = new LRU();
	const parseOptions$1 = require_parse_options();
	const Comparator$4 = require_comparator();
	const debug$1 = require_debug();
	const SemVer$6 = require_semver$1();
	const { safeRe: re$1, t: t$1, comparatorTrimReplace, tildeTrimReplace, caretTrimReplace } = require_re();
	const { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = require_constants();
	const isNullSet = (c) => c.value === "<0.0.0-0";
	const isAny = (c) => c.value === "";
	const isSatisfiable = (comparators, options) => {
		let result = true;
		const remainingComparators = comparators.slice();
		let testComparator = remainingComparators.pop();
		while (result && remainingComparators.length) {
			result = remainingComparators.every((otherComparator) => {
				return testComparator.intersects(otherComparator, options);
			});
			testComparator = remainingComparators.pop();
		}
		return result;
	};
	const parseComparator = (comp, options) => {
		debug$1("comp", comp, options);
		comp = replaceCarets(comp, options);
		debug$1("caret", comp);
		comp = replaceTildes(comp, options);
		debug$1("tildes", comp);
		comp = replaceXRanges(comp, options);
		debug$1("xrange", comp);
		comp = replaceStars(comp, options);
		debug$1("stars", comp);
		return comp;
	};
	const isX = (id) => !id || id.toLowerCase() === "x" || id === "*";
	const replaceTildes = (comp, options) => {
		return comp.trim().split(/\s+/).map((c) => replaceTilde(c, options)).join(" ");
	};
	const replaceTilde = (comp, options) => {
		const r = options.loose ? re$1[t$1.TILDELOOSE] : re$1[t$1.TILDE];
		return comp.replace(r, (_, M, m, p, pr) => {
			debug$1("tilde", comp, _, M, m, p, pr);
			let ret;
			if (isX(M)) ret = "";
else if (isX(m)) ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
else if (isX(p)) ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;
else if (pr) {
				debug$1("replaceTilde pr", pr);
				ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
			} else ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`;
			debug$1("tilde return", ret);
			return ret;
		});
	};
	const replaceCarets = (comp, options) => {
		return comp.trim().split(/\s+/).map((c) => replaceCaret(c, options)).join(" ");
	};
	const replaceCaret = (comp, options) => {
		debug$1("caret", comp, options);
		const r = options.loose ? re$1[t$1.CARETLOOSE] : re$1[t$1.CARET];
		const z = options.includePrerelease ? "-0" : "";
		return comp.replace(r, (_, M, m, p, pr) => {
			debug$1("caret", comp, _, M, m, p, pr);
			let ret;
			if (isX(M)) ret = "";
else if (isX(m)) ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
else if (isX(p)) if (M === "0") ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;
else ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;
else if (pr) {
				debug$1("replaceCaret pr", pr);
				if (M === "0") if (m === "0") ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`;
else ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
else ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`;
			} else {
				debug$1("no pr");
				if (M === "0") if (m === "0") ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`;
else ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`;
else ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`;
			}
			debug$1("caret return", ret);
			return ret;
		});
	};
	const replaceXRanges = (comp, options) => {
		debug$1("replaceXRanges", comp, options);
		return comp.split(/\s+/).map((c) => replaceXRange(c, options)).join(" ");
	};
	const replaceXRange = (comp, options) => {
		comp = comp.trim();
		const r = options.loose ? re$1[t$1.XRANGELOOSE] : re$1[t$1.XRANGE];
		return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
			debug$1("xRange", comp, ret, gtlt, M, m, p, pr);
			const xM = isX(M);
			const xm = xM || isX(m);
			const xp = xm || isX(p);
			const anyX = xp;
			if (gtlt === "=" && anyX) gtlt = "";
			pr = options.includePrerelease ? "-0" : "";
			if (xM) if (gtlt === ">" || gtlt === "<") ret = "<0.0.0-0";
else ret = "*";
else if (gtlt && anyX) {
				if (xm) m = 0;
				p = 0;
				if (gtlt === ">") {
					gtlt = ">=";
					if (xm) {
						M = +M + 1;
						m = 0;
						p = 0;
					} else {
						m = +m + 1;
						p = 0;
					}
				} else if (gtlt === "<=") {
					gtlt = "<";
					if (xm) M = +M + 1;
else m = +m + 1;
				}
				if (gtlt === "<") pr = "-0";
				ret = `${gtlt + M}.${m}.${p}${pr}`;
			} else if (xm) ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
else if (xp) ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`;
			debug$1("xRange return", ret);
			return ret;
		});
	};
	const replaceStars = (comp, options) => {
		debug$1("replaceStars", comp, options);
		return comp.trim().replace(re$1[t$1.STAR], "");
	};
	const replaceGTE0 = (comp, options) => {
		debug$1("replaceGTE0", comp, options);
		return comp.trim().replace(re$1[options.includePrerelease ? t$1.GTE0PRE : t$1.GTE0], "");
	};
	const hyphenReplace = (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr) => {
		if (isX(fM)) from = "";
else if (isX(fm)) from = `>=${fM}.0.0${incPr ? "-0" : ""}`;
else if (isX(fp)) from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`;
else if (fpr) from = `>=${from}`;
else from = `>=${from}${incPr ? "-0" : ""}`;
		if (isX(tM)) to = "";
else if (isX(tm)) to = `<${+tM + 1}.0.0-0`;
else if (isX(tp)) to = `<${tM}.${+tm + 1}.0-0`;
else if (tpr) to = `<=${tM}.${tm}.${tp}-${tpr}`;
else if (incPr) to = `<${tM}.${tm}.${+tp + 1}-0`;
else to = `<=${to}`;
		return `${from} ${to}`.trim();
	};
	const testSet = (set, version, options) => {
		for (let i$2 = 0; i$2 < set.length; i$2++) if (!set[i$2].test(version)) return false;
		if (version.prerelease.length && !options.includePrerelease) {
			for (let i$2 = 0; i$2 < set.length; i$2++) {
				debug$1(set[i$2].semver);
				if (set[i$2].semver === Comparator$4.ANY) continue;
				if (set[i$2].semver.prerelease.length > 0) {
					const allowed = set[i$2].semver;
					if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) return true;
				}
			}
			return false;
		}
		return true;
	};
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/comparator.js
var require_comparator = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/comparator.js"(exports, module) {
	const ANY$2 = Symbol("SemVer ANY");
	var Comparator$3 = class Comparator$3 {
		static get ANY() {
			return ANY$2;
		}
		constructor(comp, options) {
			options = parseOptions(options);
			if (comp instanceof Comparator$3) if (comp.loose === !!options.loose) return comp;
else comp = comp.value;
			comp = comp.trim().split(/\s+/).join(" ");
			debug("comparator", comp, options);
			this.options = options;
			this.loose = !!options.loose;
			this.parse(comp);
			if (this.semver === ANY$2) this.value = "";
else this.value = this.operator + this.semver.version;
			debug("comp", this);
		}
		parse(comp) {
			const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
			const m = comp.match(r);
			if (!m) throw new TypeError(`Invalid comparator: ${comp}`);
			this.operator = m[1] !== undefined ? m[1] : "";
			if (this.operator === "=") this.operator = "";
			if (!m[2]) this.semver = ANY$2;
else this.semver = new SemVer$5(m[2], this.options.loose);
		}
		toString() {
			return this.value;
		}
		test(version) {
			debug("Comparator.test", version, this.options.loose);
			if (this.semver === ANY$2 || version === ANY$2) return true;
			if (typeof version === "string") try {
				version = new SemVer$5(version, this.options);
			} catch (er) {
				return false;
			}
			return cmp$1(version, this.operator, this.semver, this.options);
		}
		intersects(comp, options) {
			if (!(comp instanceof Comparator$3)) throw new TypeError("a Comparator is required");
			if (this.operator === "") {
				if (this.value === "") return true;
				return new Range$10(comp.value, options).test(this.value);
			} else if (comp.operator === "") {
				if (comp.value === "") return true;
				return new Range$10(this.value, options).test(comp.semver);
			}
			options = parseOptions(options);
			if (options.includePrerelease && (this.value === "<0.0.0-0" || comp.value === "<0.0.0-0")) return false;
			if (!options.includePrerelease && (this.value.startsWith("<0.0.0") || comp.value.startsWith("<0.0.0"))) return false;
			if (this.operator.startsWith(">") && comp.operator.startsWith(">")) return true;
			if (this.operator.startsWith("<") && comp.operator.startsWith("<")) return true;
			if (this.semver.version === comp.semver.version && this.operator.includes("=") && comp.operator.includes("=")) return true;
			if (cmp$1(this.semver, "<", comp.semver, options) && this.operator.startsWith(">") && comp.operator.startsWith("<")) return true;
			if (cmp$1(this.semver, ">", comp.semver, options) && this.operator.startsWith("<") && comp.operator.startsWith(">")) return true;
			return false;
		}
	};
	module.exports = Comparator$3;
	const parseOptions = require_parse_options();
	const { safeRe: re, t } = require_re();
	const cmp$1 = require_cmp();
	const debug = require_debug();
	const SemVer$5 = require_semver$1();
	const Range$10 = require_range();
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/satisfies.js
var require_satisfies = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/satisfies.js"(exports, module) {
	const Range$9 = require_range();
	const satisfies$4 = (version, range, options) => {
		try {
			range = new Range$9(range, options);
		} catch (er) {
			return false;
		}
		return range.test(version);
	};
	module.exports = satisfies$4;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/to-comparators.js
var require_to_comparators = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/to-comparators.js"(exports, module) {
	const Range$8 = require_range();
	const toComparators$1 = (range, options) => new Range$8(range, options).set.map((comp) => comp.map((c) => c.value).join(" ").trim().split(" "));
	module.exports = toComparators$1;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/max-satisfying.js
var require_max_satisfying = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/max-satisfying.js"(exports, module) {
	const SemVer$4 = require_semver$1();
	const Range$7 = require_range();
	const maxSatisfying$1 = (versions, range, options) => {
		let max = null;
		let maxSV = null;
		let rangeObj = null;
		try {
			rangeObj = new Range$7(range, options);
		} catch (er) {
			return null;
		}
		versions.forEach((v) => {
			if (rangeObj.test(v)) {
				if (!max || maxSV.compare(v) === -1) {
					max = v;
					maxSV = new SemVer$4(max, options);
				}
			}
		});
		return max;
	};
	module.exports = maxSatisfying$1;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/min-satisfying.js
var require_min_satisfying = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/min-satisfying.js"(exports, module) {
	const SemVer$3 = require_semver$1();
	const Range$6 = require_range();
	const minSatisfying$1 = (versions, range, options) => {
		let min = null;
		let minSV = null;
		let rangeObj = null;
		try {
			rangeObj = new Range$6(range, options);
		} catch (er) {
			return null;
		}
		versions.forEach((v) => {
			if (rangeObj.test(v)) {
				if (!min || minSV.compare(v) === 1) {
					min = v;
					minSV = new SemVer$3(min, options);
				}
			}
		});
		return min;
	};
	module.exports = minSatisfying$1;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/min-version.js
var require_min_version = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/min-version.js"(exports, module) {
	const SemVer$2 = require_semver$1();
	const Range$5 = require_range();
	const gt$2 = require_gt();
	const minVersion$1 = (range, loose) => {
		range = new Range$5(range, loose);
		let minver = new SemVer$2("0.0.0");
		if (range.test(minver)) return minver;
		minver = new SemVer$2("0.0.0-0");
		if (range.test(minver)) return minver;
		minver = null;
		for (let i$2 = 0; i$2 < range.set.length; ++i$2) {
			const comparators = range.set[i$2];
			let setMin = null;
			comparators.forEach((comparator) => {
				const compver = new SemVer$2(comparator.semver.version);
				switch (comparator.operator) {
					case ">":
						if (compver.prerelease.length === 0) compver.patch++;
else compver.prerelease.push(0);
						compver.raw = compver.format();
					case "":
					case ">=":
						if (!setMin || gt$2(compver, setMin)) setMin = compver;
						break;
					case "<":
					case "<=": break;
					default: throw new Error(`Unexpected operation: ${comparator.operator}`);
				}
			});
			if (setMin && (!minver || gt$2(minver, setMin))) minver = setMin;
		}
		if (minver && range.test(minver)) return minver;
		return null;
	};
	module.exports = minVersion$1;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/valid.js
var require_valid = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/valid.js"(exports, module) {
	const Range$4 = require_range();
	const validRange$1 = (range, options) => {
		try {
			return new Range$4(range, options).range || "*";
		} catch (er) {
			return null;
		}
	};
	module.exports = validRange$1;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/outside.js
var require_outside = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/outside.js"(exports, module) {
	const SemVer$1 = require_semver$1();
	const Comparator$2 = require_comparator();
	const { ANY: ANY$1 } = Comparator$2;
	const Range$3 = require_range();
	const satisfies$3 = require_satisfies();
	const gt$1 = require_gt();
	const lt$2 = require_lt();
	const lte$1 = require_lte();
	const gte$1 = require_gte();
	const outside$3 = (version, range, hilo, options) => {
		version = new SemVer$1(version, options);
		range = new Range$3(range, options);
		let gtfn, ltefn, ltfn, comp, ecomp;
		switch (hilo) {
			case ">":
				gtfn = gt$1;
				ltefn = lte$1;
				ltfn = lt$2;
				comp = ">";
				ecomp = ">=";
				break;
			case "<":
				gtfn = lt$2;
				ltefn = gte$1;
				ltfn = gt$1;
				comp = "<";
				ecomp = "<=";
				break;
			default: throw new TypeError("Must provide a hilo val of \"<\" or \">\"");
		}
		if (satisfies$3(version, range, options)) return false;
		for (let i$2 = 0; i$2 < range.set.length; ++i$2) {
			const comparators = range.set[i$2];
			let high = null;
			let low = null;
			comparators.forEach((comparator) => {
				if (comparator.semver === ANY$1) comparator = new Comparator$2(">=0.0.0");
				high = high || comparator;
				low = low || comparator;
				if (gtfn(comparator.semver, high.semver, options)) high = comparator;
else if (ltfn(comparator.semver, low.semver, options)) low = comparator;
			});
			if (high.operator === comp || high.operator === ecomp) return false;
			if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) return false;
else if (low.operator === ecomp && ltfn(version, low.semver)) return false;
		}
		return true;
	};
	module.exports = outside$3;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/gtr.js
var require_gtr = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/gtr.js"(exports, module) {
	const outside$2 = require_outside();
	const gtr$1 = (version, range, options) => outside$2(version, range, ">", options);
	module.exports = gtr$1;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/ltr.js
var require_ltr = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/ltr.js"(exports, module) {
	const outside$1 = require_outside();
	const ltr$1 = (version, range, options) => outside$1(version, range, "<", options);
	module.exports = ltr$1;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/intersects.js
var require_intersects = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/intersects.js"(exports, module) {
	const Range$2 = require_range();
	const intersects$1 = (r1, r2, options) => {
		r1 = new Range$2(r1, options);
		r2 = new Range$2(r2, options);
		return r1.intersects(r2, options);
	};
	module.exports = intersects$1;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/simplify.js
var require_simplify = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/simplify.js"(exports, module) {
	const satisfies$2 = require_satisfies();
	const compare$2 = require_compare();
	module.exports = (versions, range, options) => {
		const set = [];
		let first = null;
		let prev = null;
		const v = versions.sort((a, b) => compare$2(a, b, options));
		for (const version of v) {
			const included = satisfies$2(version, range, options);
			if (included) {
				prev = version;
				if (!first) first = version;
			} else {
				if (prev) set.push([first, prev]);
				prev = null;
				first = null;
			}
		}
		if (first) set.push([first, null]);
		const ranges = [];
		for (const [min, max] of set) if (min === max) ranges.push(min);
else if (!max && min === v[0]) ranges.push("*");
else if (!max) ranges.push(`>=${min}`);
else if (min === v[0]) ranges.push(`<=${max}`);
else ranges.push(`${min} - ${max}`);
		const simplified = ranges.join(" || ");
		const original = typeof range.raw === "string" ? range.raw : String(range);
		return simplified.length < original.length ? simplified : range;
	};
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/subset.js
var require_subset = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/subset.js"(exports, module) {
	const Range$1 = require_range();
	const Comparator$1 = require_comparator();
	const { ANY } = Comparator$1;
	const satisfies$1 = require_satisfies();
	const compare$1 = require_compare();
	const subset$1 = (sub, dom, options = {}) => {
		if (sub === dom) return true;
		sub = new Range$1(sub, options);
		dom = new Range$1(dom, options);
		let sawNonNull = false;
		OUTER: for (const simpleSub of sub.set) {
			for (const simpleDom of dom.set) {
				const isSub = simpleSubset(simpleSub, simpleDom, options);
				sawNonNull = sawNonNull || isSub !== null;
				if (isSub) continue OUTER;
			}
			if (sawNonNull) return false;
		}
		return true;
	};
	const minimumVersionWithPreRelease = [new Comparator$1(">=0.0.0-0")];
	const minimumVersion = [new Comparator$1(">=0.0.0")];
	const simpleSubset = (sub, dom, options) => {
		if (sub === dom) return true;
		if (sub.length === 1 && sub[0].semver === ANY) if (dom.length === 1 && dom[0].semver === ANY) return true;
else if (options.includePrerelease) sub = minimumVersionWithPreRelease;
else sub = minimumVersion;
		if (dom.length === 1 && dom[0].semver === ANY) if (options.includePrerelease) return true;
else dom = minimumVersion;
		const eqSet = new Set();
		let gt$5, lt$5;
		for (const c of sub) if (c.operator === ">" || c.operator === ">=") gt$5 = higherGT(gt$5, c, options);
else if (c.operator === "<" || c.operator === "<=") lt$5 = lowerLT(lt$5, c, options);
else eqSet.add(c.semver);
		if (eqSet.size > 1) return null;
		let gtltComp;
		if (gt$5 && lt$5) {
			gtltComp = compare$1(gt$5.semver, lt$5.semver, options);
			if (gtltComp > 0) return null;
else if (gtltComp === 0 && (gt$5.operator !== ">=" || lt$5.operator !== "<=")) return null;
		}
		for (const eq$3 of eqSet) {
			if (gt$5 && !satisfies$1(eq$3, String(gt$5), options)) return null;
			if (lt$5 && !satisfies$1(eq$3, String(lt$5), options)) return null;
			for (const c of dom) if (!satisfies$1(eq$3, String(c), options)) return false;
			return true;
		}
		let higher, lower;
		let hasDomLT, hasDomGT;
		let needDomLTPre = lt$5 && !options.includePrerelease && lt$5.semver.prerelease.length ? lt$5.semver : false;
		let needDomGTPre = gt$5 && !options.includePrerelease && gt$5.semver.prerelease.length ? gt$5.semver : false;
		if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt$5.operator === "<" && needDomLTPre.prerelease[0] === 0) needDomLTPre = false;
		for (const c of dom) {
			hasDomGT = hasDomGT || c.operator === ">" || c.operator === ">=";
			hasDomLT = hasDomLT || c.operator === "<" || c.operator === "<=";
			if (gt$5) {
				if (needDomGTPre) {
					if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomGTPre.major && c.semver.minor === needDomGTPre.minor && c.semver.patch === needDomGTPre.patch) needDomGTPre = false;
				}
				if (c.operator === ">" || c.operator === ">=") {
					higher = higherGT(gt$5, c, options);
					if (higher === c && higher !== gt$5) return false;
				} else if (gt$5.operator === ">=" && !satisfies$1(gt$5.semver, String(c), options)) return false;
			}
			if (lt$5) {
				if (needDomLTPre) {
					if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomLTPre.major && c.semver.minor === needDomLTPre.minor && c.semver.patch === needDomLTPre.patch) needDomLTPre = false;
				}
				if (c.operator === "<" || c.operator === "<=") {
					lower = lowerLT(lt$5, c, options);
					if (lower === c && lower !== lt$5) return false;
				} else if (lt$5.operator === "<=" && !satisfies$1(lt$5.semver, String(c), options)) return false;
			}
			if (!c.operator && (lt$5 || gt$5) && gtltComp !== 0) return false;
		}
		if (gt$5 && hasDomLT && !lt$5 && gtltComp !== 0) return false;
		if (lt$5 && hasDomGT && !gt$5 && gtltComp !== 0) return false;
		if (needDomGTPre || needDomLTPre) return false;
		return true;
	};
	const higherGT = (a, b, options) => {
		if (!a) return b;
		const comp = compare$1(a.semver, b.semver, options);
		return comp > 0 ? a : comp < 0 ? b : b.operator === ">" && a.operator === ">=" ? b : a;
	};
	const lowerLT = (a, b, options) => {
		if (!a) return b;
		const comp = compare$1(a.semver, b.semver, options);
		return comp < 0 ? a : comp > 0 ? b : b.operator === "<" && a.operator === "<=" ? b : a;
	};
	module.exports = subset$1;
} });

//#endregion
//#region ../node_modules/.pnpm/semver@7.6.3/node_modules/semver/index.js
var require_semver = __commonJS({ "../node_modules/.pnpm/semver@7.6.3/node_modules/semver/index.js"(exports, module) {
	const internalRe = require_re();
	const constants = require_constants();
	const SemVer = require_semver$1();
	const identifiers = require_identifiers();
	const parse = require_parse();
	const valid = require_valid$1();
	const clean = require_clean();
	const inc = require_inc();
	const diff = require_diff();
	const major = require_major();
	const minor = require_minor();
	const patch = require_patch();
	const prerelease = require_prerelease();
	const compare = require_compare();
	const rcompare = require_rcompare();
	const compareLoose = require_compare_loose();
	const compareBuild = require_compare_build();
	const sort = require_sort();
	const rsort = require_rsort();
	const gt = require_gt();
	const lt$1 = require_lt();
	const eq = require_eq();
	const neq = require_neq();
	const gte = require_gte();
	const lte = require_lte();
	const cmp = require_cmp();
	const coerce = require_coerce();
	const Comparator = require_comparator();
	const Range = require_range();
	const satisfies = require_satisfies();
	const toComparators = require_to_comparators();
	const maxSatisfying = require_max_satisfying();
	const minSatisfying = require_min_satisfying();
	const minVersion = require_min_version();
	const validRange = require_valid();
	const outside = require_outside();
	const gtr = require_gtr();
	const ltr = require_ltr();
	const intersects = require_intersects();
	const simplifyRange = require_simplify();
	const subset = require_subset();
	module.exports = {
		parse,
		valid,
		clean,
		inc,
		diff,
		major,
		minor,
		patch,
		prerelease,
		compare,
		rcompare,
		compareLoose,
		compareBuild,
		sort,
		rsort,
		gt,
		lt: lt$1,
		eq,
		neq,
		gte,
		lte,
		cmp,
		coerce,
		Comparator,
		Range,
		satisfies,
		toComparators,
		maxSatisfying,
		minSatisfying,
		minVersion,
		validRange,
		outside,
		gtr,
		ltr,
		intersects,
		simplifyRange,
		subset,
		SemVer,
		re: internalRe.re,
		src: internalRe.src,
		tokens: internalRe.t,
		SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
		RELEASE_TYPES: constants.RELEASE_TYPES,
		compareIdentifiers: identifiers.compareIdentifiers,
		rcompareIdentifiers: identifiers.rcompareIdentifiers
	};
} });

//#endregion
//#region src/version.ts
var import_core$2 = __toESM$1(require_core$2());
var import_exec = __toESM$1(require_exec());
var import_manypkg_get_packages_cjs = __toESM$1(require_manypkg_get_packages_cjs());
var import_resolve_from = __toESM$1(require_resolve_from());
var import_semver = __toESM$1(require_semver());
const runVersion = async (inputs$1) => {
	const branch = inputs$1.branch ?? inputs$1.context.ref.replace("refs/heads/", "");
	const versionBranch = `action-release-changeset/${branch}`;
	await switchBranch(inputs$1.cwd, versionBranch);
	await resetHard(inputs$1.cwd, inputs$1.context.sha);
	const versionsByDirectory = new Map((await (0, import_manypkg_get_packages_cjs.getPackages)(inputs$1.cwd)).packages.map((x) => [x.dir, x.packageJson.version]));
	const changesetsCliPkgJson = requireChangesetsCliPkgJson(inputs$1.changesetCliInstallDir);
	const cmd = (0, import_semver.lt)(changesetsCliPkgJson.version, "2.0.0") ? "bump" : "version";
	await (0, import_exec.exec)("node", [(0, import_resolve_from.default)(inputs$1.changesetCliInstallDir, "@changesets/cli/bin.js"), cmd], {
		cwd: inputs$1.cwd,
		env: { NODE_PATH: join(inputs$1.changesetCliInstallDir, "node_modules") }
	});
	if (inputs$1["setup-git-user"]) await configure(inputs$1.cwd);
	await commit(inputs$1.cwd, inputs$1["commit-message"] || "Version Action", ".");
	await push(inputs$1.cwd, versionBranch, inputs$1.token);
	const pulls = await inputs$1.octokit.rest.pulls.list({
		...inputs$1.context.repo,
		state: "open",
		head: `${inputs$1.context.repo.owner}:${versionBranch}`,
		base: branch
	});
	const prBody = await getVersionPrBody({
		branch,
		cwd: inputs$1.cwd,
		versionsByDirectory
	});
	if (pulls.data.length === 0) {
		import_core$2.info("creating pull request");
		const { data } = await inputs$1.octokit.rest.pulls.create({
			...inputs$1.context.repo,
			base: branch,
			head: versionBranch,
			title: inputs$1["pr-title"] || "Release Action",
			body: prBody
		});
		if (inputs$1["auto-merge"]) await autoMerge(data.number, inputs$1.context, inputs$1.octokit);
		return { pullRequestNumber: data.number };
	}
	const pullRequest = pulls.data[0];
	import_core$2.info(`updating found pull request #${pullRequest.number}`);
	await inputs$1.octokit.rest.pulls.update({
		...inputs$1.context.repo,
		pull_number: pullRequest.number,
		title: inputs$1["pr-title"] || "Release Action",
		body: prBody,
		state: "open"
	});
	if (inputs$1["auto-merge"]) await autoMerge(pullRequest.number, inputs$1.context, inputs$1.octokit);
	return { pullRequestNumber: pullRequest.number };
};

//#endregion
//#region src/run.ts
var import_core$1 = __toESM$1(require_core$2());
const VersionIndex = {
	none: 0,
	patch: 1,
	minor: 2,
	major: 3
};
const run = async (inputs$1) => {
	const changesets = await (0, import_changesets_read_cjs_default._default)(inputs$1.cwd);
	const versionType = changesets.flatMap((v) => v.releases.map((v$1) => v$1.type)).reduce((acc, cur) => {
		return VersionIndex[cur] > VersionIndex[acc] ? cur : acc;
	}, "none");
	dumpOutputs({
		"pr-number": "",
		published: "false"
	});
	if (versionType === "none" && changesets.length !== 0 && changesets.every((changeset) => changeset.releases.length === 0)) {
		import_core$1.info("All changesets are empty; not creating PR");
		return;
	}
	if (changesets.length !== 0) {
		const { pullRequestNumber } = await runVersion(inputs$1);
		dumpOutputs({ "pr-number": pullRequestNumber.toString() });
		return;
	}
	import_core$1.info("No changesets found, attempting to release");
	const { published } = await runPublish(inputs$1);
	dumpOutputs({ published: published.toString() });
};

//#endregion
//#region src/main.ts
var import_core = __toESM$1(require_core$2());
var import_github = __toESM$1(require_github());
const inputs = parseInputs({
	"setup-git-user": { type: "boolean" },
	"auto-merge": { type: "boolean" }
});
const main = async () => {
	await run({
		...inputs,
		cwd: resolve(inputs.cwd),
		context: import_github.context,
		octokit: (0, import_github.getOctokit)(inputs.token),
		changesetCliInstallDir: resolve(inputs.cwd)
	});
};
main().catch((e) => {
	console.error(e);
	(0, import_core.setFailed)(e);
});

//#endregion